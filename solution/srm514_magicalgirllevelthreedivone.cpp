/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=11478
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class MagicalGirlLevelThreeDivOne {
public:
    long theMaxPower(vector<string> first, int n, long lo, long hi);
};

long MagicalGirlLevelThreeDivOne::theMaxPower(vector<string> first, int n, long lo, long hi) {
    long ret;
    return ret;
}


int test0() {
    vector<string> first = {"111", "011"};
    int n = 4;
    long lo = 2;
    long hi = 7;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 4;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> first = {"1", "11", "111"};
    int n = 123456789;
    long lo = 123456789;
    long hi = 123456789012345;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 123456665555557;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> first = {"0", "00", "000"};
    int n = 987654321;
    long lo = 987654321;
    long hi = 987654321054321;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 0;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> first = {"1110", "11", "11111", "111", "1"};
    int n = 314159265;
    long lo = 271828182845904;
    long hi = 314159265358979;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 15;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> first = {"10000", "011011001011000001101000010100000111000110110", "000001010001011000001101110", "100100000110100001010000", "011011010", "01100000010101101110000011100011001000", "0001010", "010011000", "000101001", "00", "1"};
    int n = 1000000000;
    long lo = 1000000000000000;
    long hi = 1000000000000000;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 1;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> first = {"1"};
    int n = 0;
    long lo = 0;
    long hi = 0;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 1;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> first = {"11", "101", "1111"};
    int n = 1;
    long lo = 0;
    long hi = 1;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 1;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> first = {"11", "101", "1111"};
    int n = 2;
    long lo = 1;
    long hi = 2;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 2;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> first = {"11111", "01111"};
    int n = 4;
    long lo = 0;
    long hi = 9;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 9;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> first = {"001100", "110011"};
    int n = 3;
    long lo = 1;
    long hi = 4;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 1;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> first = {"1"};
    int n = 1000000000;
    long lo = 0;
    long hi = 1000000000000000;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 1000000000000001;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> first = {"0"};
    int n = 1000000000;
    long lo = 0;
    long hi = 1000000000000000;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 0;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> first = {"1", "0"};
    int n = 1000000000;
    long lo = 0;
    long hi = 1000000000000000;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 1;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> first = {"0", "1"};
    int n = 1000000000;
    long lo = 0;
    long hi = 1000000000000000;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 2;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> first = {"0", "1"};
    int n = 1000000000;
    long lo = 333333333333333;
    long hi = 333333333333333;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 1;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> first = {};
    int n = 1000000000;
    long lo = 0;
    long hi = 1000000000000000;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 1000000000000001;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> first = {};
    int n = 1000000000;
    long lo = 0;
    long hi = 1000000000000000;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 63749;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> first = {};
    int n = 1000000000;
    long lo = 0;
    long hi = 1000000000000000;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 2499;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> first = {};
    int n = 1000000000;
    long lo = 0;
    long hi = 1000000000000000;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 2549;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> first = {};
    int n = 1000000000;
    long lo = 0;
    long hi = 1000000000000000;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 33999;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> first = {};
    int n = 1000000000;
    long lo = 0;
    long hi = 1000000000000000;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 0;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> first = {};
    int n = 1000000000;
    long lo = 0;
    long hi = 1000000000000000;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 1;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> first = {};
    int n = 1000000000;
    long lo = 0;
    long hi = 1000000000000000;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 2;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> first = {};
    int n = 1000000000;
    long lo = 0;
    long hi = 1000000000000000;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 2;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> first = {};
    int n = 1000000000;
    long lo = 0;
    long hi = 1000000000000000;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 10;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> first = {};
    int n = 15574;
    long lo = 100000;
    long hi = 1000000;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 181;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> first = {};
    int n = 9999999;
    long lo = 123456789;
    long hi = 12345678901234;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 1235;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> first = {"11111111110", "11000111111111111111110111111", "11111111111011111111101111110111101111011", "11011111111111", "10111011111110111111001", "111111101100011111110010111111110111", "11111111111111101111101111011111001110110", "111111111111111111001111111111", "110111111111011011111111111111", "11111111", "1111111111011111111011101111011", "11111111110111111111111110111001111111111110101", "01011", "11110111111110101101001101", "1100110111111110111111111111110111111111100", "11111101", "1111111111111011111111111111010011", "1011111111101111111111101101111011111111111110", "11111111111000111111111111111111111111111111", "11", "11111110111111001111110111011111011111111", "11001110101111111010111110111111101011011", "1111111110110101110111011", "1101111111111111111", "0101011111001111111011101011111110111", "1110111011011111101111111", "11111111111101011111110", "111111011101111111", "1011111111111101111111111", "10111111001011111111001101111111111011111110", "101111111111111101001111111", "110", "11111110", "011110111011111111", "111111010111", "11111111011111111010110010111111011", "11111110101", "110", "1111111111111", "1111101110101101", "11111111111111111111101111110011011", "1101111111", "11011001110011", "1011111011110101111", "111101111011111", "11111011111111111111111111111111011111111110101", "11111110111111111111111111111111111101111111111110", "10101011100100111111111111111111110110", "101100111111101111011", "1111110111111111111"};
    int n = 12345678;
    long lo = 314159265358979;
    long hi = 314159265358979;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 1;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> first = {"11111111111110101111111111111111111111111111111", "111111111111111111", "1011111111111111101010111111101111", "1", "111110011111", "1110111111111111011111110111111111111111", "011111", "11111111111111011111101111111", "1", "11111011111100111110010111111110010111111", "11110111110", "1111110", "11111", "1111111111111110", "1111111111110011", "111111111101101110111111101111", "1111", "011100111111111111111111110111", "11111111", "111", "101111", "1111011111111111111011111110111110111", "11111111111111111111111111111101101111110111111", "111111111001", "111111111111110111111", "11111111111111111110111111111111111", "101111111111111", "11110111111100111", "1111111011", "11111010111111", "11111111001111111101011101101", "11111111111111111111111101111111111111011111111", "1", "1011", "1111011111", "1111111111111", "11111111111", "01111111111111", "1111111111111111111111111111111111111111", "11111111001111111110101111111", "11111111111101110111111111111011111111111", "111111111111110111111111111111011111111010111", "111111111111111111", "0111101111111010111100111111111111111", "11", "11111111111111111110101", "111110101111111111111111111111111", "10111110111111111", "11", "1111111111011111111110111101111110111111101111111"};
    int n = 12345678;
    long lo = 314159265358979;
    long hi = 314159265358993;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 9;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> first = {"10000100000", "00000000000000010111000001010101100000100", "00000010000011100101100001000000000", "000000110", "000000000110000000100101000000010000", "0100100001000011100000000000011000010001000", "00001", "1000001110000000", "0000000010000010000", "000", "1000001010010010001000", "100000000010100000000101000000010", "00000010000000000000001000", "001000000001001100010000100000000", "010001000000000000", "010001010001001011000100010101", "0100001011100111", "001001000000000000000", "00100010000100000000000110100000010000100000110", "10101001000110000000000100010000010110001000000100", "00", "0000100000000000000010001", "100000000010100001000000", "00000011000100100000000010010000000000101001000000", "00100001", "010101000", "0110000000000000011100000000000010010000", "0100000100000", "000010000001100000000000000001", "11000000001000001000000000000001", "100001001001011010101000001000100", "0001000000001001100000000000000010011001000", "0100000000000010000001001101001000000", "000000101001010011000", "0000000000000000000000000010100", "000010001000000100000000100100000", "01001000000000000101000010010000", "0001000000000000010000000001", "1", "00100010", "00000000", "0000000000000010001100010", "000000110110000"};
    int n = 1000000000;
    long lo = 2561;
    long hi = 3097;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 3;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> first = {"11111111111111111111110111111111011111111", "111111111111111111111111", "111110111111101111111111111111111111111", "111111", "111111111111101", "1111111111111", "1", "111101111111111111110111111111111111111111", "111011111111111111111", "11111111111111111011111111111111111110111111", "1111111111011111101111", "1111111111111111011111111", "11111111", "111111111111111111101110111111111", "1111111111111111111101011111111111111111111", "111110111111111111111111", "1111111110111110111111111111111111111111111111", "110101111101111111111111111", "10111", "1111111111111111111111011111111111111111111111111", "0111", "11", "111001111111111110", "111110111110111110111111111111111111111111", "11", "1101111111111110111", "1111111111111110111111111", "111111101011111111111111111111111111101111", "11111111111111111111111", "111110111111111111111111111111111111111111", "1111111011111111111111111111110011", "11111", "11111111111111111111111111111111111111111111", "1111111111111111111111111101111110111111", "1110", "11111111111111111111111", "1110111110111111111110111", "1111111111110", "1111111111111111111111111111110111", "11111111111111111111111111111111111111111111111", "11111111111111111", "011111111111111111111111111", "10111111", "11111101111111111111111111110111111111111111", "11111111111111111111110111111111111", "111111111111111111111111111110111", "111111111111111011111111111111111111111", "1111111101111111110111111011111111111111111111111", "111110110111", "11111111111111110111111110011011111111111111111111"};
    int n = 10000000;
    long lo = 10000000;
    long hi = 20000000;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 83;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> first = {};
    int n = 1000000000;
    long lo = 999999999999900;
    long hi = 1000000000000000;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 101;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> first = {"11010101010100", "00", "010000111110011", "111010111000010111011011011111110110010111011", "11100001110000110101", "10111001111111", "1111101111010110111110111001010", "010110111100010011000110100010110010000000001", "00010110011101000011110000100001110", "10110010110000100001111100110", "110001011", "0001000010111111101100110001111", "0011111011111011100110100", "010111011101011011", "11110011111101100101000010001101100100100", "00110110001101000010001110110000100000011000001111", "0101111101011111011010001110100001000001111010", "0111010011101010101011010101010100111010011111", "11001110111110111101011001", "11100000011110110001100101111101010011111101101", "1011000101111000", "0110100011010001100101100111100", "0011000111", "101111101100101010001001000000100001000100011111", "010100111010101000010101", "00111111111001000110001100", "00", "0111100011001001111", "1100111011000111111101001110011", "11100101100010101000100111111100100100001001", "101101000000011100001000000000111110000000101", "00100001100001001011110000", "0101000100000101011101010010010101110010101001011", "0000010110101111010100011000011111010101100110010", "1001111101111011000", "101100101110001011", "01010001011010100011010111010011010000001110", "11010100000001", "11000001001010011000111101010110111000000101011100", "1101000000011000", "001", "0000100110001011110001000010000010000100010011110", "01010000000000110001010000110011111001000011110001", "10111101000011010101001000010101000100000010111", "01010101101111011000011100110100000", "010001011110011101111110011110", "1110110010101110", "10011110001100100000000101", "10011001010010000011101101101101011000010100", "1"};
    int n = 1000000000;
    long lo = 456456789;
    long hi = 456456987;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 6;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> first = {};
    int n = 97979797;
    long lo = 741852369;
    long hi = 741852963;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 130;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> first = {"1111101111010111110111101111111111111111101111111", "110111111111111100", "11111111111111111011111110011011111", "11111111011011", "111111111111111", "010110110011111111111", "11111011111111111111111111111", "1111111111100101100111111111111111", "1110111111111", "111110110101111110111011111110110111111101111", "11101101", "1111111010111011111111111", "1111111111111110110111111011011111111111011", "101111111111", "1110111110001", "01111111111011100110111110101011111111111010011", "101111011111011111111110111", "1111011111111111110111", "1111110", "011111001111111111011111101010111111011111101", "111111111111111111110011111111111111111", "0", "111", "1111111111111111111111111101111001011111111111111", "1111011101111111111111111111111", "1110111111", "1111111101", "11010011111011011111111111111011", "01111111111011011011110111110111110111111", "1101111111111011111111110111111111111111111011", "11111111111011111101", "1011", "1111111011", "111111111", "111111111011011111111011101100111111111011", "101111111111110111111111111111111111111", "111111111111111111111111111111111111111111101110", "0111111101111111101111101111111", "1111101111110100111111", "1110111111110111111", "111111111111101111110111111111111111111111", "11111011111111011101111111101111", "0111111111011111101101", "111", "11110111111011111111111110100110111111", "1110001111011111111111", "1111111110111", "10110111110011111111110111111111111011011111", "1101101", "111111111111111111111"};
    int n = 1000000000;
    long lo = 0;
    long hi = 100;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 26;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> first = {"111111111110111111111", "11011111111111111101111111111111111111111011111111", "1111110", "1111111111111111", "11111110111111111111111111111111101", "111111111111111111111111111111111111111", "111111111111111111111111111111111111", "111", "111111111111111111111111", "1111111111111111111111111111111111111111", "111111111111110", "11111111111111111111111111", "11110111111111111111111", "1111111111", "111111111111", "111011111111111111111111111110111", "11111111111111111111111", "11", "111111111111", "11111111111111111111111011111111111111", "11", "1111111", "1111111111111111111", "11111111111111111111", "1111111111111111111111111111111111111", "11111111111", "111111111111111111111", "11111111111111111111111111111111111111111", "11111111111110111111111", "1111111111111111111111110111", "11111111111111111111111111111", "0111111111111111111111101111111111111111111111111", "1111111111111111111111110111111111111", "111111111111111", "1111111111111111111111110111111111111111111111111", "111111111111110111111111111110111111111111101", "11111111111111111111111111111111", "11111111111111111111", "11111111111111111111111111111111111111111101111111", "111111111111111111111111111111111", "1111111111111", "111111", "111111101111111", "11111", "1111111111111111111111111111111111111", "11111111110110", "11111111111111111111111111111111", "111111111111", "1111111111111111111111111111111111111111111111111", "1111111111111111111111111111"};
    int n = 150;
    long lo = 32851;
    long hi = 33436;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 121;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> first = {};
    int n = 143;
    long lo = 11137;
    long hi = 24937;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 615;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> first = {};
    int n = 200;
    long lo = 578373;
    long hi = 764267;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 7562;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> first = {"1111110111001111111111111111111111111111111111", "011", "111111111111111111111111111111110111011111111111", "1111", "111111111111111111111111111111111", "1111111111", "111111111111111111", "1111111111111011111111111111111111", "11111011111111111111", "111101", "1111011111111111111111111111101111111111111111", "1111111111111111111111111111111111111", "1111111111111111111111111011", "11111111111", "111111111111111111111111", "1111111111111111111", "11111111111111111111", "11101111111111111111111", "1111111011111111111111111101111111", "11111011111111111111111111111111111", "11111111111111111111111111111111111111111110", "11111111111111", "111011111111111", "111111111111", "11111111111111111111111111111111111", "1101111111111111111111111111111111111", "11", "11111", "1111111111111110111111111111111111111111011", "1111111111111111111111101111111111", "11111101111111111111110101111111111", "111111111111111111110111111111111111111111111111", "111111111111111111", "11111111111111101111111111111111111111111111111111", "1111111111111111111111", "1111111111111111111111111111111111111111111111", "111111111111111111111111101111111111111111111111", "11111111111111111111111111111111101111111111111", "11111111111101111111", "11111101111111111111111", "11111111110111111111111111111111011111110111111", "11111111111111111111111111111111111111", "111111101", "0111111111111111", "11111111111111111111011", "1111111111111101111101111111111111111111", "111011111", "10111111", "111111111111111011111111", "1111111111111"};
    int n = 137;
    long lo = 7040;
    long hi = 19496;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 127;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> first = {"11111", "11011111111111111111111111111111110111", "111111110111", "111111111111111111111111111", "111111111111111111111", "111111111111111111111111111111111111111011011111", "1111111111111111111111111111111110111111111111", "1111111011111111111111111110111111111111110", "11011111111111111111111", "11111111111111111111111111111111011111111111", "1101111110011111111111111111111111111101111110", "111111111111", "11111111111", "10111111111111111111111111111111", "1111111110111110111", "11", "1111111111", "1111111", "1111111111111111111111111111111", "111111110111111", "1111111111111111111011011", "111110111110111011111111111111111111", "1111111111111111111111111", "1111111111111111", "11111111111111", "1111111111111111111111111101111111111101", "111101111111111111111111111", "1", "011111111111111011111101111111111111", "1111111111111110111", "11111111111111111111111", "11111", "1111111111111111111111101111111", "1111101110111011111111111111", "1111111", "11111111011111111", "111111111011111111111111101111", "1111111111111111100111111111111111011", "11111", "11111111111111111111111111111111111111", "1111111111111111111111111111", "11001111111101111111111111", "1101111111", "1111111111011111111111111111111111111111111", "1111111111111110111111", "11111111111011111", "111111111111111111111111111111111111111111111", "1111111111111111111111111111101111101111", "111111111111111111111111111111111", "1110111111111111111111111111111111"};
    int n = 128;
    long lo = 1276;
    long hi = 12742;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 101;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> first = {"110111111111101111", "11011111111111111111111111111111111101111111111", "11111111111111111", "111111111111", "11111111111111111111111111", "11111111111111111", "1111110111111111111101", "1111111111111111111111111111011111111111111", "111111111111111011111111", "111111111011111111111110111111111", "1", "1111111011111111011", "1111111111110111111111", "1111111111111111111111111111110110111111", "1111111111111111111", "11111", "11", "11111111111111111111111010111111111111", "11111111111111111111", "11111111111111111111111111111111111111111111", "111111111011111", "1111101111001111", "1111", "11111111111111111", "1111111111", "111111111111111", "1111111111111111111101111", "111111111111111111111", "11", "11111111111111111111111", "111", "111", "1101111111111111111111111111111111111111111111111", "111110101111111111111111110111111111111111", "1111111110111111111111111111111111111101111", "11111111111111111111111111111111", "111111111111110111111111111111111111111", "11111111111111111111111111111111111111111111111", "011111111111111111111111111101111111111", "1111111111111111111111", "1111", "1111111111110111111011111111111111", "1111", "11111111111110111", "111111111111111111111111", "1111011111111111111111", "1111111", "11111111111", "111111111111111111111111111111", "111111111111111011111111111"};
    int n = 222;
    long lo = 446895;
    long hi = 1945924;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 97;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> first = {};
    int n = 256;
    long lo = 6063504;
    long hi = 14920740;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 6844;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> first = {};
    int n = 312;
    long lo = 448467195;
    long hi = 478152080;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 416;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> first = {"1111111111111", "11111111111111111111111111111111111", "11111111111110111111111111111111111111011", "11", "1111111111", "11111111111111111111111111111111111111111", "11111111111111111111", "1111111111111111111111111111111", "1111111111111111111111111111111111111111111", "111111111111111111111111111111111101111", "11101111111", "1111111111111111111111111111", "11111111111101111111111111111111", "0111111111111111111111", "111111111111111111", "111111101111111111111111111111111", "111111111", "11111101111111111111111111111111111101111", "1111111111111111111111111111111011111111111", "1", "111101111111111111111", "11111111111111111111111111111111111011111", "1111111", "1", "1111", "11111111111", "11111111111111", "11111111", "111111", "1011111111111111111111", "11111111111111111111101111111111111111111111111", "1111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11", "11110111111", "1111111111111111111111111", "111111111111111111111111111111111111111111111111", "11111111111111011111111111111111", "111110111111111111111111111111", "1111111111111111111111111111111111111111111", "11111111111", "11111111111111110111111111111101111111111", "111111111111111111111111111111", "11111111111111111111111111111111111111", "111111011", "1111111111111", "111111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111110", "1101111"};
    int n = 366;
    long lo = 2667384400;
    long hi = 8734193776;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 183;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> first = {};
    int n = 408;
    long lo = 45413857060;
    long hi = 84112121522;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 587;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> first = {};
    int n = 450;
    long lo = 766144406020;
    long hi = 1110255484553;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 344111078534;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> first = {};
    int n = 500;
    long lo = 12803722081917;
    long hi = 19931655911833;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 230;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> first = {};
    int n = 550;
    long lo = 355484185408344;
    long hi = 379909873173835;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 142;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> first = {};
    int n = 600;
    long lo = 233746120082751;
    long hi = 1000000000000000;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 1844;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> first = {};
    int n = 640;
    long lo = 861417287297056;
    long hi = 1000000000000000;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 1777;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> first = {};
    int n = 318;
    long lo = 419410181;
    long hi = 1986544320;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 304;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> first = {};
    int n = 297;
    long lo = 1135794702;
    long hi = 2660596516;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 163;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> first = {};
    int n = 300;
    long lo = 261108101;
    long hi = 968870551;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 796;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> first = {};
    int n = 500;
    long lo = 16649393593235;
    long hi = 19952569391965;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 19186;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> first = {};
    int n = 500;
    long lo = 6789853155038;
    long hi = 17881742901029;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 732;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> first = {"111111111111111111111111101111111111111111101", "111111111111111111111111", "1111111111111111", "11111111111111111111111111111111111111111111", "1111111111111111111111110011", "1101", "1111111110111111011101111111111111111111111111110", "1111111111111", "11111111", "11111111111111111111111111111111101111111", "1111111111"};
    int n = 170;
    long lo = 16119683637093;
    long hi = 25828741696330;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 120;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> first = {"1111111111", "11111111111111111111111111111111111111111111111111", "1111111111111111111111101111", "111111111111111111111", "111111111111", "111111111111111", "111111111111111", "111110111111111011111111111", "1111111111111111111101111111111111", "111111111111111111111111111111", "1111111111", "11111111111011110111111111111111111111", "11111111111111111111111"};
    int n = 94;
    long lo = 7760132;
    long hi = 11218235;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 266;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> first = {"111111111111111111111011010111111010111111", "1111101111", "11111111110111101111111111", "11111011011111111111111111111011011111111", "111011111111111111111111", "111111111111111111111111111111111", "11111111111111111111110111111111101110111", "11111111111111111", "11111111111111111111101101111111111111111111"};
    int n = 287;
    long lo = 687247957455360;
    long hi = 999999999959703;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 75;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> first = {"1111111", "111111111011111101111111111111111111", "1", "1111111", "111111111111111111111111111111111111111", "11100111111111111111101111111101111111111110", "1111111111111111111111111111111111", "11111111011111111111111", "111111111011111111111111111", "11111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111", "1111111111111111111111111111111111101111111", "11", "111111111111111111111111111111111111111111", "111111", "1111111101111111111101111111111111011111111111111", "1111111111111111", "11110111011111111111111111111111111111111111110111", "1111111111", "111111111111111", "1111111", "11111111111110111111111111111111111", "11111"};
    int n = 46;
    long lo = 248;
    long hi = 290;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 43;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> first = {};
    int n = 309;
    long lo = 6880192104;
    long hi = 38463127956;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 588;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> first = {"1111111111111", "1111111111111011111110111111111111111111111111", "111111111", "101111110111111111110111111111111111111110", "1111111111111111", "111111111111111111111111111110", "11111", "1101111111111111111111", "111111111111111110111111011111111111111", "1111111101111111111111111111", "11111111111111", "11111111111111111111", "1111111111111", "1111111", "1111111111111111111111110111", "1011101111111111111011111111", "11111111111111111111111111111111111111110111111", "111101"};
    int n = 288;
    long lo = 327152275633186;
    long hi = 999999999992936;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 97;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> first = {"1111111111101111111", "11111111111111", "11111111111111101", "11111111111111111111", "1111111111111111", "1111111111111111111001111111111111111111111111", "11111101101111", "11111111110111111111", "11111111111111", "1111111111111111110111111111111111111111111111111", "1111111111111111111111111", "11111111111111111111111111111", "111111", "1101111111", "11111111011111111111111111111111111111", "1", "11111110110111111111111011111111111111111111111111", "1111111111111111111111111111111111", "111111111111111111", "111111111111111111111110011", "1111111110111111111111", "111111111111111", "1111111111111", "1111101011111111011111111111111111001111", "111111111111111011011111111111101111111111", "11111111", "111111111111111111", "11111111", "11", "1111011111110110111111", "1111101111111111111", "111111111111111111110110111111111", "111111111111011111111111111111111111111111", "11111111111111111111111", "111111111111111111111", "1111111111111111111", "111111111111111111111111111111011111111111", "1111111111111111111111111101111111111111110", "111111111111111111110011110101"};
    int n = 369;
    long lo = 771585239387;
    long hi = 775610190014;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 122;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> first = {"1101111111101111111111111101111101111111111101", "111110111111111111111111111111111111111111111", "111011111111111111111111111111011111111111", "1", "11110111111111111", "1101111111111101111101111100101111111111101111", "1111111111111111111111", "11101111001111111111", "11111111111111111111111111111111111111111111", "1111111", "1111111111", "11111111111111111111111111111111011", "11111111", "1111111", "111111101111111111111111111111111101111110111111", "11111101111111111111011100111111", "111111", "111111111111", "0111111111111111111", "1111111111111111111", "1111111111111111111111111111111111", "111111111101111111111111111111", "111111111111111011111111111", "111111111111111111111111111111011111111111", "1111111111111111111111111111111111101", "111111111111111111111111111111111111111", "111111111101111111111111011101111111110111111111", "01111111101111111111111", "1111111111111111111111", "11111111111", "1111111111011111111111111111111111111111", "1101111111111111", "11111", "101111111111011111111111111", "111111111111111111111"};
    int n = 117;
    long lo = 5;
    long hi = 234;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 42;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> first = {"1111111111110111111111111101111", "1111111111111111111111111111", "1111111111111111111111111111101101", "1111111111111111111111", "111111111111111111111111111111", "1111111111011111111111111111", "11111111111111111001111111111111111111111111110110", "1111111111111111111111101111011111111111111111", "1111111", "111111111011111111111111111111111111111101111111", "11111111111111111111111111111111111", "1111"};
    int n = 412;
    long lo = 548142529756660;
    long hi = 999999999953665;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 69;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> first = {"111111111111111111111111111111", "11111", "11111111111111111111111111111", "11111"};
    int n = 382;
    long lo = 212745138263933;
    long hi = 999999999995970;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 787254861732038;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> first = {"1", "11111111111111011111111111111", "1111011111111111011111111111", "111011111111111111101101011011111111111111", "1111110111111111111111111", "1011", "1111110111111111101", "11110", "1111011111111111111111111", "1011", "111111111111111111111110111011", "1111111111", "111", "111111111111111111111111111111111111111", "111111110111111111111111111111111", "011111111111111111111111111111111111111111111", "10111111111111111111111111111111011111", "110111111111111111111111111110111111111111111111", "11111111111111111111111111111111111011110111", "11", "1111111111111111111111111", "111111111111111111111111111110", "11111111111111111111111111", "111111111111111111111111111111111", "111111111111111111111111111111", "11111", "111111101111111111111", "11111", "01111", "111111111", "11111111111011111111111111111111111111111111111111", "111011111111111", "111111", "11111111011111111", "111111111111111111111111100101111111101111111111", "11111011111111110111111111111", "1111111111", "11111111", "11111111111", "1111111111111111111111111111111111111111", "1111110111111101111", "00111"};
    int n = 360;
    long lo = 32712355334;
    long hi = 98647143612;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 101;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> first = {"111111111111111111111111", "111111111111111111", "1111111101111111"};
    int n = 119;
    long lo = 510734373824652;
    long hi = 999999999976563;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 57;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> first = {"1111100111111111", "111111011111110111111111111111111110111111111111", "1111111111111001111", "1111111011111111111", "111101111110111111111", "11111111111111111111111111111111111111111111111", "11111111111111111111", "1111111111111111111111111011111111111111111", "111111111111011111111111111111111111111111111111", "111111", "1111111111111101111111111111111", "1111111111111111", "1110111111111111111111111111111111111111011111", "111", "1111111111111101111111", "1111111111111111111111", "1111111111111111111111111111111", "111111011111111111111111111111111"};
    int n = 216;
    long lo = 259586734299;
    long hi = 1815730895954;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 101;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> first = {"1111110111111", "1111111111111111111111111111111111111", "111111110111111", "111101111110111", "11111110111111111111111111", "111111111111101", "11111111111111111111111111111011111111111111111101", "1111111011111111110111111111111111111", "1111111111111111110010111111111111111", "11111111", "111111111", "11", "11110101111", "1111111111111111111111111", "11111111111111111", "11111111110111110111101111111111", "11111111111111111011111111110111111", "1111", "11111110111111111111111101101111111111", "11111111", "1", "11111111111111010", "111111011", "1111111111111101111111111111110111111111110"};
    int n = 4;
    long lo = 3;
    long hi = 20;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 13;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> first = {"111111111111111111111111011111111111111111111111", "11111110111111111111111111111", "11111111111111111111111111111111101111", "11111111111111111111111111111111", "11111111111111111111111111111111111111111111111111"};
    int n = 253;
    long lo = 412879304726462;
    long hi = 999999999970883;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 160;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> first = {};
    int n = 221181482;
    long lo = 26090229590429;
    long hi = 96962994297993;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 485;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> first = {"1111111111111", "11111"};
    int n = 12737471;
    long lo = 234039588112648;
    long hi = 991624747489689;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 757585159377042;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> first = {"11111111111111111111111111111111111", "11111111111111111111111", "1111111111111111111111111111111111111", "11111111", "11111111111111111111111111111111011111111111", "111111111111111111110111111111111111111111", "111111111111111111111111111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111", "111111111111111111111111111111", "111111111111011111111111111", "111111111111", "1111111111", "11011111111111111111111111111111111111111111", "11111110111111111111111111111111111111111111111111", "111111111111111111111111111111", "1111111111", "1111111111111111111011111111111", "1111111111", "11111111111111111111111111111111111111111111", "1", "1111", "111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111", "11111111111111111111111111111111", "111111111111111111", "111111111111111111111111111111111111", "1011111111111111111111111111111111111111111111", "11111111111111111111"};
    int n = 368578870;
    long lo = 120588577191120;
    long hi = 519571175727487;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 590;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> first = {"11111111111111111111111111111111111111111011", "111111111111111111111111111111111111"};
    int n = 324417392;
    long lo = 409033326055230;
    long hi = 964529109588504;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 115;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> first = {"1", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111011111111111", "1111111111111011111", "111111111111111111111111111", "111111111111011111111111111111", "11111111111111111111111", "1111111111111111111111111101111111111111", "11111011111", "111110111101111111111111", "111111111111111110111111", "11111111111111111111111111111111111111", "111111111111011111111111111111111111111", "11", "111111111111111111"};
    int n = 14815509;
    long lo = 7200358256576;
    long hi = 27148010247200;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 235;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> first = {"1", "11011111111", "11111111111111111111111", "111111111111111111111111111110111111", "111101111111111111", "1111111111111", "111111111110", "111111111111111111111111011111", "11111111", "10111111111111111111111111111111111111111111111", "1111", "11111111111111111111111110111111111111111011", "11011111111111111111111111111111"};
    int n = 404433466;
    long lo = 7380218424840;
    long hi = 98360655138224;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 74;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> first = {};
    int n = 788442360;
    long lo = 23779783027684;
    long hi = 360466903948498;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 225;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> first = {"111111", "111101111", "1111111111111111111111111111111", "11", "11111111111111111111111111111111111111111", "111111111111111111111111", "1111111111111111111", "1111111111111110101111111111111111111111111111111", "1111111111111111111111111111101111111111", "1111111111111111111111111111011111111111100111", "111111111111110111111101111111111", "111111111111111111101111111111111111111111", "1111111111", "11111111111111111", "1111111", "1111111111111111111111111111", "111111111111111111101111111111", "111111111111", "1111111111111111111111", "111111111111111111111111111", "11111111101111", "111111111111111111", "11", "1111111111111111111111111111111111111111111111111", "11111111111111111111111111111011110111111111111111", "111111111111111111111", "1111111111111111111111111101110111111", "111111111111111111111111111111111111111111111111", "111111111111111111111111111111111", "11111111111111011111111111111111111111111110", "111111111111111111111", "1111111111111111111111111111", "0111111111110111111111111111111111111", "11111111111111111111111111111111111111111111111", "11110111111011111", "11111111111111111111110111111111111111", "1111111111111111111111111110111", "11110111111111011", "111111111111111111111111", "1111101111111111101111111110111111111", "11111111111111111111111111111", "1111111", "1111011011111111111111111111111111111111111", "11111111011111111111111111", "111111111111111111", "1111"};
    int n = 353387345;
    long lo = 270592241073;
    long hi = 645781083464408;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 136;
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> first = {"11111111111111111111", "111111111111011111110111111111111111111", "111111111111111", "111111111111111111111111111111111111111111111111", "1111111111111111111111101111111", "111", "111111111111111111111", "1111111111111", "111111111111111111111111111", "11111111111111", "11", "11111111", "11111111111111111111"};
    int n = 784951552;
    long lo = 501629237112220;
    long hi = 898326781632795;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 207;
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> first = {"1111111111111111111111111111111111111", "111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "11111111", "1111111111101111111111111111111", "1111111", "111111110111110111111", "11111111111111111111111111111111111111111111", "111111111111111111111111111111111111111", "11111111111", "11111111111011111111111111111111111111111111111", "111111111111111", "111111111111111111111111111111111111"};
    int n = 159170174;
    long lo = 265817434169817;
    long hi = 598239508368764;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 802;
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> first = {};
    int n = 884783333;
    long lo = 208098588027112;
    long hi = 740750494128553;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 402;
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> first = {"1111111011111111111111011111", "111111111111111111", "11111111", "11101111111111111111111111111110111", "1111111111111111111111111111111", "101111111111111111111111111111011111", "111111111111111111111", "111111111111", "111101111111111111111111111111111111111111"};
    int n = 449920342;
    long lo = 284341849672894;
    long hi = 733295898304101;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 44;
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> first = {"111", "11111111111111111111", "1111111111111", "111", "1111111111101111111111111111111111111111110", "1111", "1111111111110111111111111111111111", "11111111", "0111111111111111111111111111111111101", "11111111111111", "11111111111111111111111111111", "1111111111", "1111110111111", "111111111111111", "111111111111", "1111111111111111111111111111111", "1111111111111111111111111111111", "1111111111111111111111111111111111", "11111110111111"};
    int n = 914658476;
    long lo = 131725915610311;
    long hi = 351411889194649;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 136;
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> first = {"1111111111111111111111111111111", "11111111111111111111", "11", "11111111111", "11111111111111111111011111", "111111", "1111111", "11111111111111111111111111"};
    int n = 283623167;
    long lo = 256917847367371;
    long hi = 287267127664007;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 457;
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<string> first = {"11", "11111111111111", "111111111111111111111111", "1111111111111", "111111111111111111111111111111111111111111111111", "11111111111111111", "111111111111111111111111111", "11111", "111", "11111111111111111111111111111111111111", "111111111111111111111111111111111", "1111", "11111111111111111111111111", "1111111111111111111111111111111", "11111111111111111111111111111111111111111", "111", "1111111111111111111111111111111111111", "11111111111111111111111111111111111"};
    int n = 345936541;
    long lo = 115269963806761;
    long hi = 455107093507963;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 339837129701203;
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<string> first = {};
    int n = 683888821;
    long lo = 46209530304858;
    long hi = 58815131928264;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 2595;
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<string> first = {"11111111111111", "11111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "1111111111111111111111111111111111111", "11111111111111111111111111111", "111111111", "1111111111111111111111111111111111111", "11111111111111111111111111111111", "11111111111111111111111111111111", "11111111111111111111111111111111111111", "111111111111111111111111111", "11111111111111111111111111111111111", "11111111111111111111111111", "11111111111111", "111111111111111111111111111111", "1111", "111111", "111111111111111111111111111111111111111", "111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111", "1", "1111111111111111111111", "11111111111111111", "111101111111111111111111111111111111", "11111111111111111111111111", "111111111111111111111111111111", "1111111111111111111111111111", "1111111111111111111111111111111111111111111111", "111111111111111", "111111111111111111111111111111", "1111", "111111111111111111111111111111111", "11111111111111", "1111111111111111111", "1111111111111111", "11111111111111111111111111111", "111111111111", "11111111111111111111111111111111", "1111111111", "1111111111111", "111111111111111111111111111111"};
    int n = 89001985;
    long lo = 49158507532004;
    long hi = 111462390273525;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 9862;
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<string> first = {};
    int n = 487185649;
    long lo = 17533899671286;
    long hi = 269215977907878;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 589;
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<string> first = {};
    int n = 692129101;
    long lo = 35185923951333;
    long hi = 189438452615524;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 161;
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<string> first = {};
    int n = 197769497;
    long lo = 476237940934588;
    long hi = 636618681746121;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 362;
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<string> first = {"11111111111111", "11111", "1111111111011110111111111111111111111", "1111", "1111111101111", "1111111111110111111111111111111111111111111111", "111111111111111111011111111111", "011111111111111111111111111111111101111111", "11111111111111", "11011111111", "1111", "111", "11111111111111111111111111111111111", "1111111111111111111111111101", "1111111111111111111111111111111111111111111111111", "111111111", "111111111111", "11111111111111111101111111111111", "1111111111111111111111111111101111", "1111", "1111111111111111111", "11111101111011", "11111111111111111111111111111111111111111", "11101111111111111101111110111101111111111", "11111111111111111111111111111111111111111111111111", "0111111101111111111111111111111111111111", "11111111111111111111111111111101111111111111111111", "1111111111111111111111111111111", "110110111111", "111111", "1111", "1111", "111", "111111111111111111111"};
    int n = 310649374;
    long lo = 13909925939720;
    long hi = 335544299369214;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 169;
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<string> first = {"111111111111111111111111111111111111111", "11111111111111111111111111", "11111111111", "1111111111111111111111", "1111111111111111111111111111111111111111111111", "11111111111111111111111", "11111111111111111111111111111111111111", "1111111111111111111111111111111111", "111111", "1111111111111111111111111111111111111111111", "1111111111111111111111", "11111111111111111011111111111111111111", "1111111111111111111111", "1111111111111111111111111111111111111", "1111111111111111111111111111111111111111111", "111111111111", "11111111111111111111111111111111111111111111111", "1111111111111111111111111111111111111111111", "111111111111111111111", "11111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111111", "111111111", "111", "1111111", "11111111111111111", "11111111111111", "111111111111111111111111111111111111111111"};
    int n = 503426671;
    long lo = 4669758185783;
    long hi = 14295123824843;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 3147;
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<string> first = {};
    int n = 437061184;
    long lo = 147952289282486;
    long hi = 169561696714915;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 14795;
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<string> first = {"1111111111101111111111111", "1", "101", "111111111111111111111111111111111111111", "111111111111", "1111", "111111111111111111111111111111111111111111111", "11111111111", "11111111111111", "111111111111111110111111111111111111111111", "11111111111111", "11111111111111111111111111111111111111111111111111", "11111111111111111111111111", "111111111111111111111111111111111111", "11111", "11111111111111111111111111111111111111111111"};
    int n = 189311433;
    long lo = 273364121746403;
    long hi = 666648376558982;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 254;
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<string> first = {"111111111111111", "111111111111111111111111111111", "111111111111111111111", "111111111111111111111111111111111111111111111", "1", "1111111111111111111111111101110111111111111111", "1111111111111111011", "1111111111111111111111111111111", "11111111111", "1111111111111111111111111111111111", "111111", "111111111111111111111111111111", "1111111111111111111111111111111111111111", "1111111111111111111111111111111111111", "11101111111111111111111111111111011111011"};
    int n = 945834457;
    long lo = 135471869103562;
    long hi = 447907818257878;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 194;
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<string> first = {"1111111111111111111111111111", "11111111111", "11111110111111111111111111111111111111", "1111111", "11111111111111", "111111111111111111111111111111", "11", "111111111111111111111111111111", "111", "11111111111111111111111111111111111111111111", "1111111110111111111111111111111111111111111", "111111111"};
    int n = 701977543;
    long lo = 195143770320343;
    long hi = 283176052295342;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 215;
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<string> first = {"1111111", "011111011111111111111111111111111111111", "1111", "111111111111101111111111111", "11111111111111111111111011111111111", "11111111111111111", "101111", "11111111111111111111111111111111111111011", "1111", "11", "1111111111111111", "11111011111111011111111111111111111111111", "111111111111", "111111111111111111111111111111111111110111111", "111111111111", "10111111111111111111111111111111111111", "11111111111111111", "11111111111111111111111111111111111111", "111111111111111111111111111111111111111111111111", "111111", "11111111111011111111111111111111111", "11111111111111111111111111111111111111111", "11111111111111", "1111111", "1111111111"};
    int n = 337635158;
    long lo = 83079810366253;
    long hi = 439015268127117;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 162;
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<string> first = {"11111111111111111111111111111111111111111111", "111111111", "111111111111111111111111111", "1111", "111111111111111111111111111111111111111111", "11111111111111111111111", "111111111111111111111111111", "111111", "11111111111111111111111111111", "1", "11111111111111111111111111111111111111111111111", "111111", "11111111111111111111111111", "111111111111111111111111111111111111", "1111111111"};
    int n = 397685092;
    long lo = 163604851012737;
    long hi = 845497837758687;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 681892986745951;
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<string> first = {"111111111", "111111111111111111", "1111111111111111111", "11111111111111", "11111111111111111111111111111111", "11111111111111111111111111111", "1111111111111111111111", "1111111111111111111111111", "111111", "11111111", "111111111111111111111111111111111", "1", "111111111"};
    int n = 427557235;
    long lo = 101314089218734;
    long hi = 135500801840015;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 34186712621282;
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    vector<string> first = {};
    int n = 100941519;
    long lo = 11197934059118;
    long hi = 62330911907467;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 1955;
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    vector<string> first = {};
    int n = 174;
    long lo = 29974724;
    long hi = 29974727;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 4;
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    vector<string> first = {"1111111110111111111111111111111", "11111111111111111111111111111111111", "111111111", "1111111111111111011111111111111111111111111111", "11111"};
    int n = 146;
    long lo = 999999999985001;
    long hi = 999999999985001;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 1;
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    vector<string> first = {"1111111111111111111111111111110", "111111111111111111", "11111111", "11111", "1111111111111111111111111111111111111111", "111111111111111111111", "11111111111111111111111111111111111111"};
    int n = 234;
    long lo = 999999999990772;
    long hi = 999999999990780;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 9;
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test103() {
    vector<string> first = {"11"};
    int n = 289;
    long lo = 999999999912934;
    long hi = 999999999913009;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 76;
    if(result == expected) {
        cout << "Test Case 103: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 103: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test104() {
    vector<string> first = {"1111111111111111111111111111111111111111"};
    int n = 99;
    long lo = 999999999975622;
    long hi = 999999999975739;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 118;
    if(result == expected) {
        cout << "Test Case 104: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 104: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test105() {
    vector<string> first = {"1111111111111111111111111111111111", "111111111111111111111011111111111111111111", "111111111111", "111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111", "1111111111111111111111111111111", "111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111", "111111111111111111111111", "11111", "111111111111111111111111111111111111111111", "11111111111", "11111111111111111111", "111111111111111111"};
    int n = 44;
    long lo = 875;
    long hi = 1012;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 110;
    if(result == expected) {
        cout << "Test Case 105: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 105: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test106() {
    vector<string> first = {"11111111111111111111111111111111111", "11111111111111111111111111111", "1111111111111111111111111111111111111", "111111"};
    int n = 270;
    long lo = 999999999961566;
    long hi = 999999999961985;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 420;
    if(result == expected) {
        cout << "Test Case 106: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 106: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test107() {
    vector<string> first = {};
    int n = 250;
    long lo = 53782856441;
    long hi = 53782860099;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 691;
    if(result == expected) {
        cout << "Test Case 107: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 107: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test108() {
    vector<string> first = {};
    int n = 282;
    long lo = 414644317;
    long hi = 414678989;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 366;
    if(result == expected) {
        cout << "Test Case 108: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 108: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test109() {
    vector<string> first = {"11111", "1111111111111011111111", "1111111111111111111111111111111", "1111011111111111111111111111111111", "11111111111111111111111", "11111", "11111111111", "1111111101101111111101111111111", "1111111111111111111111111", "1111111111111111111111"};
    int n = 170;
    long lo = 137787989075121;
    long hi = 137787989303141;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 124;
    if(result == expected) {
        cout << "Test Case 109: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 109: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test110() {
    vector<string> first = {"111", "11", "011", "11", "1", "1", "101", "1", "1", "11", "110", "1", "1", "0", "111", "1", "1", "1", "100", "1", "01", "1", "10", "11", "111", "11", "011", "001", "11", "0", "11", "0", "0", "111", "110", "111", "1", "01", "1", "11", "11", "111", "111", "11", "1", "10", "11"};
    int n = 8372230;
    long lo = 17447643048769;
    long hi = 171861878661363;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 22;
    if(result == expected) {
        cout << "Test Case 110: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 110: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test111() {
    vector<string> first = {"11", "11", "11", "1", "1", "1", "11", "1", "1", "1", "11", "1", "1", "1", "11", "11", "1", "11", "1", "11", "1", "1", "1", "11", "1", "1", "11", "1", "11", "11", "11", "11", "11", "11", "11", "11", "11", "1", "1", "1", "1", "1", "11", "1", "1", "11", "1", "11", "1", "11"};
    int n = 5202;
    long lo = 28;
    long hi = 1000000000000000;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 999999999999973;
    if(result == expected) {
        cout << "Test Case 111: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 111: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test112() {
    vector<string> first = {"1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"};
    int n = 397997;
    long lo = 88830936860;
    long hi = 1000000000000000;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 999911169063141;
    if(result == expected) {
        cout << "Test Case 112: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 112: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test113() {
    vector<string> first = {"0", "00", "0", "00", "0", "0", "00", "0", "00", "00", "0", "0", "0", "0", "0", "00", "00", "0", "00", "01", "00", "0", "1", "00", "0", "0", "0", "0", "00", "00", "00", "00", "00", "00", "00", "0", "0", "00", "0", "00", "0", "0", "00", "01", "0", "0"};
    int n = 79685;
    long lo = 1;
    long hi = 627486118917056;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 1;
    if(result == expected) {
        cout << "Test Case 113: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 113: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test114() {
    vector<string> first = {"0", "1", "0", "0", "0", "0", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1", "0", "1", "1", "0", "1", "1", "1", "1", "0", "1", "1", "0", "0", "1", "0", "1", "0", "0", "0", "1", "1", "1", "1", "1", "0", "1", "1", "0", "0", "0", "0", "1", "1"};
    int n = 89939;
    long lo = 5;
    long hi = 614242592964189;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 6;
    if(result == expected) {
        cout << "Test Case 114: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 114: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test115() {
    vector<string> first = {"00"};
    int n = 664567;
    long lo = 1;
    long hi = 6568;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 0;
    if(result == expected) {
        cout << "Test Case 115: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 115: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test116() {
    vector<string> first = {"0100000010000110", "00", "0010010000000010", "0100010010000011", "11010000000001", "01010000010000110000", "01100101000110000", "0000001000110", "0001101001001000110100", "100100", "100", "10", "000100001100000000", "000000001000011100", "0001000010000100", "0010110001", "0100100000001100100010", "000", "0010011000000000", "011000010000", "000", "101101000000000000000", "0110100000011000", "0011000101000100000", "1000000000010000100100", "0110000000", "01110000011100011010", "1", "0100000010000", "0000001000100", "00000000001011101", "001000", "000100000011000011000", "00000000001", "000010000000100000", "100110001001", "00011000100", "10010001", "00100001000000001", "0001000001011", "000000001", "10001010110"};
    int n = 0;
    long lo = 0;
    long hi = 2;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 1;
    if(result == expected) {
        cout << "Test Case 116: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 116: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test117() {
    vector<string> first = {"01100", "000", "01", "0111", "10", "0011", "1", "0100"};
    int n = 0;
    long lo = 0;
    long hi = 0;
    MagicalGirlLevelThreeDivOne* pObj = new MagicalGirlLevelThreeDivOne();
    clock_t start = clock();
    long result = pObj->theMaxPower(first, n, lo, hi);
    clock_t end = clock();
    delete pObj;
    long expected = 0;
    if(result == expected) {
        cout << "Test Case 117: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 117: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    test103() == 0 ? ++passed : ++failed;
    test104() == 0 ? ++passed : ++failed;
    test105() == 0 ? ++passed : ++failed;
    test106() == 0 ? ++passed : ++failed;
    test107() == 0 ? ++passed : ++failed;
    test108() == 0 ? ++passed : ++failed;
    test109() == 0 ? ++passed : ++failed;
    test110() == 0 ? ++passed : ++failed;
    test111() == 0 ? ++passed : ++failed;
    test112() == 0 ? ++passed : ++failed;
    test113() == 0 ? ++passed : ++failed;
    test114() == 0 ? ++passed : ++failed;
    test115() == 0 ? ++passed : ++failed;
    test116() == 0 ? ++passed : ++failed;
    test117() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=22691397&rd=14539&pm=11478
********************************************************************************
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cassert>
 
using namespace std;
 
typedef long long LL;
#define FOREACH(i,c) for(__typeof(c.begin()) i=(c.begin());i!=(c).end();++i)
#define PB push_back
#define SZ(x) (int)(x).size()
#define ZERO(x) memset(x,0,sizeof(x))
 
const int N = 10000;
 
struct Ans {
  LL left, right;
  LL score;
  bool all1;
 
  Ans() {
    all1 = true;
    left = right = score = 0;
  }
};
 
Ans findAns(string s) {
  int c1 = 0;
  int mx = 0;
  for (int i = 0; i < SZ(s); ++i) {
    if (s[i] == '1')
      ++c1;
    else {
      mx = max(mx, c1);
      c1 = 0;
    }
  }
  Ans res;
  res.score = max(mx, c1);
  res.all1 = (res.score == SZ(s));
  res.right = c1;
  res.left = 0;
  while (res.left < SZ(s) && s[res.left] == '1')
    ++res.left;
  return res;
}
 
Ans join(Ans a, Ans b) {
  Ans res;
  res.all1 = a.all1 && b.all1;
  res.right = b.right;
  if (b.all1)
    res.right += a.right;
  res.left = a.left;
  if (a.all1)
    res.left += b.left;
  res.score = max(a.score, b.score);
  res.score = max(res.score, a.right + b.left);
  return res;
}
 
bool visitedFull[N];
Ans ans[N];
LL len[N];
vector<string> first;
int n, k;
 
Ans go(int c, LL l, LL r) {
  bool full =  false;
  if (l == 0 && r == len[c] - 1)
    full = true;
  if (full && visitedFull[c])
    return ans[c];
  if (full)
    visitedFull[c] = true;
  if (c < SZ(first)) {
    if (full)
      return ans[c] = findAns(first[c].substr(l, r - l + 1));
    else
      return findAns(first[c].substr(l, r - l + 1));
  }
  vector<int> sons;
  int p = c - 1;
  while (p >= 0) {
    sons.PB(p);
    p -= k;
  }
  Ans res;
  LL start = 0;
 
  FOREACH (it, sons) {
    LL nxt = start + len[*it] - 1;
    if (l <= nxt && r >= start) {
      res = join(res, go(*it, max(l - start, 0LL), min(r - start, nxt - start)));
    }
    start = nxt + 1;
  }
 
  if (full)
    return ans[c] = res;
  else
    return res;
}
 
class MagicalGirlLevelThreeDivOne {
public:
   long long theMaxPower( vector <string> _first, int _n, long long lo, long long hi ) {
     if (_n < SZ(_first)) {
       return findAns(_first[_n].substr(lo, hi - lo + 1)).score;
     }
     ZERO(visitedFull);
     first = _first;
     n = SZ(first);
     k = SZ(first);
     for (int i = 0; i < n; ++i)
       len[i] = SZ(first[i]);
     while (len[n - 1] <= hi) {
       len[n] = 0;
       int c = n - 1;
       while (c >= 0) {
         len[n] += len[c];
         c -= k;
       }
       ++n;
     }
     return go(n - 1, lo, hi).score;
   }
};
 
 
 
// Powered by FileEdit
// Powered by moj 4.16 [modified TZTester]
 
// Powered by CodeProcessor

********************************************************************************
*******************************************************************************/