/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=12418
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class BoardPainting {
public:
    int minimalSteps(vector<string> target);
};

int BoardPainting::minimalSteps(vector<string> target) {
    int ret;
    return ret;
}


int test0() {
    vector<string> target = {"#####"};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> target = {"#####", ".....", "#####", ".....", "#####"};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> target = {"..#..", "..#..", "#####", "..#..", "..#.."};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> target = {"#####", "..#..", "#####", "..#..", "#####"};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> target = {".#.#.", "#####", ".#.#.", "#####", ".#.#."};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> target = {"...................."};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 0;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> target = {".#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#", "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.", ".#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#", "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.", ".#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#", "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.", ".#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#", "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.", ".#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#", "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.", ".#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#", "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.", ".#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#", "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.", ".#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#", "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.", ".#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#", "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.", ".#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#", "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.", ".#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#", "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.", ".#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#", "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.", ".#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#", "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.", ".#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#", "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.", ".#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#", "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.", ".#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#", "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.", ".#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#", "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.", ".#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#", "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.", ".#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#", "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.", ".#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#", "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.", ".#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#", "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.", ".#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#", "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.", ".#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#", "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.", ".#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#", "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.", ".#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#", "#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#."};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 1250;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 230;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> target = {"..................#.#.#.........", "...#............................", ".....#..#.....................#.", "#....................#.........#", "........#....#.................#", ".......#.#.....#................", "................................", "...............#.............#..", "..##..#...#...........#..#......", "..#.....#....................#..", ".#...#...#......................", ".........#.....#......#...#.....", ".##............#.#.....#.......#", "...................#.#.......#..", "..........................#.#...", ".................#........#....#", "#.......#..............#...#..#.", "#...#....#........#............#", "#............#..#.#............#", ".........#.......#..............", "...#............................", "#........#.....#......#.....#.#.", "............#...#.....#.......#.", ".........#.#....................", ".....#..................#.......", ".......................#........", "....#......#...........#........", "..........#.#...................", "......#...............#......#..", "..#......#...#..##.#.#..........", "......#.............#.......#.#.", ".....#.......#..................", "#..##.................#.........", "..#...................#.......#.", "........#......#......#.......#.", "#.............#.......#...#.....", ".............#....#...........#.", "......#......#..#.......#.....#.", "...#...#...#....................", "......#.....#.#....#..#.........", ".#..................#.#.........", ".#....#...#.....................", "......#......#..#.......#.......", "..........#..#..............#..#", "............#......#............", "....#................#.....#....", "#.#..........#.....#............", "....................#...#.#.#..."};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 135;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> target = {".#...", "..#..", "....#", "##.##", "..##.", ".....", ".#.#.", "....#", "...#.", ".....", "..#..", ".....", "##..#", "#..#.", "....#", ".#...", "##..#", ".....", ".#..#", "....#", "#..#.", "...#.", "...#.", "...##", "...#.", ".#.#.", ".####", ".#...", "##..#", "..#..", "###..", "#.##.", "..##.", "##.#.", "#....", "..#.#", "...#.", "....#", "#.#.#", ".....", "##.##", ".....", ".....", "##.#.", "..##.", "#....", "#..##"};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 47;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> target = {".#...#.........#..###...#.#", "#..#....##.#.##..#........#", "#......#..#.##.####..#.#.#.", ".#..#.#####..#.......##....", "#.##.######...#.#...#......", "#..###.#.........####.##.#.", ".##....##.......#.####..#.#"};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 41;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> target = {".##.#.", "..####", "...##.", ".#.###", ".###..", ".##.#.", "##..#.", "#..#..", ".#..#.", "#####.", "....##", "######", "######", "#.#.#.", "##.##.", "######", "#...#.", "##..##", ".####.", "#.##.#", "##.#..", "#.####", "...#..", ".#..#.", ".#..##", "##.###", ".#.#.#", ".#####", ".....#", ".####.", ".#..#.", ".#.#.#", "..###.", "##..##", "..###.", "###.#.", ".#...#", "#.##..", "#..#.#", "..#.#.", "##.##.", "#..#.#", ".#####", "#..#.#", "#.##.#"};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 65;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 106;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> target = {".##.####.####.#########.##..", "##.#.####################.##", ".##.###.##.###.###.###.###..", "#..###..#########..###.##.##", "####..#######.#.#####.######", "##.######.#..#.#############", "##.######.###########.######", "#######.#######.#..###.#.###", "#####..#######.#####.#.###.#", "#..#################.#.####.", "##.######..#.#####.######.##", "..#.#############.#.##....#.", "....##..##..#.#####.#.###.##", "##.#########...#..#.#.######", "##.#..###########..#..####.#", "#.####.###.########.########", "#####.#########.##.##.######", ".##.####..###.###...######.#"};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 88;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> target = {"...##.##...", ".#........#", "#.......###", "###..##....", ".....###.##", ".##...##..#", "#....#.##..", "#.#.....#..", "...##.....#", "...#.......", "..#.#....#.", "#.##..#....", "###.....##.", "#.#.#..#...", "#.#..####.#", ".......##..", "....####.#.", "........#..", "..##.#...##", "...#.###..#", ".#.......#.", "..#..##....", "#...##...#.", "#..#.#.....", ".##.#.#....", "##...#.##..", "##.........", "..#.#..##..", ".#.........", ".#.##......", "....#...#..", ".#.#.##....", "##...##...."};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 70;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> target = {"##.#..###.", "####..##.#", "###.######", "##..#####.", "#####..##.", "##..##.#..", ".##.#####.", "#.#.##.#..", "#########.", "##...#...#", "...##.#...", "##..##....", "..########", "##.#..###.", "#.#.#.....", "#..#.####.", "####..##.#", "..#.######", "##...#.###", "#...#.#.##", "#.#...#.#.", "#..###.###"};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 49;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 184;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> target = {"....#.#####.....##.#..##...##.#", "........#.#........#.##...##...", "#.##.##.#.......##..#....##....", "#.#........#..##..#...#...#....", "..#..#..#.###.#.......#........", ".......#..#....#.##.#.......#..", "#..#..##...##.#.....#####.#.##.", "#.#.....###...#..#.#..#..#.##..", "#.##.#..#.#.......#.##..#.#.#..", ".##.....#...#..#.###...#.#.#...", "...##......###..##...#........."};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 67;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> target = {"...", "...", "...", "...", "...", "...", "#..", "...", "...", "...", ".#.", "...", "#..", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "...", "#..", "#..", "...", "#..", "...", "...", "...", "...", "...", "#..", "...", "..."};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 46;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> target = {"##.####.##.", "..####.####", ".....#...#.", "#.####.####", "...##.#..##", "#########.#", "#..#.#..###", "#.#.#.#..##", ".##.##...##", "###.#...#.#", "##..#######", "#..########", ".#...######", ".####.#####", "#..#..###.#", "##.#.##.##.", "########..#", "###..###.##", "###..##...#", "#.####.#.##"};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 46;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 103;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 102;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> target = {"..##.##.", "#.#.#...", ".#..#...", "#..#...#", "..#..#..", "....#..#", "#.....#.", ".#.##.##", "..##..#.", ".##....#", "...#....", "..#.#.##", ".#......", "........", "....##.."};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 27;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 99;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> target = {"##..#....##...#....#..........#..#..#..#.#...####.", "...##..#...#.#.....#.........#....##.........##.#.", "............#..#...#...#........#.........#.#.....", "....#..##........##..#..#.....#..#.##.......#.#...", "..#.....#...##......#......###..#.#......#.#.#.##.", "....#....#...##.......#.#........#.##..##......#..", ".#..#....##....#.#..##.....#.................#....", ".#.#........#.#.......#..###.......#.....#....##..", "#..........##.......##.#.#.#..#............#.#.##.", ".....##...#.#.#.##...#.......#.###..#..#......#.#.", ".#.........#.....#..##.#...#.................#....", "....##..#.....#...#..###.......##.##............##", "...#...#..#..#...##....#...##.###..............#..", ".#..##........#...#..#..####......#.#.###.........", "....#.#.#......#...#.#....#.##..#................#", "#..#..............#...#......#....####..#.#.......", "..#...#....#..#.....#..........#....#....#.......#", ".........#.....#..#.##.....#...#...#........#..###", ".#........#...........#.###.............#...#.#..."};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 160;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> target = {"#.#####.", "#..#####", "#.#.##.#"};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> target = {"###", "###", "###", ".##", "##.", "###", "###", "###", "#.#", ".##", "###", "###", "###", "###", "###", "###", "###", "#..", "###", "###", "##.", ".##", "###", "###", ".##", "###", ".##", "#.#", "###", "###", ".##", "###", "###", ".##", ".##", "##.", "..#"};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> target = {"...........................#......................", "..................................................", ".....#.............................#....#.........", ".........................##.......................", "..................................................", ".....................#............................", "..................................................", "..................................................", "..................................................", "....................#............................."};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 230;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> target = {"###############.##########.#####.#.#", "###############.####################", "######.########################.####", "##########.#######################.#", "#######.#######################.####"};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 129;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 104;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 26;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 90;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> target = {"...#.#...#...#....", ".............#..#.", "#.#......#........", ".#................", ".................."};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 143;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 195;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 47;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 210;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> target = {".....#..#.#....#.", "....#...#........", "...##.......#....", ".#........#....#.", "#......#.........", "#.#..##..........", ".#...#...........", "...........#.....", "#.......#......#.", ".......#........#", ".##...#...#....#.", "#...........#....", "#.....#..#.###...", ".........#.......", "...#.#.........#.", "...##............", "..........#..##..", "#..##.....##..##."};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 41;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 44;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> target = {"...#............#.#.", "....#......##.......", ".#..........#....#..", ".....#..........##..", "#...#.#.........##..", "#.#...#......##...#.", ".......#....#.....#.", ".#....#............#", "...##......#........", "..##.#........#...##", "......#.....##.....#", "#.........#......###", "..###........##.#..#", "#......#.##......###", "#..##.##...##.#.#.#.", ".#..#............##.", "#.#......#.......#..", "...##.#.#..#..##.#.#", "..##.....#....##....", "#.#..#.#..##.##.#...", ".......#.#......#..#", ".#.#....#...#...#...", "....##.#.##........#", ".#....#..#.##.......", ".#.#.#.....#.#......", "......#.......#...#.", ".....#...#..##..#..#", "...#.#....#....#....", "#........##...#.....", "##.#...#.#..........", "....#......#.#.#...#"};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 108;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> target = {"#.#..#.#....#..##...####", "......#####.#.#.#...##.."};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> target = {"....##..#..#..........#..#..##...#.", "....#.#.#.###...#.#####..#..#.....#", ".#.#.....#.###...#........##.##.#..", "...#......#.#####..........#.......", "..##.........#...###..#...####..#.#", "#....#.....##..#.##..#......##.#..#"};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 40;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> target = {"#.#.#..######..#########", "###.##.#.#.#.#.###.###.#", ".###.###############.###", "##..###....#######..###.", ".######.######....#.##.#", "..####.#############..#.", "#.#.############.#####.#", "#.#.####.#########.#...#", "#.######.##.#.#....##.#.", "###..#.#######..##..#.##", "#.#..#.#.##.#.##.####.##"};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 52;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> target = {"...............................", "...............................", "...............................", "...............................", "...............................", "...............................", "...............................", "...............................", "...............................", "...............................", "...............................", "...............................", "...............................", "...............................", "...............................", "...............................", "...............................", "...............................", "...............................", "...............................", "...............................", ".#.............................", "...............................", "...............................", "...............................", "...............................", "...............................", "...............................", "...............................", "...............................", "...............................", "...............................", "...............................", "...............................", "...............................", "...............................", "...............................", "...............................", "...............................", "..............................."};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> target = {"...................................", "...................................", "...................................", "...................................", "...................................", "...................................", "...................................", "...................................", "...................................", "...................................", "...................................", "...................................", "...................................", "...................................", "...................................", "...................................", "...................................", "...................................", "...................................", "...................................", "..............#....................", "..............#....................", "..............#....................", "..............#....................", "..............#....................", "..............#....................", "..............#....................", "..............#....................", "..............#....................", "..............#....................", "..............#....................", "...................................", "...................................", "...................................", "...................................", "...................................", "...................................", "...................................", "....###########....................", "..................................."};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    vector<string> target = {"...................................", "....................#######........", "...................................", "...................................", "......................###..#.......", "...........................#.......", ".#.........................#.......", "...........................#.......", ".....#.....................#.......", ".....#.....................#.......", ".....#....#.....#..........#.......", ".....#....#.....#..........#.......", ".....#....#................#.......", ".....#.#..#................#.......", ".....#.#..#................#.......", ".....#.#..#................#.......", ".....#.#..#................#.......", ".....#.#..#................#.......", ".....#.#..#................#.......", ".....#.#..#................#.......", ".....#.#...................#.......", ".......#...................#.......", "...........................#.......", "...................................", "...................................", ".............################......", "...................................", "...................................", "...................................", "..................................."};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 24;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 24;
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    vector<string> target = {"..............................................", "..............................................", "..............................................", "................................#.............", "................................#.............", "................................#.............", "..........................#.....#.............", "................................#.............", "................................#.............", "................................#.............", "................................#.............", "................................#.............", "................................#.............", "...............#................#............#", "...............#................#............#", "...............#................#............#", "...............#................#............#", "...............#................#............#", "...............#................#............#", "...............#................#............#", "...............#................#............#", "...............#...######################....#", "...............#................#............#", "...............#................#............#", "...............#................#............#", "......########################################", "...............#.....######.....#............#", "...............#................#............#", "...............#................#............#", "...............#................#............#", "...............#............#########........#", "...............#................#............#", "...............#................#............#", "...............#................#............#", ".............####################............#", "...............#................#......#####.#", "...............#................#............#", "...............#................#............#", "...............#................#............#", "...............#................#............#", "................................#.............", "......................#.........#.............", "......................#.........#.............", "......................#.........#............."};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    vector<string> target = {"................................................", "....................................############", "................................................", "................................................", "................................................", "................................................", ".##################.............................", "................................................", "................................................", "................................................", "................................................", "................................................", "................................................", "................................................", "...................###################..........", "................................................", "......#.........................................", "......#.........................................", "......#..........##########################.....", "......#.........................................", "......#.........................................", "......#.........................................", "......#.........................................", "......#.........................................", "......#.........................................", "......#.........................................", "......#.........................................", "......#.........................................", "................................................", "................................................", "................................................", "................................................", "................................................", "................................................", "................................................"};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    vector<string> target = {".................................................", "............................#########............", ".............................#...................", ".............................#...................", "...#####################.....#...................", "........#............#.......#...................", "........#............#.......#...................", "........#............#.......#...#...............", "........#....#.......#.......#...................", "........#....#....####################...........", ".............#.......#.......#...................", ".............#.......#.......#...................", "..#..#.......#.......#.......#...................", "..##############################.................", "..#..........#.#.....#.......#...............#...", "..#..........#.#.....#.......#...............#...", "..#..........#.#.....#...#######################.", "..#..........#.#.....#.......#...............#...", "..#............#.....#.......#...#...........#...", "..#............#.....#.......#...#...........#...", "..#............#.....#.......#...#...........#...", "..#............#.....#.......#...#...........#...", "..#............#.....#.......#...#.......#...#...", "..#............#.....#.......#...#.......#...#...", "..#............#.....#.......#...#.......#...#...", "..#............#.....#.......#...#.......#...#...", "...............#.............#...#.......#...#...", "...............#.................#.......#...#...", "...............#.........................#...#...", "...............#.................................", "...............#.................................", "...............#................................."};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 23;
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 16;
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    vector<string> target = {".................................................", "...........###################################...", "..................................###............", ".......................#........#..#.............", ".......................#........###############..", "................................#..#..........#..", "......................######################..#..", "........#########################..#..........#..", "...........................#....#..#..........#..", "...........................#....#..#..........#..", "...........................#....#..#..........#..", "...........................#....#..#..........#..", "...........................#....#..#..........#..", "...........................#....#..#..........#..", "...........................#....#..#..........#..", "...................####################.......#..", "...........................#....#..#.......#..#..", "...........................#....#..#.......#..#..", "........................##############.....#..#..", "...........................#....#..#.......#.....", "...........................#....#..#.......#.....", "...........................#....#..#.......#.....", "...........................#....#..#.......#.....", "...........................#....#..#.......#.....", "...........................#....#..#.......#.....", "...........................#....#................", "...........#################################.....", "...........................#....#................", "...........................#.....................", "...........................#....................."};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 25;
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 15;
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 18;
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 11;
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 17;
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 22;
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    vector<string> target = {"........................................", "........................................", "........................................", "........................................", "........................................", "........................................", "................#.......................", "................#.......................", "........................................", "........................................", "......................................#.", "......................................#.", "......................................#.", "......................................#.", "......................................#.", "......................................#.", "......................................#.", "......................................#.", "...................................#..#.", ".........#.........................#..#.", "...................................#..#.", "...................................#..#.", "...................................#..#.", "...................................#..#.", "......................................#.", "......................................#.", "......................................#.", "......................................#.", "........................................", "........................................", "..............##########################", "........................................", "........................................", "........................................"};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test103() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 26;
    if(result == expected) {
        cout << "Test Case 103: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 103: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test104() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 104: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 104: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test105() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 105: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 105: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test106() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 29;
    if(result == expected) {
        cout << "Test Case 106: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 106: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test107() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 107: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 107: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test108() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 108: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 108: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test109() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 109: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 109: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test110() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 110: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 110: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test111() {
    vector<string> target = {".................................................", ".................................................", ".................................................", ".................................................", ".................................................", ".................................................", ".................................................", ".................................................", "....################............#############....", "............................................#....", "............................................#....", "............................................#....", "..............................###############....", "............................................#....", "............................................#....", "............................................#....", "..........................................#.#....", "................................#.........#.#....", "................................#................", "................................#................", "................................#................", "................................#........#.......", "................................#........#.......", "................................#........#.......", "..#.............................#........#.......", "..#.............................#........#.......", "..#.............................#........#.......", "..#.............................#........#.......", "..#.............................#........#.......", "..#.............................#........#.......", "..#.............................#........#.......", "..#.............................#........#.......", "..#.............................#........#.......", "..#.............................#........#.......", "................................#........#.......", ".................................................", ".................................................", ".................................................", ".................................................", "................................................."};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 8;
    if(result == expected) {
        cout << "Test Case 111: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 111: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test112() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 112: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 112: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test113() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 19;
    if(result == expected) {
        cout << "Test Case 113: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 113: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test114() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 25;
    if(result == expected) {
        cout << "Test Case 114: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 114: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test115() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 18;
    if(result == expected) {
        cout << "Test Case 115: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 115: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test116() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 116: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 116: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test117() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 24;
    if(result == expected) {
        cout << "Test Case 117: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 117: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test118() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 28;
    if(result == expected) {
        cout << "Test Case 118: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 118: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test119() {
    vector<string> target = {".......................................", ".......................................", ".................#######...............", ".......................................", ".......................................", ".......................................", ".......................................", ".......................................", ".......................................", ".......................................", ".......................................", "................................#......", "................................#......", "................................#......", "................................#......", "................................#......", "........................#.......#......", "........................#..............", "........................#..............", "........................#..............", "........................#..............", "........................#..............", "........................#..............", "........................#..............", "........................#..............", "........................#..............", "............#...........#..............", "............#...........#..............", "............#...........#..............", "............#...........#..............", "............#...........#..............", "............#...........#..............", "............#...........#..............", "............#...........#..............", "............#...........#..............", "............#...........#..............", "............#...........#..............", "............#...........#..............", "............#...........#..............", "............#...........#..............", "............#...........#..............", "........................#..............", "........................#..............", "........................#..............", "........................#..............", "........................#..............", "........................#.............."};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 119: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 119: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test120() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 120: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 120: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test121() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 12;
    if(result == expected) {
        cout << "Test Case 121: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 121: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test122() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 7;
    if(result == expected) {
        cout << "Test Case 122: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 122: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test123() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 123: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 123: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test124() {
    vector<string> target = {};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 124: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 124: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test125() {
    vector<string> target = {"...#.", "####.", ".#.#.", ".####", ".#..."};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 125: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 125: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test126() {
    vector<string> target = {"##.#", "...#", "#...", "#.##"};
    BoardPainting* pObj = new BoardPainting();
    clock_t start = clock();
    int result = pObj->minimalSteps(target);
    clock_t end = clock();
    delete pObj;
    int expected = 4;
    if(result == expected) {
        cout << "Test Case 126: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 126: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    test103() == 0 ? ++passed : ++failed;
    test104() == 0 ? ++passed : ++failed;
    test105() == 0 ? ++passed : ++failed;
    test106() == 0 ? ++passed : ++failed;
    test107() == 0 ? ++passed : ++failed;
    test108() == 0 ? ++passed : ++failed;
    test109() == 0 ? ++passed : ++failed;
    test110() == 0 ? ++passed : ++failed;
    test111() == 0 ? ++passed : ++failed;
    test112() == 0 ? ++passed : ++failed;
    test113() == 0 ? ++passed : ++failed;
    test114() == 0 ? ++passed : ++failed;
    test115() == 0 ? ++passed : ++failed;
    test116() == 0 ? ++passed : ++failed;
    test117() == 0 ? ++passed : ++failed;
    test118() == 0 ? ++passed : ++failed;
    test119() == 0 ? ++passed : ++failed;
    test120() == 0 ? ++passed : ++failed;
    test121() == 0 ? ++passed : ++failed;
    test122() == 0 ? ++passed : ++failed;
    test123() == 0 ? ++passed : ++failed;
    test124() == 0 ? ++passed : ++failed;
    test125() == 0 ? ++passed : ++failed;
    test126() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=22714443&rd=15497&pm=12418
********************************************************************************
//  SRM 577 (C) 
 
#include <cstdio> 
#include <cstdlib> 
#include <cstring> 
#include <cmath> 
#include <cassert> 
#include <iostream> 
#include <sstream> 
#include <string> 
#include <vector> 
#include <queue> 
#include <set> 
#include <map> 
#include <utility> 
#include <numeric> 
#include <algorithm> 
#include <bitset> 
#include <complex> 
 
using namespace std; 
 
typedef unsigned uint; 
typedef long long Int; 
typedef vector<int> vint; 
typedef pair<int,int> pint; 
#define mp make_pair 
 
template<class T> void pv(T a, T b) { for (T i = a; i != b; ++i) cout << *i << " "; cout << endl; } 
template<class T> void chmin(T &t, T f) { if (t > f) t = f; } 
template<class T> void chmax(T &t, T f) { if (t < f) t = f; } 
 
namespace BM { 
  #define MAXN0 100010 
  #define MAXN1 100010 
  #define MAXM  100010 
  int n0, n1, m, ptr[MAXN0], next[MAXM], zu[MAXM]; 
  int to[MAXN0], fr[MAXN1], us[MAXN1], total; 
  int lev[MAXN0], que[MAXN0], *qb, *qe; 
  inline void init(int _n0, int _n1) { 
    n0 = _n0; n1 = _n1; m = 0; memset(ptr, ~0, n0 << 2); 
  } 
  inline void ae(int u, int v) { 
    next[m] = ptr[u]; ptr[u] = m; zu[m] = v; ++m; 
  } 
  int augment(int u) { 
    int i, v, w; 
    us[u] = total; 
    for (i = ptr[u]; ~i; i = next[i]) { 
      if (!~(w = fr[v = zu[i]]) || us[w] != total && lev[u] < lev[w] && augment(w)) { 
        to[u] = v; fr[v] = u; return 1; 
      } 
    } 
    return 0; 
  } 
  int hopk() { 
    int f, i, u, w; 
    memset(to, ~0, n0 << 2); memset(fr, ~0, n1 << 2); memset(us, ~0, n1 << 2); 
    for (total = 0; ; total += f) { 
      qb = qe = que; 
      memset(lev, ~0, n0 << 2); 
      for (u = 0; u < n0; ++u) if (!~to[u]) lev[*qe++ = u] = 0; 
      for (; qb != qe; ) for (i = ptr[u = *qb++]; ~i; i = next[i]) { 
        if (~(w = fr[zu[i]]) && !~lev[w]) lev[*qe++ = w] = lev[u] + 1; 
      } 
      for (f = 0, u = 0; u < n0; ++u) if (!~to[u]) f += augment(u); 
      if (!f) return total; 
    } 
  } 
} 
 
int M, N; 
int A[110][110]; 
int V0, V1; 
int ids[110][110]; 
 
struct BoardPainting { 
   
  int minimalSteps(vector <string> target) { 
    int x, y; 
    int u0, v0, u1, v1; 
     
    M = target.size(); 
    N = target[0].size(); 
    for (x = 0; x < M; ++x) for (y = 0; y < N; ++y) { 
      A[x][y] = (target[x][y] == '#'); 
    } 
     
    int cnt = 0; 
    for (x = 0; x < M; ++x) for (y = 0; y < N; ++y) { 
      if (A[x][y]) { 
        ++cnt; 
      } 
    } 
     
    V0 = V1 = 0; 
    memset(ids, ~0, sizeof(ids)); 
    for (x = 0; x < M; ++x) for (y = 0; y < N; ++y) { 
      if (x && A[x - 1][y] && A[x][y]) { 
        ids[(x - 1) + x][y + y] = V0++; 
      } 
      if (y && A[x][y - 1] && A[x][y]) { 
        ids[x + x][(y - 1) + y] = V1++; 
      } 
    } 
     
    BM::init(V0, V1); 
    for (x = 0; x < M; ++x) for (y = 0; y < N; ++y) { 
      if (A[x][y]) { 
        u0 = x ? ids[(x - 1) + x][y + y] : -1; 
        v0 = ids[x + (x + 1)][y + y]; 
        u1 = y ? ids[x + x][(y - 1) + y] : -1; 
        v1 = ids[x + x][y + (y + 1)]; 
        if (~u0 && ~u1) BM::ae(u0, u1); 
        if (~u0 && ~v1) BM::ae(u0, v1); 
        if (~v0 && ~u1) BM::ae(v0, u1); 
        if (~v0 && ~v1) BM::ae(v0, v1); 
      } 
    } 
    int res = BM::hopk(); 
     
    int ans = cnt - (V0 + V1 - res); 
    return ans; 
     
  } 
   
};

********************************************************************************
*******************************************************************************/