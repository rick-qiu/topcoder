/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=4660
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class StackingBoxes {
public:
    int highestStack(vector<string> weight, vector<string> canCarry);
};

int StackingBoxes::highestStack(vector<string> weight, vector<string> canCarry) {
    int ret;
    return ret;
}


int test0() {
    vector<string> weight = {"10 20 30"};
    vector<string> canCarry = {"11", "100 10"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> weight = {"11 20 30"};
    vector<string> canCarry = {"11", "100 10"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> weight = {"10", "20", "91"};
    vector<string> canCarry = {"11", "100 10"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> weight = {"100000"};
    vector<string> canCarry = {"1000000000"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> weight = {"100 100", "1000 100"};
    vector<string> canCarry = {"90", "91 92 93"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> weight = {"200 200 600 700 400"};
    vector<string> canCarry = {"1000 20 150 700 10"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> weight = {"100 200 300 400 500"};
    vector<string> canCarry = {"190 20 30 40 99"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> weight = {"74819 20810 27876 36611 696 38465 9782 41842", "49218 14929"};
    vector<string> canCarry = {"79615536 563543125 483281498 966450050 571186952", "5428938 482746945 513664136 792722733 900680467"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> weight = {"49935 56728 42447 52957 42196 64451 23077 96881", "3049 76785 91365 86197 3570 38448 87300 47036", "40576 75849 70692 83327 60065 49889 38890 68211", "26558"};
    vector<string> canCarry = {"76832 95008 787 66929 62477 55607 99175 91114", "85069 41963 38583 9990 899 19815 32378 7742", "75061 3763 83023 66632 50715 47777 83143", "46769 79766"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 6;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> weight = {"7976 11870 81678 7359 42058 87039 32212 61435", "83007 18385 68255 70360 63852 82093 48411 93386", "40587 99355 49112 26022 16971 53511 30129 65906", "11621 50556 85390 35823 18047 75405 31162 36324", "74045 69667 42392 52152 46576 84200 58435 27666", "10049 87759 36964 82507 79323 34948 26701"};
    vector<string> canCarry = {"72986 433139 179372 123127 366499 183472", "332646 189999 420411 468338 207420 235871", "32436 403795 201479 19223 400985 208481 62147", "321221 304760 322571 359298 324784 152131", "330901 290158 29967 159910 25855 215090 177147", "18087 237724 237882 8880 104930 221340 385316", "264583 380539 417645 203549 34585 402021", "266142 126165"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 19;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> weight = {"100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100 100 100 100 100 100 100 100 100", "100 100 100 100"};
    vector<string> canCarry = {"4700 4700 4700 4700 4700 4700 4700 4700 4700", "4700 4700 4700 4700 4700 4700 4700 4700 4700", "4700 4700 4700 4700 4700 4700 4700 4700 4700", "4700 4700 4700 4700 4700 4700 4700 4700 4700", "4700 4700 4700 4700 4700 4700 4700 4700 4700", "4700 4700 4700 4700 4700 4700 4700 4700 4700", "4700 4700 4700 4700 4700 4700 4700 4700 4700", "4700 4700 4700 4700 4700 4700 4700 4700 4700", "4700 4700 4700 4700 4700 4700 4700 4700 4700", "4700 4700 4700 4700 4700 4700 4700 4700 4700", "4700 4700 4700 4700 4700 4700 4700 4700 4700", "4700"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 48;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> weight = {"5846 51581 82673 67561 25671 84621 15270 15348", "71166 55137 94135 58784 534 58798 42879 19662", "6942 49677 47609 66882 68180 12258 9725 74749", "80982 81813 75430 21250 30100 44033 94359 97358", "48418 28741 39926 44960 22777 29382 98305 89047", "71843 92229 49282 61063 31354 90188 82271 64839", "72407 2367 64855 58264 18025 95788 29604 33442", "31346 86546 76976 60010 28356 9694 13395 79141", "43765 35960 66663 9731 57524 1017 66006 26400", "97956 15806 98380 58914 1666 75189 18794 38690", "35838 46832 44527 25014 37735 27004 98317 38919", "4176 46857 68368 4945 50032 22922 34463 69213", "74088 48454 48261 96319 37326 27562 14554 7568", "59034 96940 98022 35262 19845 54707 57622 262", "15616 25977 60011 25525 83446 8633 33049 92383", "8452 95137 29033 30180 64235 78840 84459 29219", "65644 39605 15318 98646 31698 72416 99133 32482", "54121 27537 95844 7685 18257 19761 3452 40618", "42002 70404 58833 31737 89807 30930 68952 72176", "91031 81879 33084 84778 13914 91884 29171 24289", "88378 41974 77222 13394 15690 93794 7736 83367", "41335 61293 30462 1413 26262 61743 1451 40086", "94205 12691 93598 76280 8236 69583 11695 90392", "93848 3102 35580 68687 35638 30755 92115 64744", "52901 95571 41347 31438 17576 3381 91797 20127", "83283 47780 3397 94185 22549 51778 95781 76635", "69611 70832 19707 98368 41117 4380 33348 94210", "61217 11146 96283 79304 68097 9147 23256 88211", "33639 79478 99139 28456 17419 48821 32998 43051", "22846 96656 35181 75787 82694 4981 8542 36643", "27887 71182 31791 42933 70301 13457 72611 35340", "24184 52412"};
    vector<string> canCarry = {"459033 406392 265920 17113 454673 391408", "408943 228627 192932 224695 340279 14557", "313634 162527 75854 489800 194905 123290", "302737 260463 19535 93337 391114 369292 24029", "345756 291023 249790 84532 489969 188141", "215919 417252 385165 41553 39337 318144 10212", "475286 313950 494138 384270 61312 451758", "87670 347525 442140 200151 443948 141319", "251589 87883 333977 299637 18893 329224 314585", "339485 388847 63036 253614 293622 15298 117084", "99734 486041 459706 441703 192665 144238", "396219 245237 207602 127994 417258 114259", "142885 407919 422301 158723 304053 414652", "218686 98734 118339 164203 216434 266655", "35455 61778 147620 144230 83918 489982 77151", "69548 314114 165608 361201 485445 27962 35391", "79734 209726 258635 67901 468188 217406 264280", "99619 397386 263928 174013 264946 214525", "35400 441332 7530 414131 156901 30053 99667", "457580 70993 65754 125230 360426 195287 339341", "69652 272564 317000 237784 255607 103726", "365974 157956 132019 324007 399336 373625", "394196 413724 289137 111655 327576 5135 118760", "31045 415481 328168 268550 267741 142953", "103582 2155 66853 252551 27126 274934 421124", "43647 288379 189824 78068 454196 428052 413007", "143962 308187 118894 286691 247987 207618", "101576 434542 105709 490252 181891 234159", "347321 186842 431748 491812 197102 364547", "130987 43038 211126 174733 253855 376696", "128758 315593 88317 111901 258753 211010", "439887 307503 2819 473632 364581 33426 287973", "429703 358729 463333 193993 318782 349323", "217947 250073 339870 173073 368242 360716", "350993 379190 321650 133872 270930 78397", "733 33833 75346 291492 491233 284192 272818", "499122 153803 3578 105780 430509 91223 220076", "98275 117062 132804 480465 54699 42737 313520", "397680 304840 248043 297933 4732 175683"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 51;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> weight = {"68790 65171 6366 26183 15996 12837 8533 50724", "97645 91149 41923 92487 23651 61568 26668 38504", "4339 60052 82538 66398 36865 48324 73851 90035", "87611 60841 48768 17510 92625 66310 96560 90404", "21968 87257 12343 78692 8542 94606 1715 29541", "79302 94513 19361 76143 66754 69105 22919 39864", "85616 25045 56429 84993 6404 23017 39891 35271", "56419 22916 17460 87765 79337 23180 92030 22795", "27991 13430 89403 25044 15848 41752 14098 50585", "44634 46296 10385 84134 66583 67631 8184 74084", "76093 96249 85938 36955 45006 33177 93558 67447", "32916 284 23455 70851 91732 86477 66734 11743", "85901 21802 67110 49276 13117 46872 79696 82692", "3713 55913 5220 55033 40898 72520 77723 26111", "92255 11114 44497 84960 56323 2115 83977 86457", "5609 52685 44786 83434 24880 31141 40215 79706", "42992 5313 26862 20756 59930 94857 83331 69423", "61509 75422 5478 67631 14807 46441 93851 971", "54792 99985 34383 78320 19264 76046 92316 67188", "43229 35771 1464 54719 77826 84775 65133 84173", "92031 77233 80551 58553 66554 78063 17893 50519", "25687 47656 65344 56903 79188 90500 27423 39899", "34481 21519 48336 52673 52498 11585 51639 31513", "86221 17957 95023 70387 54364 94185 11210 76893", "64694 60723 54137 65745 57611 77026 77261 62229", "1186 90698 92872 8245 97624 66848 12165 92353", "17805 27714 42124 78577 8615 46810 39793 87183", "27050 75014 14618 4983 23515 96729 53398 50366", "79983 43145 47193 21840 52976 79511 15515 9400", "20226 313 5499 60566 14955 40349 22028 77383", "44448 24116 17901 23102 90259 39298 44958 86166", "8764 75682 29602 56759 69195 50737 25648 31059", "24299 37390 76784 50903 38757 10642 52378 24553", "21112 51059 12135 70925 42751 48205 87607 14149", "72265 91932 87685 53916 46514 85810 99192 35687", "48424 8845 32390 17541 39258 19193 45009 14423", "60535 4147 24842 88140 60448 45901 84312 17769", "6159 68947 44211 89344"};
    vector<string> canCarry = {"382975 494938 133697 419197 31326 414527", "190327 357036 253962 265771 429728 208394", "427659 107016 369447 293425 240278 253279", "51196 424729 245990 27213 451742 215953 416733", "329896 380444 468463 12966 119525 158920", "155481 242607 293820 143177 396973 57804", "366777 329082 235896 105746 133569 166022", "356233 218803 82047 409355 297569 187583", "466412 309937 219926 308216 418581 210725", "403760 261562 343955 180653 106571 196591", "297826 446794 278554 186783 485783 128995", "405755 333704 95156 499458 381547 77537 188602", "466982 178292 4438 310812 71512 106255 375625", "296309 318393 462479 47044 217172 97843 328168", "344866 454217 353237 496066 129273 350200", "416891 374 89786 317782 19392 101568 358541", "133585 417458 152410 19815 94816 239135 272020", "439054 89840 119968 189752 407545 159226", "308441 14020 100181 144012 150651 300609", "403049 84812 27601 51885 499700 363892 252587", "370716 81824 107716 332030 98541 331283 470498", "59622 193694 228472 166795 155986 264021", "381053 337293 202203 335065 279244 215586", "126458 64131 97974 480968 347029 161561 494463", "352221 88330 347427 264801 144316 413375", "292324 463456 324538 342684 68300 443945", "139548 265223 387121 170759 430780 376229", "249119 483573 149326 393463 89564 470208", "467478 323418 294843 126338 78982 276793", "171893 226090 227289 401526 284642 390490", "302691 396266 182163 347651 241304 226711", "459078 11830 285904 24809 256823 101764 394513", "1812 409035 154416 217547 124627 458448 90643", "163992 277192 232344 202424 98293 496692", "19426 380521 122392 134387 295282 263798", "380779 474480 401996 80271 423771 230352", "167133 195008 180655 141188 310802 155314", "424688 485267 119798 274092 199430 381096", "334340 208708 360125 434871 392482 313330", "342226 314512 496873 106868 300821 162176", "382493 483136 205485 203996 366893 318582", "393057 254274 403978 379321 42767 399231", "204953 2492 139526 467687 121582 124589 335700", "408186 282582 450256 865 461176 292779 171693", "75622 437126 118315 327643 124933 300508", "287444 114876 274328 367030 249828 232547", "21814 196831 96158 212080 480742 473003 88824", "377545 137267 480920 103148"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 53;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> weight = {"98257 28314 17133 32701 78147 81378 99227 37679", "65942 76966 52039 7699 30405 94169 46092 19305", "25767 4376 39891 79020"};
    vector<string> canCarry = {"433711 168440 131094 492437 239510 28233", "446650 33089 159921 112269 419692 440476", "317211 478973 169672 46258 285114 362578", "152805 376832"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> weight = {"71460 32938 62 5743 35622 40911 26302 78145 59786", "335 48318 95141 64644 77029 28711 60258 65960", "29546 95730 11545 23304 17571 86815 3288 54014", "47389 26069 32457 83100 12772 59841 49808 79705", "67476 90298 44612 7131 63207 57898 16198 7945", "52069 81769 62554 69664 52332 24009 30959 19320", "79148 15282 61045 23768 54185 28573 69231 9623", "46186 43652 94087 59720 18474 86385 25269 85694", "53149 3829 61216 76272 84918 61438 79189 75448", "279 71942 8069 78611 53216 13802 8526 58556 76125", "13694 65636 28395 32636 4701 98720 12853 74902", "31192 92109 47340 12624 61636 36291 20651 96057", "87583 99965"};
    vector<string> canCarry = {"479557 464467 431439 338496 446084 356247", "53129 410083 132033 30635 240393 391978 40334", "211102 397457 490839 109300 339469 281960", "249772 446747 469377 455098 5359 197072 218182", "206981 483128 304059 358403 450009 119821", "366487 120694 178547 417784 17777 166464", "307912 80651 228465 4389 450287 224054 181745", "17801 472992 211709 117559 8570 223515 462694", "334160 234813 321628 208996 176238 26832", "200902 422164 353990 55694 98233 166458 120453", "53192 142676 126554 165690 160201 218126", "58056 82581 41535 335775 207424 444957 37391", "71815 320923 440818 77531 410647 80976 106746", "63653 131020 260530 227245 38378 327704 294077", "50213 357143 76610 334945 72826 121568 178501", "101103"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 34;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> weight = {"40785 36348 67363 76499 19040 92472 41147 40720", "59524 57505 33121 71006 64078 70558 27658 93897", "18542 51820 23708 22503 21388 91954 23118 2198", "44174 54188 58414 66372 64673 19918 92886 98602", "19712 72986 16566 61822 23942 38316 99929 67528", "38043 34876 22562 94601 76004 17392 3985 55970", "4241 42772 37923 96588 71849 46752 13243 53705", "11648 61222 89828 59271 45993 10373 30483 11503", "70951 55531 34521 8564 24848 15972 7422 65031", "96084 53280 57728 27395 27040 53700 79764 30074", "95131 97414 75551 11674 99121 14143 72977 63439", "81081 30624 4922 80356 33614 27312 74911 1918", "18645 75346 80964 70247"};
    vector<string> canCarry = {"273237 208038 84293 56293 113136 270046 23030", "45846 412544 178587 241558 300982 118997", "213515 336629 227656 172753 181249 24827", "41890 182628 162834 176744 381635 121921", "471707 329844 341412 65694 477464 306342", "53481 161459 256787 492920 344898 151907", "401853 257706 479881 385004 263752 244921", "204981 201384 254231 408211 28113 63089 276604", "124872 252202 170526 146724 478837 328506", "98837 99333 238716 195666 7405 489120 257609", "5933 343427 397353 424685 265725 344903 64736", "80347 208225 26794 64236 132519 226256 209799", "76187 273902 308752 364657 126921 376305", "446493 346388 65593 445765 126566 81376 258715", "450704 374467 241640 148556 53421 174164", "184058 248713 235024 302218"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 30;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> weight = {"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1"};
    vector<string> canCarry = {"9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> weight = {"1 2 2 2 3 2 3 1 2 3 2 3 3 3 1 2 2 1 2 1 2 1 1", "1 3 2 1 2 2 2 3 3 3 3 3 1 2 1 1 1 3 2 3 2 3 3", "3 1 2 1 1 1 2 1 1 3 3 1 2 3 2 3 3 3 1 1 1 3 1", "1 3 2 3 1 2 3 1 1 1 3 2 1 2 1 2 2 2 1 3 1 2 3", "3 3 1 2 2 2 3 1 2 1 3 1 3 1 2 3 1 1 1 2 2 1 3", "3 3 1 1 2 2 2 1 2 3 1 3 2 2 3 1 3 2 1 2 1 3 2", "3 3 1 1 2 3 1 3 1 1 1 1 2 1 3 2 3 3 2 2 2 3 2", "1 3 3 1 2 1 3 1 3 1 2 2 3 3 2 3 3 3 1 2 2 2 3", "1 3 1 2 1 1 2 1 1 1 3 1 2 2 2 2 1 2 1 3 3 2 3", "3 1 2 1 3 2 1 3 1 1 2 1 3 1 1 2 1 2 2 3 2 1 2", "2 3 3 1 1 1 3 1 3 3 3 2 1 3 3 1 1 1 3 3 2 2 1", "3 3 2 1 2 3 2 2 2 1 3 1 2 2 2 1 2 3 1 3 1 1 3", "3 3 3 1 1 3 3 1 2 1 1 3 2 1 2 3 1 1 1 3 1 3 1", "2 2 3 3 1 2 2 2 3 3 3 2 2 1 1 2 2 1 2 2 3 3 3", "3 3 3 3 1 3 2 1 1 3 1 3 1 2 1 3 1 3 3 2 3 2 2", "2 3 2 2 1 3 3 2 2 3 3 1 1 3 3 3 1 2 3 3 2 1 2", "2 1 2 2 3 1 1 3 1 3 3 3 1 3 1 3 1 1 2 3 3 3 1", "2 2 2 1 1 3 3 2 2 2 3 2 2 3 1 1 3 3 3 3 1 3 3", "1 2 2 2 1 3 1 3 3 2 1 2 2 1 2 3 2 2 1 2 1 1 1", "2 3 3 2 2 1 2 2 2 1 1 3 3 3 3 1 1 2 2 2 1 1 2", "1 3 2 2 3 2 2 1 2 3 2 3 2 2 2 2 2 3 3 2 1 2 3", "2 3 1 2 3 3 3 2 3 1 1 3 3 1 3 1 2"};
    vector<string> canCarry = {"7 9 8 8 9 9 9 9 9 9 8 9 7 7 7 8 7 7 7 9 8", "8 8 8 9 7 8 7 7 7 8 8 9 7 9 9 8 8 7 8 9 8", "7 7 8 8 8 9 8 7 8 9 9 8 8 7 9 7 8 9 7 9 7", "7 8 8 9 8 8 9 7 9 8 8 9 7 9 8 9 7 8 9 9 9", "8 7 8 9 8 7 8 7 8 9 9 8 9 8 9 9 8 8 9 7 9", "8 7 7 7 8 8 9 8 9 7 7 8 7 9 7 9 7 7 8 8 9", "7 8 7 9 8 8 9 7 9 8 7 8 7 7 9 9 9 8 8 8 8", "7 9 8 9 7 7 8 9 8 9 9 7 8 9 9 8 8 8 9 8 8", "7 8 9 8 8 7 9 8 7 8 9 8 9 9 9 8 7 8 7 9 8", "9 9 8 7 7 7 8 9 9 8 8 8 7 8 7 8 8 9 9 7 7", "9 8 8 8 9 8 9 9 8 8 7 8 9 7 8 9 9 8 7 9 9", "9 9 9 7 7 8 8 7 9 8 8 8 7 7 7 8 7 9 8 7 8", "8 9 9 8 9 9 8 7 7 9 9 9 7 7 9 7 8 7 8 9 9", "9 9 9 9 9 9 7 7 8 8 7 9 8 7 8 7 8 9 7 7 7", "9 8 8 9 9 7 8 7 8 7 8 7 9 8 7 7 7 7 8 8 9", "9 9 8 7 8 9 8 9 9 9 9 8 7 8 7 7 9 8 8 9 8", "7 8 7 9 7 8 7 7 8 9 9 8 7 7 8 9 8 7 8 8 9", "8 8 9 7 9 9 8 9 9 7 8 8 9 8 7 9 8 9 7 7 8", "9 7 9 8 7 7 8 7 9 8 7 7 8 7 9 9 8 7 7 7 9", "8 7 9 8 8 9 9 9 9 8 7 9 8 9 9 8 8 7 8 7 7", "9 9 7 9 9 9 9 9 7 9 7 8 7 7 7 7 8 7 9 8 7", "8 7 8 7 9 9 9 8 8 7 7 9 9 7 7 9 9 7 8 8 9", "9 7 8 7 9 9 9 8 9 8 7 9 9 9 7 8 7 7 9 7 9", "8 7 9 8 7 7 8 9 9 7 8 9 9 9 8 7 9"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> weight = {"1 3 2 3 2 1 1 2 3 2 2 3 2 1 1 3 2 1 1 1 2 3 1", "2 2 3 3 2 1 3 2 2 2 2 1 1 3 1 3 1 3 1 1 3 2 2", "1 2 2 2 2 3 1 2 3 2 3 2 1 3 3 1 2 1 2 3 3 2 2", "2 2 3 3 3 3 3 1 1 3 2 2 1 3 1 2 3 1 3 1 1 2 3", "2 3 3 2 3 3 1 1 1 3 3 2 2 1 2 3 2 3 3 1 1 2 1", "3 1 2 3 2 2 1 1 1 2 3 2 2 1 1 2 3 2 3 3 3 1 2", "3 3 1 1 1 2 1 2 1 2 1 3 3 3 1 1 1 3 3 1 3 1 3", "3 1 3 3 3 1 3 2 2 1 2 2 2 3 1 2 3 2 2 3 1 2 1", "3 1 2 1 2 3 1 3 1 3 2 3 3 2 2 1 3 2 1 2 1 1 2", "2 3 2 1 1 1 1 3 2 2 1 1 1 2 3 2 1 3 2 1 3 3 3", "2 3 3 3 1 2 3 1 2 1 1 3 2 1 1 1 3 3 2 1 1 2 3", "2 1 3 2 3 3 2 2 3 3 3 2 1 3 3 2 3 2 2 3 1 3 2", "3 3 2 2 3 1 2 3 3 3 1 1 3 3 3 1 3 1 1 2 3 3 1", "3 3 2 1 1 2 1 2 1 3 3 3 3 3 1 2 1 2 2 1 1 3 1", "3 1 1 2 3 2 2 3 1 3 2 2 1 3 1 2 3 2 2 3 3 2 1", "2 3 1 3 3 2 3 3 2 1 2 3 2 2 1 1 2 1 2 3 3 1 3", "1 2 2 2 2 3 1 1 1 2 1 2 2 2 2 2 3 1 1 2 2 3 1", "2 2 3 1 2 1 1 1 1 3 3 1 3 2 2 1 1 2 2 3 2 2 1", "1 1 1 3 2 2 1 3 3 2 2 1 2 1 3 3 2 2 1 3 3 3 2", "3 2 3 3 1 2 2 2 3 3 2 1 1 1 1 1 1 2 1 2 1 3 2", "2 1 3 1 1 1 1 1 2 3 3 2 2 1 2 2 2 1 2 3 2 2 1", "2 1 3 1 2 2 3 1 3 1 3 1 2 1 1 2 2 1 2 3 1 1 2", "2 3 3 3 1 1 2 1 1 3 3 3 3 3 1 1 1 3 3 2 1 1 2", "2 3 3 2 2 1 2 3 1 3 1 3 2 2 1 1 2 3 2 2 3 2 1", "3 3 1 2 1 1 2 2 2 2 2 2 1 3 2 2 2 1 3 2 2 2 2", "2 1 2 1 1 2 2 3 3 2 1 3 2 1 2 1 2 2 2 1 2 2 3", "1 1 3 2 3 2 1 1 1 1 2 1 1 3 3 2 2 3 1 2 1 2 3", "3 2 2 1 1 2 2 3 1 1 1 2 1 3 2 2 3 2 3 2 2 1 2", "2 2 1 1 2 1 2 1 3 3 1 1 3 2 2 1 2 1 3 3 1 1 3", "3 3 3 2 2 3 1 1 3 1 3 2 1 3 1 1 1 3 1 3 2 3 2", "3 3 2 1 2 1 3 3 2 3 2 3 2 2 1 2 3 1 3 2 2 2 3", "3 3 1 3 1 3 1 1 3 1 1 1 3 2 1 2 1 3 3 2 1 3 2", "3 1 2 3 2 1 2 3 3 1 3 2 1 3 3 2 2 1 1 2 3 3 2", "2 3 2 1 2 1 1 3 2 2 2 2 2 3 1 1 3 3 1 3 3 3 2", "1 2 2 2 1 2 3 3 3 1 2 2 2 2 1 2 1 2 3 2 3 3 2", "1 3 1 3 2 2 1 1 2 1 2 3 1 2 3 1 2 2 2 1 3 1 2", "1 2 1 2 2 1 3 3 1 2 3 1 2 2 3 2 2 3 2 2 1 2 2", "3 1 2 1 2 3 3 3 2 1 3 3 1 3 3 1 2 2 1 3 1 2 2", "2 3 2 3 3 1 2 1 1 3 3 1 3 3 2 3 1 1 2 2 1 3 1", "2 3 2 1 1 1 3 1 1 2 3 2 1 1 2 1 2 1 3 1 3 2 3", "2 2 3 3 3 1 3 2 2 3 1 3 1 2 2 1 1 3 1 2 2 3 3", "3 2 3 3 3 3 2 1 3 2 2 2 3 1 3 2 3 2 3 1 1 2 1", "3 1 1 2 3 1 1 2 3 1 1 2 3 3 1 2 1 2 2 1 2 1 1", "2 2 3 2 2 2 1 2 1 2 3"};
    vector<string> canCarry = {"8 8 8 9 7 9 8 8 8 9 8 8 7 9 7 9 9 9 7 9 8", "7 9 8 7 7 8 8 9 9 9 8 7 8 8 8 9 7 7 8 8 9", "9 9 9 8 7 9 9 9 9 9 8 9 9 7 8 8 7 7 8 8 8", "8 9 9 9 8 9 8 7 7 8 8 7 9 9 9 8 8 7 7 7 7", "8 9 7 8 7 9 7 8 7 7 7 8 8 9 8 7 9 7 8 9 7", "7 8 7 7 8 8 7 9 9 7 7 7 9 7 8 8 8 7 9 8 7", "8 9 9 8 7 7 8 8 7 8 8 7 7 7 8 9 8 9 7 9 8", "7 8 8 9 7 9 7 7 7 8 7 9 9 7 9 7 7 8 7 8 8", "7 7 9 8 7 8 9 8 8 9 7 9 7 7 9 9 7 9 9 9 7", "8 7 9 9 9 8 9 8 9 9 9 8 7 8 9 8 9 8 7 9 8", "9 8 8 7 7 7 9 8 9 9 7 8 7 8 8 8 8 8 9 7 9", "8 7 7 9 7 9 7 8 8 8 8 8 9 7 7 8 7 9 8 9 9", "7 8 8 9 8 7 9 8 8 8 8 7 8 7 9 8 8 8 9 9 9", "7 7 8 8 8 7 9 7 9 8 7 7 9 8 7 9 8 8 7 7 8", "7 9 7 7 9 9 7 7 9 9 7 9 7 8 8 8 8 9 8 8 7", "8 8 8 9 8 8 8 8 8 7 9 9 7 9 9 7 9 9 7 7 9", "7 9 8 8 9 9 9 7 8 9 8 7 8 9 9 8 7 8 8 7 9", "8 9 8 7 9 9 9 9 7 8 9 7 7 8 7 7 9 7 8 8 7", "8 9 9 7 8 8 8 7 8 9 9 9 7 8 8 7 9 8 8 9 8", "8 8 8 9 8 7 9 8 9 9 7 9 7 9 8 9 8 9 9 8 8", "7 9 8 7 7 8 8 8 9 9 9 7 8 7 9 8 7 9 8 8 9", "7 8 9 9 8 9 9 7 8 7 9 9 7 8 7 8 9 8 8 7 7", "7 8 7 7 8 8 8 8 7 8 8 8 7 8 9 9 8 8 9 9 9", "8 9 8 9 9 8 9 9 7 7 9 9 8 9 7 8 8 9 7 8 8", "9 7 9 9 9 8 7 8 8 8 7 8 8 8 7 7 8 7 9 7 7", "8 9 9 8 7 8 7 8 9 9 7 7 9 7 7 8 8 9 9 9 9", "9 8 9 7 8 7 8 8 9 7 9 9 8 8 9 9 8 9 7 7 9", "9 8 8 9 8 9 9 9 7 9 7 9 7 8 9 7 7 8 7 8 9", "8 9 8 8 8 9 9 8 9 9 8 8 7 8 9 7 9 9 8 9 7", "8 7 8 8 9 9 8 8 9 9 9 7 9 8 9 7 8 8 7 8 9", "8 8 8 9 8 9 8 8 7 8 9 9 9 9 7 8 9 9 9 9 7", "7 8 7 7 8 8 9 7 9 7 7 7 8 9 8 7 8 8 8 7 7", "7 7 8 7 9 9 8 7 9 8 8 7 9 9 8 8 9 9 7 7 8", "7 7 8 7 8 9 9 8 9 9 8 8 7 8 8 7 7 7 8 8 7", "9 8 7 8 7 9 8 8 9 9 9 9 9 7 8 9 7 9 9 9 7", "7 7 8 9 9 8 9 9 9 9 9 9 7 7 9 7 8 9 8 9 7", "9 9 8 8 9 9 9 8 7 8 7 8 8 8 8 7 8 8 9 9 9", "8 9 8 7 8 9 9 8 9 7 7 7 9 7 9 8 7 7 9 7 7", "8 9 8 9 9 7 9 7 7 7 7 8 8 7 9 8 7 9 7 7 9", "9 9 9 8 8 8 7 9 9 8 7 8 7 9 8 7 9 7 7 9 7", "8 9 7 9 9 8 8 7 8 8 9 8 9 9 9 8 8 9 8 8 7", "7 9 7 9 8 9 9 7 8 8 9 9 7 8 8 9 9 8 9 7 7", "9 8 8 9 7 8 8 9 8 9 9 9 8 9 8 9 7 7 9 8 8", "8 9 9 7 8 7 7 9 9 8 9 9 7 8 7 7 8 8 7 7 7", "8 9 7 9 9 9 8 7 7 7 8 8 7 9 7 9 9 9 8 8 7", "9 9 9 9 8 9 9 8 9 9 7 7 7 9 9 7 8 8 9 8 7", "9 9 8 9 9 7 9 7 9 8 7 9 8 7 8 9 7 9 7 9 7", "7 8 9 7 8 8 7 8 7 8 9 8 8"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> weight = {"3 1 1 3 3 2 3 2 2 2 1 1 3 3 2 3 1 3 3 3 3 3 1", "1 3"};
    vector<string> canCarry = {"7 7 7 8 7 9 7 8 8 8 7 8 9 7 8 9 8 7 8 9 9", "8 9 7 8"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> weight = {"13 20 6 1 16 5 5 16 6 6 7 11 4 8 13 7 2 1 8 2", "7 5 2 15 20 2 9 11 4 4 16 12 20 7 5 10 7 5 10", "19 12 18 15 4 5 6 9 13 10 7 20 17 5 17 12 14", "18 15 11 11 17 12 13 17 3 20 2 3 8 12 6 14 1", "8 18 10 17 11 5 15 14 5 1 14 6 20 2 11 5 5 19", "19 7 16 9 13 16 9 4 17"};
    vector<string> canCarry = {"81 9 51 105 50 80 49 90 7 74 89 83 39 27", "46 105 11 104 105 67 49 45 69 38 85 7 24", "38 99 24 22 8 75 79 53 15 77 32 26 106 67", "18 86 34 105 14 19 44 66 106 100 54 64 7", "40 33 9 30 39 64 54 102 32 50 100 101 60", "62 73 46 18 104 62 106 77 76 80 87 8 94 25", "40 82 93 55 51 50 31 68 44 40 60 81 16 69", "29 88 63 103 8"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 30;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> weight = {"5 20 20 20 2 15 12 10 3 3 11 7 11 6 12 3 5 19", "3 12 5 1 7 14 13 18 11 2 4 18 6 2 14 10 10 11", "18 1 5 4 13 11 9 16 4 10 5 14 15 5 3 1 10 15", "18 11 12 4 18 16 4 13 20 17 1 9 19 7 1 3 11 11", "18 6 5 11 9 19 1 13 7 7 13 5 6 14 12 14 10 20", "3 5 13 19 9 9 4 3 20 1 6 16 10 10 19 16 18 4", "14 18 4 20 13 7 1 12 4 7 8 15 16 3 1 7 19 19", "14 5 4 1 1 14 11 1 8 19 17 9 6 15 3 10 3 14 16", "13 18 11 19 9 18 1 20 2 20 13 1 10 11 12 2 13", "2 3 18 18 2 12 11 11 13 3 1 7 20 9 14 15 20 7", "20 16 13 14 5 4 11 2 3 5 10 18 18 9 9 6 18 20", "1 17 13 13 11 17 14 18 6 17 18 20 12 17 18 3", "6 14 4 13 20 10 2 19 5 10 12 20 6 3 16 13 17", "11 4 17 3 20 4 4 5 9 14 10 20 5 10 20 7 1 4 17", "2 14 7 4 10 19 4 5 12 1 10 2 1 17 10 14 2 7 4", "2 6 19 20 15 7 8 7 3 15 3 9 19 2 1 19 1 14 4", "5 19 12 19 19 17 17 20 6 6 15 16"};
    vector<string> canCarry = {"92 85 58 35 90 41 44 16 105 97 76 30 34 34", "72 33 62 80 102 24 30 32 42 8 55 34 41 22", "7 106 53 26 88 18 102 67 92 90 30 12 83 48", "89 31 10 59 7 9 24 69 102 93 18 7 61 65 96", "100 18 17 99 71 94 84 40 79 21 67 35 19 76", "71 80 40 33 59 66 69 94 61 39 7 43 79 31", "53 14 10 27 77 92 76 97 49 31 57 33 61 22", "34 23 92 95 15 37 15 59 66 68 80 60 52 85", "100 90 45 105 33 71 102 24 16 92 72 32 43", "20 16 92 97 82 78 10 67 96 21 70 87 103 53", "42 59 23 52 24 33 22 73 106 97 92 106 92", "7 84 62 88 20 81 62 52 90 37 42 86 29 93", "76 60 12 76 101 79 11 77 96 99 39 81 63 104", "30 7 14 21 42 83 45 49 106 60 39 69 78 43", "101 66 28 69 72 51 19 41 80 51 48 69 53 49", "71 104 71 87 75 24 26 44 93 40 55 91 33 74", "81 48 95 9 54 101 84 59 84 38 69 82 52 11", "65 54 39 82 86 37 19 53 95 44 96 36 43 24", "23 11 103 17 50 61 26 61 67 79 106 74 40", "50 12 57 93 106 68 71 106 87 61 9 41 22 47", "33 38 102 42 16 63 11 28 30 45 51 44 18 84", "16 20 51 65 91 44 25 12"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 55;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> weight = {"1 2"};
    vector<string> canCarry = {"1 2"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> weight = {"1 2"};
    vector<string> canCarry = {"2 2"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> weight = {"3 2"};
    vector<string> canCarry = {"1 1"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> weight = {"350 300 200 1 1 1 1 1 1 1 1 1 1"};
    vector<string> canCarry = {"200 560 600 1 9 8 7 3 4 5 6 2 1"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 13;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> weight = {"350 300 200 1 1 1 1 1 1 1 1 1 1", "2 2 2 2 2 2 2 2 2 2"};
    vector<string> canCarry = {"520 580 679 1 9 8 7 3 4 5 6 2 1", "10 12 18 16 14 22 20 26 25 33"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 23;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> weight = {"350 300 200 1 1 1 1 1 1 1 1 1 1", "2 2 2 2 2 2 2 2 2 2"};
    vector<string> canCarry = {"520 579 679 1 9 8 7 3 4 5 6 2 1", "10 12 18 16 14 22 20 26 25 33"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 22;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> weight = {"22847 73744 66144 66414 75199 95789 9504 16650", "26653 16438 2363 70125 6997 49677 74068 15435", "17277 61314 47740 38098 2306 53866 47797 59957", "58032 19583 80541 6220 61394 89173 34023 37765", "84422 76092 65819 54587 1475 69842 76230 36988", "58441 98815 51433 4568 98316 22863 36227 44044", "13930 92380 97302 53276 65783 50847 42619 79498", "65194 34482 33070 47794 28445 97468 92755 75012", "57035 6863 10098 51435 58271 5212 97764 92922", "59709 48095 22228 92778 68859 2568 26341 71088", "13785 99933 60337 20710 35929 77085 68691 73318", "16125 8236 5404 55307 9860 85387 5733 40796 89384", "36030 24287 51529"};
    vector<string> canCarry = {"3847714 4392812 4800210 1406406 1232889 2156983", "3603481 315344 2905720 4550084 332000 4285702", "1615727 2450868 766956 2009139 2139710 1813305", "2500539 3252741 1622728 3053965 3757300 1548909", "3194715 1890742 500817 3539994 922048 581358", "854957 4055870 1134687 1472814 4734398 3430101", "4619791 4093627 1058451 4355829 3136276 1910327", "4498644 3346036 1308084 744091 2548283 2024570", "841021 3963490 2932367 4566521 678305 1762460", "3805099 3350601 4163469 3290843 888979 182167", "3107831 2724831 2258181 983438 4228667 1608863", "2822300 2673403 3612984 670533 403053 3870565", "3671252 2584513 4466560 89389 4621270 675746", "3730965 2068622 1219107 2350927 1702119 3325327", "4866362 1625036 334365 2832398 1874617 4726157", "2252769 3484686 4488789 229958 3597748 2632599", "6 4690131 3029670 3546211"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 100;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> weight = {"22847 2955 66144 66414 75199 69918 80525 16650", "47626 16438 7670 70125 88820 49677 74068 15435", "17277 61314 57200 98491 37733 97370 22843 59957", "48900 18607 80541 64444 76349 75580 22091 14614", "59356 76092 65819 3349 1475 36785 21397 36988", "64820 98815 51433 4568 98316 22863 36227 17722", "13930 92380 97302 53276 65783 19380 42619 79498", "65194 44879 6888 43377 65085 25662 92755 75012", "89773 72814 10098 51435 58271 5212 97764 92922", "79293 85645 22228 29321 68859 2568 97714 71088", "83899 69180 85274 18945 48523 11706 68691 73318", "16125 8236 73623 2337 9860 85387 5733 7673 62601", "10198 68851 51529 54587 6220 67606 55937 48095", "19583 53866 17446 37765 42063 11128 974 2905", "92778 73744 2363 52299 58661 84422 61394 5404", "23312 58441 31327 55307 54341 45631 34482 17506", "21994 86709 35929 12925 35129 28445 89384 75322", "50847 79445 57035 43325 13203 95995 73941 58032", "47794 6863 2306 49300 65985 78207 52960 8543", "95789 99933 33070 18777 36030 63921 62505 34023", "26341 41223 95747 67622 44044 47740 77085 88210", "1962 52927 24287 76230 97468 59709 40796 26653", "6641 6997 47469 8283 9504 38098 33453 60380 21861", "87191 66343 2423 51660 89173 13785 55940 60337", "59471 3882 8934 20710 69842 47797"};
    vector<string> canCarry = {"3891164 5638043 4831220 1409926 1277209 5171124", "8583207 356764 8314314 4599304 5659294 4310612", "8758688 2494228 770086 2049499 2186880 1839155", "6798402 5372341 8819327 5074675 9539057 1590779", "6820617 5036957 534237 4926822 5735590 9214150", "7225182 4990041 5676427 1491794 4778818 7444589", "4645911 9463425 8159016 4381679 7831948 1943687", "4501194 3373886 1322454 759211 2596863 7882073", "870821 4010970 2942647 4591921 699835 6666671", "3807339 3372951 4204969 6184224 7444941 7225131", "7143753 6170987 2270571 1011478 5432058 6959149", "2835200 2683773 3626344 715893 416973 3914115", "8233935 5520696 4514920 6246534 4665660 682166", "7631685 2095422 8445132 7354767 9024056 9457458", "6330029 8046000 354415 2852888 1878507 4749947", "5811156 7492636 4520719 240448 3646568 8325106", "6557103 5676932 9124809 3579081 3457061 3568614", "6101452 7292073 2632043 1891282 3083645 7338659", "4094090 6488628 8040628 6725101 5063542 126299", "4439302 372020 8494508 6721923 1179597 940498", "2255419 6070149 3180996 9402188 3499366 6007420", "8216416 3331513 5618890 9267051 6398503 4905882", "6487716 5042317 3154441 30886 7713282 1784180", "6295745 4266427 5261789 9471707 8853909 7941498", "3202825 220497 1658033 1643648 5894294 8069264", "7555407 6880294 5667346 2200563 2395987 937139", "4924686 4701361 8127815 9374075 878007 3749105", "8395854 5941819 9295407 2038320 2510549 1661356", "8629723 9408721 7095952 3039110 1085821 2741431", "3707962 2663169 2916470 8403820 1663007 6680572", "6475054 3633491 3258511 6599567 8946669 9194547", "7023390 7487350 8169781 7427775 587088 1267637", "7909702 1728619 5279554 6723874 6738720 3374247", "4135977 3758020"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 200;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> weight = {"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18", "19 20 21 22 23 24 25 26 27 28 29 30 31 32 33", "34 35 36 37 38 39 40 41 42 43 44 45 46 47 48", "49 50 51 52 53 54 55 56 57 58 59 60 61 62 63", "64 65 66 67 68 69 70 71 72 73 74 75 76 77 78", "79 80 81 82 83 84 85 86 87 88 89 90 91 92 93", "94 95 96 97 98 99 100 101 102 103 104 105 106", "107 108 109 110 111 112 113 114 115 116 117 118", "119 120 121 122 123 124 125 126 127 128 129 130", "131 132 133 134 135 136 137 138 139 140 141 142", "143 144 145 146 147 148 149 150 151 152 153 154", "155 156 157 158 159 160 161 162 163 164 165 166", "167 168 169 170 171 172 173 174 175 176 177 178", "179 180 181 182 183 184 185 186 187 188 189 190", "191 192 193 194 195 196 197 198 199 200"};
    vector<string> canCarry = {"200 199 198 197 196 195 194 193 192 191 190", "189 188 187 186 185 184 183 182 181 180 179", "178 177 176 175 174 173 172 171 170 169 168", "167 166 165 164 163 162 161 160 159 158 157", "156 155 154 153 152 151 150 149 148 147 146", "145 144 143 142 141 140 139 138 137 136 135", "134 133 132 131 130 129 128 127 126 125 124", "123 122 121 120 119 118 117 116 115 114 113", "112 111 110 109 108 107 106 105 104 103 102", "101 100 99 98 97 96 95 94 93 92 91 90 89", "88 87 86 85 84 83 82 81 80 79 78 77 76 75", "74 73 72 71 70 69 68 67 66 65 64 63 62 61", "60 59 58 57 56 55 54 53 52 51 50 49 48 47", "46 45 44 43 42 41 40 39 38 37 36 35 34 33", "32 31 30 29 28 27 26 25 24 23 22 21 20 19", "18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3", "2 1"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 19;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> weight = {"200 199 198 197 196 195 194 193 192 191 190 189", "188 187 186 185 184 183 182 181 180 179 178 177", "176 175 174 173 172 171 170 169 168 167 166 165", "164 163 162 161 160 159 158 157 156 155 154 153", "152 151 150 149 148 147 146 145 144 143 142 141", "140 139 138 137 136 135 134 133 132 131 130 129", "128 127 126 125 124 123 122 121 120 119 118 117", "116 115 114 113 112 111 110 109 108 107 106 105", "104 103 102 101 100 99 98 97 96 95 94 93 92 91", "90 89 88 87 86 85 84 83 82 81 80 79 78 77 76", "75 74 73 72 71 70 69 68 67 66 65 64 63 62 61", "60 59 58 57 56 55 54 53 52 51 50 49 48 47 46", "45 44 43 42 41 40 39 38 37 36 35 34 33 32 31", "30 29 28 27 26 25 24 23 22 21 20 19 18 17 16", "15 14 13 12 11 10 9 8 7 6 5 4 3 2 1"};
    vector<string> canCarry = {"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17", "18 19 20 21 22 23 24 25 26 27 28 29 30 31", "32 33 34 35 36 37 38 39 40 41 42 43 44 45", "46 47 48 49 50 51 52 53 54 55 56 57 58 59", "60 61 62 63 64 65 66 67 68 69 70 71 72 73", "74 75 76 77 78 79 80 81 82 83 84 85 86 87", "88 89 90 91 92 93 94 95 96 97 98 99 100 101", "102 103 104 105 106 107 108 109 110 111 112", "113 114 115 116 117 118 119 120 121 122 123", "124 125 126 127 128 129 130 131 132 133 134", "135 136 137 138 139 140 141 142 143 144 145", "146 147 148 149 150 151 152 153 154 155 156", "157 158 159 160 161 162 163 164 165 166 167", "168 169 170 171 172 173 174 175 176 177 178", "179 180 181 182 183 184 185 186 187 188 189", "190 191 192 193 194 195 196 197 198 199 200"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 19;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> weight = {"399 397 395 393 391 389 387 385 383 381 379 377", "375 373 371 369 367 365 363 361 359 357 355 353", "351 349 347 345 343 341 339 337 335 333 331 329", "327 325 323 321 319 317 315 313 311 309 307 305", "303 301 299 297 295 293 291 289 287 285 283 281", "279 277 275 273 271 269 267 265 263 261 259 257", "255 253 251 249 247 245 243 241 239 237 235 233", "231 229 227 225 223 221 219 217 215 213 211 209", "207 205 203 201 199 197 195 193 191 189 187 185", "183 181 179 177 175 173 171 169 167 165 163 161", "159 157 155 153 151 149 147 145 143 141 139 137", "135 133 131 129 127 125 123 121 119 117 115 113", "111 109 107 105 103 101 99 97 95 93 91 89 87", "85 83 81 79 77 75 73 71 69 67 65 63 61 59 57", "55 53 51 49 47 45 43 41 39 37 35 33 31 29 27", "25 23 21 19 17 15 13 11 9 7 5 3 1"};
    vector<string> canCarry = {"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17", "18 19 20 21 22 23 24 25 26 27 28 29 30 31", "32 33 34 35 36 37 38 39 40 41 42 43 44 45", "46 47 48 49 50 51 52 53 54 55 56 57 58 59", "60 61 62 63 64 65 66 67 68 69 70 71 72 73", "74 75 76 77 78 79 80 81 82 83 84 85 86 87", "88 89 90 91 92 93 94 95 96 97 98 99 100 101", "102 103 104 105 106 107 108 109 110 111 112", "113 114 115 116 117 118 119 120 121 122 123", "124 125 126 127 128 129 130 131 132 133 134", "135 136 137 138 139 140 141 142 143 144 145", "146 147 148 149 150 151 152 153 154 155 156", "157 158 159 160 161 162 163 164 165 166 167", "168 169 170 171 172 173 174 175 176 177 178", "179 180 181 182 183 184 185 186 187 188 189", "190 191 192 193 194 195 196 197 198 199 200"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> weight = {"399 397 395 393 391 389 387 385 383 381 379 377", "375 373 371 369 367 365 363 361 359 357 355 353", "351 349 347 345 343 341 339 337 335 333 331 329", "327 325 323 321 319 317 315 313 311 309 307 305", "303 301 299 297 295 293 291 289 287 285 283 281", "279 277 275 273 271 269 267 265 263 261 259 257", "255 253 251 249 247 245 243 241 239 237 235 233", "231 229 227 225 223 221 219 217 215 213 211 209", "207 205 203 201 199 197 195 193 191 189 187 185", "183 181 179 177 175 173 171 169 167 165 163 161", "159 157 155 153 151 149 147 145 143 141 139 137", "135 133 131 129 127 125 123 5 3 1 121 119 117", "115 113 111 109 107 105 103 101 99 97 95 93 91", "89 87 85 83 81 79 77 75 73 71 69 67 65 63 61", "59 57 55 53 51 49 47 45 43 41 39 37 35 33 31", "29 27 25 23 21 19 17 15 13 11 9 7"};
    vector<string> canCarry = {"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17", "18 19 20 21 22 23 24 25 26 27 28 29 30 31", "32 33 34 35 36 37 38 39 40 41 42 43 44 45", "46 47 48 49 50 51 52 53 54 55 56 57 58 59", "60 61 62 63 64 65 66 67 68 69 70 71 72 73", "74 75 76 77 78 79 80 81 82 83 84 85 86 87", "88 89 90 91 92 93 94 95 96 97 98 99 100 101", "102 103 104 105 106 107 108 109 110 111 112", "113 114 115 116 117 118 119 120 121 122 123", "124 125 126 127 128 129 130 131 132 133 134", "135 136 137 138 139 198 199 200 140 141 142", "143 144 145 146 147 148 149 150 151 152 153", "154 155 156 157 158 159 160 161 162 163 164", "165 166 167 168 169 170 171 172 173 174 175", "176 177 178 179 180 181 182 183 184 185 186", "187 188 189 190 191 192 193 194 195 196 197"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 14;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> weight = {"1 2 9 10 11 12 13 14 15 16 17 18 19 20 21 22", "23 24 25 26 27 28 29 30 31 32 33 34 35 36 37", "38 39 40 41 42 43 44 45 46 47 48 49 50 51 52", "53 54 55 56 57 58 59 60 61 62 63 64 65 66 67", "68 69 70 71 72 73 74 75 76 77 78 79 80 81 82", "83 84 85 86 87 88 89 90 91 92 93 94 95 96 97", "98 99 100 101 102 103 104 105 106 107 108 109", "110 111 112 113 114 115 116 117 118 119 120 121", "122 123 124 125 126 127 128 129 130 131 132 133", "134 135 136 137 138 139 140 141 142 143 144 145", "146 147 148 149 150 151 152 153 154 155 156 157", "158 159 160 161 162 163 164 165 166 167 168 169", "170 171 172 173 174 175 176 177 178 3 4 5 6 7", "8 179 180 181 182 183 184 185 186 187 188 189", "190 191 192 193 194 195 196 197 198 199 200"};
    vector<string> canCarry = {"399 397 383 381 379 377 375 373 371 369 367", "365 363 361 359 357 355 353 351 349 347 345", "343 341 339 337 335 333 331 329 327 325 323", "321 319 317 315 313 311 309 307 305 303 301", "299 297 295 293 291 289 287 285 283 281 279", "277 275 273 271 269 267 265 263 261 259 257", "255 253 251 249 247 245 243 241 239 237 235", "233 231 229 227 225 223 221 219 217 215 213", "211 209 207 205 203 201 199 197 195 193 191", "189 187 185 183 181 179 177 175 173 171 169", "167 165 163 161 159 157 155 153 151 149 147", "145 143 141 139 137 135 133 131 129 127 125", "123 121 119 117 115 113 111 109 107 105 103", "101 99 97 95 93 91 89 87 85 83 81 79 77 75", "73 71 69 67 65 63 61 59 57 55 53 51 49 47", "45 395 393 391 389 387 385 43 41 39 37 35", "33 31 29 27 25 23 21 19 17 15 13 11 9 7 5", "3 1"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 27;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> weight = {"10001 10002 10003 10004 10005 10006 10007 10008", "10009 10010 10011 10012 10013 10014 10015 10016", "10017 10018 10019 10020 10021 10022 10023 10024", "10025 10026 10027 10028 10029 10030 10031 10032", "10033 10034 10035 10036 10037 10038 10039 10040", "10041 10042 10043 10044 10045 10046 10047 10048", "10049 10050 10051 10052 10053 10054 10055 10056", "10057 10058 10059 10060 10061 10062 10063 10064", "10065 10066 10067 10068 10069 10070 10071 10072", "10073 10074 10075 10076 10077 10078 10079 10080", "10081 10082 10083 10084 10085 10086 10087 10088", "10089 10090 10091 10092 10093 10094 10095 10096", "10097 10098 10099 10100 10101 10102 10103 10104", "10105 10106 10107 10108 10109 10110 10111 10112", "10113 10114 10115 10116 10117 10118 10119 10120", "10121 10122 10123 10124 10125 10126 10127 10128", "10129 10130 10131 10132 10133 10134 10135 10136", "10137 10138 10139 10140 10141 10142 10143 10144", "10145 10146 10147 10148 10149 10150 10151 10152", "10153 10154 10155 10156 10157 10158 10159 10160", "10161 10162 10163 10164 10165 10166 10167 10168", "10169 10170 10171 10172 10173 10174 10175 10176", "10177 10178 10179 10180 10181 10182 10183 10184", "10185 10186 10187 10188 10189 10190 10191 10192", "10193 10194 10195 10196 10197 10198 10199 10200"};
    vector<string> canCarry = {"999997 999994 999991 999988 999985 999982", "999979 999976 999973 999970 999967 999964", "999961 999958 999955 999952 999949 999946", "999943 999940 999937 999934 999931 999928", "999925 999922 999919 999916 999913 999910", "999907 999904 999901 999898 999895 999892", "999889 999886 999883 999880 999877 999874", "999871 999868 999865 999862 999859 999856", "999853 999850 999847 999844 999841 999838", "999835 999832 999829 999826 999823 999820", "999817 999814 999811 999808 999805 999802", "999799 999796 999793 999790 999787 999784", "999781 999778 999775 999772 999769 999766", "999763 999760 999757 999754 999751 999748", "999745 999742 999739 999736 999733 999730", "999727 999724 999721 999718 999715 999712", "999709 999706 999703 999700 999697 999694", "999691 999688 999685 999682 999679 999676", "999673 999670 999667 999664 999661 999658", "999655 999652 999649 999646 999643 999640", "999637 999634 999631 999628 999625 999622", "999619 999616 999613 999610 999607 999604", "999601 999598 999595 999592 999589 999586", "999583 999580 999577 999574 999571 999568", "999565 999562 999559 999556 999553 999550", "999547 999544 999541 999538 999535 999532", "999529 999526 999523 999520 999517 999514", "999511 999508 999505 999502 999499 999496", "999493 999490 999487 999484 999481 999478", "999475 999472 999469 999466 999463 999460", "999457 999454 999451 999448 999445 999442", "999439 999436 999433 999430 999427 999424", "999421 999418 999415 999412 999409 999406", "999403 999400"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 100;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> weight = {"200 200 600 700 400"};
    vector<string> canCarry = {"1000 20 150 700 10"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> weight = {"42", "18468", "6335", "26501", "19170", "15725", "11479", "29359", "26963", "24465", "5706", "28146", "23282", "16828", "9962", "492", "2996", "11943", "4828", "5437", "32392", "14605", "3903", "154", "293", "12383", "17422", "18717", "19719", "19896", "5448", "21727", "14772", "11539", "1870", "19913", "25668", "26300", "17036", "9895", "28704", "23812", "31323", "30334", "17674", "4665", "15142", "7712", "28254", "6869"};
    vector<string> canCarry = {"100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> weight = {"10 20 30"};
    vector<string> canCarry = {"11", "100 10"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> weight = {"4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4"};
    vector<string> canCarry = {"999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 250;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> weight = {"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"};
    vector<string> canCarry = {"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    vector<string> weight = {"10 20 30 11 20 30 10 20 91 100000 100 100", "10 20 30 11 20 30 10 20 91 100000 100 100", "10 20 30 11 20 30 10 20 91 100000 100 100", "10 20 30 11 20 30 10 20 91 100000 100 100", "10 20 30 11 20 30 10 20 91 100000 100 100", "10 20 30 11 20 30 10 20 91 100000 100 100", "10 20 30 11 20 30 10 20 91 100000 100 100", "10 20 30 11 20 30 10 20 91 100000 100 100", "10 20 30 11 20 30 10 20 91 100000 100 100", "10 20 30 11 20 30 10 20 91 100000 100 100", "10 20 30 11 20 30 10 20 91 100000 100 100", "10 20 30 11 20 30 10 20 91 100000 100 100", "10 20 30 11 20 30 10 20 91 100000 100 100", "1000 100 200 200 600 700 400 1 1 1", "1000 100 200 200 600 700 400 1 1 1", "1000 100 200 200 600 700 400 1 1 1", "1000 100 200 200 600 700 400 1 1 1", "1000 100 200 200 600 700 400 1 1 1", "1000 100 200 200 600 700 400 1 1 1", "1000 100 200 200 600 700 400 1 1 1", "1000 100 200 200 600 700 400 1 1 1", "1000 100 200 200 600 700 400 1 1 1", "1000 100 200 200 600 700 400 1 1 1", "1000 100 200 200 600 700 400 1 1 1", "1000 100 200 200 600 700 400 1 1 1", "1000 100 200 200 600 700 400 1 1 1", "57 57 42 42 57 42 42 57 57 42", "57 57 42 42 57 42 42 57 57 42", "57 57 42 42 57 42 42 57 57 42", "57 57 42 42 57 42 42 57 57 42", "57 57 42 42 57 42 42 57 57 42", "57 57 42 42 57 42 42 57 57 42", "57 57 42 42 57 42 42 57 57 42", "57 57 42 42 57 42 42 57 57 42", "57 57 42 42 57 42 42 57 57 42", "57 57 42 42 57 42 42 57 57 42", "57 57 42 42 57 42 42 57 57 42", "57 57 42 42 57 42 42 57 57 42", "57 57 42 42 57 42 42 57 57 42"};
    vector<string> canCarry = {"11 100 10 11 100 10 11 100 10 1000000000 90 91 92", "11 100 10 11 100 10 11 100 10 1000000000 90 91 92", "11 100 10 11 100 10 11 100 10 1000000000 90 91 92", "11 100 10 11 100 10 11 100 10 1000000000 90 91 92", "11 100 10 11 100 10 11 100 10 1000000000 90 91 92", "11 100 10 11 100 10 11 100 10 1000000000 90 91 92", "11 100 10 11 100 10 11 100 10 1000000000 90 91 92", "11 100 10 11 100 10 11 100 10 1000000000 90 91 92", "11 100 10 11 100 10 11 100 10 1000000000 90 91 92", "11 100 10 11 100 10 11 100 10 1000000000 90 91 92", "11 100 10 11 100 10 11 100 10 1000000000 90 91 92", "11 100 10 11 100 10 11 100 10 1000000000 90 91 92", "11 100 10 11 100 10 11 100 10 1000000000 90 91 92", "93 1000 20 150 700 10 2 3 4", "93 1000 20 150 700 10 2 3 4", "93 1000 20 150 700 10 2 3 4", "93 1000 20 150 700 10 2 3 4", "93 1000 20 150 700 10 2 3 4", "93 1000 20 150 700 10 2 3 4", "93 1000 20 150 700 10 2 3 4", "93 1000 20 150 700 10 2 3 4", "93 1000 20 150 700 10 2 3 4", "93 1000 20 150 700 10 2 3 4", "93 1000 20 150 700 10 2 3 4", "93 1000 20 150 700 10 2 3 4", "93 1000 20 150 700 10 2 3 4", "420 240 23 42 2 2 2 90 900 9000", "420 240 23 42 2 2 2 90 900 9000", "420 240 23 42 2 2 2 90 900 9000", "420 240 23 42 2 2 2 90 900 9000", "420 240 23 42 2 2 2 90 900 9000", "420 240 23 42 2 2 2 90 900 9000", "420 240 23 42 2 2 2 90 900 9000", "420 240 23 42 2 2 2 90 900 9000", "420 240 23 42 2 2 2 90 900 9000", "420 240 23 42 2 2 2 90 900 9000", "420 240 23 42 2 2 2 90 900 9000", "420 240 23 42 2 2 2 90 900 9000", "420 240 23 42 2 2 2 90 900 9000"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 78;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    vector<string> weight = {"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"};
    vector<string> canCarry = {"9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    vector<string> weight = {"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18", "23 24 25 26 27 28 29 30 31 32 33 34 35 36 37", "123 124 125 126 127 128 129 130 131 132 133", "223 224 225 226 227 228 229 230 231 232 233", "623 624 625 626 627 628 629 630 631 632 633"};
    vector<string> canCarry = {"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18", "23 24 25 26 27 28 29 30 31 32 33 34 35 36 37", "123 124 125 126 127 128 129 130 131 132 133", "223 224 225 226 227 228 229 230 231 232 233", "623 624 625 626 627 628 629 630 631 632 633"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    vector<string> weight = {"20 20 20 20 20 20 20 20 20 20", "20 20 20 20 20 20 20 20 20 20", "20 20 20 20 20 20 20 20 20 20", "20 20 20 20 20 20 20 20 20 20", "20 20 20 20 20 20 20 20 20 20"};
    vector<string> canCarry = {"910 910 910 910 910 910 910 910 910 910", "910 910 910 910 910 910 910 910 910 910", "910 910 910 910 910 910 910 910 910 910", "910 910 910 910 910 910 910 910 910 910", "910 910 910 910 910 910 910 910 910 910"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 46;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    vector<string> weight = {"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1000", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"};
    vector<string> canCarry = {"999 999 999 999 999 999 999 999 999", "30 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 41;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    vector<string> weight = {"100", "4", "4", "4"};
    vector<string> canCarry = {"1", "99", "99", "99"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    vector<string> weight = {"24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23"};
    vector<string> canCarry = {"24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    vector<string> weight = {"200 200 600 700 400"};
    vector<string> canCarry = {"1000 20 150 700 10"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    vector<string> weight = {"42", "18468", "6335", "26501", "19170", "15725", "11479", "29359", "26963", "24465", "5706", "28146", "23282", "16828", "9962", "492", "2996", "11943", "4828", "5437", "32392", "14605", "3903", "154", "293", "12383", "17422", "18717", "19719", "19896", "5448", "21727", "14772", "11539", "1870", "19913", "25668", "26300", "17036", "9895", "28704", "23812", "31323", "30334", "17674", "4665", "15142", "7712", "28254", "6869"};
    vector<string> canCarry = {"100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000", "100000"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 20;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    vector<string> weight = {"10 20 30"};
    vector<string> canCarry = {"11", "100 10"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    vector<string> weight = {"4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4", "4 4 4 4 4 4 4 4 4 4 4 4"};
    vector<string> canCarry = {"999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999 999"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 250;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    vector<string> weight = {"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"};
    vector<string> canCarry = {"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    vector<string> weight = {"10 20 30 11 20 30 10 20 91 100000 100 100", "10 20 30 11 20 30 10 20 91 100000 100 100", "10 20 30 11 20 30 10 20 91 100000 100 100", "10 20 30 11 20 30 10 20 91 100000 100 100", "10 20 30 11 20 30 10 20 91 100000 100 100", "10 20 30 11 20 30 10 20 91 100000 100 100", "10 20 30 11 20 30 10 20 91 100000 100 100", "10 20 30 11 20 30 10 20 91 100000 100 100", "10 20 30 11 20 30 10 20 91 100000 100 100", "10 20 30 11 20 30 10 20 91 100000 100 100", "10 20 30 11 20 30 10 20 91 100000 100 100", "10 20 30 11 20 30 10 20 91 100000 100 100", "10 20 30 11 20 30 10 20 91 100000 100 100", "1000 100 200 200 600 700 400 1 1 1", "1000 100 200 200 600 700 400 1 1 1", "1000 100 200 200 600 700 400 1 1 1", "1000 100 200 200 600 700 400 1 1 1", "1000 100 200 200 600 700 400 1 1 1", "1000 100 200 200 600 700 400 1 1 1", "1000 100 200 200 600 700 400 1 1 1", "1000 100 200 200 600 700 400 1 1 1", "1000 100 200 200 600 700 400 1 1 1", "1000 100 200 200 600 700 400 1 1 1", "1000 100 200 200 600 700 400 1 1 1", "1000 100 200 200 600 700 400 1 1 1", "1000 100 200 200 600 700 400 1 1 1", "57 57 42 42 57 42 42 57 57 42", "57 57 42 42 57 42 42 57 57 42", "57 57 42 42 57 42 42 57 57 42", "57 57 42 42 57 42 42 57 57 42", "57 57 42 42 57 42 42 57 57 42", "57 57 42 42 57 42 42 57 57 42", "57 57 42 42 57 42 42 57 57 42", "57 57 42 42 57 42 42 57 57 42", "57 57 42 42 57 42 42 57 57 42", "57 57 42 42 57 42 42 57 57 42", "57 57 42 42 57 42 42 57 57 42", "57 57 42 42 57 42 42 57 57 42", "57 57 42 42 57 42 42 57 57 42"};
    vector<string> canCarry = {"11 100 10 11 100 10 11 100 10 1000000000 90 91 92", "11 100 10 11 100 10 11 100 10 1000000000 90 91 92", "11 100 10 11 100 10 11 100 10 1000000000 90 91 92", "11 100 10 11 100 10 11 100 10 1000000000 90 91 92", "11 100 10 11 100 10 11 100 10 1000000000 90 91 92", "11 100 10 11 100 10 11 100 10 1000000000 90 91 92", "11 100 10 11 100 10 11 100 10 1000000000 90 91 92", "11 100 10 11 100 10 11 100 10 1000000000 90 91 92", "11 100 10 11 100 10 11 100 10 1000000000 90 91 92", "11 100 10 11 100 10 11 100 10 1000000000 90 91 92", "11 100 10 11 100 10 11 100 10 1000000000 90 91 92", "11 100 10 11 100 10 11 100 10 1000000000 90 91 92", "11 100 10 11 100 10 11 100 10 1000000000 90 91 92", "93 1000 20 150 700 10 2 3 4", "93 1000 20 150 700 10 2 3 4", "93 1000 20 150 700 10 2 3 4", "93 1000 20 150 700 10 2 3 4", "93 1000 20 150 700 10 2 3 4", "93 1000 20 150 700 10 2 3 4", "93 1000 20 150 700 10 2 3 4", "93 1000 20 150 700 10 2 3 4", "93 1000 20 150 700 10 2 3 4", "93 1000 20 150 700 10 2 3 4", "93 1000 20 150 700 10 2 3 4", "93 1000 20 150 700 10 2 3 4", "93 1000 20 150 700 10 2 3 4", "420 240 23 42 2 2 2 90 900 9000", "420 240 23 42 2 2 2 90 900 9000", "420 240 23 42 2 2 2 90 900 9000", "420 240 23 42 2 2 2 90 900 9000", "420 240 23 42 2 2 2 90 900 9000", "420 240 23 42 2 2 2 90 900 9000", "420 240 23 42 2 2 2 90 900 9000", "420 240 23 42 2 2 2 90 900 9000", "420 240 23 42 2 2 2 90 900 9000", "420 240 23 42 2 2 2 90 900 9000", "420 240 23 42 2 2 2 90 900 9000", "420 240 23 42 2 2 2 90 900 9000", "420 240 23 42 2 2 2 90 900 9000"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 78;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    vector<string> weight = {"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"};
    vector<string> canCarry = {"9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9", "9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    vector<string> weight = {"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18", "23 24 25 26 27 28 29 30 31 32 33 34 35 36 37", "123 124 125 126 127 128 129 130 131 132 133", "223 224 225 226 227 228 229 230 231 232 233", "623 624 625 626 627 628 629 630 631 632 633"};
    vector<string> canCarry = {"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18", "23 24 25 26 27 28 29 30 31 32 33 34 35 36 37", "123 124 125 126 127 128 129 130 131 132 133", "223 224 225 226 227 228 229 230 231 232 233", "623 624 625 626 627 628 629 630 631 632 633"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 9;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    vector<string> weight = {"20 20 20 20 20 20 20 20 20 20", "20 20 20 20 20 20 20 20 20 20", "20 20 20 20 20 20 20 20 20 20", "20 20 20 20 20 20 20 20 20 20", "20 20 20 20 20 20 20 20 20 20"};
    vector<string> canCarry = {"910 910 910 910 910 910 910 910 910 910", "910 910 910 910 910 910 910 910 910 910", "910 910 910 910 910 910 910 910 910 910", "910 910 910 910 910 910 910 910 910 910", "910 910 910 910 910 910 910 910 910 910"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 46;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    vector<string> weight = {"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1000", "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"};
    vector<string> canCarry = {"999 999 999 999 999 999 999 999 999", "30 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999 999", "999 999 999 999 999 999 999 999 999 999"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 41;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    vector<string> weight = {"100", "4", "4", "4"};
    vector<string> canCarry = {"1", "99", "99", "99"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 3;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    vector<string> weight = {"24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23"};
    vector<string> canCarry = {"24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23", "24 24 52 89 23 42 42 12 412 421 24 53 23 43 23"};
    StackingBoxes* pObj = new StackingBoxes();
    clock_t start = clock();
    int result = pObj->highestStack(weight, canCarry);
    clock_t end = clock();
    delete pObj;
    int expected = 5;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=10185645&rd=7995&pm=4660
********************************************************************************
#include <vector>
#include <string>
#include <algorithm>
#include <cstdlib>
#include <cstdio>
 
using namespace std;
 
struct box
{
  int w, c;
  bool operator < (const box& rhs) const
  {
    return c < rhs.c;
  }
};
 
box b[2500];
long long table[2][2600];
int cur, nex;
const long long inf = 1000000000000LL;
 
class StackingBoxes
{
public:
int highestStack(vector<string> weight, vector<string> canCarry)
{
  int n = 0;
  int ln = weight.size();
  int i, j, x;
  for (i = 0; i < ln; i++)
  {
    const char *s = weight[i].c_str();
    while (*s != 0)
    {
      while (*s == 32) s++;
      if (*s == 0) break;
      x = atoi(s);
      b[n++].w = x;
      while (*s != 32 && *s != 0) s++;    
    }
  }
  ln = canCarry.size(); n = 0;
  for (i = 0; i < ln; i++)
  {
    const char *s = canCarry[i].c_str();
    while (*s != 0)
    {
      while (*s == 32) s++;
      if (*s == 0) break;
      x = atoi(s);
      b[n++].c = x + b[n].w;
      while (*s != 32 && *s != 0) s++;    
    }
  }
  sort(b, b + n);
  for (i = 0; i < n; i++)
    printf("b : {w : %d, c : %d}\n", b[i].w, b[i].c);
 
  table[0][0] = 0; table[0][1] = b[0].w; table[0][2] = inf; cur = 0; nex = 1;
  for (i = 1; i < n; i++)
  {
    fill(table[nex], table[nex] + n + 1, inf);
    table[nex][0] = 0;
    for (j = 1; j <= i + 1; j++)
    {
      table[nex][j] = table[cur][j] <? table[cur][j - 1] + b[i].w;
      if (table[nex][j] > b[i].c)
        table[nex][j] = inf;
    }
    swap(cur, nex);
  }
  for (i = n; i >= 0; i--)
    if (table[cur][i] != inf)
      return i;
  return 0;
}
};

********************************************************************************
*******************************************************************************/