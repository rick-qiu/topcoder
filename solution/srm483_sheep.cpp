/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=10920
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class Sheep {
public:
    int minCapacity(int numSheep, int maxRuns, vector<string> part1, vector<string> part2, vector<string> part3, vector<string> part4);
};

int Sheep::minCapacity(int numSheep, int maxRuns, vector<string> part1, vector<string> part2, vector<string> part3, vector<string> part4) {
    int ret;
    return ret;
}


int test0() {
    int numSheep = 6;
    int maxRuns = 2;
    vector<string> part1 = {"26 7 10 30 5 4"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 42;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    int numSheep = 6;
    int maxRuns = 2;
    vector<string> part1 = {"4 8 15 16 23 42"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 54;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    int numSheep = 15;
    int maxRuns = 4;
    vector<string> part1 = {"666 42 7 13 400 511 600 200 202 111 313 94 280", " 72 42"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 896;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    int numSheep = 7;
    int maxRuns = 6;
    vector<string> part1 = {"200 2", "01 202 203"};
    vector<string> part2 = {" 204 "};
    vector<string> part3 = {};
    vector<string> part4 = {"205", " ", "206"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 401;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    int numSheep = 200;
    int maxRuns = 20;
    vector<string> part1 = {"42 468 335 501 1170 1725 1479 1359 963 465 1706", " 146 1282 828 1962 492 996 1943 828 1437 392 605", " 1903 154 293 383 1422 717 1719 1896 1448 1727", " 772 1539 1870 1913 1668 300 1036 1895 704 1812", " 1323 334 1674 665 1142 1712 254 869 1548 1645", " 663 758 38 860 724 1742 1530 779 317 1036 191", " 1843 289 107 1041 943 1265 649 1447 1806 1891", " 730 371 1351 1007 1102 394 1549 1630 624 85 1955", " 757 1841 967 1377 1932 309 945 440 627 1324 1538", " 1539 119 83 930 542 834 1116 640 1659 705 1931", " 1978 307 1674 387 1022 746 925 1073 271 1830 778", " 1574 1098 513 1987 1291 1162 637 356 768 1656", " 1575 32 53 1351 1151 942 1725 1967 1431 1108 192", " 8 1338 1458 288 1754 384 946 910 210 1759 222", " 589 423 947 1507 1031 414 1169 901 592 763 1656", " 1411 360 1625 538 1549 484 1596 42 1603 351 292", " 837 1375 1021 597 22 1349 1200 1669 485 282 735", " 54 2000 419 1939 901 1789 128 468 1729 894 649", " 484 1808 422 311 618 814 1515"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 9986;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    int numSheep = 1667;
    int maxRuns = 1;
    vector<string> part1 = {"310 1617 936 1452 601 1250 520 1557 799 304 225", " 1009 1845 610 990 703 1196 486 1094 344 524 1588", " 1315 1504 1449 1201 1459 619 581 1797 799 1282", " 1590 799 10 1158 473 1623 539 293 39 180 191 1658", " 1959 192 1816 889 1157 1512 203 635 273 56 329", " 647 363 887 876 434 1870 143 1845 1417 1882 1999", " 323 652 22 1700 1558 477 1893 390 1076 713 601", " 511 1004 870 1862 689 1402 1790 1256 424 1003", " 586 183 286 1089 1427 618 1758 1833 933 170 155", " 1722 1190 1977 1330 369 693 1426 556 1435 550", " 1442 1513 146 61 1719 1754 140 424 280 1997 688", " 530 550 1438 1867 950 194 1196 1298 417 287 106", " 489 283 456 1735 115 1702 1317 672 1787 264 314", " 356 1186 54 913 809 1833 946 314 1757 322 1559", " 1647 1983 482 145 1197 223 1130 162 1536 451 1174", " 467 45 1660 293 440 1254 25 155 1511 746 650 1187", " 314 475 23 169 19 788 1906 1959 1392 203 1626", " 478 415 1315 1825 1335 1875 373 160 1834 71 1488", " 298 1519 178 1774 271 1764 669 1193 1986 1103", " 481 1214 1628 803 100 528 626 1544 1925 1024 1973", " 1062 182 1004 1433 1506 1594 726 1032 493 143", " 1223 1287 1065 1901 1188 361 414 975 271 1171", " 236 834 1712 1761 897 668 1286 551 141 1695 696", " 1625 20 126 577 1695 659 303 1372 467 679 594", " 1852 1485 1019 465 1120 1153 801 88 1061 1927", " 1011 758 171 316 1577 228 44 759 1165 1110 1883", " 1087 1566 1488 1578 475 626 1628 1630 1929 1424", " 521 903 963 124 597 1738 1262 196 526 1265 261", " 203 117 1031 327 1012 772 412 1548 1154 1521 1791", " 925 189 1764 941 852 663 1830 901 1714 959 1579", " 366 1008 1478 1201 59 440 304 761 1358 325 478", " 1109 1114 888 1802 851 461 429 994 1385 1406 541", " 1112 705 836 357 73 1351 824 486 557 1217 1627", " 1358 527 1358 1338 1272 1870 1362 897 1023 1618", " 113 718 697 1586 42 424 130 230 566 560 933 297", " 1856 54 963 1585 1735 655 973 1458 370 533 964", " 608 484 912 1636 68 849 676 939 224 143 1755 512", " 742 176 1460 1826 1222 1871 1627 1935 1206 1784", " 1851 1399 280 702 194 735 1638 535 1557 1994 177", " 1706 963 549 1882 301 414 642 1856 856 1143 1463", " 1612 878 425 679 1753 444 297 674 41 1314 876", " 73 819 611 1018 933 113 696 1170 1832 41 489 686", " 1091 1498 590 1991 1146 1354 1315 652 741 45 1259", " 336 760 1193 1606 1265 182 504 1830 1776 609 1293", " 1998 1550 1557 1562 1628 468 1542 130 1241 1814", " 1175 602 78 216 684 214 1993 1825 1602 1393 1760", " 671 429 28 85 76 787 1499 971 288 1848 605 504", " 1222 664 1707 364 1011 172 1490 241 165 1543 1620", " 914 1592 705 1819 1233 751 1206 976 1540 304 1423", " 1099 1248 1585 1649 972 1865 914 1076 1546 713"};
    vector<string> part2 = {" 1547 679 1770 1263 520 1986 290 1945 866 541 1246", " 1509 319 1871 1602 324 1133 473 1153 1088 571", " 1764 1902 1104 424 1528 1601 970 16 1566 29 1544", " 1348 89 944 638 410 464 1050 682 1589 1343 609", " 61 1222 1759 1955 889 147 691 1950 844 1431 1621", " 749 1068 537 784 36 227 1186 1039 1854 1630 1225", " 1749 1924 1360 258 767 945 956 1319 727 1412 1026", " 356 1002 550 1497 585 1516 1965 1343 76 1914 143", " 1197 1949 1073 427 607 174 430 405 706 627 1813", " 1376 94 566 37 737 1142 815 1995 257 653 1937", " 839 483 1356 1016 1132 231 1842 626 12 638 187", " 1691 1651 1663 1635 894 354 1417 1453 9 1263 234", " 1455 304 635 304 257 149 1125 318 214 1110 29", " 1201 1081 1319 859 51 156 1362 1265 1904 1677", " 1644 910 903 1562 490 949 1283 1654 675 221 1403", " 924 1832 1370 1879 260 1009 620 1972 4 1946 1782", " 505 393 686 1314 699 1590 723 1939 1038 411 1462", " 235 509 1962 1960 494 1516 1270 938 870 59 701", " 1972 265 1118 216 556 1816 331 1040 213 1289 83", " 1955 86 711 485 775 381 1816 1952 542 116 1680", " 1111 1899 1074 789 1978 133 1957 690 114 9 942", " 1791 1724 1364 29 1185 779 1201 1072 1886 1975", " 1072 1334 868 154 296 169 826 1677 1630 651 599", " 1310 694 687 81 117 250 668 1529 680 1865 1422", " 406 827 817 1517 1727 667 1088 1682 1965 1341", " 1687 22 1663 722 65 1310 416 1903 1874 1125 1942", " 746 1763 424 1532 807 269 1319 1603 1908 308 1482", " 1013 1137 631 115 810 85 1557 291 1294 1997 1153", " 1055 1346 709 249 1492 1713 1132 115 440 1959", " 723 1705 996 1053 1270 1480 239 424 1919 867 1660", " 499 487 1197 1463 634 159 23 1147 393 1038 1926", " 648 1459 603 808 99 1831 1293 601 1279 800 353", " 449 1883 541 316 576 763 1568 337 398 1419 1898", " 1829 1852 817 231 450 926 659 230 521 941 1561", " 1148 1163 1656 676 793 362 1755 399 1147 715 947", " 1189 1570 639 1664 1076 516 1522 476 1616 529", " 1235 571 906 1465 1558 963 162 525 550 1470 331", " 1924 351 334 926 911 1738 337 338 1279 394 1637", " 715 165 1592 1950 1136 506 1338 5 338 624 665", " 1971 1609 569 1282 1086 1153 374 653 195 1877", " 1827 397 1573 250 641 1175 820 944 612 1942 290", " 420 1566 1806 1586 217 1451 1616 610 1065 1167", " 894 75 1510 301 1696 1574 1590 1162 1173 1969", " 1359 32 269 1427 511 423 775 780 911 1553 183", " 1392 1496 1765 875 1365 903 256 461 475 973 822", " 123 1548 1578 1790 1606 196 1595 1951 344 755", " 482 1013 1673 1440 1429 1913 1763 1968 409 416", " 1909 1224 1760 435 1205 1487 320 959 1946 807", " 167 701 1368 1693 1788 533 557 975 1448 1022 284", " 223 1332 377 584 949 724 1983 19 777 1221 1112"};
    vector<string> part3 = {" 183 1857 1491 926 325 487 1678 1970 1644 1535", " 1678 669 1069 1992 197 1784 829 1728 1427 1872", " 698 1613 704 1028 1409 1546 1509 1186 239 238", " 444 1314 502 851 1129 112 1651 150 1193 1455 1870", " 682 1466 268 1714 1794 635 1473 973 831 902 443", " 1178 1878 1771 703 365 1382 591 824 238 24 180", " 596 170 328 43 1311 183 1059 1927 1488 1671 529", " 1652 259 1214 1861 1784 1287 743 611 473 1129", " 435 1842 719 1504 868 866 939 1882 1258 751 615", " 599 459 662 64 757 808 279 1490 1436 366 76 1587", " 1387 1834 361 1331 49 929 1493 434 1841 767 1736", " 1811 1600 1838 1893 1983 1329 1353 1370 1245 1795", " 609 1253 1648 1433 1536 1209 1265 1498 1244 1650", " 16 842 190 101 1813 649 1524 1852 475 634 1892", " 1201 1855 1991 1698 920 1781 579 932 545 1341", " 1488 900 526 484 1539 1493 194 253 1012 1561 1835", " 1841 1498 786 530 1541 806 792 1393 1211 1550", " 1579 980 972 1278 74 194 1621 1498 1827 1277 1791", " 583 1579 1160 419 490 160 1450 925 1073 381 1009", " 1968 209 478 504 1371 608 197 75 1723 612 1020", " 762 1057 891 1164 684 1717 1933 1453 742 955 814", " 863 397 1461 616 905 600 137 681 1199 1033 388", " 585 1241 1518 1007 671 242 883 1250 1524 1759", " 106 1622 1096 1297 1917 1679 179 1580 1059 1578", " 751 8 1730 82 996 679 677 1754 900 1785 1566 1094", " 1609 173 1244 1930 1515 169 1056 1192 1974 923", " 749 1652 987 145 447 1578 518 630 1917 1875 1792", " 1470 913 147 694 1092 1816 950 858 641 53 237", " 552 1488 1227 163 956 1184 395 181 98 1066 1066", " 514 1262 579 1079 879 141 612 1948 446 171 1976", " 1490 751 150 1334 1866 215 1283 1008 1433 897", " 368 523 883 1811 1642 1232 188 706 480 322 539", " 1352 1448 209 1647 277 1760 190 423 1667 487 1456", " 29 1615 861 1254 1778 1349 504 862 432 1083 456", " 198 107 753 1822 1297 282 22 456 1948 1125 319", " 1136 1377 1775 1860 999 75 1254 923 636 1644 889", " 154 1233 748 681 1927 1679 451 802 962 200 856", " 364 1717 574 1562 1246 474 275 1551 354 1182 288", " 700 111 644 1466 1173 530 1982 113 1477 382 248", " 891 672 806 373 33 1990 1321 1166 1432 1659 1294", " 1207 579 949 207 1172 167 1397 698 1021 1695 1530", " 789 110 1985 1970 979 1618 16 627 1685 1169 1907", " 1929 98 119 391 1200 1786 487 1200 421 711 272", " 1814 1416 86 319 1581 1332 1268 388 1445 1187", " 508 361 1828 75 432 1153 272 269 694 1886 338", " 1312 1605 678 407 1769 1023 1414 1001 543 1538", " 39 1389 1356 1290 1648 1182 1094 585 988 762 494", " 218 1502 1483 1448 1666 754 105 1085 1096 1526", " 222 1965 1782 873 107 1657 1344 594 1081 81 869", " 1412 1714 969 1252 1217 80 769 1041 1532 934 1780"};
    vector<string> part4 = {" 664 260 654 1937 96 366 1875 1721 836 1681 977", " 456 1726 72 809 1560 1157 1603 1833 1906 441 1376", " 1563 886 1963 1081 1837 798 1203 509 81 1341 77", " 1059 1494 1741 547 475 774 1098 881 1336 1073", " 1401 708 956 667 142"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1639086;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    int numSheep = 15;
    int maxRuns = 300;
    vector<string> part1 = {"1589 482 1169 316 1397 226 1010 13 137 1456 763", " 1044 743 22 1923"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1923;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    int numSheep = 2000;
    int maxRuns = 2000;
    vector<string> part1 = {"2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000"};
    vector<string> part2 = {" 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000"};
    vector<string> part3 = {" 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000"};
    vector<string> part4 = {" 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000", " 2000 2000 2000 2000 2000 2000 2000 2000 2000 2000"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2000;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    int numSheep = 2000;
    int maxRuns = 2;
    vector<string> part1 = {"2000 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"};
    vector<string> part2 = {" 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2000;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    int numSheep = 2000;
    int maxRuns = 2;
    vector<string> part1 = {"2000 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"};
    vector<string> part2 = {" 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 3000;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    int numSheep = 2000;
    int maxRuns = 2;
    vector<string> part1 = {"2000 2000 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"};
    vector<string> part2 = {" 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1"};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2999;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    int numSheep = 2000;
    int maxRuns = 2;
    vector<string> part1 = {"2000 2000 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"};
    vector<string> part2 = {" 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2"};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 3998;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    int numSheep = 2000;
    int maxRuns = 1000;
    vector<string> part1 = {"1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999"};
    vector<string> part2 = {" 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999"};
    vector<string> part3 = {" 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999", " 1 1999 1 1999 1 1999 1 1999 1 1999 1 1999"};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2000;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    int numSheep = 2000;
    int maxRuns = 1;
    vector<string> part1 = {"1987 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"};
    vector<string> part2 = {" 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 3986;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    int numSheep = 2000;
    int maxRuns = 1;
    vector<string> part1 = {"1987 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"};
    vector<string> part2 = {" 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 5985;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    int numSheep = 2000;
    int maxRuns = 6;
    vector<string> part1 = {"1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950"};
    vector<string> part2 = {" 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950"};
    vector<string> part3 = {" 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950"};
    vector<string> part4 = {" 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950", " 1950 1950 1950 1950 1950 1950 1950 1950 1950 1950"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 651300;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    int numSheep = 303;
    int maxRuns = 23;
    vector<string> part1 = {"2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59", " 61 67 71 73 79 83 89 97 101 103 107 109 113 127", " 131 137 139 149 151 157 163 167 173 179 181 191", " 193 197 199 211 223 227 229 233 239 241 251 257", " 263 269 271 277 281 283 293 307 311 313 317 331", " 337 347 349 353 359 367 373 379 383 389 397 401", " 409 419 421 431 433 439 443 449 457 461 463 467", " 479 487 491 499 503 509 521 523 541 547 557 563", " 569 571 577 587 593 599 601 607 613 617 619 631", " 641 643 647 653 659 661 673 677 683 691 701 709", " 719 727 733 739 743 751 757 761 769 773 787 797", " 809 811 821 823 827 829 839 853 857 859 863 877", " 881 883 887 907 911 919 929 937 941 947 953 967", " 971 977 983 991 997 1009 1013 1019 1021 1031 1033", " 1039 1049 1051 1061 1063 1069 1087 1091 1093 1097", " 1103 1109 1117 1123 1129 1151 1153 1163 1171 1181", " 1187 1193 1201 1213 1217 1223 1229 1231 1237 1249", " 1259 1277 1279 1283 1289 1291 1297 1301 1303 1307", " 1319 1321 1327 1361 1367 1373 1381 1399 1409 1423", " 1427 1429 1433 1439 1447 1451 1453 1459 1471 1481", " 1483 1487 1489 1493 1499 1511 1523 1531 1543 1549", " 1553 1559 1567 1571 1579 1583 1597 1601 1607 1609", " 1613 1619 1621 1627 1637 1657 1663 1667 1669 1693", " 1697 1699 1709 1721 1723 1733 1741 1747 1753 1759", " 1777 1783 1787 1789 1801 1811 1823 1831 1847 1861", " 1867 1871 1873 1877 1879 1889 1901 1907 1913 1931", " 1933 1949 1951 1973 1979 1987 1993 1997 1999"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 12048;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    int numSheep = 2000;
    int maxRuns = 51;
    vector<string> part1 = {"1930 1943 1939 1902 1917 1982 1924 1941 1998 1967", " 1962 1921 1949 1984 1938 1940 1983 1954 1923 1904", " 1984 1933 1904 1988 1971 1927 1906 1915 1993 1942", " 1905 1977 1944 1942 1952 1922 1978 1931 1943 1961", " 1921 1925 1914 1956 1988 1924 1997 1947 1934 1934", " 1918 1932 1968 1911 1916 1944 1982 1971 1966 1943", " 1969 1964 1945 1973 1954 1932 1993 1916 1965 1956", " 1985 1922 1907 1984 1909 1976 1957 1997 1952 1957", " 1930 1990 1937 1922 1949 1902 1900 1921 1980 1925", " 1984 1922 1943 1971 1911 1912 1913 1942 1924 1938", " 1989 1958 1955 1970 1951 1987 1974 1909 1924 1926", " 1902 1937 1912 1924 1940 1948 1972 1914 1907 1971", " 1915 1916 1995 1975 1957 1930 1971 1975 1939 1922", " 1995 1920 1991 1935 1993 1961 1956 1909 1958 1940", " 1962 1946 1981 1969 1906 1913 1932 1954 1943 1948", " 1909 1984 1905 1910 1927 1968 1996 1999 1908 1983", " 1932 1933 1951 1967 1997 1995 1999 1920 1925 1969", " 1960 1947 1942 1998 1937 1969 1913 1920 1989 1950", " 1999 1926 1969 1948 1947 1930 1999 1915 1994 1901", " 1985 1965 1972 1951 1925 1903 1967 1975 1926 1956", " 1982 1953 1971 1953 1956 1944 1931 1969 1921 1993", " 1954 1977 1905 1924 1953 1962 1963 1903 1921 1921", " 1953 1940 1925 1995 1977 1952 1903 1930 1933 1998", " 1917 1943 1942 1910 1926 1987 1923 1911 1998 1923", " 1924 1979 1900 1907 1918 1936 1966 1906 1969 1912", " 1909 1923 1968 1953 1962 1982 1919 1930 2000 1980", " 1959 1963 1963 1983 1923 1957 1901 1921 1996 1966", " 1934 1926 1996 1999 1941 1962 1966 1966 2000 1976", " 1991 1924 1944 1905 1949 1957 1945 1949 1935 1990", " 1927 1988 1983 1934 1946 1903 1948 1943 1916 1935", " 1911 1962 1945 1972 1923 1902 1990 1964 1907 1967", " 1942 1901 1964 1981 1923 1941 1950 1965 1917 1915", " 1913 1997 1997 1937 1984 1969 1983 1998 1962 1973", " 1972 1941 1971 1937 1925 1948 1940 1998 1997 1986", " 1921 1972 1925 1970 1961 1923 1925 1935 1941 1921", " 1998 1953 1996 1971 1904 1916 1963 1902 1984 1944", " 1937 1966 1925 1968 1931 1920 1976 1940 1997 1905", " 1960 1943 1940 1906 1978 1963 1980 1921 1973 1998", " 1941 1911 1912 1963 1919 1963 1989 1944 1905 1967", " 1918 1975 1924 1986 1921 1919 1952 1921 1947 1946", " 1931 1905 1901 1904 1902 1976 1957 1919 1911 1931", " 1929 1973 1967 1939 1978 1909 1945 1954 1985 1917", " 1972 1925 1966 1918 1914 1939 1998 1921 1997 1926", " 1937 1944 1967 1935 1913 1936 1934 1978 1916 1958", " 1900 1953 1955 1977 1954 1917 1932 1956 1926 1923", " 1912 1993 1953 1982 1936 1913 1904 1961 1926 1940", " 1930 1943 1994 1926 1935 1902 1915 1911 1992 1932", " 1913 1910 1957 1959 1998 1948 1925 1981 1989 1965", " 1973 1965 1935 1915 1972 1959 1993 1926 1961 1917", " 1987 1939 1920 1962 1926 1921 1978 1961 1955 1978"};
    vector<string> part2 = {" 1919 1968 1983 1905 1975 1963 1901 1997 1934 1958", " 1983 1993 1944 1977 1970 1993 1922 1989 1926 1990", " 1987 1928 1930 1966 1905 1965 1936 1958 1929 1991", " 1905 1904 1978 1919 1964 1922 1981 1922 1996 1967", " 1909 1954 1997 1994 1967 1995 1961 1966 1946 1968", " 1941 1976 1996 1976 1920 1902 1959 1968 1961 1975", " 1937 1930 1955 1902 1915 1944 1976 1971 1986 1925", " 1965 1909 1907 1970 1991 1919 1961 1929 1953 1992", " 1956 1900 1912 1957 1951 1952 1907 1994 1982 1969", " 1926 1992 1911 1905 1989 1976 1999 1993 1985 1939", " 1966 1988 1966 1960 1919 1928 1902 1974 1959 1921", " 1931 1949 1927 1954 1969 1956 1942 1910 1923 2000", " 1994 1915 1923 1941 1959 1999 1992 1931 1950 1950", " 1963 1943 1937 1970 1966 1976 1920 1914 1919 1917", " 1986 1924 1921 1945 1949 1904 1927 1936 1982 1904", " 1900 1972 1914 1918 1949 1996 1927 1906 1990 1982", " 1985 1985 1945 1939 1937 1973 1973 1989 1993 1967", " 1961 1934 1992 1951 1993 1908 2000 1994 1954 1930", " 1962 1986 1968 1923 1969 1998 1977 1981 1939 1971", " 1949 1969 1931 1954 1945 1963 1944 1973 1969 1993", " 1985 1987 1953 1935 1965 1912 1911 2000 1930 1969", " 1994 1938 1971 1964 1985 1942 1939 1938 1942 1976", " 1974 1917 1923 1956 1934 1953 1922 1921 1912 1987", " 1945 1926 1985 1940 1987 1911 1900 1906 1928 1982", " 1938 1987 1997 1986 1993 1953 1907 1948 1967 1931", " 1959 1988 1991 1915 1906 1981 1957 1999 1988 1975", " 1924 1918 1936 1978 1947 1946 1941 1910 1950 1905", " 1994 1966 1908 1969 1945 1983 1991 1903 1947 1923", " 1981 1991 1990 1945 1928 1952 1902 1956 1963 1916", " 1985 1994 1940 1959 1961 1980 1932 1999 1933 1977", " 1926 1935 1986 1924 1971 1900 1930 1990 1997 1988", " 1986 1924 1988 1923 1932 1964 1922 1969 1947 1913", " 1934 1951 1949 1932 1903 1927 1980 1971 1931 1932", " 1968 1993 1986 1940 1994 1992 1913 1974 1962 1967", " 1934 1931 1918 1942 1976 1958 1944 1910 1958 1993", " 2000 1916 1924 1988 1966 1954 1924 1987 1950 1933", " 1935 1970 1959 1909 1947 1962 1934 1947 1972 1990", " 1957 1927 1954 1989 1911 1927 1955 1989 1992 1948", " 1977 1911 1949 1947 1991 2000 1996 1922 1976 1985", " 1973 1945 1985 1918 1995 1962 1984 1973 1924 1989", " 1953 1914 1920 1924 1928 1989 1941 1918 1979 1902", " 1976 1940 1983 1983 1939 1950 1949 2000 1920 1981", " 1915 1900 1990 1938 1931 1903 1915 1938 1962 1989", " 1920 1920 1939 1977 1953 1965 1926 1916 1958 1963", " 1973 1966 1944 2000 1977 1935 1984 1914 1947 1922", " 1928 1943 1979 1910 1926 1941 1976 1930 1994 1923", " 1974 1954 1980 1990 2000 1959 1943 1953 1968 1985", " 1934 1936 1938 1952 1979 1984 1969 1973 1924 1935", " 1920 1952 1939 1960 1928 1908 1908 1923 1976 1984", " 1965 2000 1948 1942 1927 1909 1979 1905 1931 1990"};
    vector<string> part3 = {" 1939 1982 1948 1993 1963 1984 1927 2000 1966 1997", " 2000 1938 1932 1952 1969 1983 1905 1945 1902 1977", " 1950 1940 1984 1902 1980 1983 1961 1921 1905 1983", " 1920 1973 1922 1949 1941 1958 1967 1965 1997 1910", " 1994 1951 1935 1984 1968 1979 1921 1912 1902 1987", " 1972 1952 1949 1959 1957 1964 1960 1923 1902 1973", " 1943 1953 1959 1966 1908 1947 2000 1923 1985 1993", " 1960 1920 1965 1955 1910 1978 1909 1955 1963 1950", " 1995 1953 1967 1947 1921 1931 1935 1959 1933 1908", " 1962 1915 1913 1955 1976 1950 1999 1946 1993 1968", " 1999 1927 1965 1927 1955 1912 1932 1975 1945 1979", " 1970 1936 1996 1986 1979 1952 1921 1958 1966 1913", " 1906 1957 1915 1990 1939 1921 1991 1926 1974 1921", " 1933 1930 1905 1951 1924 1986 1905 1924 1964 1944", " 1963 1932 1933 1921 1997 1976 1939 1915 1991 1977", " 1912 1963 1943 1931 1999 1940 1918 1963 1942 1993", " 1954 1904 1931 1927 1948 1999 1970 1946 1999 1913", " 1940 1978 1970 1986 1926 1997 1958 1936 1981 1932", " 1958 1974 1973 1930 1956 1992 1913 1961 1920 1987", " 1962 1947 1939 1911 1924 1906 1984 1911 1939 1956", " 1922 1996 1918 1983 1958 1949 1981 1906 1936 1977", " 1973 1932 1926 1915 1998 1931 1955 1901 1948 1988", " 1949 1962 1986 1968 1939 1990 1920 1934 1960 1906", " 1949 1973 1921 1921 1917 1913 1995 1954 1938 1993", " 1951 1993 1976 1919 1930 1990 1909 1996 1973 1950", " 1978 1965 1993 1936 1929 1903 1987 1971 1938 1939", " 1999 1944 1989 1925 1902 1938 1922 1973 1978 1995", " 1971 1994 1963 1953 2000 1960 1977 1950 1997 1933", " 1922 1931 1972 1968 1914 1940 1997 1996 1938 1931", " 1913 1938 1994 1956 1943 1977 1957 1909 1946 1952", " 1936 1918 1961 1945 1910 1984 1929 1964 1917 1913", " 1969 1923 1955 1936 1900 1947 1909 1950 1913 1973", " 1976 1975 1905 1966 1940 1943 1931 1952 1955 2000", " 1946 1904 1986 1935 1906 1935 1915 1970 1916 1950", " 1965 1933 1939 1928 1946 1944 1917 1972 1944 1967", " 1999 1973 1931 1950 1975 1979 1996 1943 1991 1952", " 1960 2000 1973 1972 1904 1978 1927 1996 1966 1906", " 1984 1953 1920 1958 1912 1964 1937 1975 1963 1943", " 1976 1926 1916 1930 1946 1920 1935 1962 1945 1926", " 1966 1918 1992 1948 1981 1901 1912 1972 1965 1908", " 1988 1967 1954 1908 1925 1925 1986 1943 1922 1923", " 1931 1924 1990 1916 1981 1977 1902 1918 1915 1919", " 1965 1915 1920 1980 1919 1951 1992 1929 1904 1909", " 1907 1966 1942 1948 1991 1948 1930 1986 1991 1932", " 1905 1969 1958 1954 1990 1988 1927 1941 1901 1982", " 1957 1933 1959 1999 1996 1984 1966 1976 1941 1909", " 1919 1958 1978 1934 1917 1951 1910 1988 1983 1965", " 1965 1982 1998 1934 1963 1902 1980 1957 1953 1962", " 1988 1945 1986 1900 1906 1913 1939 1909 1976 1944", " 1993 1914 1900 1981 1977 1999 1910 1904 1904 1966"};
    vector<string> part4 = {" 1949 1926 1922 1965 1949 1986 1966 1958 1970 1991", " 1990 1905 1924 1944 1981 1954 1961 1920 1917 1986", " 1978 1951 1919 1995 1993 1950 1939 1931 1998 1979", " 1917 1949 1940 1911 1983 1926 1980 1961 1971 1930", " 1923 1920 1918 1904 1915 1929 1996 1985 1920 1986", " 1918 1954 1919 1994 1969 1929 1912 1957 1991 1913", " 1966 1962 1978 1926 1969 1971 1900 1933 1912 1986", " 1979 1900 1956 2000 1940 1976 1930 1996 1994 1919", " 1954 1942 1993 1984 1948 1967 1942 1916 1952 1902", " 1979 1911 1954 1955 1971 1945 1952 1962 1923 1981", " 1913 1926 1934 1942 1994 1976 1931 1901 1935 1966", " 1966 2000 1909 1928 1910 1964 1961 1966 1924 1919", " 1934 1950 1998 1955 1924 1917 1909 1900 1934 1948", " 1943 1929 1971 1937 1979 1974 1968 1916 1977 1995", " 1903 1919 1903 1901 1962 1935 1904 1971 1966 1903", " 1944 1986 1969 1972 1977 1961 1950 1922 1903 1993", " 1979 1974 1948 1970 1954 1900 1925 1906 1955 1998", " 1937 1931 1917 1997 1938 1919 1975 1932 1986 1920", " 1977 1977 1927 1928 1997 1993 1951 1999 1967 1901", " 1963 1997 1936 1920 1900 1912 1968 1942 1956 1966", " 1946 1961 1979 1928 1902 1992 1943 1909 1987 1995", " 1970 1995 1907 1940 1997 1948 1920 1913 1933 1934", " 1910 2000 1969 1976 1932 1989 1929 1999 1944 1918", " 1924 1912 1980 1910 1902 1945 1900 1930 1932 1916", " 1964 1951 1951 1960 1920 1906 1949 1905 1985 1942", " 1986 1931 1922 1922 1926 2000 1933 1902 1935 1932", " 1936 1926 1937 1911 1953 1990 1959 1907 1953 1966", " 1919 1960 1907 1936 1929 1993 1903 1902 1992 1983", " 1979 1983 1960 1963 1985 1974 1942 1969 1914 1979", " 1986 1904 1995 1995 1945 1974 1920 1933 1917 1922", " 1967 1953 1945 1966 1990 1920 1924 1965 1926 1913", " 1960 1993 1940 1917 1913 1929 1914 2000 1962 1960", " 1948 2000 1997 1903 1977 1993 1926 1913 1942 1926", " 1982 1953 1930 1961 1964 1904 1971 1967 1988 1936", " 1934 1937 1943 1980 1907 1934 1969 2000 1955 1963", " 1976 1911 1938 1969 1988 1981 1937 1965 1970 1935", " 1963 1948 1905 1959 1954 1916 1955 1951 1986 1993", " 1967 1929 1902 1977 1917 1938 1991 1931 1968 1937", " 1973 1940 1957 1905 1951 1997 1902 1918 1952 1909", " 1949 1949 1918 1956 1962 1998 1901 1974 1941 1915", " 1900 1946 1941 1951 1985 1958 1999 1963 1947 1912", " 1971 1990 1972 1909 1947 1933 1951 1990 1942 1907", " 1994 2000 1968 1952 1959 1973 2000 1933 1989 1918", " 1944 1980 1967 1915 1952 1921 1928 1956 1902 1999", " 1980 1960 1960 1917 1979 1919 1988 1901 1920 1930", " 1904 1993 1930 1936 1996 1919 1980 1971 1976 1961", " 1941 1922 1926 1901 1911 1923 1950 1953 1978 1912", " 1929 1978 1949 1939 1923 1974 1916 1933 1907 1962", " 1975 1966 1990 1946 1997 1920 1920 1929 1994 1932", " 1966 1941 1921 1955 1948 1947 1979 1929 1917 1947"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 77362;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    int numSheep = 2000;
    int maxRuns = 400;
    vector<string> part1 = {"1956 1931 1920 1951 1991 1960 1924 1970 1960 1901", " 1986 1975 1958 1940 1905 1963 1921 1940 1994 1949", " 1945 1958 1923 1930 1917 1961 1941 1923 1970 1915", " 1955 1923 1913 1913 1971 1991 1911 1960 1992 1953", " 1938 1962 1932 1928 1902 1973 1936 1979 1956 1955", " 1941 1920 1906 1901 1951 1972 1968 1969 1951 1902", " 1934 1983 1903 1976 1920 1904 1906 1954 1909 1909", " 1916 1971 1942 1905 1913 1976 1956 1978 1914 1956", " 1935 1925 1945 1950 1998 1995 1985 1916 1905 1952", " 1903 1989 1922 1929 1961 1921 2000 1964 1994 1961", " 1941 1985 1921 1967 1963 1929 1977 1914 1957 1991", " 1909 1996 1960 1983 1969 1916 1997 1906 1922 1912", " 1975 1968 1928 1945 1913 1915 1962 1958 1929 1911", " 1952 1952 1920 1917 1982 1952 1998 1984 1971 1948", " 1972 1912 1992 1910 1937 1916 1919 1990 1913 1926", " 1971 1904 1929 1904 1935 1970 1962 1923 1964 1940", " 1938 1935 1989 2000 1922 1958 1992 1962 1954 1907", " 1971 1953 1986 1994 1971 1980 1974 1974 1960 1942", " 1902 1965 1912 1994 1973 1937 1979 1935 1940 1931", " 1908 1918 1905 1911 1907 1948 1954 1964 1921 1989", " 1920 1923 1908 1984 1927 1950 1989 1939 1983 1915", " 1922 1924 1933 1929 1948 1917 1906 1982 1909 1919", " 1920 1993 1981 1984 1936 1903 1984 1907 1964 1901", " 1947 1933 1923 1929 1912 1969 1900 1963 1993 1948", " 1987 1963 1951 1975 1966 1901 1944 1971 1997 1986", " 1921 1901 1950 1971 1994 1994 1972 1928 1905 1919", " 1963 1902 1923 1980 1925 1920 1927 1969 1938 1920", " 1965 1979 1949 1993 1921 1935 1976 1960 1986 1942", " 1963 1937 1993 1910 1993 1922 1939 1989 1950 1907", " 1958 1954 1905 1905 1909 1925 1989 1922 1977 1950", " 1903 1917 1994 1913 1952 1908 1902 1938 1983 1948", " 1964 1963 1975 2000 2000 1963 1956 1983 1901 1966", " 1991 1919 1999 1991 1964 1911 1900 1948 1996 1948", " 1990 1910 1937 1914 1929 1959 1934 1905 1921 1921", " 1925 1929 1948 1931 1958 1990 1915 1995 1966 1994", " 1957 1916 1947 1984 1938 1983 1954 1933 1981 1937", " 1922 1907 1916 1922 1908 1994 1900 1992 1971 1902", " 1962 1967 1983 1961 1926 1926 1900 1942 1988 1959", " 1992 1905 1928 1929 1930 1980 1931 1928 1954 1946", " 1929 1921 1901 1929 1983 1936 1928 1974 1942 1971", " 1960 1922 1935 1963 1956 1935 1994 1984 1931 1935", " 1929 1988 1978 1934 1973 1902 1912 1943 1915 1975", " 1997 1932 1927 1999 1927 1926 1964 1918 1973 1953", " 1965 1953 1997 1959 1932 1929 1974 1940 1977 1992", " 1901 1989 1985 1941 1984 1902 1900 1965 1966 1953", " 1928 1901 1964 1940 1979 1991 1937 1969 1926 1954", " 1946 1992 1999 1917 1925 1948 1979 1961 1953 1913", " 1955 1966 1943 1995 1980 1999 1973 1940 1950 1951", " 1969 1947 1904 1962 1995 1968 1950 1977 1932 1999", " 1973 1919 1953 1947 1982 1914 1916 1956 1950 1914"};
    vector<string> part2 = {" 1941 1985 1982 1945 1913 1901 1953 1961 1910 1942", " 1969 1909 1910 1920 1951 1988 1989 1992 1983 1986", " 1964 1989 1951 1949 1903 1996 1971 1948 1964 1905", " 1966 1994 1948 1907 1932 1908 1919 1976 1917 1900", " 1977 1925 1926 1912 1916 1996 1998 1983 1934 1984", " 1927 1947 1939 1908 1962 2000 1951 1979 1944 1989", " 1941 1921 1930 1993 1924 1983 1988 1975 1921 1968", " 1993 1968 1998 1943 1907 1989 1982 1939 1935 1957", " 1948 1935 1997 1984 1917 1962 1935 1915 1924 1991", " 1999 1934 1917 1942 1944 1906 1911 1938 1905 1976", " 1932 1985 1930 1989 1990 1940 1964 1932 1964 1948", " 1921 1968 1979 1947 1993 1918 1921 1978 1941 1900", " 1936 1988 1995 1992 1914 1934 1952 1996 1966 1947", " 1905 1981 1918 1951 1978 1904 1967 1944 1965 1909", " 1904 1948 1928 1931 1949 1926 1910 1926 1971 1986", " 1949 1994 1921 1949 1955 1911 1964 1996 1996 1992", " 1932 1964 1973 1956 1952 1933 1926 1935 1949 1902", " 1901 1950 1910 1918 1954 1999 1912 1901 1980 1923", " 1995 1990 1928 1995 1955 1991 1981 1951 1948 1908", " 1988 1992 1917 1965 1924 1937 1918 1926 1951 1931", " 1943 1939 1927 1984 1941 1903 1968 1923 1953 1998", " 1935 1979 1918 1991 1929 1935 1976 1920 1935 1952", " 1902 1999 1910 1937 1938 1992 1926 1971 1996 1982", " 1981 1949 1943 1917 1959 1980 1922 1998 1980 1963", " 1943 1959 1933 1915 1974 1920 1991 1922 1976 1983", " 1944 1969 1928 1979 1917 1929 1907 1992 1967 1987", " 1929 1912 1989 1933 1918 1966 1932 1917 1917 1973", " 2000 1924 1971 1994 1949 1997 1962 1985 1947 1925", " 2000 1944 1955 1993 1909 1991 1915 1934 1948 1934", " 1909 1951 1945 1985 1915 1947 1909 1989 1961 1959", " 1943 1955 1978 1943 1956 1918 1921 1983 1920 1900", " 1991 1901 1945 1923 1934 1971 1909 1916 1956 1905", " 1989 1928 1923 1975 1964 1940 1975 1929 1948 1987", " 1964 1980 1995 1929 1963 1933 1962 1959 1964 1944", " 1954 1944 1981 1971 1973 1958 1910 1947 1986 1916", " 1914 1972 1959 1959 2000 1962 1916 1961 1904 1937", " 1995 1980 1982 1993 1950 1937 1931 1926 1971 1947", " 2000 1934 1961 1948 1937 1928 1930 1996 1934 1919", " 1993 1900 1939 1924 1947 1918 1904 1986 1972 1916", " 1943 1946 1925 1984 1917 1965 1941 1995 1959 1986", " 1936 1981 1970 1963 1908 1976 1960 1944 1996 1946", " 1975 1967 1950 1900 1933 1986 1932 1964 1910 1946", " 1981 1963 1957 1979 1919 1949 1906 1916 1918 1915", " 1918 1937 1915 1933 1935 1947 2000 1962 1906 1963", " 1979 1973 1952 1982 1930 1945 1970 1954 1978 1905", " 1956 1997 1926 1929 1979 1961 1917 1964 1978 1954", " 1932 1928 1912 1994 1968 1904 1921 1931 1906 1998", " 1905 1951 1962 1914 1987 1908 1902 1948 1963 1933", " 1966 1928 1964 1957 1908 1955 1915 1937 1989 1948", " 1995 1991 1939 1979 1910 1977 1998 1942 1972 1929"};
    vector<string> part3 = {" 1907 1948 1952 1902 1959 1994 1926 1976 1911 1998", " 1998 1972 1966 1958 1900 1918 1918 1941 1914 1943", " 1903 1908 1983 1984 1981 1967 1941 1937 1997 1930", " 1909 1935 1922 1977 1959 1934 1971 1978 1962 1922", " 1976 1925 1928 1980 1979 1996 1960 1995 1985 1989", " 1920 1929 1937 1993 1987 1953 1987 1997 2000 1958", " 1959 1976 1947 1912 1990 1906 1949 1921 1973 1974", " 1951 1926 1902 1961 1980 1901 1920 1952 1915 1971", " 1933 1983 1934 1968 1909 1979 1917 1993 1917 1956", " 1968 1927 1996 1936 1933 1952 1948 1929 1929 1987", " 1915 1998 1909 1966 1971 1993 1934 1984 1954 1943", " 1933 1910 1956 1983 1928 1906 1955 1933 1900 1962", " 1939 1962 1912 1981 1963 1944 1991 1908 1986 1999", " 1950 1959 1934 1940 1922 1983 1935 1968 1999 1978", " 1914 1998 1924 1907 1951 1961 1915 1965 1912 1960", " 1931 1962 1941 1931 1953 1956 1918 1931 1995 1923", " 1944 1965 1959 1996 1997 1946 1990 1991 1950 1918", " 1949 1924 1911 1916 1939 1906 1973 1993 1978 1941", " 1979 1986 1919 1900 1939 1955 1984 1970 1994 1992", " 1939 1991 1930 1967 1989 1932 1988 1922 1934 1925", " 1976 1948 1923 1969 2000 1941 1916 1949 1956 1964", " 1956 1951 1939 1999 1998 1929 1984 1908 1965 1967", " 1939 1939 1938 1914 1904 1914 1912 1966 1993 1929", " 1941 1909 1926 1905 1922 1959 1948 1992 1957 1990", " 1927 1935 1958 1986 1954 2000 1960 1939 1909 1955", " 1985 1913 1960 1984 1981 1926 1964 1918 1903 1982", " 1958 1902 1971 1959 1968 1922 1935 1920 1961 1937", " 1914 1906 1940 1954 1976 1911 1968 1993 1966 1931", " 1958 1955 1975 1906 1910 1970 1908 1924 1988 1974", " 1931 1927 1918 1974 1993 1959 1963 1978 1934 1953", " 1926 1969 1930 1947 1970 1952 1989 1913 1903 1948", " 1950 1902 1981 1988 1907 1994 1945 1923 1937 1947", " 1992 1906 1983 1982 1937 1940 1951 1922 1909 1919", " 1992 1933 1907 1975 1952 1943 1976 1962 1915 1908", " 1968 1988 1967 1950 1938 1986 1953 1977 1993 1945", " 1961 1973 1945 1929 1924 1987 1953 1975 1941 1912", " 1973 1939 1977 1966 1943 1915 1949 1990 1950 1975", " 1988 1976 1987 1968 1920 1908 1987 2000 1966 1954", " 1912 1962 1967 1949 1927 1939 1982 1971 1992 1989", " 1990 1905 1944 1915 1943 1965 1956 1907 1953 1969", " 1912 1995 1952 1926 1974 1926 1993 1980 1936 1980", " 1957 1910 1939 1933 1931 1961 1980 1978 1934 1972", " 1910 1914 1944 1961 1921 1958 1932 1975 1960 1986", " 1914 1915 1904 2000 1922 1945 1927 1933 1941 1993", " 1916 1904 1907 1905 1949 1900 1936 1978 1988 1914", " 1917 1969 1925 1949 1904 1992 1940 1971 1936 1971", " 1971 1982 1950 1961 1964 1997 1984 1926 1910 1911", " 1929 1989 1984 1997 1968 1920 1981 1911 1929 1995", " 1942 1906 1982 1947 1912 1943 1956 1964 1961 1993", " 1991 1981 1918 1902 1948 1934 1995 1990 1921 1917"};
    vector<string> part4 = {" 1971 1949 1986 1959 1977 1906 1903 1908 1960 1907", " 1990 1987 1944 1939 1944 1970 1906 1919 1981 1941", " 1984 1933 1917 1987 1981 1908 1966 1917 1938 1917", " 1974 1906 1900 1927 1971 1983 1981 1916 1991 1943", " 1956 1921 1990 1930 1948 1954 1952 1985 1974 1944", " 1992 1927 1915 1912 1935 1921 1994 1966 1963 1933", " 1901 1955 1951 1922 1953 1919 1995 1945 1981 1905", " 1933 1972 1944 1925 1949 1951 1958 1910 1994 1993", " 1925 1959 1911 1980 1929 1915 1992 1935 1938 1964", " 1934 1958 1948 1900 1919 1916 1970 1935 1945 1975", " 1914 1940 1904 1977 1941 1910 1981 1931 1934 1966", " 1954 1992 1930 1955 1992 1953 1938 1920 1957 1983", " 1969 1998 1937 1921 1988 1958 1986 1955 1920 1907", " 1973 1909 1983 1917 1980 1956 1996 1921 1917 1937", " 1943 1949 1918 1932 1905 1905 1993 1954 1965 1998", " 1906 1907 1929 1914 1935 1993 1987 1997 1942 1996", " 1908 1962 1903 1972 1984 1906 1913 1970 1987 1921", " 1923 1999 1961 1980 1987 1996 1983 1916 1940 1990", " 1995 1941 1982 1901 1964 1940 1970 1998 1933 1996", " 1991 1944 1953 1915 1916 1992 1981 1944 1978 1969", " 1968 1983 1914 1976 1960 1984 1939 1952 1938 1977", " 1975 1904 1912 1993 1908 1915 1993 1950 1945 1999", " 1940 1950 1994 1907 1917 1924 1918 1999 1977 1972", " 1955 1922 1967 1987 1985 1995 1979 1939 1914 1962", " 1966 1978 1963 1953 1953 1978 1956 1978 1919 1929", " 1940 1915 2000 1999 1939 1942 1997 1952 1929 1905", " 1941 1988 1999 1915 1956 1934 1944 1921 1993 1934", " 1963 1946 1948 1967 1987 1932 1904 1995 1947 1949", " 1926 1982 1987 1917 1943 1910 1940 1936 1900 1994", " 1940 1992 1950 1917 1931 1968 1980 1920 1956 1919", " 1946 1986 1922 1917 1995 1910 1992 1936 1921 1998", " 1964 1949 1910 1908 1904 1918 1925 1952 1954 1966", " 1930 1988 1908 1976 1964 1917 1934 1961 1958 1962", " 1915 1904 1933 1998 1968 1932 1981 1982 1944 1966", " 1951 1915 1924 1919 1970 1942 1906 1982 1924 1921", " 1979 1900 1914 1988 1954 1933 1978 1944 1969 1964", " 1941 1941 1936 1936 1958 1904 1976 1912 1935 1919", " 1919 1953 1954 1961 1950 1901 1921 1999 1940 1971", " 1957 1988 1909 1967 1957 1960 1915 1977 1913 1926", " 1955 1908 1924 1990 1941 1937 1921 1983 1950 1908", " 1905 1914 1965 1952 1940 1992 1932 1930 1966 1941", " 1959 1945 1977 1933 1985 1941 1949 1933 1997 1974", " 1972 1934 1925 1901 1961 1905 1914 1902 1930 1993", " 1961 1934 1914 1977 1907 1999 1929 1936 1987 1972", " 1970 1957 1948 1961 1947 1901 1970 1974 1900 2000", " 1932 1931 1935 1982 1996 1925 1996 1949 1932 1949", " 1948 1986 1997 1991 1969 1926 1922 1985 1937 1980", " 1930 1981 1909 1912 1945 1928 1928 1934 1944 1950", " 1919 1947 1954 1925 1908 1900 1926 1937 1900 1946", " 1904 1924 1944 1937 1999 1988 1954 1945 1963 1942"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 9900;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    int numSheep = 2000;
    int maxRuns = 1000;
    vector<string> part1 = {"1990 1925 1920 1917 1954 1993 1963 1998 1943 1913", " 1911 1983 1918 1942 1979 1956 1949 1976 1927 1913", " 1936 1975 1989 1995 1998 1970 1905 1919 1983 1911", " 1989 1956 1976 1930 1955 1916 1929 1980 1934 1929", " 1914 1943 1932 1938 1958 1900 1976 1994 1954 1924", " 1987 1949 1969 1920 1938 1957 1928 1934 1930 1946", " 1912 1938 1948 1965 1969 1911 1932 1903 1936 1918", " 1941 1924 1927 1920 1998 1967 1980 1961 1993 1989", " 1942 1934 1999 1983 1975 1943 1935 1962 1975 1922", " 1996 1912 1906 1932 1926 1947 1920 1942 1920 1907", " 1991 1919 1900 1937 1964 1934 1949 1999 1934 1911", " 1936 1948 1929 1906 1932 1905 1939 1903 1928 1967", " 1919 1913 1965 1929 1969 1920 1956 1937 1965 1926", " 1914 1945 1956 2000 1904 1906 1915 1998 1959 1978", " 1985 1906 1980 1931 1938 1947 1923 1936 1931 1977", " 1971 1960 1906 1917 1932 1922 1995 1982 1962 1920", " 1959 1965 1965 1942 1910 1998 1982 1993 1926 1914", " 1912 1927 1941 1963 1927 1938 1989 1928 1922 1929", " 1952 1907 1951 1995 1978 1985 1945 1952 1994 1961", " 1904 1909 2000 1964 1992 1908 1933 1992 1952 1930", " 1991 1986 1906 1944 1971 1994 1935 1923 1979 1985", " 1993 1998 1977 1977 1919 1965 1940 1941 1935 1953", " 1907 1965 1903 1943 1903 1999 1945 1932 1953 1992", " 1953 1917 1915 1928 1965 1988 1990 1902 1992 1935", " 1978 1905 1982 1990 1982 1999 1932 1918 1997 1966", " 1934 1935 1908 1909 1944 1940 1928 1916 1970 1907", " 1908 1961 1976 1905 1957 1915 1925 1905 1926 1974", " 1979 1979 1930 1995 1978 1912 1990 1996 1969 1987", " 1960 1912 1958 1914 1900 1977 1933 1977 1940 1994", " 1999 1970 1947 1925 1940 1976 1939 1982 1982 1964", " 1915 1971 1967 1941 1937 1959 1913 1907 1980 2000", " 1936 1924 1994 1965 1977 1995 1973 1952 1994 1922", " 1914 1906 1916 1964 1900 1964 1919 1976 1909 1928", " 1969 1948 1990 1963 1935 1979 1993 1933 1971 1947", " 1997 1993 1954 1957 1914 1918 1932 1911 1932 1933", " 1913 1903 1936 1962 1939 1965 1989 1975 1974 1934", " 1954 1961 1963 1918 1988 1929 1981 1929 1957 1950", " 1954 1909 1922 1976 1944 1933 1904 1914 1979 1950", " 1919 1936 1946 1927 1972 1938 1936 1980 1949 1965", " 1916 1949 1995 1943 1924 1910 1948 1911 1966 1985", " 1930 1960 1986 1904 1961 1919 1964 1986 1987 1920", " 1954 1940 1916 1974 1917 1970 1967 1984 1905 1965", " 1964 1906 1935 1902 1922 1919 1970 1935 1940 1904", " 1985 1946 1992 1957 1907 1917 1947 1939 1977 1943", " 1946 1965 1984 1973 1965 1934 1919 1991 1919 1993", " 1942 1934 1931 1921 1924 1971 1909 1969 1900 1921", " 1996 1934 1925 1989 1945 1933 1970 1952 1913 1977", " 1921 1947 1924 1974 1900 1917 1998 1959 1905 1902", " 1910 1972 1998 1938 1981 1954 1956 1943 1904 1998", " 1958 1932 1987 1913 1907 1907 1917 1996 1955 1988"};
    vector<string> part2 = {" 1942 1923 1901 1976 1969 1948 1911 1972 1931 1952", " 1907 1928 1900 1959 1950 1928 1929 1999 1965 1904", " 2000 1912 1927 1934 1920 1927 1916 1938 1988 1999", " 1938 1935 1915 1933 1984 1908 1911 1929 1980 1997", " 1945 1927 1963 1918 1943 1920 1965 1962 1911 1928", " 1949 1968 1904 1905 1991 1938 1918 1927 2000 1972", " 1944 1990 1999 1967 1946 1970 1997 1974 1975 1959", " 1994 1929 1975 1917 1929 1990 1948 1964 1917 1940", " 1905 1909 1938 1981 1960 1940 1971 1919 1904 1917", " 1980 1984 1972 1982 1939 1977 1966 1975 1960 1900", " 1997 1940 1910 1983 1961 1951 1939 1987 1931 1941", " 1968 1960 1965 1918 1914 1952 1938 1970 1921 1972", " 1904 1907 1933 1956 1905 1941 1920 1900 1935 1970", " 1930 1958 1960 1929 1905 1999 1989 1979 1934 1933", " 1962 1965 1904 1972 1915 1963 1934 1967 1997 1901", " 1905 1975 1948 1942 1920 1971 1905 1919 1987 1980", " 1958 1925 1952 1922 1963 1914 1904 1927 1958 1913", " 1975 1967 1963 1914 1985 1923 1971 1934 1964 1996", " 1911 1914 1914 1973 1980 1993 1914 1906 1956 1942", " 1923 1934 1903 1979 1936 1970 1938 1968 1978 1964", " 1916 1921 1940 1951 1964 1987 1937 1902 1963 1958", " 1999 1904 1946 1963 1939 1985 1976 1976 1991 1996", " 1977 1935 1972 1955 1935 1973 1939 1916 1958 1994", " 1979 1950 1939 1931 1975 1986 1947 1967 1931 1964", " 1981 1966 1942 1973 1983 1910 1968 1949 2000 1990", " 1960 1952 1928 1996 1945 1968 1982 1974 1912 1931", " 1903 1993 1974 1975 1908 1982 1986 1972 1906 1921", " 1949 1990 1902 1930 1920 1903 1913 1986 1917 1933", " 1989 1967 1995 1959 1920 1921 1910 1904 1959 1983", " 1966 1937 1909 1998 1944 1989 1916 1987 1968 1947", " 1930 1920 1900 1927 1923 1968 1962 1983 1913 1924", " 1901 1983 1969 1980 1976 1938 1976 1982 1932 1938", " 1911 1909 1963 1941 1917 1969 1938 1917 1907 2000", " 2000 1919 1913 1904 1937 1999 1997 1923 1987 1907", " 1980 1924 1934 1960 1968 1976 1973 1955 1967 1991", " 1904 1995 1915 1957 1998 1960 1922 1967 1932 1962", " 1936 1952 1960 1933 1964 1946 1995 1971 1907 1929", " 1967 1957 1963 1939 1912 1993 1987 1969 1993 1938", " 1976 1959 1921 2000 1921 1964 1987 1964 1928 1970", " 1990 1941 1906 1926 1921 1977 1982 1927 1978 1945", " 1985 1958 1991 1925 1964 1997 1933 1950 1916 1966", " 1987 1945 1938 1902 1914 1985 1968 1905 1994 1950", " 1979 1909 1926 1908 1922 1967 1934 1991 1936 1936", " 1905 1983 1963 1960 1969 1939 1937 1966 1978 1965", " 1902 1939 1902 1999 1939 1950 1916 1944 1908 1993", " 1916 1941 1940 1949 1959 1990 1905 1931 1968 1926", " 1990 1914 1909 1950 1931 1979 1930 2000 1990 1945", " 1969 1944 1955 1939 1976 1908 1933 1914 1987 1929", " 1944 1929 1962 1941 1973 1980 1973 1961 1966 1992", " 1998 1960 1915 1948 1993 1988 1941 1994 1969 1916"};
    vector<string> part3 = {" 1950 1932 1983 1960 1971 1910 1935 1992 1955 1927", " 1942 1928 1947 1928 1966 1951 1903 1981 1966 1955", " 1942 1977 1934 1981 1936 1982 1925 1914 1988 1920", " 1985 1940 1931 2000 1926 1926 1932 1903 1900 1905", " 1962 1917 1937 1987 1908 1981 1916 1927 1942 1928", " 1966 1900 1992 1921 1991 1987 1988 1916 1949 1921", " 1927 1954 1923 1931 1953 1960 1903 1963 1940 1951", " 1941 1963 1964 1958 1913 1986 1977 1928 1923 1980", " 1977 1930 1999 1923 1972 1980 1949 1946 1999 1984", " 1949 1919 1960 1926 1910 1934 1958 1958 1915 1980", " 1983 1975 1958 1930 1924 1994 1955 1967 1902 1918", " 1969 1956 1980 1908 1984 1901 1945 1959 1906 1997", " 1964 1956 1977 1950 1917 1961 1976 1959 1915 1922", " 1937 1993 1923 1980 1948 1999 1956 1956 2000 1975", " 1984 1968 1944 1960 1999 1958 1976 1901 1975 1944", " 1939 1926 1975 1937 1986 1920 1947 1975 1985 1902", " 1929 1983 1910 1902 1953 1903 1953 1928 1985 1920", " 1970 1929 1933 1996 1962 1980 1924 1986 1922 1905", " 1997 1957 1986 1908 1932 1959 1911 1908 1998 1937", " 1995 1956 1944 1940 1904 1976 1954 1966 1951 1932", " 1986 1903 1916 1928 1908 1946 1964 1923 1998 1930", " 1927 1917 1964 1999 1991 1969 1987 1954 1961 1985", " 1922 1952 1909 1977 1941 1983 1933 1967 1923 1949", " 1969 1952 1988 1982 1959 1941 1985 1913 1989 1929", " 1970 1943 1969 1928 1934 1919 1933 1990 1901 1983", " 1925 1921 1919 1916 1968 1997 1997 1986 1903 1990", " 1946 1986 1935 1993 1986 1900 1945 1902 1925 1955", " 1993 1945 1999 1978 1932 1935 1920 1993 1942 1990", " 1990 1993 1908 1925 1914 1994 1917 1922 1998 1922", " 1957 1980 1996 1917 1935 1902 1911 1967 1907 1992", " 1966 1994 1923 1915 1998 1900 1978 1967 1983 1941", " 1978 1945 1917 1918 1999 1922 1911 1909 1965 1980", " 1923 1981 1998 1903 1947 1964 1938 1925 1909 1985", " 1932 1991 1929 1948 1921 1969 1930 1996 1918 1971", " 2000 1910 1909 1925 1904 1979 1968 1967 1999 1943", " 1952 1926 1981 1997 1948 1902 1936 1982 1923 1961", " 1930 1945 1992 1960 1916 1913 1903 1913 1913 1945", " 1911 1983 1991 1938 1982 1957 1933 1981 1989 1979", " 1983 1949 1929 1938 1952 1999 1984 1936 1913 1949", " 1945 1903 1991 1913 1958 1991 1953 1947 1905 1971", " 1929 1916 1952 1944 1938 1944 1945 1903 1986 1915", " 1930 1908 1958 1978 1906 1954 1950 1937 1981 1942", " 1904 1923 1964 1945 1935 1953 1941 1993 2000 1906", " 1972 1932 1943 1951 1935 1928 1924 1995 1972 1928", " 1994 1905 1947 1925 1906 1945 1973 1912 1919 1960", " 1997 1930 1980 1996 1905 1930 1984 1912 1939 1995", " 1991 1964 1922 1939 1956 1991 1929 1926 1994 1979", " 1909 1903 1999 1914 1978 1930 1926 1942 1979 1948", " 1945 1987 1976 1930 1981 1926 1926 1991 2000 1971", " 1990 1957 1946 1904 1952 1961 1994 1904 1969 1964"};
    vector<string> part4 = {" 1931 1982 1912 1942 1951 1950 1917 1987 1947 1944", " 1940 1936 1909 1994 1963 1946 1971 1937 1993 1921", " 1965 1995 1944 1959 1961 1976 1996 1993 1904 1949", " 1961 1983 1944 1907 1954 1954 1955 1992 1900 1933", " 1929 1958 1992 1918 1970 1918 1953 1903 1910 1929", " 1987 1958 1959 1934 1966 1954 1917 1932 1989 1953", " 1933 1968 1966 1987 1923 1982 1929 1946 1907 1962", " 1950 1996 1920 1900 1944 1907 1914 1952 1915 1912", " 1922 1928 1956 1979 1900 1984 1931 1917 1915 1937", " 1903 1975 1933 1946 1988 1984 1948 1970 1995 1935", " 1918 1914 1925 1952 1942 1982 1958 1996 1906 1974", " 1932 1949 1973 1904 1926 1928 1944 1969 1902 1997", " 2000 1976 1903 1940 1968 1941 1914 1971 1960 1957", " 1928 1979 1960 1943 1946 1922 1948 1947 1928 1959", " 1950 1934 1954 1948 1947 1914 1926 1976 1968 1940", " 1983 1971 1930 1926 1958 1918 1950 1954 1975 1936", " 1941 1903 1971 1975 1902 1930 1956 1932 1907 1935", " 1999 1957 1971 1985 1988 1904 1914 1946 1964 1960", " 1976 1908 1973 1941 1955 1902 1955 1931 1936 1929", " 1998 2000 1952 1957 1939 1930 1909 1942 2000 1999", " 1947 1950 1904 1931 1922 1992 1984 1993 1979 1982", " 1952 1959 1921 1955 1958 1967 2000 1955 1992 1999", " 1901 1983 1908 1984 1981 1994 1912 1908 1970 1920", " 1962 1953 1942 1917 1928 1935 1991 1934 1987 1945", " 1915 1925 1982 1948 1956 1936 1967 2000 1971 1913", " 1953 1903 1976 1931 1905 1946 1947 1943 1979 1997", " 1909 1916 1970 1949 1969 2000 1974 1901 1945 1909", " 1916 1954 1988 1990 1906 1900 1994 1918 1982 1905", " 1998 1900 1918 1903 1995 1963 1953 1962 1945 1943", " 1958 1996 1977 1987 1991 1915 1931 1995 1967 1994", " 1980 1912 1958 1933 1978 1995 2000 1996 1948 1987", " 1957 1929 1952 1917 1999 1921 1981 1910 1990 1951", " 1913 1997 1976 1912 1903 1900 1991 1909 1955 1950", " 1993 1981 1970 1953 1914 1971 1908 1922 1940 1902", " 1938 1923 1913 1978 1979 1917 1970 1919 1932 1991", " 1906 1970 1949 1970 1980 1942 1943 2000 1923 1998", " 1950 1923 1914 1919 1967 1901 1955 1930 1981 1968", " 1999 1940 1996 1929 1932 1943 1998 1960 1913 1960", " 1988 1907 1925 1932 1997 1993 1980 1929 1946 1909", " 1980 1946 1958 1934 1961 1989 1966 1996 1978 1949", " 1967 1985 1937 1982 1945 1915 1977 1983 1959 1927", " 1902 1912 1907 1996 1978 1901 1972 1991 1917 1962", " 1926 1960 1996 1958 1938 1924 1964 1980 1924 1977", " 1921 1987 1971 1939 1998 1941 1966 1967 1966 1941", " 1901 1907 1956 1931 1935 1987 1968 1985 1922 1911", " 1931 1981 1981 1935 1915 1994 1951 1975 1934 1922", " 1984 1958 1924 1931 1984 1960 1936 1941 1956 1943", " 1976 1912 1935 1999 1962 1936 1937 1988 1953 1998", " 1971 1965 1944 1937 1989 1993 1901 1919 1960 1942", " 1957 1960 1920 1994 1966 1991 1972 1983 1979 1992"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 3902;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    int numSheep = 2000;
    int maxRuns = 666;
    vector<string> part1 = {"1957 1958 1993 1992 1961 1961 1980 1921 1930 1946", " 1934 1928 1981 1971 1935 1907 1919 1992 1970 1977", " 1986 1949 1913 1915 1994 1969 1953 1934 1987 1952", " 1922 1952 1960 1997 1904 1922 1938 1907 1948 2000", " 1914 1941 1953 1953 1981 1955 1955 1994 1942 1946", " 1921 1983 1910 1911 1929 1926 1973 1969 1962 1922", " 1998 1991 1917 1939 1979 1948 1982 1996 1927 1973", " 1999 1928 1985 1993 1935 1957 1940 1965 1920 1911", " 1948 1957 1967 1929 1903 1924 1968 1909 1933 1994", " 1984 1987 1908 1958 1990 1963 1967 1969 1908 1949", " 1964 1999 1951 1958 1957 1907 1963 1953 1903 1988", " 1966 1911 1966 2000 1992 1983 1908 1976 1924 1966", " 1963 1944 1919 1969 1961 1936 1985 1978 1931 1906", " 1926 1966 1999 1945 1979 1997 1916 1967 1902 1990", " 1903 2000 1949 1975 1978 1902 1934 1918 1900 1977", " 1972 1994 1943 1905 1957 1951 1962 1926 1967 1944", " 1999 1905 1970 1947 1929 1916 1983 1932 1900 1963", " 1904 1961 1931 1914 1974 1977 1944 1957 1904 1908", " 1940 1900 1932 1944 1953 1951 1982 1924 1918 1970", " 1908 1966 1935 1983 1952 1959 1925 1944 1920 1966", " 1998 1946 1976 1908 1982 1924 1992 1947 1953 1964", " 1938 1935 1963 1929 1906 1908 1903 1925 1906 1968", " 1997 1984 1903 1943 1919 1999 1993 1952 1988 1961", " 1920 1907 1905 1971 1907 1992 1965 1961 1949 1911", " 1955 1987 1942 1952 1979 1998 1954 1991 1980 1929", " 1900 1920 1951 1950 1918 1986 1936 1944 1997 1943", " 1948 1958 1991 1938 1931 1959 1989 1945 1922 1944", " 1968 1908 1926 1999 1964 1992 1942 1915 1960 1988", " 1942 1982 1917 1999 1910 1903 1929 1988 1908 1995", " 1955 1977 1913 1952 1931 1905 1922 1949 1949 1967", " 1983 1978 1933 1900 1910 1991 1995 1958 1966 1933", " 1968 1985 1948 1955 1908 1950 1903 1985 1930 1953", " 1941 1926 1972 1963 1932 1966 1990 1954 1946 1982", " 1949 1940 1950 1998 1905 1964 1987 1954 1979 1933", " 1910 1990 1901 1973 1907 1940 1909 1985 1908 1957", " 1937 1970 1918 1987 1919 1999 1958 1959 1950 1925", " 1909 1908 1958 1956 1957 1992 1998 1968 1975 1952", " 1989 1961 1964 1907 1930 1900 1940 1925 1912 1988", " 1901 1990 1985 1949 1950 1911 1927 1988 1904 1942", " 1942 1958 1944 1999 1976 1952 1910 1957 1910 1938", " 1957 1932 1953 1917 1933 1941 1962 1997 1915 1930", " 1936 1976 1991 1905 1914 1973 1940 1977 1965 1976", " 1941 1959 1989 1988 1963 1921 2000 1925 1907 1909", " 1939 1941 1902 1902 1928 1907 1912 1998 1963 1959", " 1915 1915 1956 1984 1958 1959 1943 1990 1987 1933", " 1932 1917 1928 1923 1991 1902 1955 1975 1924 1936", " 1917 1962 1967 1994 1912 1982 1969 1989 1984 1936", " 1965 1912 1972 1916 1918 1968 1903 1989 1953 1931", " 1912 1988 1939 1954 1957 1951 1924 1934 1997 1998", " 1973 1990 1995 1946 1973 1912 1915 1936 1926 1975"};
    vector<string> part2 = {" 1989 1948 1921 1948 1913 1909 1937 1913 1985 1908", " 1989 1955 1936 1918 1981 1976 1991 1940 1915 1965", " 1982 1906 1924 1908 1972 1916 1923 1954 1919 1960", " 1996 1915 1970 1908 1901 1942 1991 1971 1998 1924", " 1961 1954 1926 1929 1984 1992 1980 1977 1981 1969", " 1968 1930 1948 1955 1986 1924 1908 1920 1994 1941", " 1969 1945 1942 1964 1931 1981 1941 1978 1938 1995", " 1941 1926 1939 1944 1995 1905 1978 1958 1928 1954", " 1953 1961 1904 1909 1953 1900 1917 1953 1942 1972", " 1921 1981 1965 1958 1958 1933 1920 1969 1937 1937", " 1923 1972 1950 1929 1954 1986 1941 1959 1951 1956", " 1989 1937 1964 1967 1910 1931 1935 1915 1980 1946", " 1996 1947 1977 1977 1927 1952 1903 1956 1902 1996", " 1966 1989 1985 1912 1934 1953 1903 1983 1989 1979", " 1942 1965 1981 1974 1901 1928 1936 1968 1914 1957", " 1948 1900 1920 1931 1967 1943 1916 1979 1983 1952", " 1988 1950 1919 1920 1983 1936 1960 1945 1939 1901", " 1969 1991 1946 1995 1905 1946 1926 1980 1907 1901", " 1950 1939 1964 1961 1946 1931 1902 1977 1901 1917", " 2000 1906 1901 1971 1986 1949 1943 1938 1991 1975", " 1921 1974 1989 1933 1907 1942 1951 1939 1942 1966", " 1912 1996 1908 1937 1956 1991 1929 1991 1943 1900", " 1904 1924 1996 1976 1901 1918 2000 1900 1932 1941", " 1961 1956 1906 1928 1917 1928 1981 1990 1918 1926", " 1975 1950 1948 1983 1909 1936 1937 1912 1917 1945", " 1958 1949 1957 1953 1956 1939 1989 1905 1945 1944", " 1966 1911 1919 1936 1973 1979 1934 1907 1916 1904", " 1933 1958 1918 1962 2000 1979 1925 1940 1917 1984", " 1916 1967 1945 1980 1941 1942 1909 1960 1970 1907", " 1983 2000 1929 1902 1995 1923 1927 1926 1902 1943", " 1930 1941 1921 1903 1971 1968 1946 1953 1995 1937", " 1906 1993 1934 1951 1924 1937 1949 1918 1922 1910", " 1905 1966 1979 1984 1900 1908 1963 1930 1962 1946", " 1942 1917 1935 1940 1996 1992 1992 1982 1942 1972", " 1949 1915 1999 1933 1950 1999 1968 1985 1925 1935", " 1961 1995 1921 1928 1978 1913 1924 1999 1981 1945", " 1934 1923 1931 1984 1951 1987 1963 1942 1969 1988", " 1920 1999 1977 1994 1916 1988 1965 1919 1977 1904", " 1954 1937 1922 1945 1927 1908 1987 1955 1942 1926", " 1918 1975 1954 1949 1940 1931 1907 1934 1975 1949", " 1935 1914 1918 1950 1928 1919 1905 1900 1977 1989", " 1917 1998 1955 1906 1910 1947 1908 1970 1932 1975", " 1946 1946 1916 1971 1997 1981 1932 1920 1974 1984", " 1979 1969 1941 1988 1996 1939 1952 1982 1986 1948", " 1990 1901 1965 1908 1973 1957 1961 1942 1994 1998", " 1903 1935 1937 1940 1929 1977 1966 1982 1946 1978", " 1998 1964 1953 1933 1925 1939 1930 1935 1946 1913", " 1961 1982 1964 1990 1967 1921 1975 1946 1905 1965", " 1917 1942 1954 1940 1928 1922 1980 1940 1951 1981", " 1999 1957 1910 1958 1973 1905 1941 1923 1907 1932"};
    vector<string> part3 = {" 1977 1908 1945 1914 1965 1923 1994 1987 1924 1959", " 1964 1982 1912 1991 1972 1900 1982 1947 1947 1911", " 1962 1915 1999 1981 1906 1910 1955 1911 1990 1944", " 1988 1947 1906 1984 1983 1994 1902 1962 1977 1984", " 1994 1968 1993 1947 1943 1922 1948 1971 1901 2000", " 1953 1916 1952 1987 1903 1908 1936 1922 1970 1965", " 1987 1971 1953 1984 1948 1905 1958 1938 1972 1991", " 1970 1911 1965 1932 1965 1921 1935 1909 1984 1914", " 1923 1908 1903 1972 1947 1946 1917 1900 2000 1909", " 1962 1986 1936 1938 1948 1996 1981 1950 1969 1933", " 1974 1900 1989 1942 1957 1909 1921 1996 1971 1991", " 1910 1979 1913 1987 1915 1997 1904 1923 1909 1923", " 1907 1900 1928 1982 1974 1944 1980 1994 1981 1968", " 1925 1948 1966 1933 1912 1973 1914 1915 1903 1983", " 1981 1954 1983 1921 1957 1935 1964 1989 1956 1944", " 1984 1931 1977 1987 1910 1979 1906 1923 1933 1969", " 1974 1953 1950 1918 1967 1952 1996 1925 1918 1926", " 1994 1924 1997 1967 1901 1939 1936 1983 1907 1974", " 1965 1953 1934 1928 1911 1953 1988 1968 1976 1962", " 1943 1982 1911 1927 1953 1951 1984 1942 1958 1989", " 1974 1999 1971 1924 1935 1946 1902 1929 1986 1946", " 1915 1956 1922 1903 1903 1975 1947 1932 1926 1924", " 1907 1966 1933 1919 1969 1957 1938 1988 1952 1926", " 1981 1936 1966 1924 1901 1965 1963 1917 1929 1996", " 1906 1983 1961 1901 1967 1958 1983 1927 1947 1971", " 1993 1902 1902 1937 1977 1993 1957 1936 1941 1976", " 1938 1902 1981 1950 1918 1963 1993 1912 1915 1928", " 1944 1983 1950 1981 1954 1949 1939 1999 1928 1926", " 1953 1916 1991 1959 1980 1910 1981 1981 1913 1903", " 1994 1961 1930 1924 1965 1956 1921 1947 1904 1942", " 1921 1932 1986 1935 1908 1972 1905 1928 1981 1901", " 1928 1979 1902 1944 1968 1942 1915 1946 1948 1945", " 1955 1925 1984 1985 1998 1964 1975 1973 1947 1911", " 1972 1917 1963 1936 1942 1991 1952 1915 1922 1974", " 1952 1921 1921 1932 1974 1930 1928 1915 1932 1967", " 1967 1961 1992 1912 1984 1932 1957 1944 1917 1933", " 1962 1989 1939 1948 1944 1966 1936 1900 1934 1915", " 1929 1952 1998 1908 1921 1944 1978 1966 1988 1977", " 1966 1945 1979 1983 1977 1903 1995 1951 1987 1954", " 1959 1950 1983 1911 1979 1948 1953 1913 1997 1997", " 1974 1903 1974 1948 1940 1945 1907 1943 1953 1943", " 1932 1929 1904 1979 1913 1992 1996 1968 1927 1920", " 1994 1989 1945 1949 1952 1917 1964 1936 1940 1964", " 1971 1967 2000 2000 1919 1979 1930 1998 1933 1937", " 1903 1938 1918 1907 1974 1912 1994 1982 1917 1988", " 1923 1937 1973 1921 1983 1997 1935 1967 1961 1919", " 1969 1981 1986 1909 1934 1964 1939 1923 1950 1907", " 1962 1962 1999 1958 1915 1934 1947 1970 1920 1985", " 1965 1947 1977 1920 1950 1908 1988 1909 1980 1970", " 1927 1910 1996 1980 1913 1947 1910 1931 1950 1948"};
    vector<string> part4 = {" 1913 1938 1973 1905 1992 1940 1920 1982 1946 1957", " 1912 1929 1980 1988 1913 1917 1926 1995 1907 1904", " 1970 1902 1900 1954 1931 1939 1908 1915 1913 1936", " 1939 1928 1905 1993 1967 1969 1955 1933 1928 1954", " 1903 1927 1911 1913 1947 1979 1909 1995 1930 1965", " 1996 1995 1957 1902 1976 1926 1905 1947 1997 1902", " 1937 1999 1964 1967 1959 1950 1909 1933 1917 1988", " 1918 1943 1901 1959 1962 1903 1914 1978 1928 1997", " 1969 1980 1985 1946 1986 1964 1932 1909 1979 1910", " 1957 1937 1973 1954 1950 1902 1921 1939 1941 1981", " 1900 1913 1983 1947 1979 1919 1930 1989 1970 1983", " 1933 1940 1946 1996 1953 1909 1970 1909 1902 1974", " 1999 1933 1943 1945 1975 1951 1980 1933 1915 1958", " 1953 1956 1994 1904 1927 1938 1935 1915 1917 1988", " 1981 1967 1912 1917 1915 1947 1974 1901 1916 1991", " 1994 1907 1987 1995 1975 1905 1937 1956 1979 1932", " 1907 1963 1912 1935 1922 1927 1972 1967 1915 1989", " 1958 1942 1938 2000 1967 1928 1943 1919 1922 1980", " 1942 1946 1921 1920 1940 1927 1987 1995 1936 1932", " 1998 1950 1938 1923 1918 1957 1995 1993 1917 1912", " 1980 1917 1935 1918 1972 1928 1928 1974 1901 1904", " 1984 1998 1960 1914 1933 1950 1941 1970 1939 1985", " 1982 1917 1957 1956 1980 1914 1908 1991 1942 1908", " 1965 1973 1919 1902 1981 1983 1979 1995 1922 1901", " 1948 1916 1975 1965 1993 1962 1971 1957 1947 1983", " 1951 1904 1984 1949 1992 1904 1920 1931 1955 1971", " 1976 1944 1902 1911 1973 1964 1904 1923 1948 1972", " 1962 1950 1928 1978 1918 1973 1982 1929 1963 1973", " 1902 1979 1907 1920 1974 1937 1949 1959 1949 1922", " 1902 1929 1902 1982 1912 1932 1934 1962 1979 2000", " 1996 1964 1916 1919 1949 1961 1972 1935 2000 1957", " 1951 1952 1984 1990 1969 1952 1934 1990 1904 1913", " 1929 1941 1949 1938 1982 1962 1907 1992 1945 1932", " 1995 1981 1960 1972 1936 1998 1974 1960 1986 1997", " 1937 1971 1945 1920 1982 1900 1914 1963 1988 1989", " 1930 1981 1987 1967 1923 1967 1970 1939 1970 1991", " 1965 1919 1953 1933 1916 1971 1960 1935 1928 1934", " 1999 1951 1996 1925 1912 1938 1922 1959 1919 1935", " 1922 1903 1956 1905 1944 1981 1951 1938 2000 1926", " 1994 1933 1938 1933 1926 1933 1966 1980 1979 1958", " 1909 1994 1901 1906 1960 1918 1947 1927 1928 1979", " 1903 1912 1993 1957 1922 1951 1902 1978 1942 1928", " 1944 1993 1987 1971 1998 1977 1912 1985 1946 1902", " 1928 1967 1962 1955 1904 1995 1934 1979 1956 1986", " 1928 1923 1936 1930 1990 1991 1987 1956 1934 1955", " 1976 1910 1973 1995 1984 1947 1981 1989 1968 1901", " 1961 1928 1969 1982 1958 1913 1949 1916 1935 1976", " 1974 1940 1938 1934 1909 1980 1961 1930 2000 1921", " 1956 1992 1933 1942 1933 1904 1976 1963 1939 1900", " 1915 1951 1911 1977 1917 1998 1989 1916 1929 1912"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 7600;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    int numSheep = 2000;
    int maxRuns = 1333;
    vector<string> part1 = {"1916 1910 1976 1983 1918 1905 1930 1991 1916 1945", " 1930 1935 1946 1960 1931 1990 1957 1949 1938 1969", " 1970 1910 1997 1984 1904 1968 1933 1940 1933 1961", " 1914 1920 1998 1968 1938 1936 1989 1924 1931 1906", " 1919 1948 1971 1964 1971 1996 1936 1976 1939 1929", " 1988 1903 1930 1935 1928 1963 1960 1993 1960 1957", " 1942 1923 1981 1988 1995 1920 1931 1998 1957 1926", " 1903 1937 1987 1968 1928 1920 1982 1943 1990 1960", " 1927 1990 1982 1955 1980 1931 1936 1989 1991 1929", " 1939 1955 1957 1929 1980 1946 1990 1940 2000 1973", " 1905 1971 1904 1946 1985 1931 1966 1975 1948 1969", " 1955 1946 1982 1915 1934 1969 1935 1990 1908 1931", " 1976 2000 1909 1929 1947 1971 1985 1924 1915 1959", " 1956 1966 1916 1953 1966 1981 1936 1952 1944 1994", " 1930 1945 1958 1957 1997 1910 1929 1996 1963 1952", " 1908 1928 1991 1910 1984 1997 1900 1946 1974 1917", " 1944 1919 1985 1931 1920 1974 1985 1999 1983 1931", " 1907 1984 1913 1998 1987 1947 1992 1976 1908 1951", " 1983 1967 1965 1987 1964 1954 1941 1945 1950 1975", " 1947 1904 1930 1938 1911 1954 1905 1931 1964 1941", " 1950 1998 1988 1961 1917 1914 1907 1964 1939 1956", " 1951 1936 1980 1948 1982 1910 1931 1997 1932 1928", " 1987 1916 1980 1962 1962 1963 1928 1998 1919 1999", " 1939 1915 1973 1967 1913 1986 1923 1963 1993 1924", " 1905 1913 1980 1927 1936 1974 1956 1941 1995 1961", " 1908 1931 1962 1918 1910 1975 1984 1938 1945 1953", " 1998 1958 1908 1972 1908 1999 1910 1921 1923 1991", " 1991 1928 1967 1965 1961 1922 1940 1932 1933 1977", " 1939 1941 1914 1968 1986 1969 1927 1972 1905 1940", " 1969 1921 1963 1900 1979 1999 1995 1937 1948 1909", " 1902 1936 1956 1973 1908 1999 1999 1934 1980 1914", " 1904 1968 1928 1919 1986 1917 1943 1975 1966 1976", " 1988 1973 1903 1975 1913 1923 1989 1994 1995 2000", " 1980 1922 1959 1934 1977 1965 1912 1994 1984 1954", " 1962 1924 1930 1962 1952 1918 1951 1933 1963 1997", " 1911 1906 1988 1997 1997 1933 1905 1902 1983 1999", " 1908 1959 1900 1951 1952 1925 1994 1952 1967 1966", " 1920 1961 1979 1998 1999 1934 1936 1993 1927 1944", " 1949 1926 1911 1997 1928 1933 1980 1922 1912 1995", " 1927 1961 1903 1963 1902 1962 1973 1973 1976 1979", " 1973 1967 1981 1981 1997 1994 1907 1996 1988 1981", " 1927 1954 1990 1939 1992 1915 1928 1914 1939 1927", " 1909 1948 1907 1916 1997 1987 1921 1940 1941 1990", " 1946 1943 1981 1941 1995 1974 1915 1967 1973 1972", " 1980 1965 1907 1986 1938 1989 1940 1932 1916 1934", " 1989 1994 1960 1904 1914 1950 1904 1963 1976 1946", " 1921 1968 1959 1940 1938 1999 1975 1944 1964 1962", " 1920 1955 1982 1958 1965 1981 1989 1934 1920 1913", " 1928 1940 1941 1902 1914 1971 1974 1903 1962 1996", " 1999 1915 1983 1936 1918 1962 1958 1915 1934 1932"};
    vector<string> part2 = {" 1956 1946 1961 1977 1929 1913 1938 1968 1968 1901", " 1948 1976 1940 1911 1909 1936 1986 1963 1917 1914", " 1947 1919 1977 1914 1995 1946 1919 1953 1906 1970", " 1970 1980 1971 1982 1958 1982 1951 1960 1950 1998", " 1930 1967 1914 1936 1906 1955 1988 1983 1941 1915", " 1940 1961 1901 1969 1984 1918 1901 1968 1962 1945", " 1957 1957 1990 1947 1928 1966 1997 1995 1989 1923", " 1980 1980 1996 1982 1930 1964 1965 1979 1914 1962", " 1998 1960 1969 1975 1904 1907 1903 1931 1963 1924", " 2000 1932 1967 1984 1960 1957 1980 1990 1978 1954", " 1990 1904 1947 1956 1936 1940 1969 1912 1975 1905", " 1969 1925 1972 1903 1939 1941 1960 1939 1921 1932", " 1986 1947 1927 1997 1928 1958 1916 1919 1995 1907", " 1924 1979 1942 1958 2000 1902 1933 1968 1969 1989", " 1980 1914 1927 1973 1911 1950 1948 1942 1968 1946", " 1963 1979 1904 1930 1937 1926 1973 1974 1935 1909", " 1942 1983 1968 1901 1956 1956 1998 1998 1966 1928", " 2000 1966 1943 1915 1909 1996 1938 1979 1914 1944", " 1979 1903 1907 1987 1930 1991 1908 1953 1985 2000", " 1977 1918 1998 1900 1912 1904 1938 1914 1973 1955", " 1929 1919 1926 1945 1938 1946 1918 1970 1949 1979", " 1989 1980 1909 1966 1965 1919 1945 1925 1916 1962", " 1958 1945 1989 1982 1933 1952 1984 1957 1902 1934", " 1910 1960 1953 1935 1902 1980 1978 1989 1914 1965", " 1970 1976 1959 1922 1974 1981 1986 1990 1922 1936", " 1911 1976 1981 1962 1971 1944 1943 1925 1916 1938", " 1902 1900 1996 1932 1950 1932 1989 1980 1985 1953", " 1926 1998 1927 1943 1901 1941 1935 1974 1975 1996", " 1962 1993 1976 1987 1920 1976 1911 1921 1950 1940", " 1961 1965 1930 1946 1985 1940 1911 1933 1907 1993", " 1988 1994 1996 2000 1997 1994 1914 1918 1970 1968", " 1965 1900 1999 1955 1988 1957 1971 1969 1949 1965", " 1918 1913 1947 1954 1999 1914 1901 1953 2000 1967", " 1903 1919 1928 1949 1907 1924 1954 1946 1989 1960", " 1903 1914 1989 1911 1983 1936 1900 1972 1949 1982", " 1998 1985 1920 1937 1966 1988 1990 1966 1985 1990", " 1966 1972 1997 1961 1941 1989 1915 1900 1947 1942", " 1960 1999 1972 1939 1918 1985 1950 1955 1944 1944", " 1965 1969 1980 1925 1928 1943 1917 1919 1938 1919", " 1986 1913 1990 1962 1956 1924 1959 1925 1943 1986", " 1958 1986 1916 1934 1919 1981 1926 1908 1984 1997", " 1941 1909 1941 1943 1949 1950 1987 1941 1977 1969", " 1942 1904 1939 1937 1972 1991 1942 1991 1946 1943", " 1941 1902 1997 1934 1908 1994 1930 1993 1969 1902", " 1968 1996 1962 1988 1906 1975 1956 1951 1915 1991", " 1939 1909 1940 1912 1923 1975 1967 1933 1908 1964", " 1940 1984 1960 1904 1948 1907 1918 1940 1955 1973", " 1988 1905 1934 1922 1925 1939 1943 1905 1935 1929", " 1921 1930 1905 1941 1980 1934 1970 1990 1922 1928", " 1985 1986 1957 1916 1978 1907 1985 1934 1981 1981"};
    vector<string> part3 = {" 1995 1947 1934 1962 1986 1927 1916 1933 1974 1977", " 1991 1986 1943 1992 1911 1977 1974 1946 1983 1933", " 1999 1978 1932 1954 1906 1929 1927 1959 1954 1965", " 1962 1975 1903 1941 1991 1973 1971 1996 1993 1996", " 1997 1961 1928 1914 1934 1973 1942 1936 1919 1908", " 1919 1976 1917 1923 1951 1950 1952 1920 1938 1938", " 1932 1900 1935 1936 1945 1955 1935 1992 1997 1921", " 1933 1977 1953 1958 1978 1998 1939 1978 1958 1967", " 1990 1973 1924 1962 1989 1940 1989 1965 1967 1963", " 1971 1974 1927 1948 1993 1916 1935 1974 1934 1988", " 1961 1993 1983 1950 1991 1912 1997 1949 1987 1932", " 1941 1929 1999 1914 1996 1958 1995 1970 1939 1943", " 1930 1914 1982 1996 1978 1997 1948 1980 2000 1980", " 1948 1975 1990 1917 1989 1976 1910 1953 1942 1988", " 1968 1914 1980 1977 1925 2000 1959 1901 1905 1931", " 1963 1957 1965 1976 1971 1939 1997 1968 1977 1916", " 1958 1933 1981 1932 1940 1925 1933 1907 1922 1940", " 2000 1980 1975 1922 1937 1920 1989 1992 1997 1909", " 1909 1938 1907 1901 1969 1922 1979 1914 1984 1922", " 1976 1942 1940 1975 1936 1954 1944 1942 1964 1911", " 1946 1931 1920 1982 1971 1904 1942 1995 1974 1926", " 1962 1913 1938 1954 1961 1956 1968 1926 1988 1966", " 1914 1913 1904 1954 1928 1950 1943 1913 1978 1912", " 1931 1995 1938 1959 1974 1907 1985 1975 1942 1916", " 1972 1983 1975 1936 1942 1948 1953 1953 1909 1992", " 1977 1997 1949 1914 1942 1947 1970 1915 1931 1968", " 1919 1990 1920 1901 1924 1940 1982 1967 1999 1912", " 1947 1973 1917 1914 1986 1950 1912 1902 1966 1965", " 1950 1906 1912 1945 1967 1995 1987 1926 1952 1931", " 1926 1927 1951 1936 1969 1946 1980 1935 1910 1967", " 1957 1990 1989 1974 1964 1928 1986 1969 1905 1914", " 1902 1933 1987 1903 1958 1965 1991 1901 1958 1980", " 1928 1942 1985 1945 1983 1978 2000 1925 1990 1992", " 1920 1924 1992 1970 1917 1901 1963 1906 1906 1972", " 1919 1938 1928 1924 1980 1930 1904 1989 1962 1945", " 1925 1908 1902 1920 1929 1981 1943 1947 1932 1946", " 1936 1941 1903 1971 1966 2000 1991 1958 1915 1915", " 1981 1969 1924 1987 1941 1958 1943 1947 1912 1977", " 1950 1976 1946 1906 1976 1929 1998 1982 1993 1955", " 1961 2000 1964 1991 1948 1986 1915 1958 1998 1976", " 1935 1965 1978 1932 1981 1999 1989 1967 1943 1989", " 1900 1942 1915 1976 1930 1956 1971 1970 1928 1958", " 1976 1939 1959 1987 1961 1944 1999 1953 1906 1962", " 1936 1908 1986 1996 1958 1966 1967 1949 1941 1920", " 1956 1962 1968 1954 1990 1924 1906 1958 1951 1975", " 1909 1951 1915 1938 1945 1905 1934 1993 1914 1990", " 1996 1906 1966 1940 1984 1933 1975 1993 1946 1946", " 1997 1944 1907 1984 1915 1976 1993 1976 1935 1944", " 1929 1963 1964 1978 1918 1918 1977 1995 1988 1914", " 1978 1972 1911 1952 1925 1905 1911 1945 1983 1910"};
    vector<string> part4 = {" 1957 1950 1953 1991 1980 1993 1970 1956 1905 1924", " 1929 1999 1900 1998 1964 1961 1910 1978 1970 1901", " 1979 1903 1990 1967 1955 1996 1911 1994 1991 1929", " 1907 1992 1925 1930 1936 1993 1904 1907 1928 1965", " 1967 1999 1977 1916 1984 1967 1913 1968 1962 1967", " 1950 1917 1914 1921 1900 1960 1918 1925 1947 1990", " 1909 1971 1985 1987 1908 1918 1938 1907 1980 1907", " 1944 1903 1918 1978 1916 1930 1964 1950 1970 1984", " 1958 1945 1918 1927 1927 1991 1908 1999 1921 1912", " 1970 1922 1906 1939 1937 1905 1922 1912 1969 1905", " 2000 1930 1955 1934 1946 1947 1975 1960 1993 1966", " 1918 1902 1918 1935 1938 1970 1987 1978 1948 1974", " 1902 1961 1971 1926 1930 1948 1984 1902 2000 1903", " 1947 1940 1968 1968 1997 1954 1967 1904 1988 1947", " 1901 1952 1957 1959 1903 1979 1951 1940 1915 1946", " 1999 1986 1900 1925 1973 1937 1969 1983 1931 1928", " 1962 1974 1967 1975 1982 1930 1932 1976 1959 1963", " 1908 1917 1904 1957 1955 1910 1980 1917 1904 1913", " 1945 1921 1923 1950 1972 1969 1917 1971 1976 1928", " 1981 1930 1989 1932 1942 1970 1907 1940 1995 1932", " 1913 1904 1956 1950 1952 1900 1935 1973 1970 1907", " 1908 1978 1974 1983 1939 1984 1992 1920 1956 1957", " 1914 1900 1964 1922 1977 1933 1949 1938 1961 1979", " 1975 1943 1914 1948 1968 1920 1904 1993 1907 1954", " 1958 1963 1964 1962 1936 1997 1906 2000 1989 1927", " 1955 1931 1941 1943 1969 1990 1955 1912 1973 1980", " 1956 1928 1987 1994 1900 1945 1945 1903 1918 1971", " 1935 1920 1916 1969 1908 1945 1923 1903 1913 1952", " 1900 1978 1906 1903 1982 1900 1978 1983 1994 1984", " 1986 1945 1925 1955 1962 1940 1986 1956 1964 1969", " 1973 1971 1909 1973 1990 1910 1925 1963 1901 1986", " 1901 1958 1906 1935 1917 1905 1999 1945 1961 1996", " 1969 1913 1913 1995 1989 1957 1999 1918 1958 1937", " 1909 1939 1940 1902 1921 1974 1910 1992 1934 1991", " 1965 1922 2000 1955 1958 1929 1904 1953 1921 1937", " 1915 1986 1957 1987 1998 1976 1985 1973 1966 1979", " 1981 1920 1942 1937 1993 1976 1902 1974 1942 1966", " 1959 1944 1930 1958 1990 1925 1997 1983 1915 1972", " 1929 1921 1951 1970 1952 1941 1945 1943 1949 1928", " 1977 1950 1914 1947 1928 1922 1921 1973 1926 1986", " 1967 1969 1902 1962 1907 1987 1925 1998 1982 1940", " 1994 1915 1914 1917 1918 1956 1936 1981 1954 1992", " 1926 1923 1910 1993 1928 1908 1912 1924 1959 1973", " 1906 1954 1951 1970 1915 1954 1976 1982 1929 1992", " 1958 1911 1927 1960 1904 1911 1940 1983 1963 1969", " 2000 1915 1913 1969 1904 1926 1989 1975 1958 1997", " 1900 1933 1900 1986 1996 1917 1998 1997 1907 1909", " 1983 1989 1958 1912 1999 1922 1909 1938 1962 1981", " 1977 1925 1961 1962 1917 1922 1966 1949 1981 1909", " 1978 1962 1941 1992 1962 1919 1929 1911 1925 1963"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 3869;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    int numSheep = 2000;
    int maxRuns = 1999;
    vector<string> part1 = {"1972 1971 1946 1914 1919 1969 1921 1903 1964 1945", " 1947 1985 1937 1900 1970 1973 1938 1923 1973 1990", " 1977 1941 1976 1971 1982 1946 1988 1912 1912 1931", " 1981 1909 1917 1995 1942 1988 1937 1912 1918 1926", " 1935 1907 1955 1945 1948 1973 1961 1946 1989 1902", " 1914 1996 1924 1977 1949 1994 1933 1953 1902 1954", " 1923 1946 1937 1918 1973 1950 1943 1972 1921 1998", " 1931 1944 1921 1989 1902 1976 1989 1908 1917 1963", " 1945 1917 1907 1977 2000 1904 1983 1988 1902 1910", " 1942 1995 1941 1938 1948 1940 1993 1954 1982 1905", " 1916 1928 1920 1917 1995 1923 1975 1965 1953 1927", " 1958 1971 1965 1981 1969 1988 1954 1944 1915 1906", " 1962 1973 1913 1919 1948 1964 1924 1992 1911 1935", " 1914 1990 1938 1975 1968 1947 1971 1903 1970 1992", " 1983 1955 1936 1901 1930 1909 1955 1989 1939 1928", " 1957 1957 1924 1956 1993 1985 1970 1933 1960 1933", " 1943 1980 1986 1944 1947 1925 1962 1947 1973 1949", " 1973 1937 1947 1984 1981 1940 1919 1991 1967 1971", " 1911 1935 1943 1943 1921 1929 1927 1957 1979 1962", " 1937 1931 1941 1903 1950 1933 1922 1968 1909 1911", " 1974 1954 1950 1975 1991 1911 1958 1925 1974 1912", " 1999 1947 1971 1912 1911 1966 1928 1981 1905 2000", " 1994 1932 1900 1939 1925 1997 1990 1926 1971 1950", " 1952 1947 1959 1925 1968 1980 1990 1901 1935 1936", " 1976 1948 1922 1959 1936 1926 1922 1980 1983 1996", " 1972 1986 1988 1989 1903 1964 1996 1903 1987 1971", " 1991 1999 1924 1901 1922 1973 1949 1976 1948 1926", " 1919 1905 1916 1942 1973 1910 1981 1937 1911 1979", " 1920 1991 1911 1903 1956 1986 1988 1963 1991 1998", " 1964 1942 1951 1923 1993 1929 1996 1917 1928 1989", " 1948 1920 1905 1962 1909 1986 1973 1940 1971 1927", " 1977 1970 1996 1980 1938 1976 1921 1984 1931 1937", " 1929 1983 1985 1938 1953 1922 1945 1972 1977 1954", " 1954 1979 2000 1985 1995 1934 1949 1910 1916 1958", " 1986 1944 1925 1941 1994 1951 1919 1956 1982 1908", " 1903 1940 1998 1950 2000 1972 1972 1933 1963 1923", " 1973 1965 1914 1924 1957 1913 1997 1945 1942 1920", " 1920 1983 1967 1985 1939 1991 1931 1980 1908 1903", " 1979 1995 1980 1922 1931 1988 1912 1935 1971 1915", " 1929 1931 1988 1973 1941 1935 1936 1980 1965 1971", " 1958 1920 1920 1934 1984 1912 1919 1960 1953 1926", " 1959 1909 1972 1997 1968 1931 1909 1902 1968 1904", " 1986 1948 1907 1984 1932 1988 1994 1940 1998 1906", " 1950 1987 1906 1943 1958 1979 1953 1997 1932 1940", " 1982 1992 1905 1997 1908 1918 1969 1968 1942 1999", " 1941 1908 1996 1948 1908 1979 1913 1994 1985 1987", " 1916 1938 1962 1965 1920 1952 1909 1917 1994 1986", " 1906 1922 1980 1911 1940 1994 1908 1977 1962 1917", " 1970 1968 1904 1963 1944 1954 1948 1999 1963 1973", " 1928 1998 1959 1972 1959 1928 1969 1910 1900 1938"};
    vector<string> part2 = {" 1925 1965 1990 1995 1976 1958 1983 1974 1923 1903", " 1957 1944 1953 1974 1984 1902 1903 1983 1951 1934", " 1950 1935 1919 1971 1919 1968 1979 1987 1991 1953", " 1989 1922 1999 1941 1907 1996 1993 1982 1950 1960", " 1935 1943 1961 1970 1946 1936 1936 1994 1944 1931", " 1930 1977 1907 1938 1984 1936 1968 1949 1906 1960", " 1917 1915 1927 1952 1926 1987 1935 1907 1906 1987", " 1902 1919 1957 1990 1953 1999 1915 1949 1956 1908", " 1945 1931 1993 1999 1911 1964 1915 1985 1959 1995", " 1933 1918 1991 1904 1970 1915 1919 1924 1980 1965", " 1915 1936 1997 1924 1933 1913 1934 1915 1936 1991", " 1998 1964 1926 1968 1977 1995 1956 1926 1980 1986", " 1969 1999 1912 1919 1904 1914 1910 1932 1907 1952", " 1958 1956 1944 1906 1920 1938 1936 1981 1984 1959", " 1921 1927 1939 1939 1983 1973 1987 1934 1979 1995", " 1997 1924 1957 1968 1920 1929 1919 1939 1915 1954", " 1951 1968 1958 1953 1909 1948 1912 1940 1903 1980", " 1914 1968 1950 1966 1960 1932 1953 1973 1989 1905", " 1936 2000 1926 1930 1974 1915 1948 1955 1933 1901", " 1974 1982 1941 1928 1924 1982 1940 1939 1999 1985", " 1983 1961 1943 1917 1910 1989 1936 1973 1981 1917", " 1968 1941 1983 1983 1903 1928 1929 1917 1956 1913", " 1954 1952 1993 1960 1956 1959 1986 1934 1957 1902", " 1948 1934 1927 1972 1983 1908 1944 1931 1972 1908", " 1954 1948 1931 1954 1966 1901 1986 1988 1931 1959", " 1976 1904 1955 1989 1989 1955 1993 1992 1924 1974", " 1964 1958 1981 1952 1922 1935 1962 1957 1930 1992", " 1971 1921 1945 1943 1948 1983 1902 1913 1901 1994", " 1908 1991 1993 1985 1949 1933 1950 1992 1977 1978", " 1998 1987 1930 1988 1903 1904 1995 1927 1944 1999", " 1970 1978 1991 1996 1948 1903 1964 1993 1959 1950", " 1924 1909 1920 1926 1967 1961 1958 1956 1934 1943", " 1979 1965 1925 1929 1966 1927 1998 1993 1945 1987", " 1945 1912 1976 1972 1960 1964 1942 1949 1917 1903", " 1955 1940 1977 1961 1999 1973 1991 1937 1970 1964", " 1970 1928 1987 1922 1949 1984 2000 1987 1920 1979", " 1996 1974 1997 1930 1942 1987 1964 1961 1922 1940", " 1994 1999 1976 1931 1916 1959 1976 1918 1996 1917", " 1910 1929 1926 1958 1920 1925 1973 1969 1903 1932", " 1992 1958 1953 1932 1909 1968 1983 1976 1928 1912", " 1930 1969 1987 1935 1991 1981 1994 1980 1991 1957", " 1945 1986 1915 1934 1986 1914 1971 1915 1963 1904", " 1925 1933 1997 1998 1966 1950 2000 1907 1911 1937", " 1963 1906 1925 1923 1937 1980 1988 1965 1960 1974", " 1922 1933 1978 1909 1942 1990 1958 1901 1933 1984", " 1920 1947 1940 1982 1982 1987 1948 2000 1962 1915", " 1904 1997 1934 1903 1965 1957 1978 1908 1911 1900", " 1994 1980 1928 1971 1985 1980 1918 1981 1937 1941", " 1904 1900 1952 1923 1902 1922 1929 1988 1997 1928", " 1994 1968 1978 1910 1980 1942 1956 1986 1903 1981"};
    vector<string> part3 = {" 1956 1935 1986 1986 1950 1986 1976 1932 1964 1993", " 1974 1931 1926 1986 1971 1940 1991 1905 1968 1998", " 1987 1994 1974 1982 1973 1979 1948 1992 1918 1992", " 1915 2000 1912 1973 1942 1967 1904 1919 1993 1921", " 1980 1995 1915 1942 1914 1911 1981 1917 1978 1916", " 1905 1960 1934 1959 1940 1970 1965 1943 1928 1927", " 1921 1963 1993 1944 1951 1919 1993 1920 1939 1960", " 1929 1989 1977 1988 1982 1935 1929 1985 1992 1901", " 1904 1924 1968 1920 1962 1998 1953 1958 2000 1917", " 1940 1912 1988 1985 1976 1908 1966 1995 1982 1928", " 1976 1975 1999 1915 1918 1957 1946 1964 1934 1994", " 1919 1962 1991 1927 1934 1973 1946 1958 1979 1953", " 1958 1959 2000 1929 1905 1930 1972 1956 1977 1946", " 1910 1967 1924 1927 1933 1949 1933 1931 1925 1925", " 1994 1914 1914 1952 1953 1967 1981 1915 1985 1928", " 1915 1972 1903 1956 1979 1979 1947 1913 1916 1944", " 1953 1909 1920 1956 1923 2000 1985 1921 1991 1970", " 1976 1995 1946 1923 1933 1979 1901 1915 1901 1993", " 1903 1918 1970 1975 1936 1994 1921 1937 1916 1909", " 1954 1927 1917 1992 1994 1950 1930 1970 1926 1974", " 1922 1917 1999 1906 1961 1942 1908 1946 1928 1986", " 1970 1981 1947 1957 1968 1972 1954 1932 1925 1968", " 1993 1976 1938 1959 1946 1956 2000 1949 1902 1907", " 1936 1932 1960 1903 1932 1972 1925 1988 1935 1911", " 1949 1979 1917 1978 1960 1970 1954 1973 1930 1929", " 1929 1930 1939 1903 1995 1990 1978 1940 1961 1944", " 1902 1963 1914 1989 1954 1901 1915 1932 1971 1957", " 1974 1960 1902 1980 1989 1966 1962 1901 1982 1985", " 1925 1903 1959 1938 1954 1906 1985 1920 1938 1923", " 1985 1901 1950 1962 1936 1919 1939 1959 1917 1995", " 1901 1923 1903 1912 1980 1949 1956 1936 1988 1949", " 1993 1908 1918 1943 1937 1955 1994 1920 1905 1996", " 1972 1912 1978 1947 1967 1987 1927 1953 1916 1920", " 1958 1994 1909 1912 1966 1947 1982 1900 1901 1967", " 1963 1988 1966 1945 1929 1952 1984 1979 1972 1917", " 1945 1969 1933 1905 1975 1998 1922 1979 1901 1918", " 1994 1961 1944 1987 1904 1972 1981 1924 1991 1966", " 1938 1943 1998 1987 1925 1961 1987 1975 1949 1979", " 1964 1948 1998 1934 1916 1994 1908 1975 1957 1902", " 1925 1994 1975 1943 1939 1959 1985 1999 1929 1929", " 1923 1977 1963 1992 1920 1979 1991 1994 1985 1934", " 1981 1902 1977 1928 1932 1983 1925 1990 1965 1989", " 1900 1917 1940 1945 1932 1914 1975 1904 1919 1956", " 1915 1957 1940 1949 1984 1948 1948 1962 1912 1991", " 1914 1946 1923 1903 1902 1968 1928 1959 1983 1903", " 1917 1968 1954 1904 1937 1958 1919 1907 1996 1962", " 1969 1970 1990 1901 1992 1930 1993 1922 1925 1956", " 1950 1909 1961 1974 1908 1933 1964 1997 1980 1904", " 1942 1974 1966 1960 1997 1952 1955 1949 1922 1942", " 1977 1929 1965 1932 1995 1910 1998 1952 1912 1969"};
    vector<string> part4 = {" 1918 1961 1995 1992 1932 1996 1908 1996 1904 1909", " 1963 1901 1976 1983 1967 1944 1992 1911 1925 1985", " 1958 1969 1944 1926 1971 1928 1921 1956 1943 1991", " 1975 1934 1934 1925 1931 1932 1932 1988 1937 1982", " 1953 1954 1956 1999 1909 1943 1974 1918 1934 1987", " 1955 1988 1961 1992 1999 1960 1937 1965 1952 1936", " 1938 1950 1999 1912 1999 1978 1933 1922 1974 1957", " 1918 1901 1923 1997 1903 1972 1922 1997 1925 2000", " 1950 1960 1917 1977 1922 1977 1963 1943 1977 1971", " 1905 1932 1928 1966 1943 1900 1938 1969 1983 1997", " 1910 1954 1937 1984 1995 1957 1982 1963 1943 1938", " 1944 1993 1984 1950 1900 1912 1983 1988 1922 1920", " 1944 1912 1989 1980 1942 1927 1966 1998 1982 1971", " 1924 1909 1971 1901 1944 1945 2000 1974 1916 1900", " 1926 1985 1909 1907 1920 1955 1918 1962 1937 1932", " 1968 1968 1925 1931 1974 1908 1974 1941 1996 1995", " 1905 1906 1921 1987 1971 1976 1977 1952 1920 1982", " 1924 1919 1950 1902 1985 1989 1923 1935 1943 1936", " 1987 1989 1982 1968 1981 1938 1939 1948 1914 1914", " 1930 1930 1957 1949 1972 1923 1945 1975 1913 1914", " 1939 1950 1959 1999 1915 1967 1974 1952 1927 1903", " 1913 1942 1932 1926 1996 1946 1958 1990 1996 1937", " 1974 1982 1939 1945 1972 1906 1910 1995 1970 1933", " 1917 1964 1912 1985 1918 1910 1977 1976 1981 1936", " 1955 1925 1942 1939 1937 1965 1916 1981 1922 1999", " 1960 1941 1949 1909 1958 1928 1903 1982 1916 1945", " 1940 1990 1962 1948 1985 1927 1997 1940 1995 1987", " 1994 1951 1903 1955 1908 1943 1918 1930 1904 1992", " 1927 1966 1914 1938 2000 1961 1984 1971 1949 1988", " 1965 1947 1938 1941 1938 1933 1959 2000 1919 1913", " 1973 1944 1954 1941 1914 1928 1950 1907 1945 1961", " 1961 1961 1955 1917 1972 1913 1939 1931 1980 1942", " 1924 1953 1919 1936 1978 1996 1960 1977 1942 1915", " 1975 1994 1934 1949 1978 1957 1932 1902 1987 1984", " 1940 1923 1987 1949 1963 1970 1999 1924 1944 2000", " 1994 1999 1930 1976 1993 1935 1988 1979 2000 1995", " 1900 1925 1974 1957 1955 1961 1991 1934 1959 1957", " 1984 1919 1932 1959 1954 1931 1939 1936 1977 1950", " 1934 1932 1961 1903 1943 1947 1976 1976 1944 1960", " 1942 1982 1999 1959 1973 1932 1951 1997 1902 1930", " 1958 1964 1999 1975 1906 1919 1901 1974 1916 1948", " 1980 1913 1935 1926 1967 1949 1926 1978 1966 1987", " 1950 1949 1970 1948 1965 1996 1980 1976 1960 1900", " 1911 1920 1923 1918 1938 1947 1998 1961 1986 1949", " 1929 1991 1964 1974 1939 1976 1931 1905 1917 1900", " 1993 1937 1918 1931 1936 1951 1915 1980 1935 1967", " 1960 1904 1908 1911 1994 1978 1985 1934 1950 1953", " 1986 1914 1916 1911 1984 1961 1921 1950 1967 1961", " 1929 1988 1935 1950 1969 1932 1964 1941 1995 1965", " 1928 1956 1905 1971 1945 1986 1966 1996 1986 1927"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 3800;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    int numSheep = 2000;
    int maxRuns = 1000;
    vector<string> part1 = {"1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000"};
    vector<string> part2 = {" 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000"};
    vector<string> part3 = {" 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000"};
    vector<string> part4 = {" 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 3001;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    int numSheep = 2000;
    int maxRuns = 1997;
    vector<string> part1 = {"1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000"};
    vector<string> part2 = {" 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000"};
    vector<string> part3 = {" 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000"};
    vector<string> part4 = {" 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2002;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    int numSheep = 2000;
    int maxRuns = 42;
    vector<string> part1 = {"1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000"};
    vector<string> part2 = {" 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000"};
    vector<string> part3 = {" 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000"};
    vector<string> part4 = {" 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000", " 1001 2000 1001 2000 1001 2000 1001 2000 1001 2000"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 72000;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    int numSheep = 2000;
    int maxRuns = 3;
    vector<string> part1 = {"1372 124 1170 1765 556 435 1096 654 1375 1821 1712", " 180 204 1911 719 1852 1525 1977 1440 372 1615", " 1063 1673 553 1331 322 1311 1786 1652 1572 412", " 1484 306 588 223 1456 958 1174 565 962 1455 1903", " 1288 1331 148 23 1829 952 315 1976 1201 308 1090", " 1463 126 308 1244 680 107 826 1894 1655 1466 1021", " 810 820 535 1551 852 1630 1061 1502 739 1747 378", " 159 82 950 1838 408 104 323 960 1916 1660 256", " 1290 1805 1853 884 646 493 994 972 1105 421 1965", " 235 1887 426 1301 1122 1279 1308 932 736 560 1057", " 1790 1996 404 210 1107 1793 884 1332 23 1849 901", " 954 1616 829 969 1785 447 764 1641 476 1123 970", " 1457 137 1098 378 764 1939 938 511 1410 865 479", " 32 959 1184 1509 187 998 1300 1225 1755 309 501", " 187 668 1579 151 1639 142 696 810 1604 488 420", " 1956 1083 2000 371 1323 1468 200 358 1640 943", " 1643 1781 1752 1303 1560 1021 852 1435 429 340", " 1556 1031 40 677 720 1536 859 904 1111 1767 206", " 576 371 1216 761 1964 220 1668 258 70 1884 1556", " 516 1696 1636 1678 529 1137 701 405 200 202 529", " 508 1914 1853 138 227 74 976 1435 405 404 1422", " 1086 1345 1312 1023 222 184 1398 602 551 887 515", " 536 1690 565 1197 154 1541 78 1572 1341 1426 322", " 746 1629 1199 920 820 472 1902 1351 1777 1381", " 1022 1206 1243 1269 1753 705 1819 472 1343 783", " 914 515 68 1395 693 1345 981 448 920 1287 1857", " 608 783 1757 213 1942 1841 425 1464 1635 654 1806", " 777 582 482 37 838 119 1050 1594 1646 54 87 1323", " 1288 335 704 909 150 161 29 416 1493 239 530 611", " 406 743 216 250 1442 561 1314 1743 1704 682 1902", " 1672 795 1282 1339 1576 827 1554 1354 1031 1936", " 1826 1176 1206 1854 1450 90 574 1605 1127 1514", " 265 521 1889 434 1604 1682 171 1062 1634 836 1834", " 1015 596 849 857 260 488 1165 28 1908 1184 1427", " 276 770 1829 119 435 936 459 299 1616 1824 486", " 678 301 1926 1757 1937 1239 529 1919 420 1950", " 1204 547 753 710 112 260 462 1340 349 1709 777", " 61 1016 225 1415 1892 271 846 510 1858 1035 1203", " 52 19 461 1455 1256 1278 1068 124 1919 61 798", " 269 625 1439 517 1587 197 474 684 774 602 1829", " 162 1074 1432 1876 742 1520 774 437 1748 39 1965", " 971 750 594 1517 840 591 1779 783 1857 1996 120", " 1883 1917 588 1022 1066 1534 793 164 814 499 1479", " 1217 609 1869 1637 344 1691 976 1586 778 1720", " 204 146 1308 202 141 497 1803 603 608 1639 238", " 1077 216 1692 1580 213 207 1966 1901 1693 656", " 32 1189 1530 469 1349 494 229 300 1966 900 1837", " 816 1873 1815 389 1205 1979 1581 26 1939 1974", " 535 1593 215 526 1205 302 374 1664 859 351 692", " 1141 918 1530 629 1982 154 1885 1505 560 814 517"};
    vector<string> part2 = {" 1629 1330 107 456 1255 1252 1888 1078 898 658", " 537 1341 227 1273 1 605 427 1226 454 1965 199", " 1917 1564 395 420 743 1125 57 423 831 1855 1478", " 1980 557 1022 1146 1788 324 1196 534 581 1219", " 14 1371 837 374 537 1451 1718 626 1413 77 1809", " 1728 912 1892 1036 249 982 210 854 1732 1520 1353", " 1396 1004 410 1267 269 1925 1674 386 275 128 349", " 330 1827 1597 1540 78 1183 16 1008 296 121 967", " 1977 1469 19 523 613 1104 1637 774 1767 1990 991", " 1988 1734 1994 1663 109 1648 306 549 193 703 1394", " 1557 661 1898 943 1341 1421 1055 295 936 1818", " 1936 1790 802 230 683 1868 1581 1726 718 454 227", " 1008 1931 569 445 1188 1609 719 931 704 11 1643", " 1285 150 964 487 906 1041 1451 416 1862 1952 1356", " 1504 1169 1442 1935 1996 1462 1379 189 1791 1994", " 1430 320 1063 1054 1731 1274 959 229 1746 57 685", " 842 1833 1017 60 1868 179 1867 1229 475 1138 805", " 1705 792 870 1193 1514 328 318 1386 1499 1226", " 1566 1997 1148 201 98 525 1883 1443 658 1169 1728", " 1723 806 1730 1304 1644 1852 823 1972 1087 1559", " 1475 1170 1695 1867 1522 1580 1195 615 1983 1984", " 1515 65 1066 1329 1799 1672 1865 491 389 342 220", " 348 1 1652 5 1 770 1411 1848 415 1978 264 1023", " 196 253 1960 1601 1884 118 901 580 712 1575 519", " 784 1404 32 862 566 1304 2 646 161 185 1412 284", " 1372 1153 1365 1153 1317 1461 1235 557 496 1989", " 732 549 1886 1249 355 1296 1935 1753 469 1927", " 1110 1846 588 1563 525 520 643 1291 185 944 731", " 1334 590 511 1438 13 1846 1309 147 461 1406 1742", " 514 1676 146 563 1896 481 506 237 380 1625 1621", " 887 354 1768 1333 1557 720 173 634 695 704 457", " 580 1506 1350 32 435 1761 1970 1329 194 1864 1336", " 323 692 314 1774 624 908 667 1381 663 1667 1128", " 1260 1420 1510 277 529 1059 1326 343 345 1869", " 1653 788 115 962 1093 216 1000 768 1459 442 821", " 1346 1148 1053 684 1684 990 1835 1128 726 1450", " 1231 432 1024 505 1298 253 1894 157 1625 1871", " 43 1353 220 797 1658 371 1370 1500 178 729 1547", " 947 1474 1682 934 1900 182 1223 1445 396 1841", " 178 998 39 1340 693 915 430 1261 1869 1571 538", " 475 153 114 654 1153 1670 1823 472 449 1997 1237", " 40 379 1311 1709 1892 1822 1007 417 1387 1278", " 369 1987 1913 1687 146 1871 714 849 680 1887 802", " 1684 1915 766 524 1118 165 703 1186 259 646 479", " 1085 836 1290 1192 637 403 975 887 1579 1109 1857", " 432 1229 1337 328 896 1114 57 1190 36 1391 1679", " 969 920 1601 1866 344 1970 883 1312 1756 225 1882", " 565 492 800 1311 749 381 207 1877 1887 1785 324", " 829 428 1936 1933 1526 926 237 1849 232 563 1803", " 1768 195 348 471 721 307 337 567 1411 423 1160"};
    vector<string> part3 = {" 27 1245 898 406 947 945 1537 500 610 790 1055", " 1045 1058 606 198 1832 279 1224 1062 1161 1832", " 487 1275 1693 427 578 1402 1086 1552 1884 1979", " 1619 626 1143 350 1475 553 117 935 1547 563 256", " 1292 1071 708 1291 1265 1630 779 1192 817 89 936", " 1931 1392 1668 331 302 687 334 574 247 16 1582", " 790 407 586 1854 774 1956 1567 1197 1188 281 1356", " 944 1600 44 1216 280 514 1313 1169 218 1619 477", " 220 682 1919 718 1579 1881 1658 777 44 1330 337", " 1011 31 159 114 1908 1280 97 110 953 102 1056", " 1373 905 1659 384 339 1515 1294 212 850 1878 1781", " 1783 1168 1480 70 1785 1291 507 1768 550 858 69", " 149 334 1237 1871 579 464 728 1496 1588 664 1363", " 1594 554 715 886 558 1103 992 524 940 1524 194", " 1669 1078 584 1891 121 149 940 1107 1561 755 1300", " 1810 504 955 16 994 522 1198 140 208 1531 1048", " 1749 692 99 1266 781 38 233 1081 177 244 22 366", " 585 1074 1260 1631 735 737 1895 311 420 1811 1970", " 1490 335 1486 748 179 1591 1455 1068 953 212 369", " 3 1599 481 317 194 1539 196 1972 908 1498 736", " 1228 445 1330 1147 1047 1386 1111 412 1818 315", " 1018 1864 380 1975 1391 205 430 95 678 1262 1210", " 397 45 320 590 622 164 1780 523 1550 1457 1975", " 505 1875 1604 1590 590 1645 61 150 1103 220 1533", " 514 293 1618 155 54 948 122 40 1340 1320 1626", " 1460 693 1105 357 323 859 1680 484 1130 1204 850", " 1446 1263 1529 1789 1285 432 1544 1961 1755 242", " 391 1713 1333 1853 410 314 1127 837 6 211 880", " 1533 263 1437 704 1831 639 1404 791 399 1600 463", " 447 1097 620 477 1772 1096 939 177 1923 1568 877", " 535 857 1166 816 1623 14 87 708 34 361 782 1357", " 650 1126 954 1753 1063 1630 1047 1539 1335 1861", " 812 567 1894 345 221 1718 94 649 385 317 832 1237", " 1447 785 532 1077 485 1709 350 1117 561 112 833", " 783 1939 1185 360 1169 1690 436 483 368 1630 1729", " 1919 1557 1111 3 1081 327 1548 334 1780 833 1806", " 1333 648 614 710 1931 1358 1202 1820 632 1098", " 227 1482 270 1480 1192 1472 909 1946 41 1689 356", " 1072 1271 1598 1880 1529 1204 825 746 730 550", " 1725 980 141 8 1892 1412 1899 290 1113 525 1116", " 11 727 234 1710 1724 1441 612 1253 1414 1108 742", " 514 1895 1882 174 551 297 272 1415 906 1835 282", " 214 968 180 1142 545 220 1525 750 598 48 542 1570", " 1883 979 404 1941 1634 1723 1186 1223 1376 1581", " 1917 531 1517 1355 1245 89 1630 477 1448 1855", " 258 1347 369 20 842 1978 1201 485 237 1309 693", " 51 1450 1390 1881 917 1103 5 1746 1818 1561 248", " 66 1873 205 636 1384 1229 1031 1483 230 1955 1377", " 1750 583 534 167 1469 320 1829 952 876 262 498", " 751 920 113 1911 882 1931 416 1125 1259 1900 221"};
    vector<string> part4 = {" 141 1574 883 978 322 842 603 28 622 1035 441 1454", " 1908 1807 396 1033 662 368 981 747 152 1186 953", " 1142 1764 805 1428 1907 896 1244 256 966 861 927", " 71 1220 1217 943 1158 770 1032 200 1474 79 1350", " 331 335 965 1696 1773 1647 1804 699 1578 1048", " 1552 1685 206 1145 932 259 1717 285 1270 1162", " 1841 1969 229 1747 797 1411 1697 424 576 1628", " 1713 1748 1267 1040 587 475 1958 386 1248 1348", " 336 637 469 1712 1926 1521 57 1862 1694 523 1876", " 1005 325 904 1821 190 1293 731 591 1640 602 1005", " 541 1974 1423 132 1683 607 1221 1272 1359 220", " 1756 1025 335 719 773 1557 1085 801 847 449 1304", " 716 960 1157 1973 1275 135 1893 1318 816 1760", " 1965 1210 1348 1031 1414 1814 1604 592 630 1345", " 1417 486 1228 134 1640 595 1740 1205 1388 1968", " 1416 923 385 1997 336 1588 1715 147 1850 1982", " 1222 1192 1126 992 407 1443 1324 618 738 1376", " 1815 1807 725 294 597 928 549 1671 47 843 384", " 664 183 644 771 722 1072 498 669 41 658 302 1427", " 619 125 1623 901 826 942 745 1649 77 432 575 679", " 68 661 791 813 555 1318 278 995 1969 150 923 1929", " 1161 717 1768 1744 1648 1316 542 367 1424 1165", " 1768 1031 773 757 1227 1577 703 1420 1644 1494", " 1047 1124 178 1399 533 1576 558 1183 497 1663", " 761 1981 1304 721 1549 1302 385 1929 742 1810", " 801 699 1018 1446 1228 1897 1335 1827 1997 433", " 395 1372 1128 793 250 109 398 173 1820 586 753", " 632 1237 1414 648 1249 761 614 1556 776 1023 1589", " 372 674 661 313 951 129 421 533 1745 919 214 192", " 1023 652 1318 1574 1678 1486 1431 62 1592 1449", " 1975 780 1729 264 180 1704 353 1546 1584 1134", " 1571 1592 610 1943 1661 1397 381 200 1393 1351", " 340 1354 868 790 1166 26 636 611 455 1682 992", " 843 1143 1767 1978 748 583 1508 784 1798 97 711", " 260 981 8 634 360 287 1656 629 198 457 1246 1634", " 847 1775 1195 1761"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 663594;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    int numSheep = 2000;
    int maxRuns = 5;
    vector<string> part1 = {"1042 1971 1349 733 47 1718 990 1823 1404 1941 1369", " 482 1049 501 1387 1414 575 626 927 665 1470 1253", " 301 1987 615 1524 331 96 567 1742 579 1443 630", " 1015 1495 185 974 385 307 300 1216 1644 1635 762", " 627 31 517 1941 1390 871 1599 1995 1000 927 1076", " 505 142 97 1619 1484 757 1772 1808 1032 177 1911", " 744 525 1109 1028 431 1078 124 1913 172 932 1191", " 635 1863 1819 1079 11 1185 570 846 582 1893 17", " 705 1975 1902 222 961 1584 1914 857 123 154 333", " 385 1372 9 9 1174 1576 1059 700 1560 461 738 1882", " 1407 756 439 540 13 1256 898 1673 418 506 1983", " 1829 254 611 1539 1240 76 1483 1496 1968 1149", " 106 1557 1001 1666 1294 1186 1563 430 1117 171", " 1573 1131 1499 34 681 700 365 426 1880 739 1247", " 273 1743 1205 563 637 1442 1914 475 714 744 1417", " 1241 83 1143 467 196 1424 1874 239 350 1870 480", " 550 1429 1701 1087 687 662 1894 56 1774 1368 948", " 453 1145 952 53 720 1196 49 840 990 701 1055 1097", " 252 322 1476 1922 1368 1969 1546 1717 1459 520", " 1097 136 1862 15 1755 671 291 986 1279 672 157", " 131 572 835 1355 344 1430 697 424 801 1717 591", " 223 1573 1524 323 709 749 903 1462 1447 729 865", " 1522 1110 402 1604 765 1216 1599 426 1135 753", " 1436 101 209 1866 1848 1042 902 928 1661 1283", " 1358 1192 1398 540 1593 1026 1692 814 1497 1619", " 1 1523 1371 792 785 57 360 312 1973 1923 1046", " 1065 10 572 1268 1157 1794 1581 790 1614 1210", " 624 1902 144 571 1158 956 838 1892 183 391 768", " 1688 136 1916 99 1620 1314 1975 1297 1765 224", " 608 75 791 600 519 1141 1104 1246 258 217 1358", " 38 1366 1374 398 1049 1125 361 127 1641 120 229", " 742 1272 1949 1151 740 230 610 741 1765 1450 1347", " 1 1930 1459 1103 1809 761 207 994 473 930 635", " 767 954 854 1852 140 276 388 1102 995 1114 484", " 235 1749 229 727 1710 1602 1756 62 1224 279 914", " 26 1539 343 161 884 1366 1405 742 735 1416 1296", " 1036 443 1176 1528 1118 650 364 1041 615 296 1528", " 925 1772 1383 850 463 765 344 212 213 887 129", " 817 197 813 891 1132 1228 313 331 1269 1554 1549", " 500 901 1842 655 571 652 153 469 1627 697 1037", " 1452 1722 794 1344 736 1132 740 1444 1383 1270", " 1925 1729 1390 1029 184 1686 937 1424 666 477", " 501 731 1179 1425 352 1022 470 1636 955 294 788", " 972 334 442 877 573 1949 1776 1713 1598 794 1697", " 1079 949 363 1146 868 1027 526 1701 1966 1480", " 442 1671 1825 878 1527 859 1746 665 1969 943 1282", " 1874 409 222 1717 816 461 1230 467 1784 1209 106", " 1151 1270 445 690 870 1293 1920 833 1883 1083", " 470 1920 1233 593 1503 618 1527 1361 112 288 699", " 1912 133 957 120 447 711 1276 610 140 874 873"};
    vector<string> part2 = {" 1060 1982 731 1941 1544 1546 888 1710 1015 447", " 528 1678 1457 449 989 1587 447 948 367 1407 1526", " 1510 1355 225 479 946 1075 1764 486 594 504 662", " 1919 1013 1789 475 1744 338 894 1363 315 140 1568", " 1210 362 422 1163 1966 256 825 1494 1446 525 419", " 386 353 306 738 1849 909 406 562 200 1513 1192", " 1699 571 1773 1367 1550 1560 344 1086 905 1855", " 682 1779 905 592 707 1363 1032 1566 380 422 1112", " 930 1349 1465 1350 1570 990 955 18 1764 1754 1159", " 1551 1038 1073 740 1782 976 1189 1290 1359 964", " 1255 1510 1922 308 443 1759 250 1197 1017 1450", " 1084 387 1205 1243 1720 1318 657 1453 1965 1923", " 1858 756 1185 461 752 465 961 1085 1810 469 1525", " 552 1226 1626 680 1968 556 558 1335 318 1301 1041", " 1624 1854 1593 209 957 1787 317 724 889 333 1047", " 1575 162 1424 19 1876 1735 1368 407 56 532 1281", " 1257 934 484 1227 575 1990 247 166 1704 1203 1812", " 586 937 1124 47 1915 1818 792 1839 347 994 487", " 378 288 144 582 546 1623 92 1835 1988 1897 1773", " 979 1357 1134 1549 1409 656 1759 298 839 215 768", " 1341 329 1382 1485 768 1952 118 708 588 557 208", " 1028 769 623 391 420 730 1478 604 456 335 809", " 1884 1663 972 1285 1805 192 755 198 1193 1046", " 1358 1291 1226 826 375 773 54 1392 1163 1665 365", " 1860 828 1079 993 183 1863 241 964 1556 1334 1439", " 137 1720 790 1210 1876 642 1579 1657 1363 695", " 1058 593 1553 40 1447 255 233 1000 1273 1579 1736", " 1081 395 997 1862 103 252 1267 598 343 1993 159", " 747 672 161 1130 1229 523 106 1701 1901 1448 658", " 1938 678 850 393 1670 565 1363 1453 722 1082 1066", " 69 1698 1534 1692 642 822 903 1272 1602 223 603", " 512 231 108 1330 101 504 949 702 739 1127 1383", " 1087 445 1683 1026 1682 1705 1918 799 1338 1967", " 1585 1703 338 1998 687 1056 1458 880 1816 1160", " 848 463 287 1863 280 184 542 1360 991 623 1879", " 1640 1909 403 1854 603 9 179 870 475 81 481 1977", " 1802 858 694 1565 170 1709 1478 1123 1698 1187", " 1141 673 1396 1898 891 1282 557 712 388 316 237", " 1679 1307 1811 1880 994 1400 188 460 295 1383", " 644 1523 701 1611 130 555 1744 690 75 837 1579", " 1627 341 1435 1565 1654 1693 437 1904 1483 1981", " 590 1573 1821 56 1842 1108 144 1736 122 835 1993", " 1050 1132 500 1813 1688 1421 596 685 824 312 241", " 1624 66 1220 380 913 1272 1168 1791 1050 705 2", " 177 386 391 209 1847 115 1362 415 733 943 1027", " 395 1910 1756 294 1862 1633 1709 1122 1365 1948", " 836 1234 182 541 725 1113 1350 462 1628 2 130", " 1945 1521 982 1741 1733 1178 1826 945 1663 1410", " 1703 1050 844 1593 147 863 1934 557 17 434 965", " 359 749 106 424 920 682 623 1189 214 1063 982"};
    vector<string> part3 = {" 277 290 63 1629 1539 428 1872 1674 1166 1881 1038", " 1871 1773 1172 505 992 1683 1794 925 1768 1348", " 218 1961 361 1814 1877 738 1362 1339 1970 1368", " 454 1678 302 696 1339 1836 1586 692 912 1733 1389", " 897 1298 1426 963 1231 705 474 838 862 1279 176", " 1364 1903 200 1599 1281 872 1144 1001 983 1773", " 794 59 1243 315 301 982 66 230 92 954 276 134", " 1117 1555 672 477 41 72 880 1372 1454 786 446", " 1895 770 1610 902 1046 1353 1590 574 654 137 278", " 116 415 988 57 519 110 1301 1365 968 278 7 167", " 930 75 1698 584 1192 1904 1215 1073 270 633 798", " 1552 283 51 1805 11 1150 67 204 756 158 1324 304", " 1470 678 405 1445 1375 129 618 1687 1063 530 1073", " 1490 592 823 432 984 422 1342 1566 899 536 281", " 743 1356 191 1887 1284 1372 399 995 970 960 1885", " 1049 1169 1314 32 805 344 1382 1834 422 967 50", " 248 900 838 690 8 1862 1356 42 315 295 1578 61", " 1083 1817 793 366 447 490 1345 1334 1453 1991", " 908 1589 559 1054 1946 284 793 792 1238 1434 1417", " 1095 1992 229 1264 652 1117 315 49 1037 1844 1018", " 663 1205 1066 1501 316 124 809 376 887 328 1340", " 1766 53 708 742 1552 1579 1216 1812 1281 1835", " 1625 1440 1304 1414 1002 407 462 305 67 1661 521", " 698 1242 1488 512 60 384 1786 703 690 1349 1403", " 765 1017 749 422 924 1321 196 1066 353 1877 17", " 21 517 1937 1896 1540 1275 1523 418 1517 1603", " 1213 512 193 718 682 1070 1532 739 87 197 479", " 1089 596 99 1969 1030 1707 703 129 1296 96 1111", " 1406 1042 105 1244 1739 201 320 737 429 1104 1255", " 1296 998 1792 1980 62 904 108 1629 480 1938 364", " 109 829 1967 311 376 1094 271 1879 147 1060 869", " 1256 215 1584 979 578 1184 217 1779 1527 897 1569", " 1704 830 1003 1017 820 705 589 270 827 1332 749", " 1252 135 407 1832 1427 1054 686 631 1022 1281", " 271 819 1451 918 1324 10 1824 1320 417 1234 235", " 1326 1744 1134 902 1337 1627 799 1032 178 626", " 1116 527 1187 1230 1300 1452 948 1725 1251 544", " 810 703 1492 774 1195 480 103 1376 565 1287 387", " 1591 559 1566 701 765 272 243 1114 390 1471 1694", " 449 822 506 660 1028 316 1643 587 1424 1407 1992", " 671 1603 408 1898 1205 175 465 928 1151 268 1932", " 85 1215 1138 663 111 1423 1878 1198 170 1407 165", " 689 4 1616 287 856 810 1986 1670 709 1427 1033", " 776 905 331 1781 808 1993 1891 529 276 1410 1799", " 732 1283 731 336 7 765 1706 1419 223 783 1385", " 1193 683 1678 1610 1801 1288 380 1625 83 1379", " 426 1745 246 374 1229 1410 1765 679 372 642 1276", " 509 152 1185 1866 341 932 625 346 484 1000 1781", " 722 1021 217 41 1183 678 1659 1108 224 38 225", " 569 1379 737 1604 244 925 56 1235 1171 846 1290"};
    vector<string> part4 = {" 1402 1250 612 1503 1798 1291 1759 119 919 62 997", " 1454 551 1006 278 227 714 956 1714 1610 871 1480", " 682 1742 1206 1797 885 155 1642 237 1284 1243", " 560 229 1624 1310 1337 273 1218 944 517 187 795", " 614 48 592 549 1129 162 747 786 1894 81 743 1252", " 149 1482 687 452 1977 1088 472 1046 1815 1332", " 738 781 1850 549 298 1963 663 1945 196 492 1100", " 333 279 980 1694 26 1833 1734 196 1369 13 1239", " 1838 1753 377 802 954 94 973 572 1415 59 1169", " 795 411 691 255 1219 563 1229 369 1297 714 358", " 475 235 587 1739 1180 152 858 503 1714 1708 272", " 282 1804 1639 325 1739 995 287 1268 1727 1995", " 442 553 1275 262 656 1821 1798 139 1712 1830 1794", " 821 195 1592 605 1998 766 1889 1507 126 1404 804", " 438 287 571 532 1360 723 293 947 728 231 866 571", " 372 1833 396 1965 494 1945 147 1257 874 812 1954", " 1149 1335 1879 1138 1105 1732 458 1357 674 1764", " 154 502 749 1781 35 1911 687 94 206 43 1499 1079", " 640 541 1643 797 1235 1536 538 1318 409 1825 1746", " 1281 1117 890 1522 1250 1917 745 1938 909 1045", " 1936 1193 1921 1741 909 1071 263 791 13 1103 1211", " 1585 413 1391 1594 610 417 259 172 34 568 1294", " 1973 1930 1248 1659 1926 1567 726 1308 233 681", " 209 1280 653 809 576 1802 1086 170 416 192 681", " 966 1010 561 1646 140 1693 202 1975 737 1392 59", " 808 470 267 309 1416 936 1678 1383 1967 1789 1489", " 1162 1408 669 1574 1705 281 1839 1724 1237 1352", " 775 550 696 657 1980 332 1656 1517 1262 255 655", " 597 39 1602 1464 863 481 1960 812 216 1945 1545", " 799 643 1379 857 1188 977 1839 778 1752 1185 1162", " 2000 1389 666 1127 597 181 1383 47 799 819 786", " 951 207 620 1204 1586 76 1667 1259 1270 207 1046", " 1069 227 1519 83 477 1521 176 751 860 745 8 1656", " 1425 55 658 1769 1948 462 1879 174 999 61 169", " 777 398 1025 49 1604 17 1659 1676"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 390415;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    int numSheep = 2000;
    int maxRuns = 7;
    vector<string> part1 = {"568 1191 659 178 1806 421 13 1192 451 848 1531", " 902 561 1791 851 1978 220 1845 35 334 1466 733", " 1074 1640 1671 198 344 353 935 817 1857 1449 765", " 537 1053 361 124 931 1292 1624 108 645 1225 530", " 128 796 916 853 533 729 1220 1918 253 892 701", " 836 1773 1075 174 1907 1556 1396 1150 620 1005", " 890 1481 347 694 1693 1109 874 1410 773 1226 1188", " 892 1343 1889 715 445 513 1707 366 1520 251 1734", " 1109 1060 1598 380 847 1250 594 1836 655 927 1058", " 1405 866 1060 107 1296 1940 1853 6 1094 84 350", " 513 1794 757 1964 1668 271 166 1835 1298 1045", " 340 1476 287 984 525 1386 1426 594 313 1373 1643", " 1523 325 1582 678 694 656 900 1680 85 1946 46", " 25 895 1305 1834 923 1225 717 1654 91 1747 775", " 5 221 1709 742 1220 1084 1577 1186 221 266 1154", " 1116 44 85 1758 1685 1216 620 848 1182 1716 1472", " 1537 1520 767 1262 1200 637 1784 395 1799 263", " 62 273 432 1280 1896 1098 1320 1 1320 1274 851", " 1615 1045 418 1952 1755 1273 1441 494 1416 1608", " 1390 143 1394 1746 1460 364 1758 923 621 1705", " 1948 105 802 1963 1140 909 1473 599 784 1254 1873", " 1324 646 1842 98 52 1962 743 1784 1063 1489 1697", " 186 145 1752 1725 1317 741 1126 1349 1511 50 111", " 1324 1193 1573 1467 109 1020 271 390 111 1991", " 680 713 1276 31 1683 233 802 1545 756 1455 9 140", " 1056 1480 1926 427 52 1006 1999 1057 425 326 112", " 621 1926 459 462 1793 1270 1275 714 1045 252 304", " 840 1457 1940 562 129 411 236 1820 454 14 1699", " 604 1542 1100 1712 878 625 820 1270 1003 1133", " 55 1383 1694 57 1416 1543 727 1393 1315 1538 1124", " 849 560 304 1309 1373 1095 327 302 1297 1365 1442", " 442 500 208 66 1902 1170 536 802 1684 91 1183", " 463 1034 1638 458 1111 1634 1210 264 961 91 1038", " 1394 30 128 686 1796 1246 1071 689 236 1430 1916", " 1002 416 1616 1223 860 1348 548 1675 1585 252", " 918 489 764 127 544 949 1198 1453 641 1806 726", " 658 150 1812 1724 811 1208 277 672 232 1190 777", " 446 1107 1796 1199 341 1809 1348 951 24 1766 1125", " 817 117 270 1257 454 660 1161 91 1622 354 1222", " 544 1681 111 1619 1821 1290 564 212 954 377 1273", " 994 1270 1872 1382 806 587 1248 1785 791 1155", " 1228 1031 1375 138 1070 406 229 518 569 714 599", " 1637 192 1742 565 854 1157 1414 1830 1339 131", " 1891 277 556 800 1335 1708 1728 670 1513 1108", " 776 1377 427 876 460 1478 442 984 362 897 22 172", " 396 1863 483 1177 1306 910 318 1222 735 289 676", " 179 640 921 1440 986 1243 1688 1059 1064 1916", " 1672 1577 539 1734 260 1049 315 1152 837 542 1501", " 1565 47 1700 1078 1569 29 1492 93 81 234 1812", " 485 970 225 56 521 452 536 542 25 200 1433 1945"};
    vector<string> part2 = {" 308 1856 529 475 598 415 300 1193 1556 273 929", " 1498 149 195 1209 1808 627 390 1110 1146 1698", " 1616 82 1897 65 452 118 49 1615 1411 1964 274", " 304 195 534 8 768 1839 416 1248 1174 1887 1059", " 1949 989 1737 1596 953 1343 456 1965 1567 883", " 348 147 793 1081 418 1096 1941 1715 1030 1785", " 1966 1750 198 1354 1368 17 505 1064 1867 606 1087", " 1055 932 295 1370 1086 40 1706 382 1144 699 127", " 629 1452 465 1370 71 1271 1314 1533 1464 1096", " 307 48 161 596 82 1795 1491 268 562 738 634 1596", " 1529 250 1199 1253 230 284 352 1357 902 1775 84", " 1317 984 139 905 507 464 1764 1281 1617 1402 1235", " 157 1774 576 107 1272 804 1965 1402 1831 962 786", " 831 1791 122 872 1819 327 1845 40 1195 32 1974", " 776 1541 35 268 727 128 281 1980 778 1993 1265", " 1695 1384 452 477 1896 1059 1999 1758 568 24 1501", " 1106 469 137 466 1578 1752 1944 1546 1953 407", " 151 63 1578 83 174 1371 121 802 781 1178 181 767", " 1938 116 1436 1520 717 1641 343 1592 835 1517", " 336 1215 80 247 690 1519 719 245 1791 512 543", " 1906 968 1846 1614 1258 920 377 409 749 913 998", " 712 1411 172 1796 932 1311 1291 345 474 695 530", " 334 1876 1363 789 416 438 1731 883 169 1734 1606", " 948 751 1823 1352 30 1754 248 1611 1710 1692 145", " 1674 1638 828 1277 170 385 435 775 802 1967 411", " 1518 1117 1085 85 1906 237 260 10 628 642 806", " 1124 617 1467 1124 894 768 1772 435 1289 948 497", " 944 1472 1987 481 1186 606 768 935 1855 319 1958", " 1757 1794 996 974 250 651 43 19 366 1911 1823", " 244 1675 1409 43 330 183 729 757 1034 1263 900", " 1497 1645 1453 1333 898 1454 1213 1563 1377 196", " 173 1978 151 1153 1283 1406 565 1513 1540 1405", " 70 759 1377 1949 827 109 436 1543 968 1355 1148", " 1706 1885 1954 1398 242 952 873 1245 154 1816", " 1119 1123 1247 1221 1298 1872 647 782 912 329", " 1747 691 1420 1925 1041 389 1939 1229 373 1322", " 831 1282 1560 373 1739 1571 177 6 1033 430 1620", " 1390 1969 1543 984 1638 1162 1576 1582 1888 62", " 1544 1470 1805 985 1998 372 785 2 1431 27 1588", " 349 1655 1288 1610 1408 332 1643 597 1445 1961", " 1346 1530 640 1010 1422 1969 769 1747 1417 289", " 1468 630 120 668 951 533 558 1590 835 860 1394", " 364 607 979 642 1459 25 987 1527 1630 358 518", " 714 1652 613 508 1336 1616 1183 1227 754 75 753", " 1214 88 1832 1549 1489 680 1294 398 900 369 315", " 1195 991 604 535 542 1941 189 839 1988 572 1735", " 83 1719 892 510 1274 667 1413 1889 85 1127 22", " 775 1449 53 1083 1976 368 699 647 1696 1706 1050", " 1218 16 368 1190 1781 374 1562 1591 1620 110 673", " 1216 426 1112 7 1455 1196 508 838 1684 1958 1964"};
    vector<string> part3 = {" 503 1397 91 617 500 1169 300 1128 1168 1540 1446", " 485 5 1162 1728 1065 1661 391 1413 1241 181 407", " 1552 1551 479 49 21 301 840 641 1336 143 810 326", " 1544 1696 1058 57 235 1264 1092 1536 480 708 1869", " 466 417 94 1674 1580 1032 1919 119 787 579 314", " 651 1226 827 1579 274 102 1105 184 1786 784 730", " 1239 1394 268 1469 1248 544 648 458 612 674 998", " 350 1838 1896 621 1508 169 448 1901 462 434 1617", " 194 1108 351 76 219 92 736 1679 987 730 965 1308", " 287 426 1 1115 1986 1932 1053 811 1006 975 448", " 1758 1251 434 1869 1574 717 327 1790 234 1201", " 1848 1552 94 1335 62 222 1570 1887 880 1522 1353", " 29 169 1290 764 167 1085 1048 1888 1857 845 156", " 1990 102 1193 1669 354 250 1942 1734 30 462 593", " 1046 928 1380 658 682 137 403 1075 951 991 685", " 1635 659 749 1007 54 75 1193 808 1920 1275 1687", " 1918 1890 73 1164 478 948 2 1062 930 1604 393", " 1626 1400 1390 1165 589 496 1468 523 1671 1174", " 703 964 693 1362 767 1009 1535 700 335 355 777", " 1571 1189 47 1757 655 1161 107 1752 1829 475 1314", " 1684 1564 250 798 807 1790 1698 1671 1290 161", " 1894 374 1820 55 1711 1647 1400 1026 99 1567 1252", " 1276 1545 257 939 694 1804 1336 590 351 286 456", " 582 392 31 485 1965 1253 734 1217 958 38 832 1600", " 650 647 1326 1023 957 101 1859 852 704 915 135", " 759 896 395 1974 1057 1663 424 677 164 249 291", " 5 443 537 749 264 1987 1773 1245 1620 667 71 202", " 150 24 1894 1660 440 1468 325 1406 694 535 1330", " 1142 1406 1487 1122 1480 775 1708 1827 791 1779", " 1735 898 717 71 1428 1742 110 1162 1373 1036 1288", " 204 1538 1580 1022 74 1214 1371 1637 751 1803", " 859 1438 781 312 1489 1222 732 522 141 1002 1906", " 433 1487 1263 1124 685 392 1312 75 1137 95 1673", " 1771 1846 1829 1860 1328 1970 1931 1234 1786 171", " 1618 909 650 71 115 1787 493 502 1536 693 809", " 1154 42 1529 486 597 1397 957 383 380 633 165", " 1688 1387 1211 502 1714 625 459 92 142 637 1887", " 1833 206 609 1648 351 1794 166 34 1984 321 129", " 1434 164 1478 164 716 427 1981 840 867 771 286", " 1833 1204 1628 922 914 1476 842 1347 971 1465", " 1771 1281 320 1103 58 1090 36 1341 1347 913 1830", " 1367 247 907 1315 453 1299 638 796 611 1308 1219", " 1481 1274 1038 973 1885 335 85 1794 1564 1834", " 1243 650 139 1098 787 1398 1256 680 1909 2 1577", " 841 668 142 1673 696 732 1065 1376 979 488 863", " 626 100 115 838 827 1986 1925 1059 969 1689 1584", " 194 1083 312 692 1989 1432 186 1616 1804 467 1224", " 281 806 1790 1517 240 615 1949 985 367 1387 1420", " 1577 1668 1354 1411 679 1202 813 1737 174 20 1200", " 1943 1490 659 1928 1566 1981 1066 550 1675 1484"};
    vector<string> part4 = {" 1912 316 1610 668 1989 1280 266 1407 1897 1215", " 479 51 89 772 1549 565 1027 1449 1508 1185 1357", " 1133 823 1278 1545 1302 1889 1400 444 1273 154", " 1885 654 1112 1078 1117 1732 1691 1551 923 605", " 98 1348 1081 122 1514 770 1091 1714 686 690 1531", " 1060 560 675 85 1710 1688 26 227 1357 716 1703", " 292 342 353 761 1816 1877 657 644 743 452 1741", " 1267 1907 399 1572 841 1771 613 965 1084 2 945", " 226 1924 223 249 1990 528 1462 231 728 362 935", " 775 1296 924 1397 880 89 1394 1210 1670 1175 866", " 57 207 955 1146 1252 1509 1286 649 607 1948 282", " 1377 1765 532 1831 1643 1321 608 868 1787 575", " 792 684 757 1708 157 844 1265 1964 1227 1689 1243", " 435 115 1703 78 246 1994 136 1041 1802 1356 753", " 850 685 1125 1396 1779 468 690 265 1411 1109 1203", " 286 382 1350 403 1649 1959 1013 1595 59 1653 697", " 116 335 107 761 91 563 1613 1260 1114 1071 1472", " 256 1637 1892 577 783 1491 991 1977 495 782 893", " 847 1065 971 641 1262 1661 1213 1156 280 483 1319", " 476 1484 1477 866 640 1108 635 1214 75 450 119", " 108 1248 1532 1363 1915 1757 773 1527 577 322", " 894 1119 1869 1363 1037 348 1259 572 1005 1578", " 1191 1925 1302 834 581 1159 270 497 608 1246 2000", " 1209 1618 255 1373 518 1524 1451 1168 1363 374", " 181 197 1454 385 464 157 810 1947 924 635 52 315", " 1123 435 1640 541 1007 932 164 1528 703 1955 829", " 1982 890 986 241 1924 67 1537 1693 692 1565 1820", " 1232 1999 304 340 1151 694 620 139 122 394 1150", " 1066 1535 1250 1793 925 1406 862 743 386 1117", " 986 456 189 45 1381 1002 1872 1340 1554 130 57", " 60 1774 346 1084 771 1187 1091 179 757 1485 1725", " 1923 992 716 1685 1473 438 1385 1533 213 272 684", " 1282 1726 1584 45 1835 1173 1192 953 1021 598", " 297 663 231 429 1439 1548 794 349 139 764 744", " 1815 1313 450 338 1497 1460 1458 650 901 862"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 278985;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    int numSheep = 2000;
    int maxRuns = 2;
    vector<string> part1 = {"1184 1268 1243 1736 1942 1 434 1 1753 441 1366", " 1977 171 1 1 1 1329 1 1 1 1769 1 756 4 1 1 1 1", " 1047 1 1 1086 1317 798 1117 454 1 1 830 1 1706", " 1670 1 404 1324 691 1 879 1 1 1 791 1 727 1 1632", " 195 1 257 1161 489 1310 1 923 731 1469 1 1013", " 19 1987 1 642 1 1 1 113 1 456 257 1 1 1 602 1570", " 1 1016 233 308 529 1203 1217 1 1609 1 220 1275", " 1 1 983 1 257 1 1 830 1872 801 677 1799 713 1", " 418 1 1952 1 1 1 38 1 1 1707 1 1 1914 1109 1 1", " 1 344 168 371 1159 1 1 1534 1 1680 546 1 1656", " 1406 285 1 1 1 192 1 1 1685 1 1375 1346 1289 1800", " 1 1164 1 1561 1 1 1 1 1692 255 1 154 976 1 695", " 1 1 1428 1 1 1 1 1 1 1 1 1 1870 1 501 1021 1 1", " 1 467 1 1 1485 1 229 1 1 479 1 1 1 362 1 1 105", " 1 1 1780 1268 923 486 421 1 1980 1 1 1827 1047", " 1704 1849 620 1 84 770 924 137 1 1 1287 1079 1", " 1 1 1121 1 1967 1 1344 1 1 1 1492 1978 782 1 1", " 1 1447 1 1 1 390 1 1 1 1 556 1509 180 1 1 1 1425", " 1 1 253 1 267 1199 1 1 1 1 861 1 1414 1 1 1272", " 397 1 914 1 1 1 1 1 1298 630 547 1932 1513 1 1", " 1 1711 1983 157 1467 590 112 1 387 1 1 177 1695", " 1 1912 1 1 1 388 1 1 1 1 1360 1 1 193 413 408", " 1 1 1 1 21 837 254 1 1 1 1 1740 1 1 1 1 391 1318", " 1016 343 1 1 1150 1 633 1 1 1454 81 858 1731 1", " 1 1 1 1 1 1 1 1 1309 1 1751 1745 1 1 104 1446", " 1 1846 1 1 769 1 1793 1 1866 1 1054 1422 630 1", " 1 1 1350 1 1 1766 1006 1 1551 1 1 57 1 1 1024", " 1 297 251 984 980 1 1518 1505 1 75 1 1 1 375 1522", " 962 504 445 790 1 1 153 1992 1 1963 237 1 1 1", " 1 534 812 1 1 19 1249 1 255 1 1049 692 733 1 1", " 186 1930 395 341 1 1871 1 1741 1796 136 1300 1427", " 1 1 1 1 1906 1 1 1286 1 1 1 1595 1 1 1 980 1 342", " 832 114 1812 1 638 1 1633 1 1 1 1311 130 1374", " 1285 1 1385 1 968 1 1243 1 1 1 1 961 1 351 1 1", " 1 1 1 837 1175 1 199 1 1 1 1 1 1326 1592 1328", " 1 491 1673 1 1 77 1 428 92 1588 394 1 245 1 1889", " 1 214 1212 795 578 872 816 1 1623 565 1484 1 1684", " 1 1 1 1588 140 1 1183 970 1691 1232 740 1270 1", " 1 1 1 1 1 1640 1062 1 1 1 1883 1841 1 1 1 1887", " 1 1055 1 713 1 1 1 1778 1 1 986 537 1 1003 1215", " 8 1 299 1786 1 1 1886 59 1 941 1 1 1 1 1304 280", " 1 1 1 873 1 1 1932 1 1 1081 97 1 1 1 1544 722", " 451 1 1238 1759 324 1 1 1 1 512 1842 1 604 1752", " 1 1 1 1787 512 1 1 1 1 34 595 234 77 1 1 754 1", " 1 1924 1464 1758 1 1975 1 751 335 1 1 1 1 1 1", " 925 1 1 1 1762 1165 1730 1078 1 1 1294 1 792 1", " 1692 1 1 1 613 27 1 1693 1270 1 1 1 1531 1159", " 1 1 1177 1 1 1 1241 215 1801 1674 1179 1 1 365", " 1 1 1 1 220 1557 1 1 1 1 731 1 1 1 1 1 1 1 30", " 1 1668 495 1 691 571 956 65 1 1274 710 1886 1"};
    vector<string> part2 = {" 1 1068 86 1 1226 1834 1918 1 49 231 1 1 1 1020", " 738 1 1 1 1 813 1 1 43 1 637 1879 1 1 1460 1 872", " 1676 1 1800 1023 1789 1042 1571 138 1048 1 1 430", " 1 1 1 1 1 139 474 1 1 1708 1 1 486 1 1067 1 431", " 1129 212 1 388 1278 1018 1 390 1 1 384 1 267 1", " 1911 225 731 1 13 1 1 1 518 1 1749 1 347 1 490", " 1 1588 1 1 1 1 1 1 1 878 1 1 1198 356 1 1647 1", " 1258 1 1 1875 1 1665 1193 1668 929 1 1 1 1863", " 327 1 1 1 1 1 1 338 1 1 1 764 1 1 1728 1 960 1", " 1 402 1943 1 1 1865 50 1 1 1667 1 1 1483 1762", " 1 105 1 1 1655 1 1 1644 1188 1 1661 1 268 1 1", " 1413 1198 310 1 1 1 1405 904 1 501 1 546 1110", " 1 115 163 1 1 1607 513 1 372 1 1350 196 838 1734", " 1 110 1 1 198 1 1 91 1 1165 1222 1 1 1070 1664", " 1 941 1711 370 1898 1 1452 1 1 1 1 950 424 1 1", " 1 1 58 1 675 1 1 1284 1 1 1217 511 1 1377 1601", " 377 1 1 1 1 1 1 1 1 712 1 1 827 1 1 549 102 1", " 1 1 1 811 1 1 1 1094 1 995 1 1 1 1 1 78 1110 1361", " 1 208 1167 1 1057 1775 1 1897 1 1 1992 1 1647", " 1 1 589 1 1 1218 1 1 1 1 1 863 1 1579 1 514 323", " 1384 1 193 1 1 1341 313 955 1 1 1 1 295 1 724", " 1 1564 703 1 1 879 1 1 1 1040 1 1 1495 82 1 1861", " 1 1710 1 1 1539 1 1 353 51 1955 1 116 1 1 696", " 1941 452 1189 1 695 1 1226 1446 1 308 1569 1 1", " 1671 1 1 1710 1 1 90 1091 1 1686 1 189 806 1 1", " 1 1374 1 1799 1 497 1 1 1 1282 1 1 1 1 1004 1427", " 1028 1633 634 1 698 80 1 1 1 727 1270 1 1 1 212", " 1873 1 288 1831 1 1302 1042 1 1 1170 1 1 1 1 1", " 1636 425 1 313 1 333 1 1 1 1022 837 619 1 1 1", " 1 1 1502 1 1 1 1272 270 1 695 1986 557 1021 1455", " 565 1 1 1 1294 1 1035 1 1 1 1 636 1 499 1 1648", " 1 1 273 222 1099 1 1918 1 1 152 782 1 1 1 1 1", " 1 725 170 35 1 1288 1 1 1 390 1 673 843 24 1497", " 1 852 1439 1 1 1 1616 1 1748 1 924 1 1 1 1 679", " 1 577 1813 1628 913 192 1 1520 562 1 1679 1927", " 1 1 912 1 1 1 719 271 1 1867 1 12 681 1523 1 1", " 1 96 1 1 1 1 1 1 1884 445 1 1376 701 1 1807 1", " 1833 1 1 1 1 1538 1787 1662 1 1 548 1 1 1 1067", " 671 1619 1 1 748 692 1 842 930 1 1 1 106 1 1256", " 1 1 1280 395 1 1 1834 1 1 1 74 1 1 1952 317 1530", " 953 1500 1 1358 362 357 892 1 1751 579 1089 1", " 1138 972 1882 1 1 1 1640 1169 608 1 1769 1 1851", " 1 1 1 586 1 1294 1 1 968 1122 1 567 1570 1 1 1015", " 1 5 1 1 1929 1575 1409 691 1252 1 1659 1 518 1", " 1743 42 1754 128 1502 1 1 1034 1 1 1035 1146 418", " 1123 1 1799 1 1694 1 1 1081 1371 1214 795 170", " 1 1 1430 1040 1418 1509 1215 336 1 966 1 1 1 1", " 222 1 1810 1 1 1 1 1 1 1593 617 494 1 1 1610 1", " 281 1 1180 1222 1 1704 1702 795 1 731 1 1 1 263", " 1 1 1 1 1555 1595 1 1 563 1593 223 1 1849 410"};
    vector<string> part3 = {" 1 243 1 1988 1715 607 983 1 1 1 1084 1 1280 1", " 1013 1 1 1450 1 1 1 1 1057 1585 1 1082 1897 1", " 151 1 1 1881 1 1 1 242 1 1 1 1 1278 164 1574 237", " 53 278 1 808 1 1 1615 1751 1361 1 1 1 494 1886", " 1 1913 1 1 161 1 926 1 1 1 1 1 1 1697 579 751", " 1630 1906 460 1 631 1 697 1 1 746 1 624 1 1453", " 1 788 1 1 1 1 1975 1251 1129 550 1 1 1114 610", " 1 1 1727 1 1348 1 1722 1 1 622 1385 1358 1 1491", " 398 1737 1 1 1 1 1 79 716 1 1 1 1037 1902 1 1", " 1512 822 1 502 1 541 1 885 1 1 1 1583 1 1428 1", " 1 1417 1023 1 1106 1 309 1431 603 819 1288 716", " 583 1 1 1 52 1 1 1613 44 1 1 1 1 1 1373 1 1 5", " 1 1 203 1 1 1 1 1 1106 1584 1 1 1 1 1305 213 1", " 1 1 1 1 1404 1 1450 1 1 1869 1 1 1 1269 1049 1", " 1142 1187 1 1642 608 1 186 1 1207 1 1 1545 1 1", " 225 1 1301 242 1 1530 1 1548 1101 1025 1 228 1327", " 1 1 942 1702 172 1 1 1476 1 1 1 1163 1 1 1 1225", " 1100 274 1658 271 1 1 1 596 336 1 381 1 1 1 1", " 174 1 1 1 1 1507 1 134 831 1 1904 394 778 1 1982", " 1 1239 1 1 1 507 1571 1 43 1 1737 1191 1866 1", " 1082 950 1 1 1 1 331 1383 541 1609 1 1737 337", " 752 853 913 1 1 1 463 1 1 1 1 638 1253 1 1 450", " 1 1 4 1937 1 1 1 1 1 1 1261 1370 1 1 1988 1 1", " 958 888 1 1491 1 1 961 1040 635 1 1344 1 1 397", " 1206 1297 105 699 1981 1 1453 599 1922 1 1 1 1", " 1900 1 1 603 917 1 494 1 1806 1817 978 1 1 1643", " 1 722 1329 34 1960 120 1 1722 1594 1583 1 1079", " 1 207 1912 1779 1 967 763 1810 1197 319 1 1533", " 1 1117 132 1849 957 1 1 819 1 23 442 1499 1 179", " 1 1 1 1814 1104 656 1 1 1 1 1444 1815 1 1489 30", " 1 1 391 1 1 1 248 1 466 1 1860 460 1 1304 437", " 1 1 1 1557 1 1858 1 1080 1496 608 1 1 221 1 1", " 1505 1254 1 1 1 1 1652 864 656 649 1 1 1392 1", " 1 1 1 1 1 6 1 1 239 868 1 289 1 357 1 1126 1 1884", " 1405 1794 1271 1 705 336 1127 1 743 1581 1 1 1", " 1781 857 1606 1"};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 489892;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    int numSheep = 2000;
    int maxRuns = 2;
    vector<string> part1 = {"13 13 461 1640 13 13 13 335 13 712 13 734 802 1172", " 13 349 13 13 13 13 13 13 13 1504 1540 13 1905", " 13 600 13 1495 13 1386 13 13 978 207 13 1332 1763", " 522 13 13 617 195 1243 13 1523 1057 13 1915 618", " 973 13 13 322 13 13 1212 1024 13 13 13 13 13 1345", " 13 13 13 13 13 13 1739 13 13 430 13 13 13 13 1506", " 13 13 13 13 1664 1362 13 13 1231 13 39 1930 1446", " 1554 13 298 1250 13 13 546 13 13 40 13 13 13 990", " 1342 1418 852 1570 1769 379 13 13 13 1786 1835", " 13 13 13 1929 1567 13 1161 13 878 13 1424 829", " 13 1938 13 1600 13 13 13 13 13 13 13 1446 962", " 1879 1006 13 36 394 13 13 13 13 13 13 13 1985", " 1290 13 13 13 993 1051 1068 1516 13 13 577 13", " 13 1223 13 1514 887 13 1217 1111 509 739 1942", " 1347 13 997 13 1543 13 13 13 1063 13 553 440 13", " 13 13 13 13 502 535 13 13 161 102 1711 1797 13", " 13 1255 13 13 13 847 419 41 13 968 1216 643 319", " 13 13 13 13 1519 388 13 1404 13 1996 13 1239 13", " 354 13 742 509 1428 1130 1801 13 13 13 1549 253", " 440 13 507 13 13 1050 1289 1858 13 55 1329 13", " 701 395 13 13 13 13 814 159 731 13 1882 13 841", " 459 13 1707 13 1310 13 13 13 1492 1928 13 660", " 1755 1433 13 13 13 288 13 953 1895 13 1439 13", " 785 13 13 229 1931 586 162 1963 13 13 13 13 13", " 1528 13 13 1762 13 13 1435 13 1885 1511 13 1250", " 13 243 782 13 13 13 1541 13 1599 1111 1890 13", " 880 390 741 13 201 1372 444 1860 13 13 13 13 671", " 1378 13 13 154 1153 13 13 1727 13 13 13 13 13", " 1284 13 13 13 43 13 942 13 13 13 1744 578 13 1427", " 1781 1906 110 13 13 13 13 13 1508 13 543 604 305", " 13 13 13 1809 66 13 655 13 1739 13 13 833 277", " 13 826 175 13 1037 13 13 13 382 13 13 13 13 1", " 13 1734 1456 13 13 13 13 13 13 13 1605 13 1610", " 13 905 1942 806 389 13 13 587 1639 13 1001 1483", " 1800 909 13 13 1149 13 89 13 13 13 892 13 375", " 13 13 1294 1006 602 1082 13 1388 13 450 13 1985", " 534 13 1413 522 1290 271 955 13 1281 1533 13 994", " 13 13 594 1325 1787 13 13 13 13 13 13 13 13 343", " 13 13 467 298 13 1055 13 13 13 1191 13 13 13 13", " 13 946 13 1222 1550 13 13 193 428 1491 13 13 892", " 13 1984 1308 13 2000 13 1825 1734 1254 13 97 1208", " 278 13 13 416 13 13 5 13 13 1832 13 13 13 13 13", " 1663 13 13 13 13 13 93 1041 13 1632 118 902 1427", " 278 939 1332 13 13 892 1121 13 13 13 67 13 13", " 13 881 823 1540 13 1288 13 1496 13 649 13 742", " 13 13 1963 1250 13 13 86 13 13 405 1834 13 13", " 13 13 13 13 897 1992 977 1536 13 13 13 13 13 310", " 13 224 1162 13 501 1356 13 1701 13 671 1108 504", " 169 574 1926 13 670 13 1980 1537 13 963 13 1595", " 1892 1833 215 13 626 482 13 1577 1052 1600 756"};
    vector<string> part2 = {" 912 13 13 1055 362 1601 1684 1987 13 13 13 1049", " 13 738 1320 13 1281 13 13 13 305 279 1911 13 13", " 13 13 13 13 13 1417 1602 13 8 1764 13 857 986", " 294 574 13 1015 883 139 13 13 13 13 13 13 101", " 13 565 13 13 13 13 1255 1657 819 1166 1515 1947", " 13 13 13 13 62 754 1157 13 332 729 69 13 302 13", " 13 375 167 13 13 1816 618 274 1141 13 13 781 1173", " 391 13 13 1821 1009 454 13 13 13 13 13 1869 13", " 1707 489 1089 13 13 13 1447 13 13 1484 13 1022", " 13 1755 1177 1390 970 396 13 612 13 1882 412 103", " 13 13 13 313 1071 1184 103 13 13 13 848 1152 659", " 1432 13 102 263 773 1186 13 1742 827 208 1720", " 13 27 13 1494 13 13 1393 13 13 730 13 13 13 13", " 634 911 1272 13 1186 13 1033 211 992 13 13 1860", " 13 1469 1988 879 568 753 13 645 13 13 526 13 13", " 994 13 13 875 13 13 13 13 1063 13 13 13 113 13", " 13 13 13 1722 13 13 13 1078 13 13 1717 13 13 1390", " 905 13 13 1679 13 160 1164 13 270 13 1690 7 13", " 1069 24 1950 13 1453 729 1501 1252 377 1711 13", " 1124 13 13 13 13 13 207 29 1784 13 20 13 13 1306", " 13 13 1008 503 877 665 13 1103 1501 13 336 13", " 13 313 13 13 13 544 13 1709 697 13 114 13 55 13", " 1099 1712 315 1290 13 13 13 101 1130 13 1215 1171", " 13 13 1766 1867 1926 13 13 13 13 380 1534 1168", " 1808 1590 13 13 648 13 13 13 1967 1853 1996 388", " 569 13 13 13 13 1376 532 1192 13 279 13 13 13", " 13 13 13 993 13 13 1631 1548 1357 1564 1104 13", " 13 868 600 13 13 13 13 262 1162 306 1618 13 1456", " 13 1625 140 519 1426 104 13 16 13 13 75 13 748", " 262 368 13 13 1611 1331 1201 13 13 13 370 13 13", " 42 630 13 13 13 13 316 13 13 718 13 851 495 13", " 13 355 13 1022 295 13 13 13 529 13 13 13 13 595", " 13 285 13 13 1619 1827 13 13 13 1258 13 599 13", " 1411 13 13 13 13 1883 13 878 183 1014 116 1573", " 13 13 13 13 1114 13 113 13 13 13 1854 1779 1234", " 13 13 606 626 13 13 1362 13 13 8 13 1530 13 551", " 13 13 13 13 13 13 13 1610 13 1562 1905 13 13 13", " 13 1738 451 13 1675 13 1154 13 13 13 1915 1541", " 13 1752 13 13 629 13 13 14 859 229 1739 13 13", " 1922 557 950 1779 13 1864 1074 13 1198 13 13 13", " 13 13 1599 13 13 570 13 13 138 13 21 13 13 13", " 371 53 1546 13 291 589 13 886 13 13 13 13 13 1932", " 13 13 408 13 13 13 13 1447 287 617 131 13 13 13", " 1135 13 13 13 13 13 13 642 13 1776 13 1813 13", " 1074 13 13 13 1254 580 13 13 13 13 13 1468 13", " 1775 1937 12 13 13 1465 13 835 13 1478 13 629", " 13 235 13 888 486 1219 13 52 1685 13 13 1168 614", " 13 709 13 1913 370 1890 13 687 13 13 1309 13 13", " 13 13 1612 13 1153 13 13 13 13 1895 1182 207 13", " 13 13 1842 1503 13 13 1357 721 13 13 13 1459 13"};
    vector<string> part3 = {" 219 1447 13 1300 13 1308 13 13 680 13 246 979", " 13 1319 13 1548 13 13 13 13 13 13 930 1072 689", " 372 13 1484 1026 13 13 283 1973 820 150 820 1394", " 13 1735 1987 1916 13 13 1764 360 13 13 13 1210", " 847 13 1747 1297 1021 13 13 13 689 13 1846 13", " 1761 77 781 894 13 73 180 1512 1242 608 1693 1270", " 13 745 13 1866 691 956 1312 19 977 13 497 506", " 13 13 13 840 155 13 13 27 13 1179 1424 13 133", " 13 13 13 1512 204 1967 1698 13 741 13 13 13 86", " 1167 913 13 1508 13 1234 209 13 782 13 99 1291", " 13 13 1431 1902 1020 13 13 1252 13 13 13 1000", " 1026 13 1769 13 13 434 13 324 758 13 6 13 13 13", " 13 709 718 911 694 13 13 13 1231 13 13 647 13", " 13 13 928 1816 1571 891 1853 13 13 1762 531 13", " 13 13 13 513 442 1507 13 1679 85 13 1831 963 13", " 1501 13 254 1358 1932 379 13 966 13 1322 836 13", " 1356 13 13 13 13 729 13 190 13 13 1938 13 13 13", " 883 1033 13 13 1713 13 13 1836 13 13 13 13 1222", " 1686 1449 13 13 13 13 13 13 1549 13 13 13 7 13", " 1936 13 13 72 13 13 13 13 1365 13 1668 42 918", " 13 13 1093 13 1057 13 339 631 1799 13 13 13 13", " 1645 1059 13 13 1419 13 13 941 997 13 13 13 13", " 793 13 13 13 1605 1389 867 13 13 13 465 13 13", " 13 1 1779 490 677 1115 13 863 13 13 266 1053 13", " 1191 13 64 473 571 143 13 13 13 273 13 625 13", " 13 13 1343 13 13 360 373 1292 13 226 1641 1245", " 181 113 13 13 1217 13 714 752 13 13 1036 665 1645", " 1236 121 13 13 1827 1571 13 13 940 1284 13 1488", " 234 1938 13 948 13 13 13 1862 13 13 1268 906 13", " 13 13 13 13 13 756 13 602 13 13 362 13 13 243", " 71 13 852 1392 13 879 782 13 13 13 13 211 1018", " 13 13 152 13 416 759 13 13 216 13 13 1120 428", " 829 1869 13 13 13 251 13 13 1383 449 1095 13 1730", " 587 1278 13 13 13 262 520 1418 13 13 1287 1875", " 13 1281 1378 266 964 1497 954 983 13 1034 751", " 86 1659 44 13 13 233 840 13 13 13 13 13 1380 13", " 13 1512 928 356 879 421 13 13 198 215 688 13 660", " 13 811 1856 1475 1334 677 13 1851 138 13 739 13", " 13 13 13 13 1311 13 1678 13 13 1755 378 13 13", " 361 13 13 13 13 13 13 1976 13 1085 493 13 13 1", " 13 13 13 13 13 1015 13 13 13 1248 13 13 13 13", " 13 13 13 1909 1753 1617 13 610 13 733 189 638", " 13 13 1774 13 699 77 13 235 1986 13 1790 1256", " 13 1394 1339 321 13 13 85 13 448 529 13 13 1464", " 632 488 197 13 1879 13 13 13 13 13 529 13 13 1012", " 13 13 13 13 1985 13 13 13 13 1822 361 195 13 13", " 13 13 1595 13 13 13 13 387 317 13 1743 1901 1481", " 1453 13 13 13 934 13 13 13 1627 13 13 13 354 13", " 13 981 13 476 13 1696 342 13 13 13 474 13 1105", " 983 1998 1691 613 13 13 1913 546 1367 13 13 13"};
    vector<string> part4 = {" 1290 98 13 55 13 1563 13 13 1721 13 13 1956 48", " 13 13 13 1272 1018 13 13 13 106 13 118 13 13 222", " 625 115 9 823 922 1501 541 339 13 1046 13 13 1782", " 560 122 13 13 13 13 1540 72 866 709 970 743 13", " 13 1176 13 702 13 934 13 13 725 1804 13 95 1033", " 13 1588 1740 13 828 527 1098 13"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 492818;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    int numSheep = 2000;
    int maxRuns = 2;
    vector<string> part1 = {"1108 42 42 1041 42 42 1891 42 738 42 42 42 74 42", " 42 1364 42 42 42 774 42 42 42 42 42 247 42 1124", " 382 42 42 493 1860 42 42 382 1427 42 42 781 551", " 568 1516 1265 42 440 216 42 42 1079 1364 42 42", " 270 402 42 1951 1480 1527 42 42 797 42 947 42", " 1026 1522 42 1670 42 373 112 42 1080 230 42 42", " 42 42 42 42 42 1469 42 42 513 1474 42 1688 1265", " 1507 42 1903 1137 42 259 1114 42 42 42 1841 1113", " 42 1119 42 42 1228 42 124 595 1106 604 42 1387", " 821 42 42 327 917 42 755 42 42 42 42 42 837 42", " 1277 42 42 300 978 441 42 42 42 1957 42 42 1987", " 42 42 714 42 1836 42 1289 1476 42 42 572 1799", " 46 358 358 42 1704 42 42 42 42 42 222 1083 42", " 42 494 42 833 42 42 147 42 682 42 42 146 1675", " 953 42 1912 317 42 42 374 42 1964 42 821 42 516", " 42 42 42 358 1070 449 1859 42 527 1 42 42 42 581", " 1255 42 42 42 42 42 42 42 42 194 42 694 42 886", " 42 42 42 42 1562 42 42 598 42 1449 42 42 42 42", " 852 289 1511 1601 42 42 535 778 42 1592 1882 42", " 42 42 76 42 42 784 1907 42 42 42 42 42 1501 42", " 1888 42 42 1620 1272 248 42 42 42 42 1927 1888", " 42 42 42 42 42 888 1319 42 1743 570 763 1768 42", " 42 493 655 42 323 42 42 314 695 42 1573 42 42", " 1290 42 353 1335 115 439 42 980 192 299 42 276", " 42 1019 42 42 617 340 684 42 42 1347 42 694 1594", " 42 917 1110 42 1611 616 1438 787 42 1768 1065", " 1548 1525 1407 42 42 132 42 42 527 42 320 1161", " 42 42 1152 1961 42 674 1401 42 42 42 42 42 42", " 579 105 486 219 1543 42 42 1064 42 42 607 617", " 42 176 833 42 42 1748 42 42 400 1502 1935 169", " 984 1341 1945 1403 42 42 1697 1344 889 552 42", " 1394 42 42 1328 42 42 42 42 42 332 42 42 829 991", " 1069 42 368 1700 42 1536 1685 111 1578 1837 42", " 42 42 566 42 1217 42 179 42 42 42 1977 42 1316", " 42 712 556 272 42 42 1257 42 42 42 994 42 42 42", " 142 213 42 904 927 1335 42 978 42 42 42 42 1840", " 42 867 1799 44 42 1108 42 42 42 42 439 979 1321", " 42 42 1019 42 1919 42 866 42 42 1848 887 1246", " 42 42 1692 42 1917 42 570 876 1082 770 42 1983", " 856 42 42 629 1088 42 38 189 42 951 1518 1518", " 42 42 42 42 1080 54 1410 1737 42 42 141 1152 42", " 671 304 10 42 1430 649 1938 1060 42 1800 42 203", " 1608 42 1637 1337 890 1401 754 42 42 42 910 118", " 848 42 42 42 78 42 1229 157 42 1849 1686 1425", " 284 477 1983 42 42 1970 42 96 42 750 42 42 42", " 42 1260 1902 184 597 42 42 257 42 1332 42 1327", " 1131 42 1368 42 182 42 955 42 236 42 1386 742", " 1476 99 897 1827 42 42 644 42 42 1018 854 1631", " 42 1882 42 42 42 42 42 733 748 42 42 479 42 42", " 1500 1641 42 42 327 798 42 42 1524 42 623 501"};
    vector<string> part2 = {" 42 749 42 1014 121 42 42 42 1967 1635 416 42 42", " 42 438 42 889 1987 42 42 985 1789 651 340 1319", " 1454 42 42 42 1370 491 42 42 528 42 703 42 42", " 1043 42 42 1980 42 42 1101 600 42 42 1220 146", " 42 42 1565 481 1921 1540 1083 42 56 1639 42 42", " 160 4 42 42 42 42 42 1937 42 925 42 159 1595 42", " 293 42 673 842 42 491 545 1819 42 42 42 42 42", " 327 1148 42 42 42 1478 42 742 1236 42 42 42 42", " 42 42 42 1811 1325 42 1528 1654 600 42 1080 281", " 1607 42 375 441 1200 42 1616 42 1169 42 888 42", " 1299 42 431 983 1174 42 1056 1158 56 828 42 42", " 996 1663 42 42 1717 607 42 1779 42 1571 42 989", " 251 518 42 909 42 42 711 42 1064 487 42 968 42", " 692 21 42 42 42 42 235 1416 42 42 610 1081 42", " 42 42 42 832 383 509 1368 293 593 125 954 42 42", " 42 42 42 42 479 1873 640 1949 1830 76 827 53 42", " 42 42 42 189 1314 42 1614 42 1358 42 42 42 147", " 1402 1648 271 42 42 1991 1228 87 42 1347 42 42", " 1115 42 42 694 42 1769 42 42 42 42 42 1953 649", " 42 42 1243 660 42 1517 5 42 42 1373 1610 42 42", " 42 903 42 42 67 42 42 811 42 73 440 105 115 566", " 1437 1318 42 888 42 31 1126 794 42 1655 235 42", " 42 42 1790 1697 130 42 42 1832 1997 42 42 42 1229", " 42 863 42 1894 42 42 337 97 42 1358 42 835 4 1876", " 42 1340 42 42 1016 42 42 42 42 609 1261 42 42", " 42 474 1003 638 1584 42 42 1878 954 42 233 871", " 1085 239 593 269 608 112 1518 42 943 42 42 1362", " 42 1828 42 1549 42 42 1390 42 42 772 1796 1616", " 42 42 42 42 42 1778 42 1975 42 42 42 1664 950", " 42 1814 42 42 42 801 42 42 42 42 1100 1748 42", " 1175 588 1564 42 516 1569 708 42 508 924 42 42", " 42 42 1157 301 42 42 1747 42 22 1933 42 42 42", " 303 340 521 42 927 42 312 42 867 1117 61 42 42", " 42 1843 1501 825 42 42 777 42 502 42 555 42 42", " 42 42 434 42 42 1231 42 42 803 849 42 42 466 42", " 42 1217 42 42 42 902 42 1126 123 42 42 42 1096", " 42 42 42 1012 42 42 454 42 1743 42 42 1142 42", " 1712 42 42 42 42 1056 42 602 42 429 42 460 302", " 42 1912 1248 42 1251 716 1238 42 238 42 121 821", " 573 251 1435 488 42 139 418 934 42 1046 42 42", " 42 42 248 237 42 42 42 951 213 42 1434 1014 855", " 42 217 955 875 42 1788 1379 980 406 42 132 1136", " 42 1363 42 601 348 42 854 815 42 1628 42 42 42", " 42 42 15 42 212 697 110 42 1425 775 42 282 1758", " 42 108 42 42 285 1966 1625 42 1445 42 143 42 42", " 42 42 1456 194 1191 920 42 42 1019 42 1203 42", " 106 42 377 788 42 42 42 42 42 164 376 204 42 1309", " 800 42 42 1377 42 42 1762 908 343 1741 942 291", " 42 286 42 1488 320 42 42 188 42 132 42 50 353", " 1475 42 1580 42 864 1508 42 1267 42 42 42 25 42"};
    vector<string> part3 = {" 42 42 42 42 42 886 42 42 42 42 42 492 353 42 42", " 42 42 1610 42 1428 42 42 1175 1312 486 768 42", " 1727 1727 3 42 153 620 42 42 307 42 665 42 187", " 1889 391 42 42 42 42 42 1154 42 42 42 42 42 42", " 42 42 42 42 1369 846 42 615 42 42 42 895 42 42", " 493 464 39 42 1929 42 186 284 325 129 42 1005", " 42 801 42 42 42 42 205 294 552 42 42 837 1459", " 592 42 38 42 42 42 1874 42 108 1925 42 1968 42", " 42 42 1905 42 42 538 1055 1608 42 171 1603 42", " 42 212 42 42 1353 1834 42 282 42 42 1829 1983", " 249 42 869 42 1033 42 1916 42 42 1481 42 42 42", " 42 1645 42 42 625 42 42 1611 196 1271 1391 12", " 600 42 1071 564 714 42 42 42 42 199 475 1288 42", " 42 42 1546 299 42 42 1064 2 1399 42 42 42 42 1757", " 42 1616 42 42 42 42 42 42 1500 42 1210 157 42", " 42 42 42 42 42 42 1233 42 42 42 42 1459 1058 1836", " 119 128 42 42 42 978 42 42 42 42 42 42 1756 1908", " 42 42 42 42 42 934 42 42 115 42 1331 42 42 42", " 202 2 42 42 42 1839 42 42 42 42 42 46 1274 42", " 339 805 42 42 1421 708 42 1730 1203 42 52 42 42", " 1854 719 512 42 208 42 42 42 713 42 42 12 1813", " 42 1066 42 42 42 42 308 970 42 42 42 42 808 52", " 1808 1580 42 42 1252 913 1785 42 42 42 726 42", " 1935 1355 559 1753 42 42 42 1383 1683 42 1028", " 1860 576 42 426 42 1747 378 42 42 1008 626 188", " 42 688 42 42 42 316 42 42 665 42 1014 1702 713", " 42 933 703 42 42 1748 416 1224 42 42 42 167 42", " 970 1060 1910 42 42 42 42 42 776 42 42 228 1584", " 42 115 1084 1755 85 42 419 305 42 42 42 657 1365", " 42 1151 1423 414 1057 1768 42 1636 42 42 42 340", " 42 1481 110 42 856 577 42 651 42 1647 117 42 1018", " 42 42 993 42 42 1891 42 42 1591 526 42 384 42", " 1239 42 42 42 1446 1916 371 42 1953 393 139 42", " 42 1677 42 42 126 42 117 1182 1430 1098 682 1283", " 42 1405 1179 42 42 1729 42 241 1587 42 42 42 1274", " 325 42 42 42 98 42 1022 1937 359 33 1154 42 784", " 1695 42 42 55 42 42 42 737 39 496 42 785 42 42", " 42 1235 42 1813 42 1497 610 395 1622 1625 1301", " 657 42 42 42 42 1687 202 42 879 42 42 819 1495", " 42 42 42 1421 42 42 42 668 856 713 42 42 42 42", " 1735 42 293 42 42 1397 42 42 42 42 1150 506 42", " 39 42 1846 42 42 241 42 42 42 134 1030 848 963", " 42 1236 42 1691 1861 924 42 42 283 1403 42 42", " 42 1341 42 42 1191 42 42 42 3 1600 304 42 652", " 724 215 1342 411 42 42 42 1590 42 42 42 42 1247", " 42 42 1401 731 1832 42 42 278 42 42 42 84 42 42", " 42 42 42 42 42 42 42 830 549 42 1034 42 1727 1633", " 42 1415 1034 1691 1740 1921 42 360 42 42 860 460", " 493 42 1175 42 42 199 42 1578 345 42 628 1995", " 42 815 911 684 1588 251 42 154 469 42 1168 520"};
    vector<string> part4 = {" 42 42 177 963 1090 42 42 42 610 1402 1579 42 284", " 994 1689 1322 42 42 42 1177 1545 951 29 42 42", " 42 1396 42 1043 42 767 438 157 1960 42 42 42 42", " 990 42 42 1010 1563 42 1924 447 1192 830 42 351", " 42 565 65 1368 117 1386 681 1740 1229 1070 42", " 1170 1604 42 42 42 42 42 1462 41 42 42 42 42 1240", " 85 42 42 1950 1177 42 539 1431 42 42"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 497501;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    int numSheep = 2000;
    int maxRuns = 2;
    vector<string> part1 = {"236 576 576 576 305 576 244 576 849 496 1367 1214", " 576 233 576 576 449 890 133 576 1587 576 1581", " 600 576 1528 576 221 576 456 747 576 793 576 576", " 1220 576 9 576 1181 727 1588 576 431 576 1523", " 576 576 576 576 823 576 576 576 576 731 576 1831", " 576 322 1650 576 1587 1920 1098 1341 576 576 576", " 576 1485 576 1485 576 576 492 576 278 576 576", " 576 576 1502 937 1810 105 1201 1170 576 1492 638", " 1389 576 576 186 845 576 85 584 576 576 1914 361", " 576 576 1043 391 805 788 576 576 1200 576 1645", " 576 576 1165 1292 1071 1655 99 576 576 1283 1189", " 1788 576 576 1130 576 576 610 576 576 278 1786", " 1445 1078 161 1662 1541 847 576 134 1404 576 576", " 576 576 1754 576 989 644 1510 1259 576 576 985", " 576 576 576 1164 1879 576 576 576 1962 859 576", " 871 576 576 626 576 1510 576 576 576 577 576 1086", " 1574 1046 576 932 1398 576 287 576 576 576 576", " 576 576 361 576 1174 51 576 576 576 775 576 1943", " 594 576 576 764 576 1807 561 576 576 576 88 576", " 617 576 676 943 576 1604 1500 576 576 1741 1721", " 253 1226 576 857 576 576 576 576 875 764 1431", " 1242 576 576 1 576 513 576 576 576 576 576 251", " 576 576 576 576 576 108 467 576 576 576 576 576", " 1412 576 11 1002 576 516 576 576 122 576 296 281", " 750 576 576 576 576 576 1230 576 576 1031 576", " 576 576 292 296 576 186 211 1648 576 1571 1693", " 576 576 223 874 576 576 576 576 576 576 576 576", " 1242 1037 83 1914 576 1985 1696 1797 576 202 1394", " 1637 576 576 576 484 576 636 498 1599 1054 576", " 1451 664 576 1844 576 576 1963 1592 576 1861 842", " 1499 1604 1739 576 852 576 727 576 1526 1802 419", " 1480 1735 576 576 1040 1925 576 576 1687 1655", " 779 184 492 1200 502 1501 443 576 1080 210 1148", " 1068 548 576 1701 1695 257 1728 357 1411 576 339", " 576 576 576 1517 1242 576 1389 576 215 576 576", " 1959 1956 576 1703 1898 476 576 33 1495 576 576", " 1757 456 576 119 576 576 1385 1299 576 576 523", " 388 1305 242 576 576 1047 576 576 576 576 576", " 576 919 576 576 713 576 576 522 576 1341 576 576", " 576 1997 576 576 1001 1639 1247 474 398 777 576", " 576 576 548 576 1421 576 576 576 75 1406 1711", " 1058 1821 1856 1891 576 576 1109 12 133 1981 576", " 1772 576 576 666 1468 974 576 984 99 576 48 576", " 1861 45 576 1699 1143 500 222 669 576 1164 576", " 576 812 576 576 576 576 864 576 753 576 212 576", " 337 474 576 576 576 576 576 576 576 576 576 576", " 576 1803 158 216 1983 576 1321 704 576 871 576", " 1541 376 1015 281 576 83 1986 324 576 576 576", " 576 494 959 1762 576 576 1196 576 576 1233 210", " 1767 576 751 146 1100 1888 576 1368 576 397 1049"};
    vector<string> part2 = {" 576 576 576 271 576 1090 1405 1696 142 576 187", " 576 576 576 576 823 576 1320 1760 231 576 576", " 576 1174 1731 141 576 1290 983 260 576 576 154", " 576 576 576 576 576 576 576 576 576 576 576 576", " 47 1340 576 1906 576 576 845 576 1929 576 826", " 576 1087 88 576 835 1287 576 767 638 576 611 1838", " 576 576 1973 576 576 576 879 882 576 576 576 853", " 461 576 576 545 576 576 576 1548 1576 576 1126", " 50 576 576 576 576 576 1969 169 885 1969 576 576", " 1469 1027 1865 576 576 1334 179 1352 576 576 321", " 719 909 576 576 576 576 576 576 576 159 576 1241", " 576 576 1247 1250 576 576 576 395 576 576 576", " 1985 1130 1946 1159 576 448 722 576 814 576 576", " 576 95 576 312 576 576 576 909 88 1439 576 576", " 576 576 947 844 1157 576 576 92 1283 576 576 1802", " 576 1557 893 576 576 1509 606 576 576 576 576", " 576 576 576 1387 576 730 576 324 576 576 900 576", " 283 576 1422 111 559 576 576 264 1034 576 1889", " 576 576 1053 576 971 253 1361 444 1377 1442 1904", " 1399 1664 576 576 1042 117 576 442 576 929 576", " 328 576 1934 1612 576 576 576 1798 1881 80 576", " 1019 1311 1327 576 212 576 576 671 576 576 532", " 66 1014 384 913 350 1700 576 576 352 1999 576", " 343 576 576 576 1364 576 1996 1939 576 1569 576", " 478 576 1441 78 576 302 276 576 576 711 576 790", " 1791 38 1391 576 1855 1925 576 576 576 576 862", " 576 576 576 882 1287 1956 1123 576 576 576 576", " 576 511 14 576 1690 576 576 1976 576 494 247 576", " 1057 996 576 576 576 415 576 576 576 576 576 1381", " 1435 301 1322 576 576 351 576 576 1459 1507 576", " 576 576 1616 576 576 576 576 1235 576 623 576", " 203 576 576 499 576 15 576 1104 576 1725 576 576", " 576 1662 576 1739 576 576 53 823 576 576 576 1776", " 576 89 576 576 576 576 1900 1965 576 1516 936", " 576 391 576 576 576 576 576 1156 576 576 576 576", " 576 846 576 718 576 998 1538 1941 1351 576 1558", " 576 576 1374 1022 263 35 576 576 576 576 1279", " 576 756 576 450 576 1550 576 576 1400 576 576", " 1358 576 501 576 576 1799 576 534 1628 576 576", " 537 576 576 576 1261 509 576 576 1741 576 576", " 380 576 1686 863 529 576 576 576 576 1870 576", " 79 1999 576 1177 696 611 576 1663 576 576 1891", " 751 575 576 1786 576 576 576 1208 919 1657 706", " 576 576 576 842 576 576 1295 1557 181 576 1200", " 576 576 188 37 576 1339 277 466 576 131 331 576", " 1469 781 1660 1517 576 576 576 576 1322 712 841", " 576 616 685 1948 427 1467 576 786 1672 576 576", " 576 576 39 1969 576 576 576 604 576 63 576 1740", " 1152 576 443 576 1409 576 576 576 1187 576 1430", " 1683 576 576 576 975 252 576 406 576 163 576 576"};
    vector<string> part3 = {" 1629 576 1662 1391 576 1323 576 576 576 576 576", " 576 227 744 10 1145 576 576 576 439 1643 769 558", " 576 154 76 955 604 576 576 576 1385 1343 693 62", " 318 576 576 1882 576 576 576 576 576 576 210 576", " 576 1108 1514 576 576 860 1311 576 1961 576 1447", " 1889 458 576 362 576 576 576 677 522 576 576 691", " 576 87 693 723 1619 717 576 576 109 1241 576 358", " 576 576 1626 576 68 970 1428 1117 576 576 576", " 998 576 1906 996 576 1627 576 964 576 175 576", " 1288 576 576 576 720 1793 1376 1700 1666 425 1405", " 1667 60 576 1914 996 1995 980 1823 576 198 1790", " 655 1999 576 1412 576 576 576 32 576 576 1271", " 1177 576 576 576 576 576 1150 576 1698 576 5 576", " 576 576 547 869 912 736 139 984 576 576 1729 576", " 784 261 1586 129 1884 824 576 1824 576 576 576", " 525 576 576 979 576 576 729 1161 1951 576 576", " 576 411 1464 576 576 740 1232 576 344 689 1623", " 2 1858 947 576 744 809 576 576 576 946 576 201", " 1503 576 697 1294 123 576 576 576 576 576 682", " 1750 576 259 576 576 1792 576 576 1375 576 183", " 576 576 871 1242 53 1832 1652 1960 576 921 576", " 576 508 1692 576 576 1768 576 1985 234 576 940", " 576 576 264 53 576 576 1926 1157 1153 755 576", " 277 313 583 576 576 621 576 1321 576 576 576 576", " 1329 60 576 994 1937 576 576 576 1484 576 1066", " 218 576 576 576 576 576 1366 576 767 340 576 334", " 576 579 576 949 576 1052 1825 576 576 471 576", " 1453 1152 1249 576 1935 1416 1236 1889 203 593", " 559 576 576 576 154 576 1108 576 722 563 1889", " 1317 576 149 576 1646 576 576 576 576 576 576", " 1049 576 771 250 576 576 47 576 576 1660 1844", " 146 739 1592 1682 576 24 646 1576 576 576 576", " 48 576 339 576 1917 576 576 1128 576 77 938 569", " 576 1125 576 1428 576 1775 576 576 576 576 1396", " 576 576 1152 576 576 735 670 1571 576 576 576", " 912 576 576 576 576 576 334 576 576 576 576 200", " 576 576 818 1923 576 446 576 680 756 576 1762", " 865 576 576 1617 905 1961 576 1361 117 862 481", " 576 576 576 576 576 944 576 87 1438 239 576 576", " 576 1817 576 878 969 576 608 1425 832 576 576", " 818 56 576 1955 707 576 576 576 576 1087 576 959", " 576 576 576 576 576 576 90 576 576 726 576 629", " 576 1893 576 576 482 576 1610 576 1896 576 402", " 1157 895 576 576 576 576 576 1363 273 576 576", " 180 576 1435 25 263 1626 576 576 483 576 576 681", " 946 576 667 576 576 576 750 772 1300 576 576 52", " 1209 591 576 576 1056 124 576 1398 1331 450 1948", " 576 576 647 576 576 576 1274 576 576 892 576 1889", " 576 998 137 1851 576 576 576 1988 115 576 1966", " 576 576 576 576 66 576 1203 1795 897 576 576 576"};
    vector<string> part4 = {" 576 1485 576 1062 576 576 576 988 1359 1593 1116", " 576 1080 576 576 576 576 1911 576 576 576 576", " 1454 1921 576 576 576 669 602 576 576 576 1320", " 552 576 576 1139 576 576 8 888 1016 576 1659 334", " 576 1125 576 576 576 576 77 576 576 1443 576 1824", " 576 576 576 576 576 155 576 576 34 1024 754 576", " 11 576 1363 576 576 76 1519 1684 647 576 576 443", " 576 576 1310 576 873 576 1737 1449 261 1830 882", " 1519 576 619 1695 1245 576 64 576 1360 576 576", " 576 775 1606 576 576 576 576 576 576 576 648 353", " 576 576 576 406 45 219 1291 576 705 1053 55 576", " 576 1345 576 1357 576 576 1920 576 994 576 1981", " 576 576 576 1940 665 576 1983 576 576 576 576", " 576 1485 576 576 576 200 1756 188 576 356 880", " 88 576 576 576 84 576 1629 576 588 576 576 991", " 576 576 576 576 117 326 576 1686 16 576 215 576", " 2000 576 576 222 576 576 576 639 576 1534 543", " 112 576 576 576 576 576 1292 1633 1228 161 576", " 576 576 578 305 501 576 576 337 1263 1815 1480", " 575 1786 576 1375 576 576 1861 576 511 1467 1598", " 576 576 478 944 316 1049 576 1420 289 576 576", " 1771 885 1836 1913 631 1938 1145 1559 576 576", " 9 589 1962 576 576 864 576 576 576 1545 576 576", " 1058 895 660 576 1014 576 576 576 745 576 576", " 1667 907 462 161 924 576 98 1521 1575 576 1715", " 576 579 576 576 78 1952 576 576 576 576 576 576", " 576 1575 576 576 1968 576"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 781981;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    int numSheep = 2000;
    int maxRuns = 2;
    vector<string> part1 = {"1007 298 196 897 113 577 897 1011 897 33 897 1082", " 260 785 846 897 1170 897 897 1009 475 412 1742", " 897 897 1888 1439 897 897 1926 897 897 1275 694", " 897 897 897 98 897 897 1144 897 1881 859 897 36", " 897 897 1802 897 1141 335 277 928 1862 1818 897", " 897 1661 897 1412 897 897 1500 1367 993 897 897", " 897 897 1930 897 897 897 897 897 897 1016 897", " 897 897 1072 890 618 897 656 1764 317 897 390", " 897 897 900 897 1570 897 897 447 897 897 897 156", " 139 898 897 897 1368 619 897 897 1464 507 1257", " 985 897 897 848 422 897 897 1638 1112 329 1997", " 1857 897 1880 897 1221 897 116 897 1415 1827 897", " 1023 1059 897 897 317 897 1475 897 897 834 897", " 548 286 897 1515 1723 897 897 162 897 987 897", " 897 897 261 1478 897 897 339 897 897 1001 897", " 897 1865 1162 897 1212 897 404 897 897 897 1585", " 897 1169 897 1953 897 897 301 414 897 897 664", " 897 632 897 1653 897 1842 1471 897 897 523 1801", " 1395 897 897 110 503 897 897 195 897 897 897 897", " 1607 897 1244 897 684 1044 897 784 897 897 897", " 897 897 897 897 1607 1151 897 511 1405 1465 897", " 1501 670 1280 462 571 897 279 1824 1594 897 67", " 897 897 1445 539 709 897 1562 897 51 897 897 897", " 815 897 1755 1207 897 897 897 184 897 1767 897", " 897 897 897 897 1822 1256 897 632 897 1526 664", " 897 897 897 897 897 897 1287 897 50 897 1619 1887", " 673 897 1912 897 1441 261 897 897 897 830 897", " 897 636 897 897 925 1221 897 962 342 897 897 897", " 897 852 745 571 897 902 897 897 897 1208 897 897", " 897 897 897 985 371 74 98 897 897 628 1344 897", " 897 897 1247 897 252 897 575 897 897 1832 897", " 897 517 281 897 897 897 597 214 897 897 463 1718", " 897 261 1284 1360 897 467 897 652 1838 1899 897", " 283 897 1560 897 897 897 309 923 897 897 1772", " 1634 1180 1150 1186 1497 897 803 897 66 1172 897", " 897 806 897 897 594 173 1971 897 897 598 897 913", " 1677 295 897 897 897 999 1062 1324 897 1101 1388", " 897 616 897 1144 897 897 897 897 897 897 549 1556", " 897 897 197 897 1476 897 1796 1109 1346 439 897", " 63 846 897 897 897 31 1105 897 1069 791 1277 897", " 1231 897 897 349 897 897 686 191 355 897 897 1233", " 897 897 630 897 897 897 1975 897 897 7 897 1335", " 897 904 897 897 1764 1794 897 1649 1714 890 897", " 897 897 366 897 1764 897 1786 897 897 897 897", " 897 129 897 1230 689 897 897 1747 897 1840 381", " 1968 897 897 895 897 897 897 897 998 1384 897", " 897 897 647 1415 442 29 1016 1006 897 1648 1290", " 1558 897 897 359 1043 897 897 1438 1501 897 1608", " 1966 1606 897 897 897 897 897 1583 897 897 1636", " 897 897 897 505 249 897 897 897 897 1906 897 897"};
    vector<string> part2 = {" 1054 897 897 897 1784 647 1525 1280 897 1637 793", " 897 897 1213 280 591 897 786 328 897 1251 897", " 1224 897 1761 1173 897 897 101 501 897 1662 261", " 992 1404 1454 559 1718 1376 897 316 897 688 300", " 897 897 828 1669 1134 897 897 897 1185 897 1911", " 485 1263 984 1631 439 311 1651 897 1223 522 897", " 897 596 1015 897 897 897 1591 897 1635 897 897", " 630 897 897 1830 897 897 455 897 487 1271 897", " 897 897 404 800 651 689 625 1030 1665 1805 897", " 126 1544 897 605 897 1164 897 1115 179 897 1953", " 1160 897 897 489 897 897 897 897 1964 897 897", " 1182 897 122 462 409 897 767 897 1907 897 1558", " 1243 1528 66 1120 897 742 312 1270 897 897 897", " 897 897 897 897 110 897 897 897 897 897 897 11", " 897 897 897 897 897 897 1490 897 1399 897 897", " 1776 847 897 897 770 1468 215 897 1370 1198 897", " 897 1910 897 897 897 1843 897 897 897 897 534", " 897 897 897 897 1657 36 897 1750 897 660 897 897", " 897 993 607 897 897 159 1033 897 897 765 1740", " 897 1808 1857 897 1538 1158 897 897 1372 1383", " 1924 897 40 1467 1410 897 1946 1759 1412 1930", " 885 1790 897 515 1375 347 897 897 672 1050 356", " 897 897 212 675 249 897 897 897 897 185 948 1886", " 412 12 1620 897 1060 897 897 659 1180 897 687", " 503 961 1841 897 897 897 897 671 300 1057 1153", " 897 985 147 897 1119 897 982 418 897 897 897 897", " 1668 897 1368 1066 897 980 897 985 897 502 1675", " 675 897 897 897 897 1344 1345 897 732 1166 588", " 897 1711 1416 1945 1187 897 897 897 897 370 1404", " 117 897 464 897 764 897 1517 897 897 1351 220", " 1923 1720 539 897 1780 897 897 897 897 897 897", " 897 1790 897 453 1833 1106 1181 897 380 897 606", " 644 897 437 897 897 1159 175 897 897 1454 1138", " 1989 897 1682 1305 897 897 1375 1734 1094 467", " 897 1323 897 339 1565 15 45 897 897 897 897 411", " 941 897 246 897 897 897 897 315 897 1783 1369", " 897 897 763 630 897 897 1273 1466 897 897 897", " 1723 897 410 882 897 1039 376 897 1434 897 897", " 1926 1176 1583 1391 897 897 897 897 897 1120 1051", " 1952 897 897 897 897 897 897 839 397 897 897 1488", " 1561 897 897 897 1524 897 897 1376 897 1102 1811", " 897 897 897 1302 592 897 271 897 1160 897 674", " 702 84 393 897 1059 1930 897 726 897 897 276 897", " 897 897 1342 897 265 1539 897 1151 1737 897 897", " 897 897 897 897 897 897 516 897 897 1536 897 897", " 1660 697 582 897 897 897 1996 897 897 1384 1090", " 897 897 897 954 1443 897 199 897 1126 897 897", " 897 897 897 1043 897 1492 1452 897 1863 1723 146", " 897 1106 1865 897 897 1477 1595 897 664 897 317", " 28 21 565 897 878 897 448 610 1941 194 897 897"};
    vector<string> part3 = {" 1750 1020 99 897 1067 897 1447 897 1406 897 897", " 897 897 1097 1958 1419 897 897 395 897 217 897", " 83 1322 897 897 613 897 897 896 1179 897 897 897", " 897 897 62 897 897 897 182 897 466 897 537 1417", " 196 897 897 897 693 24 496 897 897 131 139 897", " 176 647 897 897 480 996 1662 836 897 1683 897", " 897 1359 897 1990 897 832 897 922 221 897 1805", " 897 806 1238 897 1689 897 897 897 1832 897 897", " 897 897 897 897 897 897 897 864 1696 897 897 1060", " 600 897 897 1972 897 1650 897 897 811 897 1802", " 131 897 1820 1853 897 897 1021 832 776 897 1182", " 1604 897 227 897 897 362 214 897 948 897 1546", " 897 897 897 1152 72 1760 897 1183 897 713 1962", " 897 490 291 897 1011 897 897 897 897 897 646 863", " 676 897 495 791 1708 897 897 897 897 1792 826", " 897 416 1873 897 750 686 897 578 855 897 897 17", " 1897 1146 897 1624 897 897 897 897 615 1218 919", " 897 379 984 80 897 897 897 944 897 897 897 1097", " 897 897 897 897 934 897 600 897 897 897 897 635", " 897 1213 897 1326 897 454 1551 897 897 87 547", " 1032 999 897 1184 1322 897 897 1142 897 897 10", " 96 897 897 542 564 897 1284 897 484 1908 1010", " 897 1790 897 897 242 897 897 897 1391 897 897", " 897 456 897 111 897 565 1274 1168 1585 1420 1887", " 897 897 700 897 897 897 1977 1502 123 897 513", " 1617 229 219 897 897 227 897 897 1192 1977 1921", " 897 897 1673 410 362 783 897 819 897 897 897 897", " 22 1819 897 897 897 897 897 897 897 288 1940 1954", " 897 362 668 897 129 897 216 1816 1510 897 897", " 177 897 897 1197 45 897 493 897 341 897 897 897", " 72 1132 1383 422 897 1708 393 897 897 897 218", " 897 858 576 1792 1990 897 1940 1061 1623 897 897", " 107 1351 897 897 897 897 897 473 897 897 897 1565", " 897 897 154 897 897 897 897 1234 337 1766 897", " 752 1686 1315 897 897 1471 1638 897 897 287 1785", " 897 1710 897 897 1746 897 897 968 1726 1700 1593", " 1625 1940 897 897 530 897 897 885 897 876 1540", " 897 880 1397 334 897 897 897 1899 897 897 897", " 897 1823 1615 897 1763 897 972 441 897 806 897", " 1517 240 897 897 453 897 897 735 897 940 1490", " 897 117 420 897 1982 897 897 897 897 1683 897", " 897 897 1669 1618 418 897 897 897 1425 1993 631", " 897 1372 897 897 897 897 1681 897 1292 1385 943", " 1141 897 897 1860 39 1932 897 897 882 1105 1871", " 1656 78 897 897 897 1774 687 1655 1217 601 897", " 897 897 897 897 1699 897 897 897 715 1822 1263", " 897 1418 1540 897 897 897 897 897 1056 751 424", " 462 897 897 1075 155 541 1479 897 572 1496 897", " 949 1329 897 897 1571 897 897 897 308 897 189", " 897 897 563 897 897 897 552 897 897 282 774 897"};
    vector<string> part4 = {" 897 897 1207 897 897 897 897 905 897 982 897 897", " 897 287 897 763 897 653 897 897 187 897 1453 897", " 22 506 897 104 1192 171 1991 825 897 897 897 595", " 897 897 1344 1312 1411 897 897 1619 1606 897 1628", " 208 897 897 390 1532 1531 699 590 1097 1497 897", " 1684 897 624 306 1556 1441 897 1153 897 897 884", " 897 897 897 297 897 1215 897 1803 897 897 897", " 245 1729 897 1793 594 897 923 1601 1523 1500 897", " 897 897 556 633 612 661 897 897 897 897 897 968", " 1155 951 1090 897 897 897 1061 1718 897 897 897", " 1828 897 897 897 897 897 1071 897 1648 897 588", " 897 897 897 1404 897 897 897 897 1632 1404 110", " 897 558 141 1042 1215 1553 897 676 474 1691 1407", " 904 1582 897 145 626 897 897 897 897 521 897 460", " 1643 897 897 247 897 897 18 1847 897 1329 897", " 897 1247 897 897 897 897 659 1540 897 897 288", " 1478 1599 897 897 1254 897 1983 897 897 1126 897", " 897 897 897 628 897 1032 1728 897 897 888 897", " 897 897 897 1315 897 1712 897 897 874 1935 341", " 1047 1476 1995 897 466 897 903 1687 1499 897 897", " 897 897 897 1926 141 1997 897 1065 999 559 897", " 897 897 1818 897 1801 1641 897 897 909 421 624", " 997 955 897 382 897 897 897 995 897 1303 568 897", " 897 1918 897 1292 897 1511 897 897 720 897 1486", " 897 897 338 571 1621 402 897 1110 897 897 897", " 897 1184 1560 1623 897 897 1739 897 897 897 897", " 361 311 897 897 897 897 897 1627 819 897 157 1817", " 547 897 897 897 897 952 897 897 897 897 110"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 957420;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    int numSheep = 2000;
    int maxRuns = 2;
    vector<string> part1 = {"57 1057 1057 1925 1057 1057 1371 1101 756 109 160", " 1057 461 1264 602 1479 1057 27 1057 1057 1057", " 1096 1057 858 1057 1057 1057 1057 1057 1057 372", " 167 395 1729 1057 1057 1057 1531 961 1057 311", " 372 625 1865 1057 1057 1057 1057 1067 347 1057", " 590 1057 1570 988 477 421 1057 1057 843 1057 1057", " 594 1057 1114 1057 1057 1057 1719 1057 1057 1057", " 1759 1057 1702 13 1057 331 1057 1057 583 1987", " 390 1057 1057 1057 552 1057 278 1572 266 113 1344", " 1057 1051 1011 288 1057 1057 104 1057 1657 1818", " 1057 287 1057 1057 1057 1057 1057 1057 1057 1519", " 1793 560 1999 1057 670 1057 1057 1057 33 1057", " 1057 1057 1057 1057 1057 1057 1057 1057 319 1306", " 1795 1057 1057 1057 1057 972 292 1057 1057 980", " 382 1057 1057 1057 1057 1036 1057 1057 1057 1057", " 1057 1070 1057 662 1057 1057 293 1057 1057 169", " 1021 756 1518 132 91 1429 470 1057 1057 1057 24", " 1057 21 1992 1053 1057 1057 1288 1390 1057 1057", " 1057 1057 1057 1937 1057 1057 1057 1057 156 1057", " 572 1057 1057 713 1363 1057 264 1057 1543 1634", " 1057 1014 1057 1057 990 525 1340 1057 1057 1886", " 1057 1057 1057 1057 142 746 1057 288 1057 1057", " 164 1057 1660 697 1384 1057 1057 1057 68 1533", " 1057 1057 183 1057 502 1057 150 1680 389 1057", " 1057 1057 1634 1524 236 13 1259 1314 959 1746", " 1057 441 1057 727 1057 716 1070 433 1057 225 1057", " 1057 1057 1057 165 1057 1057 527 1057 1057 143", " 1837 1057 1848 1032 317 744 812 1057 1057 1707", " 1057 1057 1057 1972 1057 1739 1057 1057 1057 1018", " 247 665 1809 547 1057 1057 1382 1152 1057 1515", " 1058 1102 294 1057 125 714 188 1057 1984 1057", " 1471 1777 1057 728 1057 1057 1057 1242 69 674", " 1614 605 190 1057 1446 1057 1057 278 1057 1057", " 620 1140 440 1057 1753 1575 1057 1057 1057 1057", " 1057 1057 1326 1073 1011 1057 1328 1508 1057 1057", " 1057 1766 488 83 1911 1057 781 123 1217 1217 363", " 1014 786 1057 1057 812 354 1458 1057 1057 1152", " 149 347 629 1057 1057 1057 1057 1958 155 1957", " 637 1057 1057 1057 1057 740 1057 1057 1057 1057", " 1600 993 991 773 1484 1057 1057 1613 987 1698", " 623 1057 1002 1057 763 1057 1057 235 1518 18 1057", " 1057 916 1461 1057 1057 445 1057 1057 1576 1057", " 1057 83 1833 1057 1057 1057 1057 1057 1465 1057", " 1057 797 1057 827 268 499 1008 1057 1057 1057", " 1057 1956 685 1057 119 604 1242 863 354 1057 1225", " 445 1057 1057 1057 1386 1057 1532 1151 1000 1640", " 447 565 897 1726 1057 1057 1982 1057 1060 1057", " 1622 1057 1256 1057 1057 1296 1850 1057 1072 1564", " 688 1057 246 1207 1057 1392 1057 986 861 722 733", " 77 1057 1726 898 396 694 1057 1057 1057 1057 1114"};
    vector<string> part2 = {" 1057 1980 807 1057 1057 1057 1057 834 1155 1057", " 1495 1057 861 445 320 1057 1057 1057 1057 1057", " 1057 1682 699 1610 1057 5 231 1046 1057 1057 1057", " 1057 1922 1057 1057 1057 1057 1465 1268 1057 520", " 562 587 1057 1057 875 1057 1400 901 1057 1057", " 574 1216 186 1057 1057 1057 1972 1858 1057 777", " 1002 1252 227 675 1321 1057 1328 150 1057 1057", " 1057 245 1057 1057 17 229 1057 1524 1992 1057", " 165 1057 1057 1057 1513 258 1222 1057 1057 276", " 640 1057 1057 1476 1057 803 1057 1734 577 973", " 1256 1057 1057 563 1057 1258 1907 1057 1057 1057", " 1561 377 1057 324 1057 1057 1057 519 312 1057", " 646 403 1057 1617 1057 1057 1057 1057 1426 1717", " 1057 1057 1057 1057 671 1057 1856 1057 1493 1656", " 897 1057 1057 1057 6 1142 1057 1057 1057 1057", " 255 69 1674 1057 1057 1104 1667 221 1057 1990", " 759 1369 1610 1057 1057 1057 1057 1057 918 1470", " 260 1057 1057 743 1057 1463 1057 1508 1057 1488", " 1057 1057 204 1057 945 431 140 1057 1057 926 1372", " 65 797 884 1057 1594 1057 1057 1139 1057 1057", " 1057 1057 1057 997 1057 95 1169 1117 1057 1057", " 1057 483 844 1057 402 1133 1725 798 1057 1476", " 742 1416 1057 1057 1517 1057 1057 1272 1057 1057", " 1609 1867 1057 1637 1672 136 1096 1944 612 1780", " 712 1057 537 1598 1057 1057 638 935 1356 1057", " 339 1057 1057 1057 1057 267 739 1057 1057 1515", " 1057 889 1615 1057 1057 1057 1238 1057 1057 798", " 867 1673 527 1057 1057 675 397 404 248 1057 1057", " 1057 1694 1656 1057 1057 173 1057 559 313 1057", " 1057 1134 641 771 1224 1302 1174 734 1057 1550", " 1057 1057 1057 1913 1430 1057 1057 1057 319 1955", " 1057 1160 1057 1057 1879 1672 1057 1057 1057 135", " 488 350 1057 1057 1057 1057 1095 1057 1057 1057", " 1057 522 1057 1057 1057 544 1057 549 1057 794", " 1485 856 1967 1829 1057 1817 1057 590 1941 1057", " 1057 1057 1057 1739 1057 1506 394 1057 1057 1057", " 1544 1707 744 1801 1411 721 1939 1057 1057 1057", " 1057 190 1349 1057 1057 1458 86 1057 1057 1057", " 1111 159 1057 1057 1865 1057 1057 1244 454 1057", " 91 1057 1057 1057 1057 1057 1057 1714 730 1057", " 406 416 630 919 752 722 1057 1916 1057 816 1057", " 1057 785 783 1336 1057 1057 1981 1057 1057 1133", " 1228 1824 1057 656 1057 1057 81 1057 1057 266", " 1045 353 1057 1057 879 779 1001 315 1057 1057", " 1033 174 1797 1057 1057 1057 1057 1819 1224 1429", " 1057 1026 297 1443 1057 756 1057 1057 164 1057", " 1057 1057 1057 1057 1057 1057 241 1057 1057 1057", " 962 1057 32 1057 1057 1448 1057 1057 1539 1057", " 1297 656 1057 1057 1057 1591 1057 1372 1057 1754", " 1057 967 1340 1057 1057 1057 1057 197 1057 1057"};
    vector<string> part3 = {" 1328 875 521 1057 1057 1297 1571 1057 1001 1057", " 1946 1057 1057 1852 931 1057 1057 858 328 500", " 1863 1057 673 1469 1057 1057 1057 1057 1057 52", " 1026 460 1057 1037 969 1057 1057 1057 1929 1645", " 345 1057 877 1057 1057 1557 1345 1070 1057 57", " 1057 1057 1648 1057 1057 293 181 1057 1848 1057", " 252 1057 740 943 1057 1057 1057 1231 1057 1057", " 961 1057 212 915 435 1523 1830 1057 1057 1236", " 683 1217 1533 1057 1057 975 1057 1057 631 1623", " 899 1057 783 80 1177 1057 1057 1751 729 1057 280", " 147 405 1057 1057 1057 1057 1057 1057 1341 1057", " 1057 738 1057 1057 1877 1057 700 1057 9 1057 157", " 110 1057 1057 1057 1057 1798 1877 1057 1057 1396", " 1076 597 1635 1057 1576 1057 1057 1057 818 1057", " 1852 1398 1057 1057 417 1057 1057 1057 1057 1057", " 1431 1057 1057 1394 1057 1489 461 1057 1875 1057", " 544 1057 1057 1057 676 767 1057 621 1057 210 65", " 924 1057 1057 1817 297 1057 946 1057 1057 1057", " 1057 634 794 1057 1959 1057 892 1057 1057 142", " 1082 1057 1057 1828 1057 1617 1057 259 1057 1057", " 829 1057 958 1823 1463 1057 1057 1057 1057 348", " 1076 872 953 1057 1057 1057 1698 1756 1057 1057", " 1977 1057 1057 1285 1057 183 382 1057 152 1057", " 7 270 649 346 1057 1057 1057 207 1057 1601 948", " 1057 1057 1057 1057 1057 1210 1057 1578 1057 967", " 1057 1057 878 878 1057 1057 1057 739 1057 980", " 1019 1057 1928 1057 362 1057 1057 1057 1057 846", " 1154 1057 48 57 38 1057 1057 1057 151 1057 1057", " 1057 1845 1057 1057 1057 1057 484 1057 1057 1057", " 1656 1094 290 522 1238 1057 691 1057 1291 1740", " 1057 1057 1846 1057 543 1057 1727 1780 812 747", " 1057 1057 1057 1057 512 1057 258 1057 1689 1057", " 1057 1057 1042 1057 1539 1649 143 1057 1076 1057", " 1057 1057 1169 1057 1376 743 221 1908 1057 1057", " 487 1057 1057 1057 1038 1057 422 1972 1057 478", " 1398 1057 1325 1057 1057 56 1057 1057 1412 176", " 1057 7 1057 1143 1736 1057 539 1057 1002 1057", " 1445 1057 849 69 1057 1057 676 1001 1057 631 1057", " 834 1057 1057 1057 259 1057 538 439 365 1606 1279", " 1057 1057 756 1057 595 1057 1057 716 1057 838", " 1057 1057 1500 1057 1057 1057 1057 1057 275 1057", " 1057 1313 1832 1057 165 1057 1605 1057 1057 1057", " 862 702 1057 304 1682 1057 1755 588 1057 1057", " 1057 1057 75 226 1057 1886 1057 1057 1057 1654", " 320 1975 1057 231 1095 1057 1057 1057 1057 1057", " 1057 1619 1034 1057 1057 103 1057 1057 260 1057", " 1057 1057 1057 1057 1057 1057 1057 1057 1057 901", " 1257 1249 61 1057 573 974 271 1057 1659 1057 304", " 1772 1381 1057 1057 1057 1057 1057 702 1057 115", " 647 1267 290 608 1451 1057 1040 880 1057 709 541"};
    vector<string> part4 = {" 1057 1702 1242 1057 1057 744 1057 1282 1057 1057", " 641 1194 1057 1057 1057 1057 823 1057 46 1057", " 205 1650 1760 1057 104 1057 777 1057 1487 756", " 1057 1174 1326 1057 413 229 1057 769 65 1057 1057", " 1281 1057 1057 1057 224 313 1683 81 1828 229 1430", " 1816 1057 1057 1008 1446 1156 864 1057 1057 780", " 1057 1271 1057 66 1172 1057 1057 775 244 1183", " 1057 1057 1057 1872 1057 1057 1038 1057 1848 1057", " 1057 878 1057 1232 1057 463 1057 1057 1057 1326", " 267 1057 1356 954 1057 1057 1057 1057 351 861", " 1057 511 1357 187 1897 1057 1057 1057 1057 1286", " 1057 119 1677 1057 1931 888 27 1057 1057 1422", " 587 937 1057 451 1164 1057 1057 1057 1910 1057", " 1057 254 1384 1057 1057 1022 163 1057 1048 1473", " 1057 1057 347 1305 1057 1057 429 1057 1057 94", " 64 1057 1000 1057 1057 1980 876 610 1942 1463", " 1315 1057 1967 714 970 1472 1092 1057 1057 1057", " 262 1057 943 1057 1615 1057 415 1057 1057 1057", " 1057 1057 1057 1146 1057 1057 612 1057 1319 1960", " 1057 274 1057 1614 1057 1310 1057 1057 1057 729", " 1130 290 97 796 221 485 565 128 1057 1696 414", " 1057 478 319 1057 1057 1057 1057 1057 1057 1057", " 1713 1057 1057 1057 385 340 1057 295 1350 169", " 1236 1057 1057 80 1057 1057 1057 1057 1426 1057", " 1986 1057 1057 1358 1261 1258 1057 1057 1057 239", " 1057 1057 1057 1057 1153 1202 1398 734 1057 1057", " 982 785 1057 1057 1022 1057 1057 1057 1264 1057", " 1057 488 463 660 832 1057 1057 1717 1863 1901", " 1057 1112 1057 1528 1057 712 1057 1057 1503 1628", " 1734 1057 1057 868 1005 183 1301 505 1377 1057", " 1057 1487 1057 483 1057 863 1057 1057 118 1057", " 1750 1057 1057 1057 554 1363 1057 1998 1057 1057", " 1057 1978 844 1057 1057 890 1057 1224 1057 1057", " 1057 1147 527 1057 1057 241 1057 1057 1057 254", " 1388 726 272 233 1057 1057 1888 1347 239 1057", " 1057 1057 1057 1057 1057 1057 1057 1057 1642 1057", " 1057 1057 497 1413 1051 689 923 1057 72 1057 1057", " 1057 1057 1926 966 1057 1057 278 1057 1057 1057", " 1182 1057 56 1057 1057 1057 1057 1057 1057 1057", " 1057 1057 1057 1015 1057 1057 1057 1759 1057 173", " 1057 1057 1057 1057 200 1057 408 811 1057 1922", " 1057 1057 1072 1057 1057 376 1057 1057 840 1057", " 1057 1828 1796 1134 1057 529 1057 1712 1098 1057", " 1305 1057 760 1865 605 748 438 1057 1057 1057", " 1134 1057 1057 1374 1057 1278 528 1057 1057 1449", " 1710 1523 1678 1057 1057 1482 978 1057 1057 1057", " 1913 1190 1057 1057 1057 1057 1501 1643 303 1057", " 201 1057 1252"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1009763;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    int numSheep = 2000;
    int maxRuns = 2;
    vector<string> part1 = {"176 1157 1281 1613 532 1157 1157 1676 466 218 297", " 814 1908 70 1157 1157 1157 226 1157 1033 1157", " 1157 1157 1157 1132 1157 131 1157 1157 156 466", " 1157 1157 1157 1157 1157 861 944 1157 1157 1157", " 1157 1157 1157 1157 1157 39 98 144 1157 1157 1157", " 1157 1157 1157 1157 1157 1157 1157 1157 1157 772", " 1134 1157 1899 1054 1157 105 1157 1157 1148 1157", " 1157 721 606 1905 1157 1157 1399 1157 1157 204", " 1072 320 1157 1103 1157 1157 1994 1157 1157 1157", " 1829 1388 742 1157 1606 1157 642 1985 215 1157", " 1157 1157 1157 1157 1025 164 1157 916 895 1492", " 826 708 1157 1306 1267 48 678 1157 1524 808 915", " 1157 239 1157 1957 798 170 1157 1255 1976 328", " 1157 349 202 1157 1429 278 1157 1157 269 1157", " 1692 1975 1157 191 1157 560 1157 1157 183 149", " 1157 1157 1006 1157 803 1157 1157 1157 1157 1443", " 1677 1157 1157 290 1157 1892 1157 1157 1801 1157", " 31 1157 1157 1157 1157 991 1157 973 1157 1157", " 1157 620 850 1157 1157 107 871 909 1157 45 1157", " 1365 1833 1157 1157 1157 1314 1594 1392 1615 1157", " 512 1601 304 906 1157 1526 1157 1157 567 1157", " 50 1157 332 546 589 1157 120 1157 213 1157 1157", " 1157 1157 1157 1157 1157 1157 982 1157 1294 1157", " 747 724 1973 1157 781 418 1157 307 1157 1157 1157", " 1157 1157 1157 1157 736 1157 1157 1157 1157 26", " 1157 1112 1157 1157 1145 1383 1157 623 748 1157", " 717 9 206 758 640 1195 1157 547 1157 1157 1495", " 1157 1157 1157 136 43 1157 1157 1084 1157 1805", " 1157 819 273 1157 1157 1111 1157 1659 1157 1157", " 1264 1157 301 1157 1157 617 1157 537 1712 1157", " 1157 228 1157 370 1157 1301 1157 524 1157 1584", " 1157 1157 1157 769 1157 1469 1157 1157 1157 1621", " 308 1157 1157 1041 1406 1157 931 1157 1105 1317", " 775 1918 1706 1157 1812 1157 1157 1333 607 1586", " 1844 1157 1157 1157 1157 292 1157 1157 1157 1157", " 1157 1157 1157 1595 1157 1157 302 1157 2 646 1157", " 1157 769 1756 1157 1157 1157 1853 1157 1722 264", " 1157 1157 1379 1101 1157 1157 740 1157 1157 1157", " 1157 766 1470 1157 1975 836 1157 1720 1618 1294", " 1157 1073 1000 466 1157 743 1336 1157 414 1157", " 1157 575 1157 1157 1157 1157 1157 1157 1157 1157", " 635 1661 1157 1157 1157 925 223 1788 1157 1157", " 1157 1937 1157 1157 1157 1157 501 703 1767 268", " 1157 116 1157 1157 1888 690 1486 1157 1157 1260", " 109 1157 505 536 1157 1157 467 1157 1157 901 1157", " 1157 1065 1157 1188 1614 434 1157 1157 905 124", " 1157 1157 1157 1157 1157 1828 1157 1157 162 1884", " 1436 228 1157 1157 1157 1304 1157 574 830 1157", " 1157 1157 1157 1157 262 1157 180 1008 1157 1157", " 1353 1936 1157 1226 993 194 1157 738 154 868 1157"};
    vector<string> part2 = {" 1157 1157 1157 1157 880 1157 1157 1157 1157 1437", " 1157 1157 1157 1157 1171 1157 715 1759 1304 1157", " 429 1157 574 1872 1157 380 1762 1138 1369 1403", " 1345 36 1157 1321 1157 1157 1157 1157 75 1624", " 1157 1637 170 1241 1157 1157 132 1157 1157 613", " 1157 1157 1157 1157 305 1157 1510 113 1157 482", " 1157 712 1157 1157 1744 1929 1157 1157 1181 181", " 1157 1157 1911 1157 61 933 1157 1764 1157 1199", " 180 1595 579 782 716 1157 1157 1837 523 416 1157", " 279 988 800 1157 1018 494 1157 792 1664 1157 1157", " 1676 803 1157 1510 1157 840 1347 774 1157 1157", " 331 1157 1810 1767 9 1157 1977 1126 1692 1157", " 1157 1947 1157 1137 1157 1157 36 450 1157 1157", " 1157 1157 939 1157 532 1941 1157 1157 171 864", " 1625 607 1367 1157 408 1157 1157 1553 1157 446", " 18 965 1771 1157 79 1157 1157 1157 1157 1157 1544", " 1866 569 143 1039 306 1755 1798 535 1157 1157", " 1746 469 1530 1157 1157 1838 599 1157 1157 1878", " 1157 455 1157 1127 1902 940 1157 1157 1157 1528", " 1157 1157 1024 722 1797 1157 94 1157 1157 845", " 1157 1777 615 1836 579 16 285 1092 1729 1157 1967", " 361 1259 1157 15 523 1157 1157 1969 1750 1157", " 1157 1568 40 1157 725 1157 921 1157 995 1157 261", " 1157 1157 1157 1157 75 1157 1157 1157 1686 941", " 604 1157 1535 1921 1157 637 1157 1171 11 1157", " 404 1679 1559 306 1157 933 1157 1589 1846 1157", " 1547 849 1078 1186 1941 410 1157 1591 1157 1573", " 1157 1157 1157 693 1157 1157 1917 802 1157 617", " 1157 805 1157 1086 1157 493 1157 1157 509 1157", " 442 1157 1157 1157 1157 1341 438 1185 1425 363", " 1157 99 1157 1157 1499 974 1157 1157 1157 1840", " 1157 1157 781 414 1157 1157 1870 338 527 1504", " 1809 250 1419 778 1224 149 1157 1157 1790 1139", " 1450 295 1157 1157 1157 1157 1157 1157 1157 1157", " 1157 1157 1157 1100 458 1157 1157 1157 1931 1638", " 1917 1157 1157 1157 1576 1157 1157 786 815 638", " 1157 1157 1157 1157 259 166 646 1157 1157 1157", " 641 856 1157 506 1157 768 1157 974 1157 1505 1157", " 1157 767 1157 60 1816 1157 1992 1157 1157 1157", " 1157 1157 418 1265 1205 1157 1157 996 1157 1157", " 660 1157 507 1157 1699 1301 1157 1435 292 1157", " 374 1157 952 1157 1157 1729 1242 67 164 1157 1157", " 1157 1157 1537 1157 453 1157 1157 1157 1033 381", " 1157 1157 1345 1157 508 1574 1692 1157 1313 1068", " 121 998 1157 1051 1157 1157 1749 18 173 1345 1157", " 1157 1157 1230 1341 1157 1157 1157 1817 985 1209", " 1157 1157 1157 1157 1157 1157 1157 1157 1157 1157", " 1157 1157 1157 1157 1157 664 559 702 1157 1157", " 1157 1357 1198 1157 1157 1728 1157 1157 1397 1642", " 304 1157 1157 990 1893 1157 1157 1619 908 1183"};
    vector<string> part3 = {" 1157 1157 1157 951 1157 1382 1097 1157 1058 1157", " 1947 497 1157 1157 728 1157 1157 1157 1405 362", " 1157 880 334 1287 947 7 972 226 82 1214 1157 1157", " 1157 1157 1646 1157 1157 1157 1157 1699 1157 1603", " 1157 715 270 1157 1157 160 897 1157 1296 1093", " 1157 1157 1157 1157 1417 1056 1157 1157 1157 1285", " 1602 1157 1157 592 1157 1157 1157 1291 1157 1535", " 953 1979 1157 1727 1157 1157 1157 1105 1981 1157", " 1657 1157 668 995 182 902 1076 1157 1157 1904", " 1157 1674 1157 1157 1157 1157 312 841 276 1780", " 84 1332 1489 648 1157 1157 1230 1157 1157 1619", " 1157 1157 1389 1860 1157 582 33 406 1157 1157", " 1157 967 1074 514 762 1151 1595 1157 1157 485", " 1157 985 1157 686 894 1157 1157 334 350 370 1896", " 1157 1157 1157 1157 500 1157 1469 644 1157 1157", " 652 1157 1157 1157 1157 1157 1627 557 1422 1157", " 1157 1831 175 1157 1157 1599 1157 1157 1157 1409", " 96 1023 1157 224 1157 334 1157 764 1591 1767 1039", " 1193 1157 447 1526 1157 1393 1157 876 1286 1157", " 1080 1972 1139 1337 1157 428 1157 1157 1100 1219", " 177 1157 1626 713 1157 768 1461 1157 1157 1950", " 1157 1157 639 1157 1157 1017 1157 1418 164 1157", " 269 1157 1789 1157 1187 1157 1157 1108 1157 1157", " 91 1157 1103 1189 424 1241 1864 1635 1336 1157", " 1499 1157 1951 1157 1157 1475 1463 1157 1157 1157", " 1002 1157 245 1157 755 634 1157 1157 356 823 1871", " 1157 879 1157 875 1157 525 1157 1157 606 1157", " 1779 1572 1157 1157 1630 240 1157 1157 1157 1157", " 1633 527 1359 1157 310 626 1418 1157 1157 1157", " 872 1596 1157 1745 1224 772 1157 576 1157 1463", " 330 1510 1157 1157 1435 1157 1157 1157 1123 1157", " 1157 1157 1070 1157 1157 534 1204 1815 1157 1157", " 133 1157 1157 1157 149 1157 1059 1079 1157 1946", " 1157 1157 564 1157 1157 1157 766 1157 1157 1306", " 1157 1157 1157 1157 615 1157 1709 1157 687 150", " 1842 825 344 1157 1157 1948 1307 219 1845 67 1157", " 1460 1147 1157 1157 1157 1157 1157 1157 1157 1157", " 1757 720 1157 916 1750 1157 1408 1369 1157 1157", " 1157 198 1352 1157 331 1157 941 1157 1157 1157", " 325 1157 627 1157 1157 1755 1157 604 946 1157", " 1814 1157 1166 1157 1191 1157 286 1157 1157 1157", " 1157 427 476 1638 1227 1502 1157 1157 1157 1157", " 1538 1157 228 1157 1157 1549 1157 1157 1157 393", " 1157 1157 168 1157 1077 1157 1157 302 167 1157", " 1157 415 1157 1157 401 1157 1157 1157 931 1157", " 1157 340 1157 1157 1157 1157 645 1243 1157 1157", " 262 1912 1157 422 1157 1157 1157 1309 260 529", " 1157 1157 1157 429 1157 332 1157 1259 1157 1686", " 1768 1157 1459 457 300 509 1875 1157 1157 1157", " 1157 902 1157 1157 1592 1157 1572 1157 619 1948"};
    vector<string> part4 = {" 1157 1157 244 1157 278 1157 933 1112 23 1157 422", " 1157 597 1673 65 1547 454 1157 1157 1157 939 1157", " 375 1157 1157 1127 506 1643 1157 1157 1157 1157", " 1157 1157 1157 1157 6 1157 1157 1157 1463 1157", " 1157 1157 1157 1157 535 944 1176 722 1458 1982", " 962 1157 1067 855 1157 126 1042 694 1157 1157", " 1157 982 1157 1500 1157 1157 1724 97 1157 1157", " 1157 712 1157 1157 1157 1234 1157 1692 1157 1157", " 1362 1157 548 1653 1961 1157 1778 1603 1365 1157", " 381 1157 1157 1157 1157 1157 1795 893 263 1829", " 1157 1157 501 1667 1157 1157 1157 59 1157 82 1157", " 1157 1378 1157 1157 1157 654 977 1117 176 1701", " 1981 1878 1157 1386 397 651 481 1056 1157 846", " 1238 1883 125 903 442 532 1157 293 771 1157 279", " 1157 1157 1157 1853 733 1157 1215 1157 511 1157", " 951 1094 1157 1806 726 1157 1157 1157 1157 1157", " 1588 1126 1157 250 1157 1157 1157 1560 804 367", " 1157 1157 1570 1471 1157 1157 1157 1157 1157 1157", " 267 1157 39 586 1157 384 1157 95 1157 1157 1157", " 535 1448 1157 1108 1157 1648 1157 1157 1205 1157", " 1157 1157 1271 1157 193 1191 1157 1157 1157 1157", " 332 1157 1157 1157 173 1157 1284 1157 920 1157", " 101 1157 1157 632 1157 1385 54 1157 554 1157 1157", " 1819 1157 1157 1198 26 1157 1756 1157 1157 759", " 1157 1157 403 1157 262 776 1157 1157 1157 1332", " 542 1168 1157 1157 732 1157 1721 1109 1157 1157", " 785 1144 26 1157 1484 1157 626 1157 1888 1157", " 1963 238 655 1157 1157 1157 1157 1157 1344 1157", " 104 485 955 1157 1157 1157 1141 1157 270 1157", " 186 1157 1914 1157 985 80 1157 1157 1157 1157", " 1401 1173 331 532 1157 1157 1615 1157 252 132", " 361 1157 1157 1157 184 1157 103 1157 1157 1157", " 1157 1182 1486 1157 1261 1859 1157 1157 1157 1157", " 901 1157 1742 1157 1405 926 1157 1176 313 1318", " 257 1816 988 1227 1157 1345 1157 1157 1675 1995", " 1157 1105 64 398 1157 1063 1643 1157 169 1157", " 965 1157 1502 1209 853 752 416 1157 1649 1534", " 1157 434 1157 1739 1157 1157 1157 1157 1157 21", " 687 1157 1157 1157 1157 1157 1157 1157 109 1157", " 1157 250 1157 1777 1577 1379 1835 1157 1157 1292", " 549 564 1480 1243 858 1157 1774 843 531 1157 486", " 1760 1157 1157 955 420 1137 358 619 507 1157 1157", " 1157 612 1157 439 578 1733 249 89 568 1498 514", " 1653 1157 1157 1157 1413 1157 1157 109 277 1157", " 1157 1157 1571 1157 1157 1157 25 1157 1986 979", " 1157 796 1157 1157 1157 276 1157 1273 1624 1075", " 335 1157 1157 1577 726 1157 1654"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1063249;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    int numSheep = 2000;
    int maxRuns = 2;
    vector<string> part1 = {"500 1337 749 1337 1337 1337 62 1486 359 1569 1044", " 316 1337 1337 1337 1337 1337 1337 1337 1337 1271", " 1639 1337 1337 1337 615 1337 1337 1374 1337 438", " 1337 1906 1328 1337 1337 1337 1337 910 1337 13", " 1337 1337 1337 1373 1481 1337 63 1337 881 1337", " 1337 155 1337 1337 1337 1337 147 1337 1881 1337", " 1337 1337 1337 1337 1651 1590 1337 1337 1968 625", " 1337 1634 1337 1250 1337 1337 1891 1337 1337 1337", " 1337 1337 1337 1337 349 1337 827 1337 1337 1337", " 1357 1902 677 1337 1889 1526 1337 1337 868 382", " 437 1232 1337 1337 410 1337 625 1337 1337 350", " 1337 291 1337 1838 509 1337 1337 1337 1337 1482", " 1889 733 1337 1994 1337 1337 1980 241 1146 18", " 470 1337 1350 76 1757 1337 51 1337 1337 1817 1056", " 1056 1782 1337 1337 889 1337 1337 1337 1337 330", " 251 339 1852 1337 1337 1684 1337 1337 1981 1337", " 492 849 1337 589 1380 1337 597 93 719 1983 768", " 1632 280 1337 1337 743 379 1814 1337 167 473 1254", " 1337 1337 373 1337 1337 845 1599 1245 738 1337", " 1337 220 1198 756 645 380 1993 956 1337 519 1337", " 1337 1337 1792 1337 1337 1337 482 1337 1337 1337", " 1337 1367 1337 1642 1337 1337 1337 62 1713 1337", " 1922 1337 1171 1337 1337 643 1933 1337 1582 1337", " 559 1099 1255 1337 1829 1483 1614 1973 1337 1337", " 1364 1337 1337 1337 1337 1756 1337 1125 114 1337", " 1109 1337 1337 1061 921 1337 1153 1491 1337 1321", " 805 90 81 1337 1337 261 1337 347 1875 1336 1337", " 1967 1827 15 249 1337 160 189 866 1337 1337 1337", " 1337 77 1337 1698 1789 772 1337 882 1337 1657", " 1744 1337 1337 1337 1337 1337 1703 1653 1724 1337", " 1337 1040 1337 1214 1337 725 1283 1337 1056 564", " 1337 1337 259 709 1337 1337 574 1337 388 1337", " 1337 1346 1337 1029 1337 1145 1337 1337 1337 505", " 1245 1689 910 1337 1337 1337 1191 171 1337 1337", " 1330 1337 40 664 1337 1337 144 667 1337 1337 1118", " 1265 907 1352 1451 1337 1069 1337 1995 783 802", " 1337 1337 777 614 1337 1086 1337 1337 300 1337", " 1908 1891 1337 1337 1441 1000 591 1896 1337 1337", " 1337 112 764 990 1337 1337 1337 1337 1496 1337", " 1337 1337 1337 1337 1337 1337 1337 1337 189 1337", " 152 1337 1337 1728 1095 1337 1337 1337 1337 1337", " 1337 1337 1337 1337 1521 1337 750 1337 1337 1337", " 1554 1337 1931 1337 1631 1337 342 1337 1880 1337", " 808 1337 802 1337 924 924 78 424 565 1337 218", " 1966 713 1337 681 166 1337 1337 1337 1816 753", " 1337 503 1337 1337 1225 1337 1337 1337 1337 329", " 1337 1687 280 760 808 1337 1904 1227 1337 1337", " 862 1337 1639 1337 1557 1337 1337 1337 1337 1337", " 328 1337 1214 1 1337 1337 811 1337 291 173 204", " 1337 1268 248 1337 689 1337 17 736 1337 1337 1337"};
    vector<string> part2 = {" 1933 448 1257 641 1337 173 1337 477 1337 1554", " 674 1133 1337 1337 113 666 1337 1337 1337 1540", " 1337 180 165 1337 1083 1337 798 971 621 1337 1337", " 1337 1539 1337 1337 1337 101 1337 1337 1337 1337", " 1337 1337 1337 1337 696 595 1337 1172 1337 1518", " 1337 50 499 1952 1337 1091 1715 1337 1337 1337", " 791 1233 1337 1337 1337 1448 761 1337 722 1337", " 1337 1496 1337 1337 1568 686 1337 1337 1337 1337", " 1337 1337 1337 98 1337 494 1221 1337 1337 1652", " 1834 95 1337 1337 1551 1337 638 1337 1337 1337", " 1337 825 30 1337 1844 1337 1337 1337 1337 1337", " 1337 1337 1337 1337 1337 1337 1337 1337 918 1021", " 1337 1152 900 1337 1337 1337 1337 1337 1337 1337", " 1567 1337 569 1337 1337 1337 184 476 716 1337", " 1337 1337 1337 178 1337 1091 667 731 367 1337", " 1337 1795 1337 1767 1337 217 1337 904 1337 1337", " 1337 1337 1084 1337 1337 429 1544 726 1337 1573", " 1337 1337 1214 1665 1337 1868 1337 1742 995 1985", " 444 1080 930 1337 1510 1337 1337 1337 9 1826 1337", " 934 1003 461 1337 1337 606 1337 1337 1536 1337", " 1747 1872 1337 963 1252 1337 982 656 762 1337", " 1337 1337 841 1337 1337 1337 1337 1337 432 1337", " 217 1337 1136 1337 1337 1337 1337 1558 1337 698", " 1337 1576 1337 1337 1009 576 1609 778 1337 1337", " 1337 1337 1758 281 1594 1337 186 584 881 1727", " 1337 1337 1337 1129 1337 1337 542 1337 1337 1337", " 927 43 1337 1337 1388 1337 1801 836 1851 1337", " 1337 1337 750 1337 504 1337 1909 1925 1601 1337", " 349 1503 1337 1337 1337 406 1360 1337 1337 1337", " 976 1215 1202 985 1777 788 664 1277 78 1337 1337", " 1915 1179 1337 1451 1337 1448 1337 1337 1860 1737", " 1019 1337 1337 1337 1337 1337 669 1164 1337 420", " 83 114 1337 1337 453 1192 1337 1447 1337 1337", " 782 1337 1337 439 1337 411 538 1337 1337 1337", " 1337 1285 1337 1337 205 947 1337 903 232 1470", " 1337 792 1337 1337 1602 1337 1993 815 1938 1337", " 1337 1231 1337 1337 222 366 1337 1337 1337 1056", " 1117 1969 215 1337 142 1337 921 1814 1337 1545", " 1337 1337 1337 1337 755 1658 1337 707 1337 1390", " 1870 1337 1337 673 1337 1337 1337 1337 1337 594", " 1337 524 1337 1810 1337 1337 1337 225 1337 1337", " 1337 239 480 1236 1257 1428 1337 1337 496 1337", " 528 1337 931 1448 1337 414 1337 1337 432 688 1337", " 1337 1337 10 1337 1337 1795 1337 1924 1337 1337", " 1024 927 1481 1337 1830 248 100 123 1337 1337", " 491 186 1720 1667 890 1337 1337 1337 1337 279", " 1337 1153 1559 1664 1337 1337 1415 1337 1337 1089", " 604 521 1337 1337 1337 1337 1222 1337 1322 1337", " 1352 1337 966 70 1337 970 1337 1337 1373 1574", " 1337 29 1337 1017 581 531 1741 1337 1337 1323"};
    vector<string> part3 = {" 1337 1337 1235 1337 1337 1337 1337 1337 275 1337", " 1337 1337 1337 413 1337 1337 1337 1337 1337 1417", " 1337 1333 1337 1352 1663 696 1337 834 1337 498", " 1337 1676 1459 1337 1337 1337 1337 1337 1337 840", " 1337 1337 1579 803 1337 1095 908 368 1948 1900", " 1307 1442 796 841 1343 1337 1337 1337 1337 28", " 1337 1337 311 1337 1501 11 1337 1337 1891 139", " 1176 1337 1337 1112 1337 1337 995 1337 1337 1337", " 1361 1337 1337 188 1220 461 1337 1337 846 615", " 603 1157 1620 38 1337 1337 498 1337 1337 1325", " 1337 13 573 1337 1724 1337 1264 1337 1337 1337", " 662 1123 1781 1604 1337 1727 1337 1352 1337 1337", " 1502 1354 1337 908 803 1647 1337 1337 1337 546", " 1337 1337 1440 1337 1032 6 1337 1507 1337 551", " 104 1337 1337 1337 495 1337 1337 1337 1912 1337", " 806 1890 1523 1337 1205 134 580 1826 723 1337", " 298 1546 1498 1168 1052 534 357 1197 105 1337", " 986 1337 1337 974 1834 1647 1337 1337 1582 1145", " 1337 1337 934 1337 196 843 1612 1337 1598 846", " 443 1337 1337 1337 1337 992 1632 8 1337 1337 1337", " 59 1337 497 1337 1995 1337 1337 1135 1093 162", " 1337 725 1337 276 1337 1519 1627 72 230 1337 16", " 1750 1540 1337 1326 1337 1237 1813 1412 106 879", " 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337", " 113 1337 677 281 1262 1713 1337 950 349 46 893", " 422 1337 1337 1983 1337 1337 16 1225 1337 1337", " 511 1337 1337 315 663 42 1337 1337 1337 1337 1288", " 1337 1337 954 1337 1506 1454 573 1337 1104 864", " 1337 1337 336 167 1337 1337 1337 1337 1337 1337", " 1337 1337 1931 1337 291 1337 1337 669 318 1955", " 1337 1780 1337 1337 1410 1337 1337 474 1392 1337", " 1337 1121 342 1247 818 1580 1337 1337 1337 1390", " 1337 1337 1574 126 737 1337 505 635 1337 1337", " 894 1337 1310 820 559 1320 255 1489 1337 670 1337", " 951 1337 1337 41 1337 1456 1569 1337 1765 1752", " 1337 1337 1518 1337 1337 1839 574 921 208 1337", " 1394 1337 1337 69 1337 29 1337 646 287 1674 1337", " 643 767 486 1337 691 1337 1337 1954 1337 1337", " 1337 1337 1705 1493 1337 765 1337 1377 1825 1337", " 990 1337 1337 1337 339 1547 1337 1649 1440 1891", " 301 624 246 399 1601 1337 329 1089 483 1337 1337", " 1337 824 70 1337 1337 1334 1337 93 1102 1337 1337", " 308 1337 1337 469 1337 1986 1337 1784 1337 1337", " 1337 1337 953 1824 1337 1337 1337 1538 509 1576", " 1230 1337 1337 1337 1843 1337 1624 373 476 1337", " 1337 1337 1337 1310 1337 1400 723 28 624 179 1337", " 1337 777 1337 1337 85 1337 987 1337 632 1337 1337", " 1951 1337 1337 1337 1297 1337 1337 1337 1337 1337", " 669 1337 781 1337 1337 1337 1337 1337 1337 387", " 643 732 1061 733 454 1337 1252 1089 1337 41 193"};
    vector<string> part4 = {" 1337 50 1326 363 1068 1337 733 1337 495 1337 1602", " 1337 1337 528 1337 45 978 1561 1337 1274 1726", " 1337 1337 1337 1337 1337 84 1129 1337 1120 1337", " 1337 1337 1446 807 1337 1337 1966 1337 1337 1337", " 1337 1821 1552 1932 1337 1482 1059 1337 1337 1337", " 1886 1337 1337 785 397 1337 1337 331 1337 1504", " 1337 913 1337 1337 1337 1337 13 1337 1461 1337", " 1232 1337 1337 1134 434 1882 1337 1337 1377 1337", " 1337 504 1353 1300 1303 349 1337 1337 848 828", " 1460 1337 1337 1679 972 154 1337 341 1337 1337", " 1337 1337 606 1471 1337 1337 1144 1337 1337 1337", " 1337 1337 1875 780 1337 341 85 1728 1514 1337", " 647 1678 1337 1337 665 66 1337 1337 610 1337 1051", " 1302 1366 1337 1337 1337 1764 1337 1337 1337 1634", " 1337 262 1403 1337 987 226 410 1337 1337 238 1337", " 1337 620 1337 1337 813 1337 1337 1337 1337 1337", " 1337 1337 1337 1337 1337 1611 1337 1337 1170 1337", " 308 1337 1337 1327 1337 542 1337 645 413 1337", " 549 1337 1090 68 1337 1337 1671 1337 1621 1337", " 1337 1337 1337 1218 1337 1337 247 1164 1337 139", " 1337 1804 1337 1964 163 938 722 1337 1337 1577", " 264 1337 1337 1337 1855 1629 1337 1337 1337 1337", " 1337 1337 1550 1337 523 1337 67 1337 710 1337", " 557 43 1337 1113 1337 676 1337 834 1866 671 438", " 876 1746 1178 1337 1337 651 1337 625 1337 1906", " 987 1337 1834 180 1337 1337 1337 322 1337 1096", " 413 1337 1337 222 1337 317 449 1337 740 1789 1337", " 1337 1337 1337 1337 237 1337 1771 1337 1337 1337", " 106 1337 1337 1337 1094 1337 1337 1337 784 1337", " 223 1772 680 153 1337 1337 1337 1337 1559 764", " 338 1337 895 1529 1337 1337 5 1167 1337 1030 1337", " 1337 1027 1337 561 678 1337 1337 1337 1337 1337", " 1337 164 1286 1337 1337 478 1417 445 432 1337", " 1337 1337 1216 463 1337 1337 388 1337 842 1736", " 1337 1337 695 1337 1337 1337 1337 1754 1337 729", " 1337 1337 817 1132 122 1337 841 115 1337 812 1337", " 1842 1405 1337 510 1337 1337 328 980 1394 110", " 1337 244 1337 159 1337 290 828 1737 86 1337 1017", " 1337 1389 1337 1314 1337 630 1414 1600 1337 1337", " 364 366 1630 1441 1520 1337 1475 1337 1337 1254", " 250 1337 1939 1190 1337 321 529 1385 750 1053", " 394 1337 1337 1249 1337 485 1618 1337 1657 1319", " 1653 1723 1337 1337 1860 1337 1337 1337 1337 1337", " 399 666 537 1124 1337 1337 1337 1337 1180 1337", " 586 885 336 1337 1337 237 1337 536 1337 1337 562", " 1337 1337 1102 1207 1159 16 1337 1766 1337 1337", " 1337 1579 1337 1099 1337"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1155513;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    int numSheep = 2000;
    int maxRuns = 2;
    vector<string> part1 = {"1554 1667 1667 1667 1572 774 1667 150 1724 1667", " 1667 1667 784 1667 1667 721 956 1667 1667 899", " 1693 658 1667 1667 1581 1667 278 1667 239 1132", " 1417 1667 1667 1406 1667 1667 890 143 1667 1667", " 1667 1667 1667 1667 1842 981 1667 325 492 1667", " 1169 180 1667 71 328 1667 1344 1240 1571 1613", " 277 1667 1667 1667 1534 1667 795 1483 5 1718 353", " 1667 1667 1667 165 1667 1925 1667 680 1667 1667", " 824 787 1667 1377 1667 1507 1713 1667 503 1844", " 314 1667 26 1641 1185 323 1667 1667 1667 1667", " 1667 1667 1667 1667 1667 1667 512 1420 1575 1667", " 1667 1667 1667 1834 1667 1667 1667 1671 1667 257", " 1667 1154 891 1667 1829 1667 1667 1667 983 1363", " 319 1667 1667 1667 1667 1667 869 1667 1854 1667", " 1781 1436 1667 1667 176 1667 1381 370 882 305", " 1667 668 1000 1011 948 1667 1667 1832 1667 29", " 1667 1667 1667 1667 1667 1667 1667 1667 95 1667", " 1667 1063 1667 1667 1667 1667 1025 1667 729 89", " 1667 1440 1667 1667 1667 1667 1398 1885 379 194", " 1271 1667 1667 1860 922 1761 171 1667 1011 1667", " 145 1938 1667 381 215 1667 1667 247 736 1667 1667", " 1899 1893 481 1134 1667 1487 1594 826 165 1824", " 1348 1667 1667 658 920 231 1158 130 1667 430 76", " 1667 812 471 1667 1667 1583 1180 915 1667 222", " 1293 913 1667 1261 1667 1231 53 620 121 1667 1667", " 1667 1667 896 921 1667 1667 682 890 1667 776 1696", " 1667 1667 1667 1667 121 390 623 511 1667 1118", " 1667 1667 1667 1667 1667 772 1667 364 1667 1667", " 1622 1667 1667 1667 816 1667 1996 1667 1667 1667", " 9 296 1667 772 1667 1117 1667 1667 532 1667 1439", " 1667 1667 1000 1370 642 1667 526 1755 1667 1667", " 1092 1667 1667 64 1667 1207 1667 14 24 735 1376", " 742 987 1667 1641 704 698 1667 1667 1667 152 328", " 994 1667 1667 1667 757 922 1667 1667 568 1667", " 1667 1667 1293 1184 1667 1667 1667 1667 1667 1667", " 1667 513 1667 223 1667 611 1667 1667 1797 820", " 1314 1667 1667 1667 1667 608 1667 1667 1667 25", " 1912 973 876 1610 581 1667 1107 1667 856 64 1667", " 1667 669 1392 1667 1667 1667 1667 1667 1295 1667", " 1883 1667 737 458 1667 931 626 788 102 1667 149", " 1667 1667 293 1667 1667 1906 152 1667 1667 1667", " 1099 1667 1025 1413 1370 1667 1356 1667 1667 510", " 99 845 682 273 1667 1667 1999 948 1191 465 93", " 1667 630 1107 1667 1495 981 474 1667 1667 1667", " 1991 1667 1388 685 350 504 1667 778 1667 1229", " 1667 1428 1667 1895 236 1422 1667 1667 1667 444", " 1667 1667 1357 1667 1747 1626 1160 1667 1667 812", " 1900 1667 1959 1667 50 354 135 153 1272 1712 708", " 1889 1989 13 1667 1667 1443 545 1667 904 1667", " 804 1756 1747 1667 845 474 1667 1667 1315 1667"};
    vector<string> part2 = {" 1755 1667 1667 1885 541 31 700 1667 1707 988 1822", " 1667 965 539 1283 880 801 1667 1667 553 538 1668", " 162 402 1667 934 1667 951 835 1667 507 876 1137", " 691 1667 1667 1667 9 1749 893 1976 980 1300 1058", " 1667 1667 265 1667 1667 1667 1207 1546 1667 1667", " 1719 59 1667 1667 366 237 1667 1667 1667 1667", " 1667 1667 1988 1910 952 618 1516 1667 695 1139", " 1368 1667 1667 1667 1667 1667 840 1667 382 1667", " 1961 1667 1667 1667 1667 1482 1134 1011 1667 1309", " 1667 1799 1667 1667 1667 112 1839 1060 164 1667", " 1667 1667 1626 1667 1667 1667 1667 1334 1643 1667", " 1667 972 1880 1667 1921 1667 1343 868 1667 1667", " 1566 1667 1667 1667 226 1667 410 1667 1133 1667", " 938 1477 1301 1667 1273 1667 7 1667 631 941 1667", " 1667 1667 1667 1667 1667 739 1788 1667 1586 455", " 577 1667 1667 1667 1667 1587 1667 1667 711 1667", " 1697 1667 1667 1667 1667 1667 1667 1667 1667 1667", " 1667 1263 1667 1667 1667 1595 1065 1667 1667 1667", " 1667 676 1120 1667 1667 1667 1667 1667 1667 1667", " 301 555 1970 1667 1035 938 1667 1667 1667 1658", " 182 1667 1667 972 1667 1667 1667 1667 1830 24", " 278 281 221 1667 1667 1369 1667 1667 296 1667", " 1667 1667 1667 1667 1667 1667 478 435 1667 1667", " 1667 1667 1667 454 1667 1257 1667 1667 1667 505", " 1667 1667 1667 399 665 1944 723 1667 543 1667", " 1842 1665 1838 1667 1285 1667 429 253 955 1667", " 1667 1667 1667 1181 927 1667 305 877 1108 1667", " 1667 1667 1298 1770 1667 1667 919 1667 1667 1667", " 1667 1667 1667 1667 660 1667 1667 1642 1478 1614", " 1260 1667 1667 1827 1568 1667 1916 851 1647 1667", " 1667 1780 1667 452 1667 645 1667 1207 38 50 1667", " 1667 192 1667 1667 1667 1667 1693 450 1667 573", " 1667 602 550 1667 1725 1935 1667 1667 1667 75", " 334 1667 1512 1667 1667 210 1667 1667 1667 1667", " 1667 1667 713 1771 1667 1058 492 427 1207 1725", " 351 1450 1667 480 1667 1667 1667 892 286 1667", " 1667 1667 1667 1667 463 1667 1584 1457 1667 1667", " 1686 702 668 735 1667 1667 1840 1667 426 1316", " 1667 1667 475 1667 1667 1581 905 1527 1667 1903", " 1807 1667 1667 1577 1396 1578 347 1155 1809 906", " 120 482 749 1667 1063 1667 1461 1667 272 1670", " 1069 1667 1667 1667 1667 1086 1667 610 1667 1243", " 103 1667 1667 1667 1667 1667 1667 529 898 1930", " 1667 610 1667 1667 1667 1970 1667 1667 1667 1466", " 171 1667 1667 1667 278 1667 102 1667 1667 1449", " 1959 1667 1667 1511 1667 1205 452 1667 1143 1313", " 1358 1667 81 340 1667 1667 1091 1667 1667 1667", " 1246 724 1667 1165 1667 1667 1667 1685 1667 1288", " 1667 334 1667 200 1667 425 520 38 1979 1667 1305", " 1667 1667 1531 1835 854 256 1169 603 336 1296"};
    vector<string> part3 = {" 1667 1667 575 1667 1667 740 1615 444 1667 1667", " 713 1667 510 1273 1667 1667 1667 1132 1667 1807", " 1667 1667 475 373 573 1667 686 1431 265 1667 1667", " 1667 998 1140 29 981 609 1621 1667 1667 1809 1667", " 1043 1525 1667 416 1365 584 1667 773 1898 1667", " 1667 1667 1366 1667 1148 1667 1747 1667 1667 1667", " 1667 1667 1667 1078 1667 1667 1270 190 1667 1667", " 1667 1667 95 576 1667 1006 769 1667 1667 1667", " 792 1667 1667 1667 1667 1667 1698 1667 1257 1667", " 1667 1959 1667 1497 519 1667 1667 322 161 1667", " 636 1246 1166 1667 1766 1170 1667 1667 1667 1667", " 1667 1667 1667 1847 601 1285 559 1071 631 1667", " 1912 1667 601 1723 1667 1258 1356 1630 1667 654", " 644 1895 658 1667 1667 908 809 1483 1967 204 600", " 1667 953 1853 1667 1667 1667 306 1667 1667 198", " 1667 411 1667 1667 206 1580 1530 397 1667 1981", " 898 1663 1667 1493 1667 1667 1667 522 1667 1938", " 1667 1667 1667 951 1751 1450 1667 1667 1669 1667", " 1948 1667 944 1667 636 1667 1667 721 1122 1667", " 1105 1667 1667 1667 1667 196 1372 1667 953 1251", " 1400 811 48 32 1667 342 1667 1007 1469 1667 1991", " 1944 1667 1723 566 418 1294 1249 742 1667 1667", " 1196 1667 1667 1667 644 1667 1667 1667 1667 1918", " 344 343 1667 1667 1667 1667 1667 1667 1959 1667", " 1737 1002 1667 1667 1667 1667 1389 1667 1667 808", " 678 945 1667 1995 1667 1667 1614 1779 1667 1667", " 1667 1519 1830 1667 1667 1667 1667 816 1559 1667", " 1667 1192 1667 1667 761 352 481 211 1807 1667", " 491 1667 1667 556 1920 1268 1460 1667 1667 1667", " 1667 1667 1667 296 1887 1845 1667 935 553 824", " 1532 1667 1246 1667 1667 1667 1667 1245 682 894", " 1225 1667 164 1667 634 1995 52 1976 1867 1667", " 1667 1782 1667 241 766 276 1667 1667 1667 1317", " 1823 1667 1667 208 1667 1667 612 1667 491 1667", " 1023 1667 1667 1667 1667 1667 1771 1667 1679 353", " 1667 970 405 750 1667 1536 1667 837 1667 201 1339", " 1667 1667 397 1667 155 1667 1667 1667 1667 1667", " 1086 1760 373 100 184 877 1667 1667 539 1492 1667", " 1667 1667 1481 1667 1667 1378 422 1667 1667 1816", " 269 1840 1667 1746 1723 671 1667 1607 1667 1667", " 807 53 385 1667 1379 1667 1667 539 941 1667 1667", " 985 1475 1272 1667 1667 1667 1920 1347 1667 1667", " 983 1125 1946 575 1517 1667 1363 222 1667 1667", " 1667 1667 1372 1935 1667 1667 1667 1007 1014 1294", " 70 23 1667 1667 296 1667 1667 1667 124 1997 1667", " 961 1408 1667 206 1574 1667 1667 1667 1667 66", " 1667 1667 1667 260 512 1667 1667 1667 1972 1667", " 804 1667 1667 1667 1667 1667 280 540 1667 767", " 1667 1333 937 1667 1559 84 1667 738 216 1179 1667", " 1667 325 1667 755 1667 1667 1157 1846 1069 608"};
    vector<string> part4 = {" 108 1667 1881 1769 1692 220 961 420 946 254 780", " 1964 1698 234 1667 1769 930 1667 1667 745 1667", " 1667 77 835 1667 1667 1341 1667 1667 1667 1667", " 1618 1667 1436 420 1667 1962 1667 984 1291 1667", " 1667 1667 258 725 124 1667 1667 1750 1667 347", " 1667 1667 676 1667 712 1667 536 1667 556 425 1667", " 729 1150 67 1667 350 1907 624 1667 1667 1667 1667", " 1262 1667 805 1916 1230 981 858 1667 1002 143", " 1693 1667 1667 1667 876 1667 1667 1667 1070 1945", " 653 1667 1667 1270 1148 1667 1653 1014 1803 1222", " 1667 671 1667 1822 1667 1667 1667 1667 855 1025", " 1667 1667 129 891 178 1667 1200 1667 1667 1667", " 1025 403 1667 1706 1075 364 1667 1667 1667 1566", " 1667 1667 1507 1667 1525 1667 6 1667 1667 759", " 1667 1667 1667 1667 843 143 1913 640 1667 1667", " 1667 51 1667 1794 1667 60 347 842 1667 1435 1667", " 143 1667 1667 925 1667 1013 1667 1667 253 1667", " 1667 1667 1667 1667 1582 1667 1872 1667 1667 1875", " 1667 606 1667 1667 1667 410 1236 1667 1667 1667", " 1667 1790 273 1667 1667 1742 73 1667 872 1667", " 1667 932 52 1667 1730 1575 1667 1667 1667 1667", " 1667 902 1667 1639 1667 1667 1667 746 862 1667", " 46 1110 1483 1667 372 1302 983 166 1525 1667 893", " 1667 1667 143 1120 1667 1122 1667 601 278 929", " 1667 126 1667 1667 1531 1923 447 1776 772 1415", " 1667 1535 1667 1420 1667 559 1230 1591 1155 1667", " 1667 1528 842 1667 1667 252 1583 1667 1293 1238", " 1667 1667 1819 1572 1667 1059 620 201 1667 1847", " 1667 1628 1687 32 1386 209 984 1667 1119 1667", " 1747 1407 1667 1262 1667 1740 582 1667 951 1667", " 1868 1784 1667 1622 1667 1667 1667 1667 1667 193", " 122 1667 866 1667 1667 1667 1667 1880 1667 1667", " 80 926 1654 1667 325 1079 1566 1667 1667 1667", " 1905 1667 1667 556 42 1667 1667 1415 89 1667 586", " 1667 1074 1667 1854 452 1667 1149 838 1667 1667", " 1667 47 1667 1667 1667 1493 1667 1667 109 1667", " 1667 1667 1667 1357 893 1667 1667 1630 1667 1667", " 432 333 1667 1667 1291 1204 1667 1667 1594 1667", " 1667 1667 1667 1578 1667 630 1667 693 1667 747", " 1667 910 1426 1539 84 1672 630 175 1667 458 745", " 1667 1667 1667 1308 423 675 19 1667 1667 1165", " 477 1667 607 1667 1219 1106 1667 1667 1667 1667", " 492 1667 1667 1667 1667 1949 477 622 1667 1893", " 1667 241 743 857 120 1667 1667 896 1667 846 1667", " 1667 883 1577 1667 1667 1667 1667 1667 1667 1667", " 1667 98 1667 930 1273 58 196 1512 1667 1836 124", " 1667 481 1667"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1318411;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    int numSheep = 2000;
    int maxRuns = 30;
    vector<string> part1 = {"1 1 206 95 1298 905 1 1 558 1055 892 1623 1 1425", " 1 1 892 400 1501 1 536 1 1180 1683 1956 1 822", " 1463 1255 1527 1 1796 1610 1763 1957 590 1 985", " 1 1 1 913 1 1 759 1 1 638 1 1871 1187 1 922 1", " 1 24 1101 1743 1 1 1 1 570 1 1 1 1530 1 1 1 1", " 540 48 1 892 1177 873 1 31 1 427 1 1 1 1 1226", " 1 1 1095 1 1 1936 744 1369 1 1 1 1 1736 1 1 1559", " 1 52 1 44 507 1708 506 756 995 1004 923 1 665", " 1721 1112 1 1 1 850 1 1 1 764 607 53 1492 1 773", " 1 1490 198 1657 705 1 592 1 470 944 1 1 1 1 1", " 1 1678 1 1 1 1022 1841 1917 513 1 1455 1970 1", " 1539 1755 1503 1076 1972 1 1875 1626 1 1 1444", " 444 1 1 938 1261 1577 147 580 1 1261 1 72 1581", " 1 1 853 1 1297 1 1693 210 1 14 1 1 1963 1 907", " 1572 1 1 649 1 589 81 1 1 536 1089 1251 1 1 1432", " 1 1 1 1 1 743 372 1572 1 1 629 1784 1 1004 1 961", " 1 1188 11 240 1 1849 367 1 1 1403 1 373 1935 730", " 1 1055 1744 251 1 1 1 1570 1902 1 1 1 1 1 1 1", " 1 879 9 1 118 795 501 1 1 1 1 76 795 753 289 1534", " 397 1 7 1 127 903 1215 1 1 1 126 1 1 1 666 1525", " 43 1 372 1 1 923 193 1 1823 1 1602 1 1 1 1 1 1", " 1453 1 1 368 203 1848 1005 646 1 116 1 1847 1", " 1 1 1 1489 604 1779 1552 1 1 1 1440 1 1 1292 1", " 405 452 1 1165 1 401 186 751 1679 328 1 1 1 1", " 943 1 794 1 1 1 1 1 1 1 134 1741 1666 1 1 428", " 63 980 737 1769 1 1 1 181 1941 1 1 335 424 38", " 1 1 1 1763 1950 1 1 1 1 1704 1 1 1807 1686 339", " 444 316 815 1503 1 902 676 1423 1275 1 1 1 876", " 434 1451 1 1 1 47 1387 1 1 1 373 1 1 1 162 1 470", " 1 1 377 1686 281 187 460 460 1 1923 1767 1 1 1477", " 1865 1 1561 1396 1 1810 1 1 985 1228 1 1 1 1099", " 722 1 1 1824 1 1128 1 1 1466 302 351 1659 745", " 1 1600 1958 616 1 279 1 1 1 1176 1 1 1321 1 1845", " 1 1 1 1619 1 81 1770 1 1 63 2000 1 1824 1 20 1", " 192 1 955 949 1 1087 1 1 53 1 1 1 1083 1 1 1 926", " 1 1 1589 1686 1 1761 1113 1 1843 333 1078 1 434", " 1517 1 1730 1 929 1421 1247 1 1 1 1913 1481 1284", " 1149 1 1 700 1 1 1 429 1 1 1023 289 1259 1 173", " 1 1890 1801 1 1662 1 970 1 1803 460 1 1 1 1 1", " 1819 1000 1 1 1333 1 145 1 1 1612 168 1323 1 1", " 1 1 1 1 1 1 1 1 1 274 536 1 1490 1 1722 643 1930", " 1 1531 1 1 615 1 1 1 908 1 1 1 791 791 1 1 1 1", " 1 1 255 1 1 491 79 1 1 1 1463 1 1686 1 1 1 1904", " 1 1 1923 1 1553 1 1 1 1 1 1 324 81 1072 1479 1", " 369 1 1 1 947 786 1 604 700 1 1 1 241 1814 1450", " 1 1 1 1 404 1 1 1 1 1948 1 1846 1 1 1 113 1 1", " 1999 1673 1 1 1 445 1 1022 1 1 357 431 231 1192", " 1598 174 1 1129 1 956 1 1 1760 1387 1 1 1 1 376", " 1013 986 1 490 752 1 1 1574 504 1 1 368 1 181", " 1 1 1 1 1 1 1 1 1190 674 1 641 1032 1 1 1 1 793"};
    vector<string> part2 = {" 1 1 1 1 1 1 758 1 537 852 776 1705 1 1 1 1 288", " 1 738 1676 1574 1914 1905 709 1 1451 1 1 1 1793", " 1 1058 1 1781 1 1 330 1 1471 1 111 1020 144 1", " 1160 1955 1 1 63 1 1794 1447 1 1774 1778 155 697", " 156 1107 666 1 1 1 1 1 1 1 816 1 1202 1 1 1 913", " 223 211 1 1 651 1218 1 27 1 828 1546 487 1115", " 166 1 584 1 1 196 1 1 293 946 953 674 1 1438 1414", " 724 1 239 1190 1 1183 1 954 1 1 622 1 1427 424", " 1774 1047 1629 329 1 386 473 683 1684 1199 1 1", " 862 1763 1227 1 447 1152 1 1 790 1027 961 804", " 1 363 1 256 1188 1 1 1871 1 981 1 521 155 291", " 1 1 1 1921 1 1 1987 1 1 1355 1 1646 267 1 1264", " 734 400 1 1 1241 1247 1163 123 345 1 1 1 1 1744", " 1170 1 1 969 1 1324 466 1 1 1646 1 806 1 1300", " 718 1 525 1639 1 836 1 71 1 1 692 552 1530 426", " 1107 1 971 39 1 51 127 886 107 829 859 402 702", " 1295 1 1 1552 1 1 1803 1 1 1 1 1 1 1640 1 1 1003", " 141 240 1 1215 1247 1 1 1 1 1012 1 1 1097 1 1", " 1 1 1 1 1765 1 1 1 1 1 615 1840 550 1 637 1 1137", " 557 1 1195 1 1 1 1 1 1 1277 777 1 1473 1 1 1599", " 502 1 633 527 1023 1 1 1 1940 403 441 1184 840", " 1901 1 678 560 1 1134 489 1 1 573 1417 1 1766", " 1 1 1282 1 1 1 600 1 1 1 1837 1796 811 1 1835", " 529 704 1 1 1 1 1 1 1 201 1 1 1 1 1 1011 1 1092", " 333 1216 1188 695 1 1 1754 1157 981 1990 1383", " 1729 1 579 1 1 1 1 1 1 1446 1820 244 1 1 595 1", " 1 1 565 1 1 1620 1 17 402 1 483 1 1 1 1 492 1906", " 1 1271 1 1818 1598 1065 173 176 1 233 130 827", " 137 1 1 1 1815 1925 1 1656 825 1903 1 1 1 1 721", " 1 505 1 1 1184 1623 1735 712 643 815 7 1838 1515", " 1 714 1126 1091 1 728 1727 1198 98 1 1 1 1051", " 1 1 1 1 1 475 1774 212 1 1267 581 1 1468 1 1 1", " 1 898 1 1 1509 1 332 1 1 1 1 1756 1534 1 1 1 1533", " 724 1 1 104 1 1 754 268 1 1 548 201 1 635 1503", " 1905 1168 391 1 317 1 1 1 1 1 1 1487 1 872 1471", " 1 605 247 1 1 1 1 1534 1 1 1 1 103 1 869 761 1396", " 1638 1571 516 632 1 1929 1 80 1 1 302 1 1 1962", " 1 1145 1 910 1971 1 1 188 1133 1 1993 1 1677 1", " 1 1 1 1 1304 1 1 1 1 1 1 1 1684 1 1 1 1 1116 635", " 1 564 1 616 1709 217 1 649 55 1 1 1 1 679 1 1107", " 1654 1891 1813 905 812 1 1366 1 511 1540 781 1", " 298 1189 1185 666 595 979 206 1 1402 815 480 1", " 1 1012 1466 1128 1618 1 1 828 1 1197 1 570 1 1", " 1 779 1792 1100 1150 1736 1 1938 1 1396 1 1 1464", " 1564 1404 802 53 1 1 191 1 1 1165 312 781 1032", " 719 1206 1 1 1 1 1 1 11 1 1 1 1 1085 1413 1 1033", " 133 1674 1 1612 1 1 915 1807 1958 1 1009 576 1810", " 310 1304 1 1 1849 1529 1 201 1753 1 690 97 1 1", " 1 1 1 1081 644 1 1 1 1 1 1362 1214 1 1342 1739", " 680 1485 1 254 1 1 688 1 1 94 1 1900 1 1 161 1"};
    vector<string> part3 = {" 161 1807 692 613 1406 642 409 513 1505 538 1805", " 1820 1 1956 1249 1597 1083 1 884 1 1 1586 1 1", " 1 1014 1 1394 541 1 1 1 1447 414 1907 1077 1 1", " 1 1 1963 1616 1 1 360 1452 75 1 905 1 1192 1 1239", " 1 792 1 1 244 1 1 691 1 1 1579 1 1584 125 1 1", " 479 1 538 1 1124 1 1 1 1 1 1 1797 1 1294 1136", " 1 1669 1 245 293 739 1996 346 1 889 107 1624 1", " 1 1 1151 1 1 1501 367 979 1171 1005 584 1 1 1881", " 766 1 425 1562 1 738 354 1356 220 1 1 230 1 1364", " 1 1 1 350 1 1050 1 938 1532 1 1127 448 1002 837", " 1 1 1 1 1 1 974 1 228 161 1 1759 1253 831 1 1", " 1 1 1 590 1687 1 1 1 1 1 233 1495 548 1024 392", " 50 1821 1 1 746 1385 1 1097 1301 1 962 371 208", " 1052 1 1 1 1 287 1 1088 1171 1591 1 1830 1 1 1", " 1 1725 1 1622 1 1705 923 1 1 1 1 1 207 1 711 501", " 908 1 1 1 403 1 1198 376 1 1253 1754 1130 1252", " 1 1 1 304 1495 1479 1 1219 1 1 1 812 1 1 1 1908", " 1 209 579 1 1 908 1 1 882 1257 1 1 1 174 691 254", " 1636 474 1 1 1075 1 229 5 639 1 1608 1 1 1 1 1", " 1325 1 379 559 215 1313 1891 504 1 661 1 658 1", " 1073 1 1564 1984 618 1 228 523 1 589 1 1 1671", " 1 1 1 1 1329 924 1964 1 1 1 1 1 787 1 1 895 79", " 755 1 1 363 1368 1 1 1 1141 1 1661 1 1 1 1 126", " 1487 616 1313 1275 1334 1648 1540 1 793 1 1 1", " 1 58 822 1 1463 508 1 1 1 770 259 1233 47 1361", " 976 1484 1 1 1 1994 442 1883 1266 1332 1 1476", " 1 1 1 1 29 565 1 1 1 1 1 1019 828 1 1805 1 215", " 1757 375 1131 1 1 1 1 1 807 1 1 1 1 1 1 1 1 401", " 445 1 1 1522 979 330 823 1 868 1 1546 1750 1404", " 1 1958 169 1 1 1 1 1 1 1 1 153 1 879 1 1 1939", " 1 1975 329 1 1301 1 1 215 713 1403 380 1 198 1", " 1 1142 1 1 1 1891 1 1 1 1467 941 1079 1411 871", " 598 678 1 538 1 414 311 1 1 1 1698 1 16 1 851", " 773 1268 1281 66 908 1 1219 1 1 1 1 625 1003 1392", " 1 1160 1 455 1 1577 1469 1 593 1252 490 1 1 1", " 1164 1697 1 1 920 1 828 1 1 420 1751 1 1 1 1817", " 809 1 1130 1 1"};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 33279;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    int numSheep = 2000;
    int maxRuns = 30;
    vector<string> part1 = {"13 13 13 13 13 1497 13 13 105 398 294 13 13 1746", " 1447 148 13 13 13 13 13 1722 1709 1939 13 13 1842", " 1509 13 1676 845 13 13 13 13 131 13 13 904 13", " 1421 13 13 13 622 13 13 13 13 771 204 590 13 222", " 1843 13 13 1352 13 13 562 1771 13 173 13 13 13", " 13 1982 1363 13 1555 13 13 13 1276 13 1173 13", " 13 13 13 1853 361 188 1969 770 13 341 13 13 13", " 672 1764 1975 824 1961 13 13 13 13 621 13 1036", " 370 1535 13 13 1793 13 13 13 868 408 13 965 488", " 13 1637 13 1509 500 919 1351 13 13 1474 1136 1571", " 1404 1752 13 1275 1649 13 13 13 13 1007 1115 433", " 13 13 875 13 1541 13 1958 824 13 849 202 506 13", " 13 13 1372 13 13 208 13 13 13 13 13 13 13 1022", " 222 13 1661 13 13 13 13 13 1801 1606 13 13 341", " 13 13 13 13 13 719 13 310 1827 13 13 13 188 1685", " 1898 792 13 13 13 13 13 13 565 13 13 13 566 731", " 1647 178 13 13 1691 13 1104 13 343 1722 410 13", " 13 13 13 800 13 462 13 541 13 1720 13 13 36 13", " 13 13 13 13 13 965 1159 13 13 991 13 66 1261 596", " 13 278 1417 13 1252 13 1513 1313 13 13 501 718", " 1322 13 1585 769 1474 13 1510 511 1294 13 13 663", " 1272 798 13 1616 13 13 683 759 13 13 13 1326 13", " 13 13 1515 36 13 13 13 13 13 1670 13 13 840 1598", " 13 13 13 13 1224 13 13 543 299 13 13 1928 13 13", " 1928 13 13 1703 170 1828 1441 98 501 1743 13 13", " 13 1872 879 1391 1930 1119 13 800 1439 13 13 716", " 13 160 13 13 1688 1390 904 13 13 966 705 13 13", " 13 1747 13 374 1512 13 917 13 223 1081 217 13", " 13 1777 13 798 13 13 13 13 1848 13 13 948 13 1741", " 13 453 1602 1864 13 13 13 1722 13 13 13 976 13", " 13 1246 13 13 1124 13 13 13 1761 715 13 159 1214", " 978 1193 1571 1706 1562 13 20 1805 13 1103 420", " 1100 13 13 13 13 13 13 93 1329 697 13 13 859 13", " 1354 13 13 915 13 13 13 1472 736 13 13 1107 812", " 13 13 13 547 972 1324 13 13 13 234 329 306 13", " 13 13 13 13 13 13 358 463 593 13 192 1590 13 1379", " 35 1043 1554 13 1371 204 221 13 1843 810 1372", " 13 1272 1923 1217 1057 723 654 13 551 13 1454", " 13 504 13 13 13 13 13 1658 794 948 1342 643 1400", " 1792 13 868 13 13 1203 13 961 13 13 13 1862 13", " 615 1424 85 1219 13 13 13 1306 13 13 13 13 13", " 844 499 13 13 13 442 13 13 13 13 449 13 13 1946", " 491 979 13 13 658 224 13 930 13 1601 1141 13 13", " 13 782 13 911 13 529 13 13 13 13 13 13 13 13 13", " 13 13 1022 13 644 943 762 822 1375 13 1628 13", " 13 1003 13 1418 60 1104 1157 13 1980 13 13 13", " 13 13 1857 13 13 13 1863 1498 622 13 227 341 13", " 1158 1627 652 13 1766 13 13 13 46 13 728 13 217", " 13 13 1621 13 13 13 13 290 13 842 805 1077 757", " 13 13 13 1423 13 261 1404 13 13 1130 13 1333 1464"};
    vector<string> part2 = {" 816 891 17 13 13 340 13 636 13 13 13 1368 13 627", " 13 88 13 583 1037 13 464 13 477 13 13 1663 13", " 13 13 13 1977 13 13 501 1909 1015 13 13 13 1610", " 1258 711 1210 13 13 13 13 752 1065 13 13 13 482", " 13 13 632 13 1269 1354 13 13 123 13 801 695 1550", " 13 13 319 1369 1203 73 13 1599 13 386 13 13 13", " 764 13 13 13 1991 757 929 509 13 1897 1806 13", " 13 13 13 13 13 13 1649 13 363 13 622 1713 13 13", " 13 13 473 13 1862 13 1451 13 1084 1563 1424 629", " 1426 1398 13 13 1982 13 13 857 1571 733 13 13", " 1304 1783 698 233 13 13 13 13 13 294 1236 1361", " 13 861 694 13 547 13 13 115 379 1702 1932 1026", " 13 901 13 754 13 11 681 13 13 13 1570 13 1713", " 13 1576 13 13 13 323 1741 13 182 1502 1127 13", " 13 13 529 13 13 13 1226 279 13 1850 13 1129 1713", " 1249 13 796 1256 1407 752 1876 1332 1034 13 13", " 1170 1531 13 882 13 629 178 29 1287 13 13 433", " 13 834 13 1061 1026 1100 13 519 13 326 13 1321", " 1944 1284 13 13 1876 1148 13 13 13 1951 347 13", " 13 13 1755 1078 13 469 13 13 42 1667 13 1359 1148", " 13 1186 13 443 13 13 13 13 1790 13 13 13 13 13", " 7 540 317 13 614 13 1784 1499 13 1509 377 13 1492", " 13 13 71 130 931 13 368 13 13 13 809 13 989 1833", " 13 1784 13 13 13 13 1662 825 870 13 13 325 246", " 1923 13 1098 13 13 13 13 13 413 1496 1658 13 13", " 13 110 1578 13 13 13 386 13 13 13 13 1309 1592", " 1833 1114 13 13 13 13 264 921 179 13 13 654 13", " 1339 1104 13 1616 13 13 768 1295 13 13 1983 1206", " 13 441 13 13 13 1626 364 13 13 897 13 13 13 13", " 1897 1316 13 1531 13 1002 13 13 13 13 13 13 13", " 167 191 1782 11 13 145 13 13 13 13 13 13 13 544", " 13 13 13 13 13 267 273 929 13 13 13 183 821 13", " 13 841 315 13 13 13 13 13 13 1995 13 1785 13 246", " 1464 652 13 1105 13 359 1780 13 13 13 13 13 826", " 1438 13 13 13 13 845 13 13 13 1050 1678 13 13", " 422 13 13 1496 13 181 13 13 974 545 13 1374 262", " 13 649 1014 13 706 603 385 1797 13 13 642 577", " 13 13 13 13 1100 621 1892 13 13 232 1500 950 13", " 13 1783 1159 13 621 321 13 13 310 13 1901 931", " 1057 1549 13 165 13 13 11 13 431 13 1386 79 13", " 13 13 832 13 13 13 13 1323 1651 70 13 116 13 13", " 1796 13 1632 1636 1674 13 13 832 13 1558 13 13", " 1263 203 1533 360 528 13 758 13 677 13 13 950", " 200 1358 13 13 13 13 143 69 13 82 13 13 13 13", " 1573 13 779 72 13 13 13 13 13 1026 13 13 13 13", " 13 13 797 13 203 305 1467 13 1255 942 777 843", " 13 1964 350 970 13 967 367 386 13 154 13 13 13", " 574 1429 13 821 1458 13 13 13 13 1523 1086 13", " 13 13 180 13 15 500 1051 1762 1691 117 76 13 621", " 13 13 426 13 13 13 1404 713 1114 1570 1121 1301"};
    vector<string> part3 = {" 13 78 437 674 13 13 13 13 13 13 1531 1389 13 13", " 21 13 1886 13 13 13 13 13 178 13 12 1230 1453", " 13 13 13 1705 1617 13 783 876 13 13 13 13 1922", " 29 113 13 13 1216 845 209 381 13 13 1938 13 960", " 791 13 13 13 13 965 13 236 13 1610 13 1494 874", " 18 13 961 1072 13 1645 13 1034 13 13 13 13 1868", " 13 13 13 725 13 1305 652 13 13 1475 13 1751 563", " 13 13 13 879 13 13 1074 13 13 1935 13 13 1131", " 1898 1447 66 13 13 13 75 13 13 13 13 465 592 269", " 13 13 975 1242 1369 1991 13 678 13 715 13 13 1804", " 13 13 963 13 13 254 248 13 733 108 13 13 13 940", " 13 288 719 382 13 127 569 1113 409 740 13 795", " 736 1003 13 1730 599 224 13 13 314 13 13 13 1317", " 488 13 13 13 13 1406 391 13 669 13 1435 934 13", " 13 1691 1139 13 13 13 1361 827 13 292 1152 13", " 750 13 1166 13 842 1340 13 492 432 13 13 980 726", " 13 821 13 1065 119 13 13 13 13 209 13 13 274 13", " 659 886 1240 13 13 13 13 13 13 1547 1843 13 1415", " 13 528 13 13 618 13 945 13 945 13 1810 13 1646", " 1629 864 1308 1273 1317 13 13 13 13 13 13 13 193", " 13 1503 1677 13 13 1247 453 609 13 13 13 13 13", " 793 1334 13 1768 93 95 77 13 13 454 1036 13 732", " 13 13 1308 13 1735 13 13 13 13 959 578 13 13 136", " 1936 13 13 13 1279 403 976 13 1881 452 13 13 13", " 1278 297 491 13 13 1612 13 13 13 13 1918 13 1652", " 1042 1752 13 209 13 13 13 1076 13 142 1381 13", " 928 1291 13 277 1408 13 13 274 346 672 13 556", " 13 13 13 13 169 13 13 13 13 617 13 13 276 494", " 1064 13 560 448 135 13 13 13 13 609 13 13 13 13", " 13 13 1100 320 13 923 1296 1421 13 236 1598 13", " 1422 1127 1961 958 13 1201 13 1288 13 13 13 991", " 1349 13 13 1670 902 1438 1131 13 647 13 13 13", " 137 13 836 365 499 174 844 13 13 1840 13 13 13", " 13 13 13 822 13 95 13 13 13 1607 1708 1150 1811", " 13 13 838 284 13 13 13 661 60 1399 13 1251 13", " 13 1986 13 1581 13 1214 13 13 446 13 13 13 13", " 13 13 13 829 13 479 13 13 13 1714 13 775 612 1808", " 415 13 227 113 13 13 13 13 1940 13 13 13 174 13", " 734 13 13 13 525 1442 13 13 1540 13 34 438 13", " 46 13 832 1738 1889 13 1802 13 1893 13 413 13", " 234 458 587 382 13 13 13 755 13 13 13 13 4 13", " 13 1067 1020 315 13 121 13 13 13 13 13 1499 13", " 1234 1569 13 947 13 13 1314 187 13 13 847 1486", " 1168 1424 1804 1233 96 13 104 13 1566 1506 13", " 1975 1579 13 13 13 776 13 1230 13 13 1986 1818", " 1925 244 13 13 1158 13 1752 262 13 13 13 286 744", " 13 13 1054 13 13 13 13 13 13 314 1533 1722 13", " 756 1428 13 1473 1845 874 13 87 13 1483 13 94", " 537 512 1991 13 13 1002 13 1673 903 13 1740 13", " 13 13 941 13 855 13 13 13 824 13 13 45 637 13"};
    vector<string> part4 = {" 538 1091 13 410 522 13 13 13 893 13 530 830 13", " 13 958 1758 13 13 493 1076 13 453 13 1553 13 13", " 1573 495 228 13 19 13 13 13 1925 13 1544 13 13", " 1111 13 13 1349 921 13 13 940 13 13 1823 258 13", " 3 13 1576 83 13 1893 13 1042 13 1602 13 769"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 31624;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    int numSheep = 2000;
    int maxRuns = 30;
    vector<string> part1 = {"909 483 42 1313 1569 42 1651 42 42 42 42 3 5 1746", " 42 42 326 42 42 42 1664 42 42 514 544 741 42 42", " 42 42 418 1611 1825 42 452 42 42 1567 42 42 42", " 729 1186 721 1408 354 42 42 42 42 42 42 42 470", " 1460 42 944 42 42 42 367 1016 42 42 1207 714 42", " 1415 42 42 24 42 604 1255 42 42 42 42 1948 42", " 42 1348 42 42 1222 1133 1389 42 42 42 461 1984", " 42 42 1680 42 67 1837 42 695 943 1253 1390 1591", " 651 1383 42 1929 42 1596 589 1645 42 42 208 222", " 1821 70 42 42 42 42 429 42 21 42 42 42 734 812", " 986 42 42 42 846 1347 746 42 42 42 366 42 900", " 40 42 42 1174 105 610 42 589 1919 1785 1014 42", " 42 42 42 862 42 481 42 1946 42 1574 42 42 1484", " 42 1156 532 42 42 1269 42 720 42 42 42 42 11 559", " 42 42 108 42 670 133 1901 795 1196 174 42 1930", " 42 42 731 42 1679 848 42 42 1340 1312 42 992 198", " 1722 699 672 42 134 1245 42 42 323 925 1762 42", " 42 1085 42 42 765 1575 42 1399 42 42 1124 42 1288", " 1317 42 42 997 1662 1010 42 42 42 1165 42 876", " 668 42 1213 42 1329 42 675 42 492 42 1557 1631", " 42 42 42 518 893 59 1544 42 42 42 258 42 42 485", " 42 42 384 42 42 384 42 693 42 42 1670 42 42 1638", " 42 1376 42 1047 62 42 42 42 42 447 116 50 1642", " 1804 530 1315 42 428 1129 42 1712 1476 42 848", " 117 1654 42 777 42 180 1263 42 1926 42 173 341", " 45 42 42 824 42 1467 1198 42 445 1069 42 288 42", " 875 1567 42 42 1043 42 42 530 1907 42 42 1897", " 1032 42 42 42 1683 24 42 42 1787 42 42 42 42 42", " 42 42 291 42 263 42 1046 169 1500 42 1809 1360", " 42 42 1779 42 557 42 306 1219 1338 926 1948 42", " 571 42 533 126 1201 993 1346 1946 273 911 577", " 42 42 42 42 949 42 42 156 1142 805 42 42 1418", " 42 42 568 42 42 42 1797 42 42 466 100 931 1953", " 42 1480 42 1878 42 42 302 1044 42 42 1228 1691", " 42 1654 842 42 42 42 42 42 113 1546 638 953 42", " 1909 1282 42 1575 1133 179 694 42 602 1780 42", " 42 341 42 1940 458 1731 42 11 42 42 42 42 42 42", " 1500 1503 1954 42 1540 42 1650 346 38 1046 42", " 760 828 42 1696 659 42 1580 42 42 1994 681 1921", " 42 1607 1916 42 1176 814 42 763 1811 526 42 123", " 423 874 1748 42 42 1192 322 42 351 42 1896 1296", " 1736 42 989 42 42 42 1495 1976 42 42 42 42 42", " 42 127 298 42 1305 42 42 42 1620 25 42 42 1278", " 154 1960 42 42 42 1866 42 42 657 42 42 842 42", " 42 833 42 1743 42 906 42 42 155 42 42 42 42 42", " 42 42 42 1180 42 197 42 1045 1357 435 42 116 759", " 1219 42 888 42 472 369 42 42 931 42 42 42 1007", " 42 42 42 534 42 42 42 537 284 42 757 42 77 1818", " 42 42 14 243 42 142 42 42 1975 42 42 98 154 428", " 213 1980 42 42 42 976 602 42 51 42 564 1817 42"};
    vector<string> part2 = {" 1558 42 42 42 42 42 42 42 42 42 1340 42 1561 42", " 1599 1302 1829 42 42 42 42 42 1543 42 1315 414", " 42 42 42 42 42 457 42 42 42 92 42 1895 42 1818", " 42 42 42 42 1569 42 853 1175 42 42 42 42 1921", " 306 973 42 1850 42 42 879 639 42 99 42 42 42 1136", " 350 64 253 42 1770 1703 42 42 1539 42 502 42 42", " 42 1132 1545 42 828 42 42 1340 42 42 42 691 892", " 1667 42 226 295 84 1988 42 1252 42 42 1876 42", " 1429 42 42 42 1857 1028 42 438 385 1368 1268 585", " 42 1061 1259 42 890 42 192 224 240 42 42 345 42", " 42 42 774 42 1605 42 42 42 972 42 1546 616 42", " 1957 1067 1893 856 807 42 42 1078 42 42 1119 42", " 42 337 964 42 42 1028 42 42 943 42 42 42 42 910", " 42 403 384 42 445 42 407 1661 1683 1556 42 1759", " 42 1961 689 39 42 186 812 757 42 1733 507 42 42", " 1158 42 42 654 1634 482 1800 1741 42 954 42 42", " 810 42 42 42 42 661 921 42 42 42 42 42 306 650", " 1256 1085 550 42 42 42 42 968 1469 181 215 1855", " 1172 844 42 710 31 42 574 42 42 42 672 1292 42", " 42 42 911 42 1597 526 1361 42 42 42 42 42 42 1973", " 738 42 68 154 42 42 228 42 500 42 42 242 1872", " 284 42 42 42 42 42 1255 466 548 1013 42 42 1878", " 1480 42 42 42 342 1928 105 42 1391 42 42 46 42", " 1274 418 1426 185 42 42 750 42 42 42 419 1085", " 42 549 42 42 322 670 42 42 42 42 42 42 42 42 880", " 1998 1719 42 42 42 358 1387 42 42 935 942 42 42", " 1776 752 42 42 1237 1355 42 42 1024 424 1345 150", " 42 42 1492 778 1748 1831 42 42 42 42 42 42 1810", " 153 1664 324 42 42 42 42 42 42 127 267 868 42", " 1801 42 42 1025 42 485 42 42 42 143 42 42 1432", " 42 42 42 42 42 42 1605 42 42 1473 395 737 42 42", " 42 42 42 42 42 42 740 1264 42 42 426 42 482 213", " 1584 399 1160 42 444 136 334 1416 661 253 1553", " 42 1965 42 42 42 42 42 42 42 1911 242 42 42 1114", " 42 42 42 101 42 295 42 500 42 764 42 2 42 42 42", " 42 69 42 42 16 509 604 42 42 620 888 42 42 42", " 1758 42 42 42 1793 42 1471 42 1467 42 1725 42", " 293 1339 1036 1276 965 389 42 42 42 42 42 386", " 1165 42 1736 42 1831 42 1528 42 42 42 42 280 42", " 1606 837 529 302 42 42 42 42 42 42 42 42 42 42", " 42 1389 42 1190 1311 42 1475 42 42 179 42 42 351", " 42 973 42 1268 42 147 1685 42 192 42 42 1320 42", " 42 696 42 42 1920 713 1909 1777 42 375 42 42 1244", " 42 42 42 1174 322 978 557 406 42 42 1459 267 42", " 386 42 1685 42 1045 190 42 42 42 42 1527 42 601", " 42 42 42 596 1727 605 426 420 42 1012 42 42 42", " 736 1612 449 384 42 42 1262 42 42 42 42 42 42", " 1435 159 1283 1908 42 1424 42 42 246 42 42 12", " 1435 42 1200 457 1462 42 42 42 1867 1656 1458", " 42 310 580 407 42 42 42 42 1871 42 1605 1796 42"};
    vector<string> part3 = {" 42 42 42 42 1712 42 519 42 42 42 42 1808 610 1241", " 42 1579 1703 1139 42 1749 203 42 297 42 1481 1066", " 42 113 42 42 241 1535 765 42 508 1043 42 42 42", " 42 42 519 871 42 42 42 1411 42 946 42 1371 936", " 1414 438 42 42 42 86 1904 42 1449 2 747 978 42", " 384 618 42 42 42 42 42 1511 1108 682 1017 1184", " 793 1159 1418 42 1996 42 71 1952 42 778 1698 1053", " 746 42 42 42 640 42 390 1360 714 1121 1981 42", " 8 497 953 204 1163 184 1046 42 42 42 651 1310", " 552 42 42 389 484 1905 167 796 10 42 42 42 42", " 1713 42 748 42 42 42 1595 1457 42 42 1032 42 42", " 42 42 1646 42 482 42 601 42 414 1996 37 42 42", " 42 42 42 42 42 42 42 224 42 1075 502 42 1163 1673", " 42 42 42 42 42 250 1552 1087 1202 794 617 42 42", " 42 42 1954 42 1310 1848 322 42 42 106 42 42 42", " 876 1537 834 1043 42 42 42 1384 1192 42 1586 42", " 42 1372 42 42 42 1232 42 739 15 1981 42 42 42", " 42 42 42 290 1044 92 361 42 42 42 42 42 1527 1803", " 602 42 1528 42 42 1525 604 42 1599 40 1675 75", " 532 42 42 42 42 42 1682 42 1709 1950 2000 518", " 445 42 678 42 714 633 42 42 1328 42 42 42 389", " 1657 966 59 964 1920 42 42 42 247 433 42 42 42", " 42 40 591 42 1763 635 1249 42 542 1744 277 42", " 42 42 1226 869 42 42 1032 1402 1373 42 42 42 1527", " 1490 42 608 42 1886 1836 1050 42 1599 42 668 1571", " 788 42 1139 42 42 754 42 1210 42 42 653 1546 42", " 1307 954 42 42 1392 1025 42 42 42 350 42 42 42", " 42 1234 1488 42 394 42 732 42 530 1038 42 16 42", " 42 42 1185 71 42 42 42 42 1580 1068 1853 50 42", " 42 1265 1293 42 42 42 42 42 42 42 781 286 1358", " 42 731 42 42 349 42 93 1172 42 1703 42 104 83", " 804 330 42 42 1780 1507 42 1757 186 42 42 42 27", " 274 1154 1162 460 42 1260 959 42 501 42 42 42", " 42 1822 42 42 1808 1660 42 845 1067 42 1342 42", " 380 1273 42 1023 640 42 42 42 42 42 42 42 635", " 42 738 1825 1592 292 42 42 42 42 42 42 780 42", " 902 42 42 42 1104 1277 42 153 1584 42 42 42 42", " 936 42 509 720 42 1663 1800 1856 251 752 181 1828", " 42 1758 548 1604 42 42 1052 42 1573 532 800 42", " 778 246 42 42 313 1095 42 42 1177 997 42 164 42", " 1323 42 1141 42 42 42 1960 42 42 647 42 42 42", " 42 42 1700 42 42 1669 8 1074 42 42 425 42 1974", " 172 1420 275 42 42 42 272 42 42 492 42 42 42 42", " 42 42 42 42 42 42 42 42 1700 989 42 1469 42 42", " 3 995 42 42 42 42 435 42 1550 42 42 42 492 42", " 385 1809 468 42 42 42 42 42 1020 1169 1694 42", " 42 42 42 42 42 438 42 42 42 42 207 590 1841 42", " 42 1911 42 42 911 42 1200 42 1415 1585 42 108", " 42 42 42 42 42 1732 42 516 42 602 42 1873 42 42", " 42 42 1062 42 1443 1557 1017 42 626 479 42 42"};
    vector<string> part4 = {" 355 42 1385 42 42 42 42 42 878 42 42 1115 42 42", " 42 42 42 240 347 145 42 698 752 132 1294 798 42", " 42 42 655 128 42 1802 42 42 42 986 42 42 42 42", " 42 42 42 42 1292 42 42 1579 42 42 1857 42 1082", " 42 1380 333 1733 42 1537 1528 42 42 42 42 885", " 570 42 42 42 42 1588 42"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 32675;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test41() {
    int numSheep = 2000;
    int maxRuns = 30;
    vector<string> part1 = {"576 1980 1927 576 683 576 576 576 670 576 1765", " 1013 576 576 576 1660 576 576 576 576 1358 576", " 576 576 576 1041 1314 576 733 111 1768 1688 576", " 576 576 576 576 576 1563 385 640 576 576 731 1026", " 899 576 1731 48 576 576 824 576 289 1668 238 562", " 576 576 1342 1163 576 576 1615 576 576 700 1463", " 1728 576 576 543 476 576 576 576 1976 366 576", " 576 1715 748 156 1307 1099 33 1873 597 576 1541", " 576 576 1566 396 663 576 576 16 576 576 991 784", " 576 576 508 1544 59 1409 1758 1380 576 435 576", " 446 1284 774 1890 576 576 576 1581 1957 342 576", " 1351 1777 672 1999 373 576 576 576 576 576 383", " 576 576 424 404 693 491 120 576 576 576 1799 576", " 911 576 1302 513 576 576 576 576 576 576 576 576", " 1791 85 311 576 576 576 576 545 22 576 576 576", " 576 1894 576 73 1074 421 576 1272 576 576 576", " 225 1677 751 576 1748 814 576 576 576 576 576", " 576 751 576 202 877 1398 576 908 1452 576 576", " 1376 576 576 1667 1484 960 521 576 1746 196 1433", " 576 361 496 576 576 576 576 1018 34 1836 876 953", " 1588 1453 576 576 1505 576 576 706 576 576 576", " 1120 576 576 576 576 1780 576 227 1795 576 576", " 576 576 576 336 576 576 1209 576 742 1228 576", " 576 576 919 576 576 883 664 375 576 795 576 576", " 1226 576 576 576 1391 576 236 1318 733 1213 576", " 576 1429 576 1151 576 576 576 576 1675 576 224", " 576 576 1528 576 1373 576 1700 576 989 576 1651", " 576 251 576 576 576 576 1763 1682 1739 1651 663", " 576 576 576 1274 1521 576 576 69 1536 576 1696", " 576 123 576 576 579 576 1333 1906 576 1122 329", " 1371 268 112 29 576 576 915 1353 1466 1395 576", " 575 576 308 270 530 1626 482 576 576 458 576 576", " 576 576 1561 576 576 458 576 1467 1724 576 576", " 1251 576 576 1495 1771 576 761 576 1674 908 576", " 576 1403 576 867 282 576 1491 576 576 576 576", " 576 576 1411 576 576 576 576 576 576 576 657 576", " 341 520 576 132 512 576 576 576 576 961 576 1438", " 576 576 921 576 576 1684 576 454 576 576 576 1282", " 576 576 265 576 576 1616 1454 576 1256 1844 576", " 1915 576 576 1756 715 1658 576 744 576 1243 576", " 1940 37 576 576 1360 576 576 257 576 354 576 576", " 576 576 576 1646 576 1096 576 576 576 955 11 576", " 576 1956 576 576 554 890 103 576 576 576 576 244", " 576 1538 1895 557 298 1746 1872 576 261 1613 17", " 576 1440 1291 576 301 503 576 576 576 163 576", " 1216 576 1991 1123 396 1115 735 819 576 1002 312", " 149 1200 576 1396 576 576 1028 576 576 1506 576", " 576 576 1321 576 576 576 576 347 1310 1247 851", " 205 1619 1633 576 576 216 399 576 17 576 865 576", " 288 576 1934 544 576 1169 576 418 576 1272 576"};
    vector<string> part2 = {" 576 1014 576 997 576 1236 576 576 1038 576 649", " 576 576 835 878 131 446 715 776 1690 1582 1720", " 576 576 1492 576 1056 1190 576 28 1754 576 403", " 166 576 1000 576 576 576 150 1793 130 576 192", " 576 576 1852 62 1425 890 380 1600 576 103 576", " 576 1153 576 1666 1264 333 1265 126 513 190 1498", " 1553 669 576 752 576 884 1312 576 576 576 1259", " 576 576 576 1349 576 576 81 576 1998 472 576 576", " 576 1547 343 576 576 576 211 1565 1172 576 576", " 455 761 576 576 1682 664 705 576 320 1462 158", " 576 1098 576 383 576 1540 576 409 576 1554 529", " 53 107 576 576 126 576 576 1777 576 1580 576 576", " 1400 1312 576 1321 576 576 115 307 712 1045 576", " 1484 837 176 466 576 1179 1881 445 576 576 374", " 1859 1604 576 576 576 576 576 576 576 576 576", " 1589 1571 415 1137 576 1186 576 291 576 576 576", " 576 576 1996 576 1110 576 755 576 695 1555 576", " 576 891 1913 576 576 1035 65 925 568 601 805 576", " 576 576 576 99 426 576 636 278 1371 1860 1705", " 576 576 37 1791 576 1696 576 576 576 22 899 576", " 598 910 576 1462 659 1035 1338 576 555 576 432", " 576 576 576 1297 576 1149 576 576 1153 818 576", " 576 576 1004 576 1625 811 521 502 576 1543 1633", " 576 576 1331 137 926 159 493 1127 576 576 1081", " 1450 592 576 576 1641 1297 9 576 503 576 576 587", " 576 576 576 567 576 440 576 922 576 585 1406 88", " 576 576 1669 104 576 484 576 576 681 576 1221", " 1776 576 576 1133 756 576 576 460 576 576 1525", " 576 576 576 36 1190 576 1013 1302 576 407 1221", " 1235 1499 1586 576 576 1300 576 1031 178 1499", " 1765 576 576 108 576 576 576 197 526 576 576 576", " 576 53 1251 576 1945 576 514 1836 576 576 513", " 211 369 137 576 919 576 576 576 1424 249 576 1557", " 20 1326 576 85 1862 848 576 576 576 576 289 857", " 416 708 576 1065 1271 576 576 576 766 576 576", " 576 1511 103 576 576 1386 1195 1305 576 1260 80", " 1821 975 576 1720 1082 576 576 1858 576 502 576", " 576 1736 460 1739 3 337 576 576 45 576 375 1007", " 576 576 519 576 576 576 576 1438 576 172 576 576", " 1228 1395 576 576 865 576 1291 576 1131 141 175", " 576 576 576 576 1826 576 1762 1554 576 65 1343", " 318 576 1059 576 576 846 576 1967 576 576 576", " 576 576 53 795 576 1762 1486 576 576 576 576 892", " 576 1843 576 294 1363 576 576 576 518 576 576", " 131 576 576 349 1468 403 1875 43 1998 772 1457", " 73 576 1986 621 576 1413 1378 576 577 576 576", " 576 576 576 31 1934 576 1521 1188 542 576 5 576", " 576 576 576 576 819 576 576 1839 576 1638 1894", " 576 544 1762 576 1156 576 1423 576 1736 1963 1349", " 576 496 348 1754 576 576 325 1984 650 576 1431"};
    vector<string> part3 = {" 749 734 1616 1823 576 327 1292 1098 1397 576 576", " 576 1387 940 968 576 802 576 576 325 576 576 1938", " 576 576 576 527 576 400 1034 576 576 240 576 810", " 1913 791 1079 1465 334 1893 468 576 576 1467 783", " 576 576 576 576 576 576 353 576 1201 496 4 576", " 576 1588 1140 1034 400 576 576 1632 1553 576 1505", " 576 576 576 576 576 505 576 1715 1659 576 576", " 733 576 409 576 576 517 1902 702 1451 405 576", " 1491 282 576 1311 1854 576 1138 576 576 576 576", " 576 576 1311 576 726 189 1501 519 576 576 461", " 576 812 576 1590 576 664 576 239 576 189 418 576", " 576 66 1866 136 1591 576 1670 855 576 1537 576", " 576 576 576 1968 576 794 494 576 576 576 1484", " 576 288 1099 576 711 576 1877 576 236 931 576", " 1096 1757 54 1756 872 730 703 576 576 576 1114", " 496 576 576 576 3 576 576 576 576 576 387 576", " 1610 679 576 576 1141 1070 576 576 576 576 576", " 1683 576 1568 690 1049 576 194 576 1395 576 1021", " 602 847 202 576 576 576 554 576 1924 576 1395", " 802 84 576 892 576 576 510 1168 576 576 576 181", " 576 1360 202 1958 1044 576 576 576 1835 576 576", " 1960 664 576 576 576 576 576 576 1239 1532 801", " 149 576 1507 576 576 693 576 576 1171 855 576", " 576 576 163 19 576 576 959 582 576 1083 132 576", " 70 576 576 576 543 555 47 576 500 1111 576 1557", " 576 1927 23 576 799 1986 310 60 576 576 576 33", " 576 576 576 576 576 1735 576 1730 576 1165 490", " 576 547 576 576 576 1780 1310 979 576 810 198", " 58 576 576 576 576 576 576 752 576 97 1046 1719", " 576 1128 260 221 576 1174 576 1951 1084 1072 1637", " 1472 576 576 1369 388 989 418 576 576 1178 526", " 576 608 576 576 580 1148 576 576 1469 576 418", " 1144 1108 576 1576 576 1379 576 576 1758 576 1710", " 576 576 1314 1069 1038 576 576 576 576 1929 1742", " 58 576 1934 576 529 576 1810 576 34 576 576 576", " 1313 576 205 1741 576 1846 576 1426 576 576 1168", " 576 114 1044 576 1388 576 1417 1541 576 576 1394", " 1803 22 576 1787 576 189 1400 1981 53 576 204", " 576 46 797 576 576 576 110 906 504 1282 1700 194", " 1429 1999 576 576 576 576 1983 1256 745 1566 576", " 1784 1599 576 1883 1517 1111 1179 154 342 371", " 576 576 576 1083 552 576 576 576 2000 421 1266", " 576 576 576 1403 1705 69 576 729 126 576 576 279", " 1208 260 1137 644 576 760 459 576 1868 1606 576", " 1956 1559 576 576 1302 869 1593 576 576 576 576", " 728 576 852 576 1498 576 222 1559 480 1783 576", " 576 576 1436 576 369 576 1656 576 576 576 576", " 576 576 576 21 31 622 1380 998 576 975 576 576", " 576 576 576 1175 1676 576 576 1883 760 576 576", " 576 576 1055 561 576 1320 576 112 1047 576 576"};
    vector<string> part4 = {" 576 1521 576 373 576 401 576 1446 576 576 818", " 576 1911 420 576 576 1215 770 1624 576 80 1482", " 576 264 576 1165 170 791 1282 1138 941 576 576", " 576 576 576 576 576 1231 576 1092 1147 1223 576", " 576 826 576 1498 1736 1068 323 1550 576 576 576", " 576 497 576 1322 817 576 1265 412 576 576 576", " 576 576 576 698 576 576 791 1479 576 576 576 576", " 1570 576 576 1673 1133 1699 1050 981 576 1701", " 1134 705 1345 576 1012 576 576 664 576 1126 1099", " 576 803 576 576 1608 576 631 576 499 576 892 576", " 576 576 576 1112 907 576 1968 670 576 1803 1290", " 1553 505 196 916 576 1148 354 576 576 393 561", " 576 610 576 1695 484 576 1288 576 1884 109 576", " 1755 576 1392 1018 1505 1584 576 1550 576 576", " 576 576 875 1768 576 1090 576 151 576 576 1254", " 576 576 139 576 576 576 297 576 1370 1941 1729", " 893 576 578 576 1479 576 576 576 1881 576 238", " 1698 576 576 108 576 1072 1027 576 1324 1470 1057", " 576 576 576 576 576 576 576 576 576 929 576 576", " 1445 576 576 576 576 1830 576 70 1652 1980 576", " 62 1134 561 576 455 576 576 576 10 255 374 576", " 61 576 50 576 576 760 961 576 576 576 576 631", " 1627 576 337 576 1238 576 576 1795 310 576 576", " 1652 576 558 576 859 576 1286 576 1095 576 155", " 576 881 576 1883 576 1103 576 1710 1813 576 576", " 576 1251 781 1534 1106 576 576 576 724 1071 576", " 1956 331 576 197 576 576 576 576 1549 1717 175", " 1097 231 325 576 1151 1417 514 1188 1943"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 52411;
    if(result == expected) {
        cout << "Test Case 41: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 41: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test42() {
    int numSheep = 2000;
    int maxRuns = 30;
    vector<string> part1 = {"1310 735 897 682 194 466 897 89 897 1899 897 1720", " 6 1876 1149 897 1352 897 785 897 897 897 1030", " 866 897 177 1587 229 897 897 897 897 1533 1136", " 897 897 787 1067 1016 1755 935 897 897 1127 897", " 897 143 897 125 722 334 1058 1039 1041 897 897", " 897 897 930 897 897 1441 897 1985 1799 462 897", " 1780 897 1032 897 1488 1254 897 897 968 897 897", " 897 897 897 897 897 142 897 897 43 897 981 641", " 961 106 1908 1415 1017 531 897 1983 96 1788 897", " 897 897 673 981 454 31 897 525 1891 200 1552 1187", " 897 897 1691 143 897 1463 897 897 897 897 1591", " 897 612 1839 568 883 635 1836 1527 363 961 897", " 897 897 1260 737 443 668 262 1148 897 1300 628", " 897 169 897 1187 1786 955 1154 478 369 897 708", " 897 897 897 478 897 897 897 897 1850 897 294 1436", " 897 1478 1568 897 35 1671 897 897 897 897 874", " 897 1035 1877 897 323 897 897 986 897 970 897", " 897 299 674 467 897 1216 897 953 897 897 1926", " 897 1373 1275 897 897 897 665 897 1036 897 158", " 897 652 1600 56 263 1419 1958 897 187 897 897", " 1641 897 897 847 897 897 897 1732 474 897 991", " 897 897 897 473 897 897 897 897 1750 150 897 897", " 897 1703 441 897 897 268 897 511 1349 284 897", " 364 603 1534 897 897 991 897 1074 897 894 897", " 897 897 897 897 483 993 897 897 897 897 897 897", " 336 897 897 897 522 897 897 897 897 897 897 1577", " 1888 897 1765 583 897 1491 931 897 897 891 1900", " 1807 897 897 897 738 897 1719 897 1809 897 1889", " 1517 1275 1012 897 897 897 1509 153 897 897 897", " 897 897 1597 1324 897 1459 194 1636 897 897 789", " 1194 897 725 897 1697 189 897 712 897 1306 136", " 144 897 1077 897 897 1922 897 897 897 1737 897", " 897 897 1066 897 897 801 935 712 1812 1247 897", " 897 897 1128 897 897 897 897 1110 1976 344 803", " 897 897 897 974 897 897 358 1392 897 1994 1765", " 897 1840 897 897 897 1960 897 942 897 1162 897", " 897 1898 897 864 897 843 1428 1648 881 897 897", " 1057 1922 1884 1123 159 897 1329 1060 565 661", " 1283 1397 1446 897 1922 1478 552 897 1455 897", " 224 934 897 897 88 870 652 332 897 846 1727 897", " 349 897 897 1874 897 1753 1536 897 897 1005 1673", " 1354 1935 967 337 1808 1771 370 897 897 897 897", " 897 897 1804 897 897 1761 1410 1140 897 897 897", " 654 1086 491 1613 1308 772 630 61 897 1928 897", " 1227 1361 1248 721 1897 1943 1426 897 897 897", " 845 897 897 897 897 897 1209 897 897 897 897 897", " 310 1492 897 1752 897 315 1699 897 897 1818 392", " 897 1742 1741 1333 897 897 897 897 491 897 897", " 491 359 897 493 635 897 897 897 897 1537 151 897", " 1812 625 897 47 823 897 1471 844 927 897 897 897"};
    vector<string> part2 = {" 998 897 897 897 897 897 2000 479 897 1537 897", " 897 1250 1466 897 275 1351 897 41 897 1869 897", " 897 4 180 1212 897 1716 693 897 916 897 897 339", " 343 897 897 897 1176 1062 897 140 897 897 897", " 897 273 1350 1434 897 1683 897 897 1468 897 897", " 261 897 897 897 1668 897 1535 897 897 897 897", " 1870 897 897 1372 897 1816 1850 1709 897 420 391", " 1365 1537 897 473 897 1228 731 897 1344 897 897", " 241 897 71 897 989 897 897 1276 951 1915 844 1525", " 1522 1041 897 893 897 897 897 897 750 1186 897", " 1389 1564 76 705 257 897 897 897 387 897 897 897", " 1400 1493 897 897 1398 753 1518 1328 275 1965", " 565 897 897 1453 985 897 897 473 897 324 897 318", " 897 897 897 897 1464 647 282 897 897 1321 368", " 897 897 435 897 1924 897 284 897 897 1298 412", " 897 92 897 897 1979 897 1831 802 1800 1396 439", " 412 154 897 897 1573 897 897 1637 897 897 1005", " 1641 897 897 248 1406 897 1995 897 897 1050 351", " 876 897 1265 1179 897 1251 897 897 1077 897 897", " 897 1713 897 897 1254 1553 1103 897 897 707 436", " 270 897 1505 614 897 897 791 1855 791 897 475", " 897 897 1048 722 406 904 903 897 1831 897 897", " 897 1073 897 1748 560 897 132 897 897 897 897", " 897 494 897 897 897 897 848 576 897 897 1357 897", " 897 1999 489 269 1221 1739 897 897 897 1753 897", " 897 897 897 1851 897 897 897 965 897 897 897 57", " 897 1371 1432 482 781 1293 897 897 897 897 897", " 1639 897 605 897 897 1371 1167 286 897 897 1595", " 897 897 897 897 897 473 897 759 1956 613 1692", " 1321 265 897 897 897 1828 897 897 281 897 541", " 102 897 36 897 897 897 897 709 897 897 897 19", " 897 1470 897 897 454 1699 163 900 1967 1593 897", " 798 1345 897 897 897 560 1651 1280 193 835 897", " 897 1910 1778 897 897 897 897 741 1550 1152 897", " 1026 913 1510 897 761 897 897 897 318 897 897", " 897 185 897 91 897 897 1988 897 897 1260 897 897", " 897 1710 952 897 897 677 728 260 683 897 1111", " 320 897 1199 897 897 1304 691 897 95 897 897 1512", " 897 1379 897 1687 1540 1929 629 897 897 897 1849", " 897 1390 897 897 1874 897 433 897 897 897 897", " 289 1518 63 1715 897 502 1049 897 897 109 897", " 897 881 1802 897 897 1832 897 897 1923 897 897", " 897 897 279 897 1838 897 897 1271 1353 897 897", " 897 1625 856 897 897 1435 1667 897 1146 1440 897", " 897 897 1240 897 897 897 1202 897 1288 1118 1671", " 897 1966 1955 897 897 897 897 1775 897 1886 897", " 897 1653 897 935 897 1886 897 1449 897 897 897", " 1059 921 897 897 1906 897 224 897 852 897 897", " 897 420 897 897 897 799 897 897 606 897 897 897", " 897 897 897 897 897 1113 1654 897 1296 760 897"};
    vector<string> part3 = {" 897 698 897 897 897 897 897 1603 897 897 897 1538", " 897 1818 963 696 897 897 1876 897 379 370 304", " 848 897 261 897 583 985 897 897 897 1653 897 428", " 897 897 897 88 897 1892 897 897 897 1154 168 897", " 897 480 897 897 897 65 1609 1682 1174 897 465", " 897 897 1970 897 897 897 532 838 897 674 897 897", " 387 897 897 1278 897 897 1238 1843 897 981 822", " 897 897 897 897 1720 897 712 897 897 1400 1443", " 897 897 202 422 860 1550 758 897 1066 1950 897", " 897 1891 1004 897 548 564 897 897 897 897 1649", " 897 1200 897 126 897 432 665 897 897 585 897 897", " 1857 897 897 37 1631 186 897 897 897 780 1957", " 897 897 897 174 897 897 352 897 897 897 897 1000", " 897 276 1768 897 897 397 897 897 1132 897 897", " 897 147 897 897 897 897 897 897 1215 585 897 1119", " 897 897 897 664 1366 897 320 897 897 1147 897", " 1965 925 897 69 1471 897 897 897 1993 1679 987", " 1896 1616 956 909 1676 897 1990 897 897 265 897", " 897 897 1339 1691 897 897 897 897 897 897 1115", " 897 897 897 377 1303 897 411 897 897 897 554 1040", " 915 897 897 1069 1844 897 1474 897 634 897 1113", " 1342 1305 1646 897 1699 1023 1149 1377 607 897", " 897 897 897 897 590 897 1022 1712 1047 1648 58", " 493 749 897 1091 897 1937 722 272 774 897 897", " 856 1956 897 548 64 435 897 897 897 1176 897 897", " 897 897 341 897 897 699 1997 897 1630 897 897", " 897 897 897 897 73 897 897 1779 897 897 897 897", " 897 1418 897 897 897 897 897 897 897 890 897 897", " 1576 897 566 342 304 444 1861 897 897 746 970", " 1147 1405 906 897 897 897 897 897 1688 897 1574", " 557 1950 773 897 287 643 897 525 897 897 897 897", " 897 1115 897 368 1355 897 897 113 897 897 897", " 1525 897 897 897 1150 1061 897 478 897 897 897", " 897 897 436 897 897 203 897 897 1656 1462 24 897", " 111 897 542 897 159 897 897 897 368 897 816 897", " 897 897 897 864 1401 923 1356 897 1732 897 250", " 1909 897 897 897 897 1032 393 897 897 954 1844", " 1801 107 1759 1523 538 628 1087 941 1268 1232", " 1230 897 897 710 897 897 929 486 897 897 523 357", " 921 360 531 265 897 897 897 897 897 897 897 860", " 897 897 897 226 415 1084 975 137 1940 934 479", " 113 476 236 931 1917 156 121 897 633 897 897 897", " 1919 897 897 897 897 897 897 1153 1591 897 1770", " 897 897 1992 897 1045 897 771 897 746 897 897", " 897 1581 897 864 604 897 384 897 360 897 1440", " 1457 745 782 1771 897 897 897 106 1790 522 897", " 1366 897 1681 897 1016 897 186 1431 593 1872 897", " 897 354 1594 897 897 897 129 897 703 1121 1484", " 708 897 120 897 1204 897 897 588 897 990 897 897", " 638 1056 897 897 1723 897 897 897 277 897 897"};
    vector<string> part4 = {" 1884 1976 1052 1824 885 897 1715 897 492 897 897", " 897 1864 897 360 897 897 1626 1997 897 1572 109", " 1682 44 897 631 367 735 210 897 865 93 1718 897", " 897 897 897 897 898 225 1820 897 897 897 897 897", " 1607 897 897 425 1259 897 897 897 1875 897 897", " 1332 1700 897 897 1370 1350 388 897 897 897 925", " 897 897 1331 476 1261 897 213 897 897 675 897", " 774 1105 897 897 897 897 897 897 539 1729 897", " 853 1033 897 897 1329 900 1512 897 897 897 1651", " 121 897 897 1410 1406 897 897 897 897 445 897", " 897 897 897 897 970 568 260 188 897 621 154 897", " 336 1331 897 1625 1225 897 867 1234 897 897 897", " 897 897 1267 1471 897 394 897 897 897 1225 755", " 1758 897 1385 989 1689 897 846 1531 1827 897 850", " 782 897 897 897 1243 1808 897 897 897 897 970", " 231 1168 897 1851 897 611 707 942 576 616 897", " 1784 657 369 897 1396 1443 1779 897 897 897 897", " 897 491 719 1006 290 270 1026 897 897 897 897", " 123 924 897 897 261 897 897 897 1333 532 897 897", " 897 897 897 1466 941 1905 897 1319 897 897 19", " 748 897 601 1412 897 897 1293 897 30 897 897 1846", " 406 554 1121 897 897 142 897 92 1825 897 897 305", " 897 1464 897 757 897 897 897 897 395 488 897 1447", " 897 897 265 1712 825 1138 784 897 897 774 897", " 273 897 897 897 897 897 638 897 897 1534 897 897", " 897 40 759 168 897 897 897 897 897 897 897 897", " 301 821 897 897 1080 897 897 897 897 1790 897", " 897 1619 897 1170 676 897 897 897 897 897 897"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 63614;
    if(result == expected) {
        cout << "Test Case 42: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 42: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test43() {
    int numSheep = 2000;
    int maxRuns = 30;
    vector<string> part1 = {"599 877 570 1505 1636 790 1709 1057 1256 1057 1419", " 1057 1057 1057 1057 1077 1057 47 1057 1773 372", " 1057 1057 1057 1057 1057 1153 1057 1057 1057 1057", " 95 1057 1057 507 883 1057 180 1057 1057 1057 1057", " 1161 1057 1888 219 1057 1057 1542 1142 1057 29", " 1057 201 372 1057 1057 708 872 1162 1057 1057", " 1865 1057 1057 1057 19 12 1057 1057 1057 1057", " 805 1869 1481 1731 1057 1960 1057 1057 1057 1057", " 1599 1057 177 178 1886 1057 1977 1057 1057 1057", " 1412 1057 1827 1057 996 1057 1488 1057 1057 1057", " 1057 1057 1057 77 1838 623 1057 1057 1134 1875", " 538 1461 1057 1463 1614 1057 696 1057 1134 945", " 1057 1057 1631 1057 1057 1431 1057 1057 1057 1057", " 711 1057 1057 232 938 1057 1051 857 728 1057 1667", " 1057 1488 1661 457 221 1504 867 1057 1367 1412", " 1057 1343 1057 1057 438 1567 1916 1057 1057 1057", " 1818 1057 1057 1057 1269 1057 777 1057 1057 1417", " 603 1057 1057 516 1704 1057 1057 122 1057 1057", " 1000 1061 1057 1057 1057 915 1019 1057 921 1057", " 1057 1474 1228 1057 1057 1057 119 1057 1057 129", " 1057 1057 1478 1057 1057 1057 1057 1057 1057 1893", " 659 1730 1057 1057 1057 1057 898 490 413 832 178", " 1057 1057 699 1057 1964 1057 1057 1057 1057 1057", " 1303 1057 1810 1057 1057 233 1960 1057 1057 1057", " 1057 1057 1057 1057 1412 940 1057 1057 1057 754", " 1057 1057 1057 450 1057 1057 1057 1057 1057 1057", " 527 1057 53 682 1057 1487 627 1419 189 644 1057", " 688 370 242 1057 648 1057 1057 1057 415 1057 1057", " 1057 1057 1057 1945 1096 1057 1057 1057 852 1057", " 1057 1057 185 1057 546 1057 1830 519 421 23 1057", " 150 1057 1057 645 1057 1057 862 1057 1057 1057", " 395 1369 1057 1057 1057 1057 193 1057 1057 1158", " 622 53 1057 362 1057 430 1634 1057 1057 1057 1501", " 1065 1057 1057 1057 1057 554 1057 267 1404 1057", " 1057 1057 1297 1057 411 1097 1057 1057 1057 1057", " 1057 1075 1057 612 425 426 1057 1057 886 1083", " 1057 1278 1528 1057 1882 541 1057 1057 1759 1057", " 1057 1057 1328 1057 1057 1057 1057 548 1057 1057", " 1057 957 1057 472 1057 1057 1383 1057 1057 1228", " 1858 633 1202 1057 1467 1057 1451 1057 362 1057", " 1215 462 1057 846 1108 1057 488 1057 1057 1962", " 36 1057 1057 1592 1297 1510 1057 1763 1032 765", " 918 1057 1585 218 1832 35 1057 1057 1480 845 496", " 1108 1057 1675 1057 906 1784 191 1057 888 433", " 106 699 143 1186 601 1057 1057 1057 1057 1057", " 1057 1379 1818 411 1772 1274 1057 1057 191 712", " 1057 705 136 1158 1057 1057 1120 1057 635 296", " 1057 869 1057 11 1057 1057 1262 1057 1057 1057", " 1057 1057 1057 1057 68 437 1057 1351 1057 1057", " 1057 7 1825 416 1085 294 139 1603 1789 29 1055"};
    vector<string> part2 = {" 1057 1057 476 383 786 1933 1057 1057 1711 463", " 1057 1057 1663 1957 1057 1057 1284 1057 1531 1057", " 1854 1057 1550 1057 1057 1057 1057 1057 1057 1057", " 1057 1521 1057 1057 891 1057 1057 1057 1487 1455", " 1057 1650 1057 1057 1057 1805 1057 1057 1057 1057", " 1387 1057 1881 1057 84 1057 332 1315 1057 365", " 1057 1057 1057 519 1719 1057 1057 91 1057 1057", " 1057 1057 514 1057 1057 1057 1057 1057 843 1491", " 1569 1057 1976 1057 1057 1057 540 861 1057 1057", " 1057 1057 1057 523 1057 736 1118 1057 792 361", " 1883 812 416 1103 1057 612 1057 794 1057 1452", " 1581 1258 1057 119 6 1057 1681 562 1057 1057 1870", " 1057 1188 1505 33 1057 1057 604 1057 1460 1281", " 1057 565 337 1717 1057 1512 646 1626 1057 1826", " 1628 1057 1975 597 228 1057 1057 1310 1057 1080", " 1057 1057 1729 301 627 1057 684 1057 1639 1057", " 545 1057 276 1057 1057 1057 590 1057 919 1057", " 1057 1057 1057 1057 27 1057 1057 1943 1057 1389", " 885 1291 1057 1280 1501 1778 1057 1057 885 1057", " 1057 1057 1057 1459 1057 1603 981 1959 1992 446", " 1185 1057 1057 1057 1057 1057 972 1057 1057 1586", " 883 1138 496 1057 1057 582 850 1057 1057 1821", " 1057 1057 1057 1837 1276 397 1378 1501 1057 665", " 1057 783 744 646 1057 1854 1463 1668 1057 1057", " 780 896 1057 1057 1057 1057 1987 46 39 538 1136", " 1057 1057 1401 678 1781 795 1273 1057 803 1057", " 1057 582 1057 1057 1057 1057 1057 1057 1311 1057", " 189 1057 1057 93 734 915 1057 1427 375 1077 58", " 1057 585 52 1057 1057 796 1057 1187 1371 256 1057", " 1057 152 1057 883 1057 982 596 1057 1057 153 1057", " 1057 1953 1057 1204 571 1657 1057 1057 1057 1057", " 1057 1057 1057 1057 1057 259 1057 908 1057 311", " 1057 1360 248 1057 1057 1057 1057 381 1057 1057", " 1306 407 1057 1057 1028 547 1999 1200 1057 1057", " 1141 1057 1656 301 1057 1490 1057 1745 844 461", " 1438 1057 1057 1057 924 1565 1057 1057 1057 1659", " 1057 1057 1057 1589 1057 1057 1057 1057 1946 1792", " 286 1057 767 1057 1057 348 794 1057 941 1068 1057", " 1057 1057 1057 661 880 1746 1057 1057 1244 1649", " 469 1150 1057 892 1057 1057 253 1057 572 1180", " 645 172 365 1816 1057 1057 1524 1057 1057 1057", " 386 1370 1014 518 1057 394 1113 1057 1057 310", " 1057 1343 1057 1057 1260 1057 791 1057 312 1239", " 1057 1057 1057 1057 1057 984 1487 521 89 1057", " 1057 1747 1057 1057 1556 1057 1740 1057 1057 1057", " 1057 527 1057 590 1057 1057 1556 1057 521 1161", " 1057 1935 496 1057 1057 250 1348 1057 1899 1057", " 1057 1057 1495 193 1595 1057 1057 547 615 840", " 684 1156 1057 1503 659 1057 1340 1057 1057 876", " 1268 1057 1057 1057 1057 527 1057 1057 974 1057"};
    vector<string> part3 = {" 1702 1057 1888 702 1145 1057 1057 1057 101 431", " 1057 1057 1057 1057 1057 1057 1536 1057 1506 1587", " 1057 422 1057 1057 334 1067 280 802 1057 1655", " 1057 177 1057 1057 653 239 1199 88 1057 976 1057", " 1703 1057 1057 1844 1057 38 108 1057 1057 1057", " 1057 1057 1057 1057 1222 1057 1057 86 1057 1057", " 1057 549 1057 1057 1057 1057 1404 1057 927 1057", " 1057 1057 1312 1057 1057 1737 878 344 289 1057", " 1057 1057 522 418 1057 1057 1057 916 1380 1005", " 1057 1057 1413 1706 391 1908 1057 20 1057 1057", " 1933 41 1670 1057 1057 1532 1017 207 1057 1057", " 1057 1057 1057 1878 1890 1057 1906 1057 1057 468", " 1057 1322 117 1057 1057 1057 1038 707 1057 671", " 1057 67 732 998 1315 229 1057 1860 696 1923 1057", " 1057 1038 1317 804 1249 177 1057 210 1057 790", " 1446 530 303 1057 1057 1057 1179 61 814 317 1057", " 1616 1704 541 1057 1094 1057 1268 145 1057 1057", " 1057 712 28 981 1057 217 259 1057 1225 1057 949", " 1057 1057 1057 394 1057 1057 1057 1057 1057 1189", " 1057 1057 1057 1057 758 1057 1241 1057 938 1228", " 264 1057 1057 748 1143 1724 1057 1211 1057 1728", " 1057 320 1380 212 1637 1057 1057 1057 1659 997", " 1057 1057 1057 882 1057 1057 573 1057 454 1670", " 1248 807 1216 1057 1057 1687 577 1298 1684 1415", " 1566 1057 1826 301 1065 1057 1911 1057 1057 1057", " 884 1057 118 1286 1057 1057 1057 1057 1057 1924", " 532 268 1057 1057 1057 1057 1057 1057 1057 1470", " 1057 1057 1538 1057 166 1057 1057 1057 1319 1057", " 910 1057 140 1582 932 1057 1057 1057 913 124 1354", " 898 1057 1854 1057 1457 946 1057 1934 1335 308", " 658 1057 1490 1057 1057 1057 1485 1057 434 174", " 162 1109 1057 1057 1057 1057 1270 1116 1057 793", " 160 1057 1057 1881 1492 1057 1057 536 1970 1057", " 1057 1057 1057 1057 1057 1307 1057 1912 1057 1057", " 1057 1057 37 406 1057 1057 1678 1057 1057 1057", " 1000 1057 1057 1057 1057 1057 1881 1057 1057 1057", " 299 1651 1768 1057 1057 1057 42 582 1470 1057", " 1057 1374 728 1057 1822 1057 1057 1057 1057 1920", " 1199 1399 244 1057 1105 1057 1465 1057 1955 1057", " 1057 251 1516 757 1759 1057 1057 1661 1057 682", " 1057 1656 1057 1057 959 1576 1041 1057 1411 673", " 1057 985 1057 1057 1057 1057 1057 1057 365 789", " 1347 919 1057 1057 1057 1594 963 178 1674 1057", " 1057 1057 1559 1057 88 1057 1057 1057 522 1057", " 1027 1057 1057 1057 1904 1057 661 1057 1205 1590", " 1704 1057 1944 1057 1057 97 1057 1558 1057 441", " 398 1699 1852 1987 290 1586 1057 20 1132 636 1057", " 1057 1057 1057 1057 1124 1057 963 1057 242 1104", " 1057 1109 1104 172 1887 1057 1467 1057 567 187", " 1057 102 1619 146 1413 1144 1057 1057 856 1057"};
    vector<string> part4 = {" 164 1057 1057 989 1057 447 302 299 238 1057 1057", " 292 675 1380 1057 1057 1057 1057 51 1057 1409", " 708 1744 1057 1057 979 1057 663 1057 1819 604", " 1057 399 790 1057 1057 1057 1057 1635 1057 1057", " 1057 1520 414 200 1585 747 119 1057 1057 293 286", " 1057 914 1057 1057 1057 66 1057 1057 162 287 1078", " 234 1057 106 1057 1548 1057 1057 702 1057 1635", " 1057 1057 195 1057 1057 1057 875 1057 1057 1057", " 1057 650 1964 848 130 1057 1072 59 1057 610 1057", " 1057 1057 1059 10 1057 1057 1057 9 1057 620 1218", " 312 1057 216 1379 1793 315 1057 998 1549 1057", " 838 1172 1057 1057 1184 724 1057 1856 1071 1057", " 1412 1057 1943 1057 139 1057 1057 908 1082 1057", " 974 1245 1057 1759 1057 970 75 468 1057 1057 1057", " 1144 1057 1057 1057 1057 1057 122 1057 1057 1449", " 1865 1057 1057 516 1480 1057 733 1315 989 1360", " 1825 74 1065 8 1057 1137 1057 902 138 1057 1057", " 1057 1057 1057 1057 1057 1202 1057 1057 623 1057", " 861 529 1956 504 475 156 1847 980 1057 1057 509", " 1765 477 1057 1182 685 1041 1057 1809 1625 1057", " 1057 1057 354 1057 754 265 1057 632 1057 1213", " 1057 1628 1425 1892 1057 1117 1057 812 1993 1057", " 670 1483 689 1057 1718 1096 1702 1057 1057 1057", " 1057 1057 1057 518 222 676 1358 1057 716 1057", " 835 1057 1807 1972 1790 1714 1815 1057 377 790", " 1057 984 1057 51 97 857 1195 580 219 1080 173", " 1057 1057 9 1057 1749 1057 1057 1057 1057 1057", " 1057 1057 1057 620 551 671 1927 1168 1923 1057", " 1057 1493 1057 1057 1057 1057 1057 1057 1057 1057", " 1508 1057 27 1499 1198 174 1445 1966 1057 1057", " 1057 1057 1057 554 1057 713 1057 1057 1057 1057", " 1574 1057 1057 184 1220 1057 1057 1870 996 1660", " 169 1057 1057 74 195 561 1167 753 1694 1236 408", " 100 1057 1057 1057 1522 1057 1141 1623 1636 1057", " 1057 1057 1057 1 456 1057 1057 1057 1057 1057", " 1057 870 1057 1057 1057 1057 202 538 1057 1507", " 119 1868 352 372 714 255 1943 1543 1367 668 827", " 1057 1057 729 279 787 1057 216 1057 733 202 1057", " 1245 1057 1057 1057 1057 1057 373 758 1057 1057", " 343 1057 721 214 1514 1057 1057 1057 1143 1227", " 1057 1057 1057 1057 1057 1341 1578 401 657 1057", " 1057 211 1057 160 221 1057 1057 1418 1057 280", " 1057 1057 1057 1309 1057 1017 1057 1303 599 1057", " 1195 1716 1057 1452 1788 585 895 307 766 1057", " 730 1057 774 125 1057 1057 1400 1057 1057 1711", " 1057 1534 1057 1057 1057 1394 1057 780 1057 1057", " 1811 1057 1057 723 1057 1057"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 67596;
    if(result == expected) {
        cout << "Test Case 43: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 43: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test44() {
    int numSheep = 2000;
    int maxRuns = 30;
    vector<string> part1 = {"1497 1097 274 1157 1157 1157 1806 1157 479 1157", " 1157 1157 1157 1157 1157 1157 433 1157 519 1157", " 1157 1157 1767 288 399 1157 639 1157 960 1717", " 1444 836 1157 1157 1148 1245 1157 1157 1663 1157", " 1157 1157 1157 1157 1157 1157 1349 1157 1306 1447", " 1324 1157 1241 679 1157 1157 281 846 1168 653", " 907 1961 1157 1269 1157 1220 1278 1258 548 72", " 1157 751 1282 891 1157 1157 938 1157 1157 1157", " 1157 790 1157 1255 1157 305 1157 1157 966 1322", " 1157 714 659 1950 1157 1030 1362 715 1157 1470", " 1157 1601 970 1113 1157 621 1157 21 1157 1134", " 1157 1829 1157 1157 1092 1157 966 782 1157 478", " 1157 1678 1489 1823 1157 1157 405 242 155 1157", " 1157 1854 1157 1417 1157 1157 1157 1157 891 157", " 473 1157 1157 1157 1418 1157 1157 1694 1943 1157", " 1157 1473 1871 1157 1157 578 122 1157 382 68 1157", " 177 66 1068 238 53 1157 560 622 391 682 281 1157", " 1157 1560 178 1157 1373 1157 1394 257 1157 1605", " 1013 1157 1775 1184 117 1113 364 609 394 1157", " 1157 1157 1157 1157 1586 1086 1157 1157 1157 1157", " 1157 1157 1157 475 1650 1967 1157 1157 1157 1157", " 1157 1157 1308 996 1331 1226 1241 139 1739 998", " 1157 1157 1157 1308 1157 1157 1157 1478 1157 1157", " 1157 1157 1157 1157 1157 1157 1638 1157 1157 972", " 1157 356 1157 1166 1361 1157 1157 1157 1884 1099", " 1157 1405 1157 1889 652 1808 1157 1704 952 7 824", " 1456 118 424 1157 1157 886 1157 1157 1157 781", " 1427 1822 1276 1157 1157 176 127 532 1157 1157", " 1157 1070 299 1762 1157 1157 1568 1157 1157 1157", " 1481 1157 1454 865 1061 1157 1668 442 1959 527", " 260 698 718 513 1019 1903 1157 1157 1157 272 402", " 864 1157 713 1157 1154 1157 1157 1329 1157 1157", " 394 1157 1157 1157 1157 1860 537 1157 1147 1441", " 1157 965 688 360 672 1574 1957 1157 1953 1147", " 1595 88 1157 1157 374 1157 359 1157 445 1157 1157", " 657 707 1156 863 1157 792 675 1994 942 543 1157", " 306 1157 1157 1157 1157 184 41 1660 1157 435 1157", " 572 1933 1436 1486 1157 1157 1157 1157 1157 1157", " 1593 1157 1665 1157 244 980 142 228 1157 1157", " 943 1157 466 1843 1157 799 1157 919 1157 1157", " 1157 1157 1157 1157 1692 719 1157 948 1570 1157", " 481 857 1157 1211 1833 1157 224 1824 591 1157", " 1354 449 1154 1157 32 1157 1157 785 1097 1157", " 1270 1666 402 1766 1157 1157 47 1606 588 644 63", " 1157 714 1164 1472 467 422 1157 1157 1157 1157", " 1157 1157 1589 1091 1325 1157 1946 1006 1157 1121", " 1157 1157 1157 1157 509 365 723 1157 1157 1157", " 919 267 1157 1157 1849 1466 749 570 1157 1700", " 1157 1157 157 256 1157 1157 1157 485 1108 421", " 1779 1157 1157 1157 1019 1168 167 1157 1157 1638"};
    vector<string> part2 = {" 1157 281 1157 1157 1714 1157 1157 1157 1157 271", " 385 553 1084 522 658 1157 30 1157 730 1157 137", " 1157 1720 1590 129 708 1097 1157 531 1157 349", " 570 1162 1157 135 1293 1051 1157 1157 112 1157", " 1157 1157 1157 1157 1157 1157 1157 252 1396 1157", " 1157 75 1157 501 1157 1157 1157 1157 1157 1157", " 858 1157 1660 1075 1157 1157 1157 619 1009 584", " 1157 1157 512 520 1687 1157 1157 1157 339 1387", " 1157 1157 1157 1770 629 1140 570 1157 1157 1842", " 1157 1157 1717 1879 357 1053 755 876 770 1157", " 1157 1157 1157 830 1157 1148 1804 474 1046 541", " 268 1157 98 1157 1157 1157 158 1494 1157 1716", " 573 1157 1157 1157 1157 969 1157 1970 1937 400", " 1087 1157 1686 585 1157 665 1157 1157 1522 1157", " 1157 1455 1157 1355 981 217 1157 1314 1157 1157", " 1157 1157 1157 1157 1151 1157 1011 1157 1157 1157", " 1157 1157 1344 1888 185 1157 1157 284 1157 1157", " 1562 1157 1157 1157 1935 1156 1157 1157 1844 1157", " 1311 935 1157 1157 1701 1157 1157 1157 1843 1718", " 635 925 1157 1520 1826 1157 611 1157 1157 848", " 1635 1157 1554 1157 897 1157 555 1157 858 1157", " 973 1937 1157 623 1011 1157 1419 1187 1157 1157", " 58 1157 572 1157 1422 1740 211 1731 1050 1157", " 1157 851 1157 804 1157 1157 1822 1157 1157 1071", " 920 1504 1157 710 95 1157 1157 1157 207 1157 1444", " 1157 1157 1157 791 1157 1172 207 1157 1157 1157", " 1157 1157 1157 1307 1157 1391 1157 967 1157 618", " 1157 1840 1157 1745 1157 1673 1625 1157 1498 1491", " 414 1847 45 1157 1157 1157 1157 1157 1157 1406", " 1356 1157 1157 1855 1382 1157 1695 1157 1157 1157", " 1134 827 1157 1157 1157 1157 1176 1157 885 1157", " 1157 1157 1606 1157 1326 1157 1157 100 1018 565", " 1157 1157 868 1157 1197 288 1993 718 1206 1157", " 1157 594 275 1691 1157 1157 1157 1157 1157 1157", " 1153 945 142 1157 1157 1157 1334 1672 1838 704", " 1157 613 926 1157 241 1157 426 66 1325 528 1157", " 1157 1158 770 46 234 1157 1157 1819 1157 1157", " 1157 640 1443 895 1514 1157 126 638 631 1399 1875", " 1146 1157 15 1157 1157 1157 1157 1157 751 1157", " 913 137 1333 1157 1488 828 1157 455 733 1383 1157", " 1157 1157 1525 1157 1157 59 612 1636 1157 1522", " 924 1157 266 1223 597 1157 1157 1675 1157 1157", " 1157 386 1082 405 1157 1157 1157 506 1157 1947", " 810 1157 984 139 1157 251 1157 1498 1157 1157", " 797 1157 1898 1209 745 1157 1157 1687 1157 1321", " 1211 150 860 59 1713 230 1157 1810 1816 1157 2", " 1704 1157 1157 77 1157 383 1628 1548 1491 1157", " 1157 1157 1711 1382 1157 1157 1157 1729 329 1157", " 1157 1690 1157 406 1913 294 1157 1157 1548 679", " 1158 194 1506 1157 1157 289 1157 1157 1157 324"};
    vector<string> part3 = {" 991 1457 1298 1145 734 1405 1157 27 1093 1623", " 1157 1157 1157 1157 884 1157 1157 1157 1157 1353", " 1157 1157 1157 114 1397 1157 708 1323 1157 1157", " 237 948 1157 544 1157 1807 159 1958 1157 654 1157", " 207 1157 1157 1157 1157 1157 1157 1555 1157 348", " 1157 1307 922 1157 392 1157 1157 1157 1157 1157", " 1157 625 488 635 959 1157 1157 1157 1157 1157", " 87 1157 1157 1157 1157 156 1840 78 1157 1157 1011", " 1634 1157 1157 1157 1157 1157 1867 1157 890 115", " 1157 1987 1157 1157 1292 1157 1157 113 344 442", " 1109 1267 330 1157 711 1157 108 1157 8 576 1157", " 433 13 195 1148 1157 958 341 909 1157 1934 1157", " 1157 1157 380 1157 1157 1157 1121 797 408 1157", " 810 66 1157 579 1157 1188 449 1157 1157 1157 1157", " 355 1157 1503 1451 162 462 1108 1157 835 1157", " 1157 1157 821 1157 982 123 1157 1157 1157 1157", " 1157 587 1157 1157 1157 1492 878 1861 1157 510", " 987 1157 1617 1157 1157 1157 1157 529 666 1157", " 1157 1157 1878 1157 1157 670 1157 1157 1526 1157", " 1286 320 236 1157 1157 1746 389 1157 512 1157", " 1704 1157 1157 1157 1040 1157 1157 1157 1603 1448", " 1157 732 1157 1157 1157 1157 306 1157 1157 1157", " 733 1157 1074 676 1222 1514 1157 1355 1157 618", " 1157 1157 732 1421 1157 1880 1157 1157 1157 1157", " 1157 1024 557 19 1945 1157 1157 1157 1230 592", " 386 1643 1157 1104 167 1157 1998 1892 1202 1157", " 1157 219 127 642 789 1157 1157 1157 1157 299 1157", " 1406 1157 1157 1157 1157 1157 726 1157 1817 1271", " 397 1231 594 1157 735 1157 1157 1416 34 1987 239", " 1157 1157 1157 542 1157 1157 1157 1157 1944 1157", " 1157 1297 1157 1157 1157 1157 238 1157 1157 1980", " 1219 615 836 1157 96 1978 1157 926 1157 1157 1986", " 182 537 1157 1157 1157 1204 756 1157 1157 1338", " 234 1157 1157 547 620 1614 594 452 1157 1157 1157", " 1736 1157 1157 886 1157 1911 588 1346 1157 926", " 1166 1852 299 1157 153 1157 382 800 1493 1719", " 1157 1157 1156 130 1157 1223 497 1743 1157 1157", " 1157 1157 1648 771 1157 1157 1157 1960 1567 1389", " 667 980 1157 1157 1157 1157 1720 1157 1192 770", " 1900 1157 1157 1157 1157 1157 568 1749 1188 203", " 1157 1157 1157 1157 1209 1157 516 1 441 1157 1157", " 614 1157 1157 1157 1157 726 1157 492 1903 1157", " 1157 1157 1157 1926 1157 1157 1157 670 694 1157", " 429 1769 511 1157 1157 1157 1897 1157 1573 1157", " 1157 1157 277 1157 1157 1806 1157 773 1197 1157", " 1157 1750 506 1157 1157 915 1182 873 1157 1157", " 1164 165 1659 1742 1620 1157 1157 1157 1157 1724", " 609 678 1157 1157 1157 1654 21 1157 518 1157 1157", " 893 1466 1157 249 1157 1157 1157 420 448 1157", " 1157 298 530 1157 1157 1157 1582 1157 504 1157"};
    vector<string> part4 = {" 144 73 1157 95 402 1157 1157 1157 1776 708 159", " 1129 1157 1157 249 1157 1599 1157 1157 1779 1157", " 1157 1121 220 1157 1520 1157 1157 139 1786 1157", " 1999 1157 1157 293 239 1858 1157 1157 81 1157", " 1157 1921 1157 1157 1499 1035 436 1157 1157 1157", " 585 1248 319 1157 1863 528 1157 1910 1157 1772", " 1157 1157 209 1819 275 1157 141 1157 1157 1157", " 1295 1157 1157 1157 634 1157 1157 1231 1157 1215", " 884 1255 1157 1157 1362 1535 1805 1157 1157 754", " 1157 1004 1157 1492 1165 1157 1494 614 1157 1157", " 1157 1451 1337 510 1099 771 1157 1157 1431 1645", " 1157 1599 1157 1095 1157 1157 1697 1157 371 1157", " 1157 1110 1965 1157 1968 1157 1157 1157 524 1157", " 1334 1157 1890 1862 224 1029 1157 1157 1157 1157", " 1157 992 1157 679 1157 902 1157 1771 1747 1157", " 1157 1041 458 1157 98 1644 1738 398 135 1633 1157", " 700 1157 1157 1790 1157 1888 1157 1383 755 646", " 47 295 2000 1599 702 1157 1135 382 1410 1157 1157", " 1835 1157 1157 1157 1639 1157 1882 226 1157 107", " 1269 1299 1157 1655 1157 1157 1498 1157 283 878", " 1362 1157 1157 54 48 72 1157 1157 1760 1157 1157", " 1157 1157 1157 926 1157 1157 219 1157 294 1157", " 389 1157 898 150 1970 1671 1157 1157 1664 740", " 1256 1157 1157 1157 1157 1488 1157 1157 197 957", " 542 813 821 1983 1157 827 1365 1157 1785 1157", " 1157 1157 1157 1723 1157 1157 1012 349 1157 304", " 1157 458 300 1157 1157 1183 1348 219 1456 1124", " 1157 89 1157 1878 937 484 1157 731 761 879 1157", " 615 1157 663 1157 1157 1157 1157 1734 1157 105", " 1157 1157 1993 1626 1265 825 1987 1907 1157 279", " 1157 1157 1193 1147 1157 1064 1157 1157 1157 463", " 1157 1157 1157 808 1157 699 1157 1157 36 897 1157", " 1157 1157 1571 1550 1157 628 585 1179 1157 1157", " 1157 304 1157 1157 549 1157 26 1157 1157 1480", " 1463 1157 1157 1625 1557 1157 436 1778 63 1425", " 1157 1462 1947 1157 1157 1157 113 1157 1157 1092", " 1157 1737 1612 1157 1157 487 564 1943 745 1961", " 770 265 758 1157 1725 1971 1240 1157 1157 1157", " 65 1157 1269 1088 1291 1157 240 561 1157 1939", " 1926 1157 1157 1157 1568 1157 1796 1157 1667 1157", " 1448 836 1157 1157 1157 1439 635 1999 1157 681", " 1157 1789 980 1762 1612 1157 1157 178 493 1157", " 685 1157 209 1157 1169 1157 1804 1770 1721 809", " 1157 842 1157 1157 1199 1795 1157 1352 1300 197", " 1157 1157 180 1490 1157 1100 444 1157 1157 1157", " 1137 1157 484 1157 326 1157 1157 695 567 958 478", " 1157 679 1878 1157 1216 644 1274"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 71215;
    if(result == expected) {
        cout << "Test Case 44: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 44: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test45() {
    int numSheep = 2000;
    int maxRuns = 30;
    vector<string> part1 = {"1337 128 1337 1337 1444 1185 1337 1472 1069 1847", " 1337 1337 1410 39 1012 1337 1176 1337 1337 1337", " 286 1958 1706 1337 1337 1337 1202 1337 1469 1157", " 1337 1337 1337 1337 1337 1337 1107 1337 1337 1223", " 1337 1337 375 1871 1337 783 1104 1337 1495 1337", " 1337 1337 1337 137 1337 1184 1337 1833 1337 1345", " 1337 255 1280 1337 652 1787 1337 1337 1531 965", " 1337 626 680 687 1327 1337 1051 1838 359 520 1337", " 1849 549 1529 1306 436 1337 1337 208 1046 1337", " 1004 1337 1337 1337 1139 1337 1859 1337 1372 1337", " 1337 1337 1337 439 306 1337 1337 521 728 1524", " 1035 1337 446 1091 181 1337 856 1337 1992 582", " 1229 1289 441 1337 1470 1509 1205 1337 600 125", " 1337 818 1337 746 42 1337 402 356 1880 1337 181", " 1337 1012 348 1337 1096 1231 238 1337 1337 608", " 869 1337 1337 1337 1337 1337 1507 1337 507 1777", " 292 1337 1337 923 1337 1337 1508 1337 330 1337", " 314 1337 112 1639 1614 1956 1153 1337 779 1337", " 1549 1337 1337 1035 1337 1337 1337 1337 1970 1003", " 1337 1660 686 1572 752 274 101 1337 49 41 1337", " 91 1337 1863 1337 1780 1337 610 1337 1836 1337", " 679 520 1168 1337 702 1337 1380 220 591 494 630", " 1384 1337 1337 1750 1337 881 1610 1337 1055 1337", " 450 349 543 1670 609 1337 1851 409 1337 1565 1337", " 1337 1695 1798 756 1337 1337 1337 1567 1337 1337", " 1337 1442 1532 1091 1337 1337 1239 1337 1201 1511", " 1337 1337 1337 1337 775 1512 1337 1337 1337 1337", " 1337 718 366 1337 926 775 1337 1337 1337 1337", " 1337 1116 1337 1337 1722 1337 1337 1337 1337 1325", " 1337 1337 1744 1337 760 1337 1337 178 1337 1337", " 659 1337 1635 1337 1337 1804 1337 1337 738 208", " 1983 469 1337 1834 6 753 1348 1337 1337 441 1337", " 1443 684 980 554 602 1462 1337 1337 203 1337 621", " 1337 1337 1983 1971 70 1403 1337 1337 1770 336", " 1170 1064 1833 1337 1337 205 1337 920 1075 956", " 658 1337 1337 1280 1337 874 1987 485 1337 755", " 1337 175 1337 1337 1337 1337 1337 1814 1997 1337", " 450 1337 1337 1337 1605 1486 1337 1337 205 1337", " 795 1337 177 1337 1337 1337 224 1337 1094 1337", " 1337 1337 82 1530 1337 1337 550 297 1439 707 1337", " 1337 1337 609 1337 1337 1337 1337 564 1094 1337", " 1337 1059 1337 830 1834 791 55 1337 1337 1741", " 1337 731 1016 1623 1337 126 791 1767 1947 1337", " 1997 416 1337 1771 1040 1337 321 179 1337 1337", " 1173 1230 55 979 1962 1337 1337 726 1337 1472", " 1337 1337 1257 1337 1337 1337 1337 277 1691 1449", " 1337 1337 1337 1248 1337 248 1520 1337 1337 1337", " 1337 1428 1249 1337 559 1206 1337 599 1337 1139", " 1337 1337 1337 1337 1337 1337 1223 288 1341 1337", " 1284 1983 975 1337 1725 1337 557 356 838 1337"};
    vector<string> part2 = {" 1492 1337 1041 3 1337 1337 180 450 1337 1682 1008", " 1337 1337 1337 1890 1222 1337 1337 553 1337 639", " 287 1686 1233 1337 1156 1394 1337 1337 780 185", " 1610 1337 1223 186 1337 1337 1337 1337 1337 1337", " 772 1341 1533 1337 1591 805 1337 1337 159 1819", " 1337 1334 1477 1337 1337 29 1337 1337 1337 1337", " 1337 1337 371 1337 1337 1337 1337 433 1337 74", " 1337 1337 1337 1337 919 1430 1337 113 1337 1337", " 1337 1337 1337 513 1755 1337 708 673 1337 850", " 1337 617 1752 1631 1768 1474 86 1337 1843 1337", " 851 1337 1337 1951 603 1337 1337 1337 1337 75", " 1423 403 770 1337 930 1711 1337 1337 1337 1699", " 1337 1242 1337 1337 1337 1337 180 110 473 545", " 1337 713 1881 1337 945 1337 1337 700 84 1337 1337", " 1337 1993 1337 577 1337 1337 1397 1337 1337 1337", " 721 416 1337 1350 1140 804 1337 561 1337 1337", " 1799 1185 1337 1006 1337 1337 1401 1337 967 1230", " 1337 1878 1120 1337 1337 1428 50 56 1072 1337", " 533 1892 1337 1337 1337 499 1337 107 1337 529", " 868 1613 626 227 440 1337 1337 1599 1337 419 1089", " 27 257 130 1337 1337 1337 1337 1337 1337 951 1337", " 108 1337 1038 1337 1640 541 1337 1337 289 1689", " 1337 60 1921 1334 1673 1337 1587 1337 1337 1337", " 1337 1337 1886 1337 1337 1337 1337 1601 1337 1337", " 1337 1511 1337 69 1337 1779 1337 1777 1392 1721", " 1337 1337 1337 1337 6 1875 1337 1337 810 1916", " 1131 75 1337 1337 1337 1521 1295 1337 1337 1337", " 1336 1672 428 1337 423 1337 583 1337 190 878 1962", " 633 1337 1337 1202 308 1025 1337 1337 1337 312", " 1337 342 1337 1760 1337 1474 956 1337 637 1337", " 1337 1807 716 1483 1337 529 1337 1337 1337 1781", " 704 1337 1337 1337 937 68 1337 1420 1337 342 1337", " 1337 1337 1018 1337 1815 1337 1337 882 1883 1871", " 403 1337 1337 1337 1337 1299 1337 1337 1342 1337", " 1337 1337 1337 1337 1476 1337 626 281 702 206", " 1337 1337 1867 1101 1765 1337 1337 1337 1911 1337", " 15 686 1337 1169 1337 199 1276 1337 57 1740 205", " 1337 894 1337 1762 1850 1337 1337 487 336 1337", " 451 1838 674 1337 73 411 1226 1337 1479 1337 1337", " 1337 1337 322 954 171 237 1337 1337 1337 1062", " 1337 1337 113 419 776 1337 1923 1337 1337 1337", " 1337 19 1337 1337 1337 1337 1337 1337 1199 1337", " 230 1337 1337 1015 1337 1337 1215 1337 299 1266", " 829 1337 1337 845 1337 1337 698 1722 1337 1337", " 1337 1680 1556 1047 1307 1337 122 1337 233 1337", " 914 629 1337 1817 1337 1221 1337 1337 1695 1337", " 1337 1337 776 236 1337 1337 554 503 1758 1823", " 1337 1337 1199 1337 1337 1337 1950 207 1337 1337", " 1337 1337 1337 1914 1337 1337 1337 122 590 1337", " 1337 1836 876 1712 1337 1337 1552 916 312 277"};
    vector<string> part3 = {" 1337 1337 1337 1337 1672 1561 1337 1337 1337 1337", " 632 728 1337 1337 1337 1786 1337 363 1337 1337", " 1337 1508 1337 1337 1337 394 1337 1898 1561 1882", " 1337 1337 404 1849 1337 1919 739 161 1337 138", " 1343 1337 1540 1337 331 1337 1337 1337 124 1337", " 1374 1229 729 723 1337 1337 1337 1337 1071 1525", " 1513 686 1337 1337 1337 1899 1337 5 1337 1273", " 1337 1674 606 957 1337 1337 857 1834 1337 583", " 1337 1337 1337 1337 102 1337 1337 1337 1059 883", " 1337 1060 1337 1337 1337 1337 1337 426 1337 1337", " 1337 1337 199 1337 383 1821 1513 1337 282 482", " 1337 651 1337 1337 1924 1337 488 981 1337 124", " 1102 804 1080 464 1337 1963 222 1337 1337 1337", " 1337 1337 1337 1337 922 1337 1078 986 1337 452", " 1337 1337 1337 1337 1337 1337 300 1337 1337 1337", " 1479 1337 1337 1337 543 1337 1337 1877 1337 1337", " 34 1985 270 1364 1337 1473 1603 595 1199 1337", " 1337 831 48 1999 1924 1337 897 406 1337 1544 1337", " 1337 741 1232 1337 1337 1337 1337 1838 1076 1337", " 1704 1337 1337 1337 1337 558 1337 1337 1337 1337", " 329 1765 1293 1337 1337 549 1337 746 1359 1342", " 716 1337 1051 273 1337 1337 1337 1337 1337 123", " 807 1849 1337 1337 1275 1686 1381 1337 1705 1337", " 1337 268 1337 1337 1337 1227 1337 1366 1337 59", " 1337 1959 977 1661 1231 438 831 1337 1337 1337", " 1337 94 1337 1337 1337 1337 869 1337 58 238 1337", " 1337 920 1337 1429 1337 1337 1337 839 783 1337", " 1606 1140 1337 1337 1312 1863 1337 1337 1337 1337", " 154 993 1337 698 1443 506 1337 1384 1337 1337", " 1337 1337 1348 1337 1337 1337 1337 1452 1337 1337", " 1397 1337 1106 1337 93 1337 1337 1337 1337 473", " 1337 612 833 1337 1337 1337 9 1337 2 1337 1337", " 61 463 1337 17 809 1337 1337 1337 1615 586 1971", " 1337 1719 1337 1541 459 1913 1476 1337 1337 458", " 1774 1337 1337 1337 1906 1337 192 1337 1337 1337", " 1566 319 1337 616 1337 202 1624 1337 1337 1326", " 1337 1442 1337 361 849 1337 1721 1337 1337 1337", " 1337 1424 1797 1337 284 1337 1337 1116 1337 1337", " 831 1337 1337 1337 1337 1337 1337 1337 1337 1337", " 328 1381 1131 1337 1387 885 5 1337 92 1187 1337", " 1699 1337 1337 1315 1337 1617 1431 881 1337 1337", " 1337 1337 1337 1337 1401 1337 1337 1337 1337 1337", " 1047 1097 1487 1859 1337 1337 47 631 1337 665", " 1248 1337 199 1337 177 1337 973 1337 1307 941", " 1337 413 1185 170 222 1337 1107 1337 915 1337", " 1683 1337 785 1289 1337 206 1258 804 1337 1593", " 1337 1337 1337 1171 1337 407 1444 1337 1244 1836", " 641 778 1337 1337 1337 1337 360 1337 1337 1139", " 1337 1337 1337 922 1337 1337 1054 1337 1337 492", " 914 1337 1337 1337 1337 1621 1337 1337 1469 1337"};
    vector<string> part4 = {" 1337 1337 1337 1337 753 1337 1674 1337 1797 1337", " 1337 1104 1337 86 1337 1337 34 1337 1337 1110", " 1337 1337 1337 954 1267 1337 1337 1377 177 224", " 1337 1483 1957 1337 914 1337 1748 1337 1337 1337", " 1337 1213 1337 1337 1337 1337 1337 1969 1337 1337", " 1337 1337 1337 492 1337 1337 542 1337 1337 1337", " 1198 1558 1001 1562 1337 218 1744 1095 327 563", " 1337 648 867 1337 1337 1600 1337 1798 1354 355", " 1337 1337 1337 1337 1802 1428 1337 203 961 1337", " 1337 1337 1144 1144 1337 1337 1337 1764 1337 1337", " 477 1172 363 1777 262 1447 686 1337 858 1337 1337", " 1337 1181 771 1337 1337 1337 1337 922 1337 1337", " 1337 1337 1337 1223 1337 786 1337 1337 1337 499", " 1337 1337 1110 85 1337 1337 1713 1337 1337 1337", " 2 1035 1265 1337 846 1337 1337 635 1831 1337 509", " 1337 1110 1337 368 1337 1337 1337 1337 1635 1337", " 1337 1337 1337 1630 1337 1337 71 1337 1162 123", " 1054 1337 222 1337 1554 1337 1337 1337 1337 1337", " 1353 814 1337 1651 1337 412 1707 580 1337 1337", " 538 1337 1337 497 1337 1337 1337 930 1337 1587", " 1337 1337 1833 1337 1337 1337 1337 1561 1337 1337", " 1337 1164 1337 1529 1337 554 1337 1337 1689 1337", " 183 1756 1337 41 263 1337 1924 1337 1194 161 1124", " 1337 52 22 1221 1337 32 1151 656 1536 1337 1337", " 163 871 1851 1337 119 72 1337 1337 1337 1337 1337", " 1337 111 1337 1715 90 88 473 1337 1626 1337 1337", " 1337 678 708 1337 1337 1337 90 604 1365 163 1337", " 1432 1337 1644 1636 1762 1337 1391 1337 1337 1337", " 1451 1337 1588 931 692 1882 487 1337 269 902 855", " 1190 1457 1199 1337 1337 1337 1610 433 1337 289", " 1337 1337 1337 1337 142 1337 1337 917 1312 1337", " 1337 258 1578 1296 1337 1639 1343 1491 1337 1337", " 1337 1337 1159 1654 1337 1374 1337 1337 1337 1175", " 1337 1405 408 1337 1337 728 1530 501 251 1261", " 695 313 1337 341 1337 1337 1346 1337 1337 1337", " 1979 1337 1177 1429 453 257 573 624 1274 1047", " 1338 883 1337 731 1337 1337 1337 1526 150 1337", " 1348 1337 724 1337 1337 1337 1337 1337 1849 1150", " 1337 542 1337 1337 1337 1337 1337 1298 1337 876", " 1337 1337 1337 1337 1337 1337 1337 1337 214 72", " 70 506 1337 1584 1337 1337 1963 1337 1337 1337", " 839 1337 1782 1337 1337 931 1541 1337 1337 672", " 1337 1337 1495 1337 1337 1337 1337 461 1955 1378", " 1337 1337 1337 1337 1337 1337 173 1824 1231 1337", " 1337 1337 1337 1337 1337 1337 103 1489 1399 590", " 1957 1337 1337 1337 1337 1782 1337 1337 1337 1337", " 1337 1337 701 1427 99 1543 606 1584 1337 1337", " 1337"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 77892;
    if(result == expected) {
        cout << "Test Case 45: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 45: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test46() {
    int numSheep = 2000;
    int maxRuns = 30;
    vector<string> part1 = {"1815 802 112 600 1667 1667 1696 1853 1381 770 355", " 1667 1809 230 1667 1667 1667 42 1483 1148 1522", " 122 1667 1667 383 1667 1667 1667 911 1667 484", " 1667 1537 907 1667 777 972 1667 1258 561 992 1667", " 1667 877 156 1667 1667 1667 1667 1146 1667 1667", " 1882 1782 137 1667 1905 1573 1667 330 1667 1667", " 1667 1333 1254 88 1440 1667 1667 1667 1667 111", " 1667 1175 540 388 1667 1586 1667 693 1647 1667", " 1667 1667 1667 1667 424 1667 1934 1667 1667 1713", " 1667 795 1820 396 1113 1667 1667 1667 756 1143", " 1667 328 1667 1667 1300 551 1594 1667 1667 1667", " 1226 1667 1667 664 294 1797 1667 1667 1667 1061", " 268 672 1667 1667 460 1667 1667 1667 426 675 344", " 1441 1804 1897 1064 1738 1667 1667 909 1667 393", " 1667 1667 1667 1667 1667 861 953 618 1550 1667", " 1667 221 1729 1667 1667 1667 768 359 1371 1537", " 1667 115 1681 1110 1667 1550 1667 1667 511 1667", " 857 1686 225 1667 1498 1842 1028 1842 1667 1667", " 1667 235 797 1616 8 1667 1667 1667 1667 1614 1667", " 1667 1667 1667 1667 603 1135 1022 626 1667 782", " 1667 1667 1667 1667 1667 928 97 1385 1538 1667", " 1827 1667 1938 1667 1667 794 1635 702 1667 204", " 1667 1667 1667 1667 558 1135 1985 1667 1667 1288", " 344 321 895 277 684 1732 348 1667 1667 1667 1598", " 4 1667 682 1667 1012 797 1667 1667 1013 383 1533", " 1667 1667 604 1667 1667 1358 1877 532 1667 1112", " 1274 1667 1667 169 1667 1973 1537 527 202 1600", " 1667 1274 1118 1667 1667 701 890 176 1482 1667", " 1667 1667 394 1967 1754 33 1118 1237 1667 1843", " 1667 688 1667 541 1495 1819 1151 1760 1462 1667", " 1667 1667 841 1667 241 1667 634 1592 1667 1667", " 1667 1667 1667 409 1909 1667 1917 1201 1667 1219", " 554 1667 1667 825 1969 1667 1950 1667 1687 940", " 1667 1339 1667 1593 1128 1667 1667 1235 1113 1667", " 1213 858 1667 1667 783 1667 1667 1667 1162 1667", " 1061 42 524 1964 199 669 216 1667 100 1667 23", " 1451 1667 1667 603 1752 1667 1667 1667 1667 448", " 1667 282 1377 423 1667 548 1667 1667 707 1499", " 1667 1667 1667 475 1667 1667 1667 1203 1667 1667", " 1667 1667 1858 1667 309 1667 433 1667 1667 516", " 1667 1528 1667 1667 1667 1307 1667 1795 1667 1667", " 1284 124 1855 1667 228 996 1667 1667 1667 1667", " 1667 316 1667 306 1667 1667 1473 500 171 1667", " 1667 113 436 1667 520 527 1667 1667 1667 1003", " 1667 169 1667 1667 1667 1200 128 1458 1959 1199", " 1864 1827 412 1667 1667 1667 1667 583 333 1152", " 387 477 1667 1667 1667 1968 1496 1667 1667 1026", " 1667 1926 1667 1667 327 1667 1667 1667 936 1902", " 1185 418 1667 1667 1762 1669 749 1667 1495 1549", " 1667 1667 1576 1667 192 1229 1667 1667 1576 1667"};
    vector<string> part2 = {" 1667 101 1667 425 1667 1667 134 1667 1667 625", " 1307 1823 473 1667 1667 431 1723 1525 1200 163", " 1667 1667 1667 1667 111 310 1648 1667 1667 324", " 1667 804 1667 1667 1667 1667 1667 1667 1341 1667", " 1667 794 1001 1667 1667 1052 1811 1667 1667 1667", " 761 1667 1667 1217 1667 529 25 91 1667 89 1667", " 445 1667 1667 1050 1284 1667 417 1667 67 1667", " 1667 740 220 1667 1667 1667 357 374 1667 1180", " 485 1667 1667 377 1667 1667 1739 1667 1812 925", " 1667 1667 1667 1667 1667 1598 1209 1667 656 260", " 1612 731 1575 1667 1667 523 853 1959 1667 1686", " 1667 849 1208 1667 1667 1667 101 1364 1667 1667", " 1667 410 1667 1667 65 1667 1016 1667 1667 1667", " 1678 1667 1058 1667 1667 1667 1667 1618 1667 1667", " 1589 1667 974 1998 611 1827 1667 1012 956 1667", " 1229 1242 1504 1460 1250 1415 1667 1667 1730 931", " 1665 1667 1667 1087 1667 1667 1594 554 1667 1667", " 1667 813 89 1667 1667 612 735 1667 1667 196 1667", " 710 1667 1667 1667 1667 103 3 777 1252 1667 1667", " 1061 1667 1667 1667 1667 1894 1801 934 1623 1667", " 237 1667 629 1667 1667 1667 1667 1667 1667 932", " 1836 419 1667 1667 1893 1364 125 948 1667 1667", " 1418 1667 1667 1958 1143 1667 1667 1667 1667 1667", " 1667 1875 1643 538 59 1667 1756 1667 628 1667", " 1667 1479 1667 1667 1667 1667 1524 1715 444 1667", " 1667 311 1667 292 88 1698 1667 1743 1333 1667", " 1709 1667 1116 1667 1667 380 726 1667 133 1667", " 1559 1667 924 1857 1667 735 1857 617 1667 241", " 1667 1854 377 1332 95 1796 873 1667 1667 1663", " 1667 757 345 1667 1805 824 1667 1667 554 1667", " 623 1667 1667 1667 1138 1003 1667 1667 1428 856", " 1667 440 1667 1667 1667 940 1667 1942 1667 1265", " 533 1667 1667 1667 1667 1667 1667 1667 413 1667", " 1667 307 322 344 1667 1282 1667 1667 950 1667", " 1667 1380 1406 241 1667 1688 1304 1667 1667 1930", " 579 1667 1667 8 1667 876 363 1882 1667 1667 1667", " 1667 1851 1858 742 640 1667 667 1667 1667 1559", " 111 1706 1667 1591 1667 1667 2 1667 86 424 1667", " 1667 1667 1667 378 1667 1667 1667 938 1667 772", " 1667 1667 1667 1667 1667 1667 1667 1667 1667 1667", " 683 59 620 1655 1868 1667 716 1667 648 1667 573", " 1667 1667 1667 1631 124 1667 245 1718 1943 1667", " 1667 1943 1667 234 254 1667 1682 1803 1667 1395", " 1202 1090 1667 1847 431 1667 252 1126 1667 1667", " 1674 1667 763 1667 1667 417 1667 109 1569 1231", " 1667 461 1667 150 1667 1667 318 1667 1417 185", " 1667 183 212 314 1025 1667 1626 1667 1667 1667", " 1667 1168 253 1667 1667 282 11 1667 1667 1667", " 1667 1667 735 1667 1404 822 1910 1875 1964 1667", " 1667 1315 1930 1285 1667 91 1667 567 901 1667"};
    vector<string> part3 = {" 1023 1231 1667 187 614 1667 373 1667 507 817 1961", " 1667 1667 1550 1834 851 1667 229 1520 821 1667", " 375 1667 1334 1667 650 628 1667 680 519 1524 1667", " 1279 1751 1667 1667 1682 1059 1667 1667 1667 1667", " 1069 1667 1763 1667 1496 921 1222 841 1667 1794", " 1667 1667 1667 215 578 1667 838 1667 632 1057", " 1667 1556 642 1667 1508 693 480 1534 311 1667", " 1715 1667 545 1679 1667 1667 811 597 1667 1667", " 1667 1667 1667 1667 1667 1760 1667 577 1667 1509", " 1667 1323 1464 1667 1300 855 517 1241 1667 1667", " 1667 1667 1667 1667 492 1978 795 1667 629 1369", " 1667 149 1667 1845 1094 1667 783 658 1667 571", " 1667 1667 1667 767 1667 1050 700 1302 1667 1667", " 1667 1667 1075 1667 1728 1667 1240 1667 1667 1667", " 1667 613 1667 263 969 1667 1667 1502 1667 1667", " 419 100 1667 202 1667 1518 25 174 1372 1667 1232", " 1423 677 1667 1914 1667 1667 1732 1667 410 957", " 1667 467 62 1698 1067 1607 1667 1233 732 1667", " 1973 1667 1708 1667 569 1667 1667 1667 343 1667", " 1667 1490 149 1667 60 64 1923 1417 1667 777 1667", " 256 1667 61 1667 1667 1667 1667 1667 996 1398", " 1563 1139 1667 1667 1667 1667 207 1667 1781 75", " 1667 305 847 679 1667 1667 64 1667 1667 1723 1667", " 1667 798 1667 1065 101 143 1667 34 1939 1667 1815", " 430 1973 871 1277 430 85 1667 378 1667 234 1667", " 439 1667 1667 1099 1077 1787 1667 1667 1667 940", " 1274 799 161 1667 321 1667 1667 1667 306 1356", " 1667 1310 925 1667 1667 731 1667 1999 1667 1667", " 1667 1112 1667 52 1667 637 327 1667 1667 1148", " 1667 1667 632 1738 939 1311 1667 1191 1056 1667", " 1667 1667 1667 269 205 1292 1667 1667 1667 1667", " 1667 1219 1667 1992 1667 1523 1667 1667 1667 1667", " 623 1667 1645 1939 1667 1255 1165 1667 355 1667", " 760 1667 898 1836 1667 1667 1667 1667 1667 1667", " 1453 1932 1667 1667 492 1667 1088 1667 1667 1667", " 1039 1667 1667 1900 1397 997 1667 1667 532 893", " 597 1667 1667 1667 1164 1667 1667 1667 1667 1667", " 1667 1667 81 1667 16 174 1667 1667 1667 1960 77", " 1667 598 1667 478 1667 1667 1667 1143 1667 1667", " 786 656 1667 941 1667 1667 1667 1667 1367 292", " 353 1667 1667 222 566 1104 1667 145 1667 1667", " 1667 1355 115 1667 1667 1827 1405 1667 1291 1703", " 1364 1336 1640 688 1667 787 1667 540 1667 1667", " 565 1420 1840 1667 1667 215 1667 1244 1667 875", " 355 1667 1667 1667 1667 1667 1667 1667 1039 571", " 1667 1667 850 1667 765 1135 1667 1053 1667 482", " 320 1237 1667 1430 1667 1007 1213 897 1667 1978", " 536 1667 1667 1667 1685 1667 852 594 1667 1730", " 1667 787 1236 1306 1667 946 12 1667 193 1016 509", " 1242 790 1625 1995 561 1636 1667 349 1667 139"};
    vector<string> part4 = {" 942 608 1667 156 10 1667 1982 149 1667 1667 1707", " 1667 1667 1667 1667 1667 34 1667 506 372 1366", " 1667 1667 760 1850 1667 1870 1236 724 1667 1667", " 1667 1148 300 1667 918 1667 708 1667 387 1650", " 1667 1667 1717 1667 745 245 1667 181 852 729 1009", " 481 707 1667 1667 1667 1191 1044 1667 1667 1667", " 1667 1568 1667 1072 1310 1100 1755 1667 1667 1667", " 764 1901 1443 1667 1667 5 1064 274 1667 784 1667", " 1667 1579 1972 688 1175 943 1426 1032 579 1667", " 889 1667 812 701 404 1667 1667 1400 1667 1667", " 1667 862 1667 1667 526 1131 1667 1264 1207 531", " 1667 1667 1155 210 1667 1054 1667 1990 1667 1667", " 728 751 1083 1862 1469 1667 937 1667 1667 1667", " 833 1158 550 1228 1667 1667 1260 498 1667 20 1556", " 1667 1667 1582 1667 151 1667 1667 1667 1667 1667", " 1667 247 1667 1619 1135 93 1720 1004 1534 1667", " 1667 638 903 965 1667 1667 1667 742 1667 1667", " 1667 742 1667 1667 1667 1667 1667 783 106 1667", " 1411 1344 1099 1667 1667 1667 1667 771 57 1667", " 1526 1037 1667 1667 1667 1667 1667 1667 1543 1667", " 1695 1667 1340 1211 1667 1667 1667 350 1667 1667", " 162 1667 1348 563 1667 371 1667 1667 1667 1237", " 170 1940 1667 655 2 1557 1667 1667 1667 1667 567", " 184 1667 1667 1667 1667 1667 1667 1839 1667 228", " 1667 1896 604 299 406 1667 58 1667 367 1241 1730", " 1667 1667 1951 1667 726 700 1667 355 284 40 1667", " 1547 1667 1667 1866 578 1667 1667 1667 1667 1485", " 1667 1667 1667 1667 1667 1667 1228 1667 1667 1787", " 445 1667 954 666 319 1667 1667 1667 1667 776 1667", " 215 1667 1667 1667 1667 1827 1667 1667 432 1667", " 1772 1180 19 1667 495 532 589 555 1181 1152 1667", " 1667 1898 1667 1667 1324 510 1667 1935 542 128", " 547 17 1667 1503 989 734 352 1667 964 1313 1283", " 1924 1667 1667 1667 1263 1667 1667 1412 1152 1667", " 1799 1667 1743 1667 1667 1250 1667 912 1667 169", " 1140 1667 1393 1667 1667 1607 1667 1667 49 1667", " 1636 1853 1667 1635 1667 1667 1067 1667 1127 1667", " 1667 496 1843 1667 1667 1667 1709 244 1557 1667", " 42 936 1667 1667 1667 1963 248 1667 16 348 1667", " 610 1667 1325 1667 1667 466 1667 1667 1667 421", " 1979 1095 1667 715 1667 1667 1667 341 296 1400", " 724 1667 1439 603 1667 1719 362 1667 1667 1667", " 1609 1066 700 1474 584 1667 69 1667 1667 1667", " 1667 1667 1667 1667 119 180 1667 1667 416 1667", " 1487 1667 1667 1667 1667 1667 1667 1667 1667 1667", " 856 1148 1667 1961 1667 1667 1057 1667 730 1121", " 1667 480 784 432 1667 1826 437"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 87188;
    if(result == expected) {
        cout << "Test Case 46: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 46: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test47() {
    int numSheep = 2000;
    int maxRuns = 133;
    vector<string> part1 = {"188 21 188 1 587 1 1 1 1660 1 1345 1 1513 613 161", " 1 1 474 1357 74 1 1352 1684 1603 817 333 1974", " 581 1 1633 1701 1 1 719 1498 1 6 1 1 1 1224 1575", " 1 858 1 1 98 1 1 1940 1 1 295 282 579 1 1 1 1909", " 1 660 1 1685 124 1455 1 1902 1 1 1 1848 986 1493", " 1 1 372 1 903 1 1 1 1 1 1193 1553 1 1 1 114 1299", " 1 1476 733 459 1 231 657 1 586 1161 215 174 1672", " 1 1 1667 1 1 1 691 1 58 137 1 644 1113 177 1284", " 9 1 1 1619 358 1 998 1 1 1 1 1 1 1000 113 1 1", " 1 1416 50 270 1 1 479 400 1771 1 1 1 209 72 1", " 1 1602 1 1 1 1 1 1 1 1 1353 1 1065 1 1 1 1 1 1", " 1 1 1333 1303 1603 1 1 1 320 1 1 1 1 1703 1309", " 840 1088 444 311 1 1 1 1 1 63 982 1 1 1 355 1433", " 1053 1 1091 1715 1 293 1 1492 1 1864 1 1 1 1 1", " 1 17 1440 1 1 1512 1 1531 685 1349 1 1 374 1914", " 1 889 1664 1 659 1677 1 1 1 1 143 1 1 1186 391", " 740 1852 1 1 1086 1 63 1410 1 1 1569 1 111 955", " 1 1 1 6 1 1 1 1563 1597 482 1136 1 854 1 1 1620", " 1330 804 1 1123 1 1985 1 1 812 334 981 1 959 1", " 1 1932 1615 1147 1562 1 1756 1 500 1 1768 877", " 1 1614 1 1 190 1 1112 65 1 1 3 1 1 1 1 1 1094", " 306 1 1 1 1291 1 1 1 286 1 1 1158 942 1 1 1 1", " 1 1 1 1 1 851 1 1 1196 1937 1005 959 1 1 1 1 1", " 1 1143 1 1 1204 1962 1 1128 755 789 1548 1065", " 1 1943 608 1677 1 174 1594 1 1 187 465 887 1 1", " 526 1 1253 1 1362 1 1622 77 1066 1933 1 1605 1688", " 87 201 1396 1 1760 456 1288 1 1 1 1 1 1 1 1 61", " 563 103 1 1 692 480 1 1 1468 211 1 1 242 540 1321", " 1 1 1 1773 1 1 1 1 1 1 577 1424 1 1 365 290 1", " 1 89 1 1682 597 1 1 1 564 5 1185 1801 1 1 1 1", " 1459 1503 1982 1 539 1 1368 296 1289 1277 401", " 1 1 30 1 1 1707 1 191 355 1 1 475 367 866 1309", " 1 1250 1 1 1 1 1056 1 1 943 217 1 1650 640 1 1297", " 598 1845 1 1668 1327 1 1 1603 1 1 1315 714 1 1", " 1 1424 185 1 1 1698 1274 1 1 1 1 106 2 1 835 1706", " 1 122 1872 1 154 1137 340 1 1 1 1 1470 1 1 1 1", " 143 1189 1034 1 1 1 1 1175 345 1 1 1833 855 1105", " 1090 1534 1 105 1 594 929 822 1 1896 1 1369 513", " 1562 1504 1 1 227 1 1675 1 1 1 485 418 1 834 1256", " 1052 1 1 1 65 1112 1 1 1 1 1 1500 1 670 1697 1", " 1004 1 556 1 712 923 1 1 1 1 1 1 1509 648 620", " 1 182 336 1 1 1 1 1620 668 1394 1785 1 1 693 1", " 997 1589 1098 1 39 1 1 1588 1 872 1 94 1 1 1 461", " 1 638 1488 1807 1 1922 1 1 1 1 1673 855 1 1 1", " 165 1112 431 1322 1 671 1 964 477 1 760 1 1 1", " 1084 1 1758 1 1 1 1 1 723 1 679 1 590 1 402 148", " 1678 233 1 1 1 544 1281 1174 1 1 18 1 1 1 341", " 737 1 1775 1 1 1 1 603 986 486 409 1140 1 1 129", " 1 1 1692 892 937 1 1 1907 769 150 351 1116 1 1", " 1 388 1240 1838 1 377 1 1 1 1 491 1 1365 1426"};
    vector<string> part2 = {" 1 1435 1 1 10 504 858 1985 712 1 1619 241 549", " 1127 1344 1319 1453 1 1922 1 62 765 1047 1 217", " 1666 1821 1616 1 1509 1213 1518 1 780 1 1531 507", " 811 1 1984 853 372 307 1 1 1 1 122 415 1801 1", " 1141 1746 1 1 1 1 1 1 679 1 1727 1 1 1956 1 1258", " 1 1175 1 1 1 1335 1 1 1 1 1 1 674 1 511 1431 1", " 1 1 1 1 97 1 518 1361 1 1 296 1 469 493 612 55", " 187 1 1762 823 1569 1 1 1 1544 1 1838 662 1 1987", " 1 1 389 1 1 1 487 1 1 1 1 1 501 938 93 476 1418", " 1211 1 1 1 1 1 1374 1 1 1469 1 594 1790 1899 1", " 606 1 1 1 1054 1279 385 1 1 1733 1 1 1 1 986 1", " 1 4 1 1 1 1 275 1970 550 1337 549 706 1395 1742", " 706 1213 1 1 1 1563 1 1 1 225 1783 1216 1495 1", " 1 1 1 1 289 805 1 1 1 1320 1 263 1 1370 1623 1", " 104 23 1 1274 1 263 1 130 841 839 988 1 709 1", " 1 153 1 1 1415 1551 1 1793 322 1 277 318 1 1 1740", " 1896 1 1715 1664 1 1 1953 232 1 1128 1 1 1 1 1", " 1 1308 380 756 1 1 1 1 8 1898 1 1626 226 1616", " 1482 489 1 1 1 1 432 1472 1 1 226 1 1 1123 1 1754", " 1 1821 1384 1 483 740 1 346 1 223 1 792 1 1 196", " 50 1 1 1715 1 744 1 1871 675 1 1 27 1776 1923", " 445 1827 432 1520 1063 1 1 1 1 510 1694 1 1 1", " 1 1715 1389 935 1 1 346 1604 1 1482 1 1761 1975", " 1972 1 1 571 1 1 217 1625 1 840 320 1580 181 1635", " 501 470 1 1 1 381 1 1409 194 883 1665 1 1 1 1120", " 1 1 1 1 359 1 1765 1 781 200 1 1 1 1995 1 633", " 1 1002 874 1401 1 1 763 1 1 1 1 1125 1 1 1385", " 1 1 1 1 1225 1215 812 243 1 1 1 277 1 89 1852", " 1160 1 1 1 391 64 1 538 1 1 1 1 1388 1725 1 1", " 1106 1 930 1 1 1 1384 148 1 1588 671 1 1703 1292", " 1435 1938 682 1 1640 955 255 407 133 160 1 1 335", " 1 1262 154 1 647 1 1909 1972 1 1 1180 929 1 1", " 1352 1 57 527 1 1 790 1 1 1058 1 1201 1294 894", " 1 1 1143 1 720 1 1285 1 1256 1840 339 1 1 1 811", " 1 861 1 732 1 1 1 1468 2000 314 1 1 1 1558 737", " 1 1 1 340 584 625 1 1779 1118 1 1 1 1 1 1 959", " 1 1 1 1 544 1608 1 1607 1 1687 212 490 1 1 1 720", " 1526 1179 1 1913 1 105 1 1442 1 1 1 1 1 1 1 1", " 1774 1029 1 1025 1347 615 1311 1 1 1 1 1471 1", " 1677 1 1 558 1932 1 1 849 714 953 1601 1 128 1549", " 1 1709 1 1 1 1142 1 1 1 1 746 1153 1090 495 1482", " 852 876 1864 643 1 1996 1 1 1 1 754 1746 1 1 1", " 1 1651 1 1 1 1889 1 1 1 1671 475 1 1 1 1092 1", " 1 1 447 1 1 1303 1841 1 1 1 1 1613 1789 1 1222", " 1247 1 1 629 1067 1 1636 1017 1822 465 1 875 455", " 1087 1365 1402 1 346 1 1 1 1130 410 1 1 1013 665", " 1058 1 1 266 1 453 1 123 1403 1147 1 975 1 1 1414", " 1983 1632 1 1 1646 187 1 137 1 1002 429 1 608", " 1 193 1453 1694 1 1 927 1913 1246 764 1 1 1186", " 1 1378 168 1303 350 1 398 1837 1 1858 1 1 1 1139"};
    vector<string> part3 = {" 1 1506 1 1 1276 629 1 1 699 1 131 222 1204 461", " 650 1 1 887 1 1 1 220 1 1 706 1814 1049 1252 1", " 1453 374 1400 1 1 1 973 1637 1568 1 868 1034 1687", " 1 357 615 1705 338 1 1 1 1 1 1363 599 1 1 1 1265", " 862 1 334 685 69 1833 1584 1 1 1 1 1848 1954 1213", " 934 1267 706 1 628 1 1 1 1635 666 1 1 1 1 1564", " 1 1001 535 1569 799 948 1 1 1891 558 663 1 1450", " 1 1 1 638 794 1 1 1744 1 1 1743 1 1 333 1 1592", " 1 1 615 407 1 1 1 1 1 586 1918 1 207 1 1947 1", " 1 1 1011 1 1 1 1 1 120 1 920 1 1 1 1 1 1 1466", " 1 166 1713 1 1 1 204 1394 1 1 1082 1800 1 1 493", " 371 1 1256 1 1 1 1 1 421 1 1015 1 1 1 226 1438", " 1370 768 919 1716 62 511 1 1 1 1634 1 1 2 1 1", " 1 1516 1 900 1 1 1 438 1821 1 1 1828 1 1 774 1364", " 1 1 631 1163 1 1174 1 1 444 569 324 1 247 1 1", " 1855 1 235 1 174 1804 1803 1 1 1 1182 1 1 851", " 270 1 1518 925 1 484 1463 1 1 1790 785 1 892 1", " 1306 1 1799 1878 1 1 1302 1 1 294 1029 1337 1", " 1 592 1 1 1 379 1 1084 525 1 294 1325 1 186 251", " 1 1 1 1327 320 1 1 1 1 1 1 1 328 626 1 105 1 1177", " 34 580 973 99 455 1 1827 1560 1 1 823 1 1186 1741", " 1602 1 906 1 1 660 429 1 1909 1 1235 1774 1 1", " 1980 284 1779 126 1439 38 1041 1 1 1 1 1 828 971", " 1402 1 51 1 1 1 1960 1036 1 240 1 1485 1 1 1 1", " 274 562 1 658 576 1 1 165 450 53 1058 1 1 1 1841", " 437 1 1 1 525 1969 1 642 1 903 1 1468 1513 1 150", " 1 229 299 1 411 1 1 1305 1 1465 962 1303 1 1205", " 1 589 1 1 1 1 1 89 887 1 922 1 1 1856 1 1954 1", " 1 1 1 907 584 1164 1 1 1431 1 1 1 1 1649 710 1", " 1417 1748 1 1735 1824 1 1987 1909 1084 1380 1", " 1 1 1933 1 9 504 1 1 1 1959 1 1 1 1 1 1 1 1432", " 1931 770 1 1 1 1 1 1509 1712 243 1497 21 1 1 1812", " 1 240 1113 1 1915 713 1 1 1 1140 558 1003 1309", " 1034 1905 1 912 1 1 1 1 1001 1 1068 694 390 1", " 1235 559 1 295 1 1844 1 117 604 1 1 1016 431 278"};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 7362;
    if(result == expected) {
        cout << "Test Case 47: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 47: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test48() {
    int numSheep = 2000;
    int maxRuns = 133;
    vector<string> part1 = {"1985 13 13 13 505 641 13 13 315 13 163 20 13 13", " 1043 1852 13 1808 219 1533 380 13 376 995 13 13", " 13 13 1045 1913 1146 430 13 520 1887 984 13 145", " 1402 13 13 760 13 619 909 13 13 13 13 13 997 1267", " 13 766 13 1669 1626 13 13 13 13 13 1282 13 13", " 1402 1758 13 13 1819 13 745 13 1032 13 13 13 1931", " 1578 13 362 13 1345 1111 497 13 13 854 1942 13", " 340 1718 13 13 13 13 1244 13 304 13 1332 13 13", " 13 13 13 1352 13 13 249 13 13 1178 1558 785 13", " 602 13 13 1255 13 624 338 13 13 1751 968 13 297", " 638 635 394 1712 127 1483 781 13 13 13 461 532", " 13 942 1379 1857 1899 13 1800 253 13 13 83 225", " 1012 13 13 13 401 13 13 1972 13 723 66 587 13", " 856 13 488 1547 13 1108 1584 13 13 520 13 13 13", " 56 490 13 13 1699 1865 13 13 13 1877 13 1855 566", " 756 13 615 13 1636 1890 713 13 13 13 932 13 686", " 13 13 13 13 1757 1748 213 13 13 13 1201 13 13", " 728 1629 13 13 13 13 13 13 1086 13 555 13 13 546", " 1781 407 13 1873 13 13 1848 13 1922 13 13 13 13", " 1424 13 1804 13 1323 258 13 1869 1412 224 13 1901", " 13 415 13 13 13 13 1558 1530 1547 13 13 13 1029", " 126 13 1016 1344 236 13 1545 13 1130 1186 13 13", " 1416 13 988 13 13 13 1227 218 1846 1718 793 957", " 810 692 13 13 13 589 13 1217 297 13 13 13 13 1375", " 742 13 13 13 13 13 13 100 460 13 13 13 476 1416", " 1584 13 1434 183 13 13 13 1884 338 1176 13 1031", " 13 885 1885 13 13 13 82 13 1918 1816 1293 13 13", " 13 13 13 1133 1518 13 801 13 1250 1204 13 13 13", " 1521 13 1506 1214 13 13 13 1076 411 13 13 1433", " 1491 13 1439 1457 13 13 1730 1017 1857 13 13 13", " 898 13 13 585 1131 13 13 440 13 13 278 13 1990", " 13 1645 641 13 13 13 13 470 13 13 1799 795 1585", " 794 13 209 13 171 13 13 13 13 669 1047 13 435", " 13 13 260 13 13 13 13 13 189 13 189 882 1416 13", " 1171 13 13 1556 13 13 1578 1825 1914 13 1332 580", " 13 13 13 1781 13 1345 1879 1325 13 635 13 13 13", " 148 1025 13 13 13 688 13 13 587 13 13 13 13 1789", " 1770 1286 13 1382 13 13 1096 678 13 1890 1020", " 1295 409 876 13 13 615 13 13 13 442 49 13 13 13", " 13 13 1415 149 13 13 1519 13 1966 13 1931 155", " 1337 98 345 1896 890 1330 13 1448 13 1901 954", " 1426 13 1368 13 205 13 750 13 1989 13 13 13 13", " 13 13 13 13 664 13 13 13 13 721 13 72 13 13 1674", " 865 13 1920 13 611 13 13 624 1623 1825 1829 1351", " 13 13 13 1629 13 13 13 13 1910 305 13 476 13 1444", " 13 1373 650 301 13 1890 13 311 13 441 13 1841", " 13 183 910 981 775 1758 1942 1565 1050 767 225", " 13 13 13 13 13 13 13 13 13 1997 410 13 13 236", " 543 1623 13 540 1206 13 13 13 1265 13 1615 317", " 537 1448 13 1612 240 1681 13 13 13 13 1372 1567"};
    vector<string> part2 = {" 13 1266 1912 13 13 13 13 13 13 1010 1298 557 13", " 13 1007 13 364 1123 13 13 405 13 13 13 442 13", " 13 1109 13 13 13 13 13 1742 1814 1345 1520 195", " 222 13 13 13 13 13 1957 973 13 13 350 13 13 54", " 13 1424 1025 13 13 1750 1541 800 13 13 13 13 13", " 1534 541 13 76 13 13 13 1859 2000 442 1151 13", " 13 1744 830 13 13 13 13 1825 13 749 1244 1795", " 13 598 1643 13 1658 13 13 13 13 13 13 13 1257", " 1989 1858 1961 13 13 13 13 552 227 282 13 1676", " 13 13 1368 13 13 1383 13 1965 13 13 13 13 13 968", " 13 211 183 259 1234 1282 13 39 174 13 1336 13", " 13 13 1442 13 507 13 1613 13 456 1332 13 605 13", " 13 237 215 1712 13 13 13 13 13 13 1305 960 594", " 13 13 13 13 13 13 13 1600 13 1813 13 1630 13 953", " 13 1211 13 1605 443 1390 13 956 13 816 13 13 558", " 13 1983 13 13 1274 13 13 13 13 737 341 887 46", " 13 907 53 13 13 13 13 561 358 1616 258 13 1204", " 1059 1668 598 13 13 686 1720 13 200 13 110 13", " 134 1526 13 13 1514 621 1973 13 510 132 13 1761", " 13 570 281 13 13 1099 1652 13 301 398 13 13 1115", " 13 1388 1676 706 13 851 13 840 13 433 779 13 13", " 13 13 1752 1841 13 13 395 13 1910 13 13 13 13", " 1753 13 1757 1487 13 1375 13 1192 13 13 13 1204", " 13 619 13 373 78 1435 1213 13 1395 13 930 766", " 13 1861 13 388 13 1133 1505 1557 755 13 319 1216", " 1715 336 832 13 865 13 13 692 13 150 13 1396 1763", " 1699 13 1624 13 13 1442 602 13 13 948 345 13 565", " 13 1630 13 13 13 718 13 13 680 13 13 13 1162 493", " 13 1329 371 126 788 13 13 1121 13 13 1810 858", " 657 1007 13 13 13 591 853 186 13 13 1608 13 1438", " 13 13 13 1333 1102 13 197 1342 1407 13 13 13 13", " 13 1169 13 13 287 13 13 1099 670 1112 251 13 13", " 581 535 94 1382 13 984 13 1371 13 13 13 76 1764", " 316 1842 13 13 290 1830 1757 1761 13 248 13 13", " 13 390 1839 13 369 42 239 13 1919 667 1435 13", " 1487 13 13 1809 1424 13 786 13 1065 13 445 165", " 13 13 13 13 13 13 758 1050 13 936 455 1190 983", " 13 1234 816 1813 13 404 334 650 583 13 13 1291", " 13 13 1766 1125 13 1137 13 13 1258 13 13 1533", " 755 1797 1281 13 13 13 782 13 1401 9 1999 1236", " 989 13 1164 13 13 1506 13 13 13 907 13 675 991", " 909 583 1062 177 1590 13 705 1594 1257 955 13", " 13 1227 13 13 1094 937 1493 625 1035 13 13 13", " 558 651 13 13 13 13 13 13 876 604 372 281 612", " 1192 13 13 143 424 13 13 13 1158 226 1147 50 305", " 1124 1008 13 138 52 13 1030 13 354 1295 1988 1797", " 13 13 13 13 13 173 13 1482 13 13 740 13 13 659", " 13 1392 13 1186 513 13 13 13 1923 13 13 13 1665", " 13 13 13 224 1735 738 13 1459 13 13 13 13 13 13", " 262 1822 13 13 13 351 465 134 13 13 1814 955 13"};
    vector<string> part3 = {" 127 1094 767 672 1352 642 1624 16 13 825 657 13", " 68 13 13 13 13 350 445 13 1409 13 13 13 1683 13", " 801 13 945 13 35 13 13 13 13 13 13 13 1069 235", " 13 1247 13 13 88 1787 41 13 1099 1634 13 1826", " 13 907 13 1588 747 336 625 1993 1209 1909 371", " 13 13 883 13 129 293 13 13 918 13 13 140 911 1365", " 1211 13 430 1634 13 1870 1782 13 1942 1948 1564", " 13 422 13 1207 13 13 13 1831 13 996 13 13 289", " 898 269 13 983 13 13 1073 1422 13 13 1322 13 13", " 1734 1681 13 328 13 1424 13 13 13 1938 13 13 256", " 1367 25 408 13 13 13 13 1977 13 13 69 13 13 690", " 1312 1140 1333 1178 580 13 577 13 345 13 147 380", " 13 251 1043 652 13 1062 13 1461 13 1814 13 833", " 13 13 1751 13 1147 13 1549 13 13 13 768 191 13", " 13 849 722 128 13 45 13 13 912 13 13 13 13 615", " 13 1205 13 88 808 13 1865 1630 952 13 13 1606", " 1328 273 1087 13 13 13 13 1290 13 13 358 1789", " 514 1662 13 13 13 515 73 13 13 13 13 13 13 13", " 13 13 13 13 13 13 13 13 303 1570 13 13 13 397", " 13 13 575 13 13 434 13 321 13 1993 13 1803 921", " 13 13 1380 13 487 13 13 13 1353 312 1751 13 6", " 65 363 1029 1533 1723 13 112 13 13 1496 13 1784", " 1601 13 303 1491 13 13 13 13 13 524 228 431 740", " 13 13 915 407 13 326 999 43 258 13 693 13 13 13", " 1935 1666 1609 13 13 13 1029 13 407 1835 1608", " 743 13 431 1890 13 13 13 13 1775 13 13 1222 27", " 1878 13 13 760 474 13 910 27 1698 220 1282 13", " 13 1323 1468 1027 13 13 13 13 1709 13 13 13 13", " 13 13 13 13 13 958 13 13 13 1705 13 13 13 340", " 13 13 13 215 276 13 13 1080 977 1447 1564 1572", " 41 13 382 1232 13 1526 13 13 150 13 129 1755 955", " 578 13 13 1317 13 13 1232 13 208 844 13 1231 1792", " 13 263 13 13 1427 13 13 13 1336 13 13 1822 403", " 1744 13 94 553 13 13 534 13 908 1395 13 13 13", " 654 68 13 966 13 1407 13 1275 13 13 394 495 656", " 1432 13 480 13 13 479 170 13 75 13 13 13 1369", " 1629 13 13 110 977 1187 13 13 1735 13 1392 13", " 933 867 13 1760 331 1897 836 13 13 13 787 245", " 1847 13 1193 1514 1456 1347 13 13 761 116 13 1734", " 13 1945 13 13 13 13 13 40 1989 997 115 824 447", " 590 1312 13 1752 1092 13 1052 1386 1763 13 1737", " 357 13 1367 13 1602 97 13 13 1339 13 1876 13 804", " 1267 1693 1008 513 1069 1410 13 559 13 1865 13", " 13 13 13 13 406 8 1733 393 13 1177 1575 13 13", " 1481 13 13 13 1393 13 13 13 13 338 1636 698 13", " 7 568 1756 1574 13 216 1526 13 1385 13 13 13 13", " 13 1444 13 13 1841 1685 1773 1036 572 13 1221", " 957 13 13 13 312 1958 572 13 1689 13 942 1857", " 13 12 13 425 13 1078 1969 671 657 1057 9 1630", " 13 13 13 787 13 1207 13 68 169 13 13 151 914 1928"};
    vector<string> part4 = {" 1641 803 13 13 13 143 13 13 202 1569 13 755 1078", " 13 1761 963 13 13 13 7 13 13 13 13 13 948 13 332", " 916 13 13 13 1877 13 13 92 13 13 1454 13 1988", " 1911 13 1871 13 520 595 839 13 13 384 1830 530", " 13 330 13 1244 1144 787 866 344 1099 977 13 1784", " 1728 887 13 1251 1583 1243 1335 13 13 1682 13", " 13 1357 44 1115 1099 13 902 13 1057 13 305 200", " 1775 13 13 13"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 7768;
    if(result == expected) {
        cout << "Test Case 48: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 48: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test49() {
    int numSheep = 2000;
    int maxRuns = 133;
    vector<string> part1 = {"724 42 1117 443 42 806 42 42 42 42 1215 556 42", " 957 195 1994 42 42 42 1594 42 1836 1491 1144 42", " 1364 42 42 671 213 42 42 1590 42 42 42 42 42 1193", " 1919 42 747 709 873 854 1040 42 42 1691 42 1116", " 42 42 42 369 42 42 1751 495 42 595 42 42 42 42", " 42 42 1408 1711 1581 479 399 42 42 42 42 1556", " 1834 1945 618 42 1814 42 1453 42 534 42 970 1291", " 1730 1262 42 42 42 42 42 1668 1488 42 42 734 375", " 1796 42 1666 1151 42 1715 42 42 1783 42 42 932", " 920 729 243 34 42 42 42 42 42 42 31 42 42 42 336", " 1492 42 42 42 42 42 77 42 1007 1265 971 42 42", " 464 42 1634 42 1375 42 42 42 25 1757 42 1863 657", " 110 1561 1784 42 42 183 42 1318 1252 42 611 42", " 1481 1850 42 42 42 42 42 42 1270 320 1744 1903", " 32 42 615 42 42 42 262 42 1700 42 42 42 42 759", " 691 1011 42 686 55 1268 1316 42 42 1202 42 42", " 1684 42 42 1837 42 766 42 727 533 930 408 423", " 42 42 42 1539 780 1088 1908 42 658 42 1910 42", " 1757 42 42 42 42 670 42 1187 42 761 1907 42 347", " 42 1658 726 42 42 314 1036 171 1245 1856 1088", " 42 42 688 42 1729 42 42 42 1116 42 438 42 1330", " 42 42 293 594 270 42 496 612 389 42 670 282 1879", " 42 1277 42 42 1169 1723 253 1699 42 42 1769 646", " 42 42 42 42 42 42 954 514 1366 42 40 42 42 42", " 1115 104 42 916 42 42 1036 423 42 1210 1282 42", " 42 643 1369 856 238 1250 1398 42 42 837 42 42", " 1914 796 342 1063 93 42 42 1998 317 592 1167 1581", " 480 42 42 42 941 1727 42 42 42 428 42 42 42 1892", " 942 1417 300 470 1237 42 225 64 227 1316 301 42", " 990 1718 42 42 42 42 286 1628 1677 642 42 42 1275", " 173 1696 42 1166 587 42 286 42 458 42 42 1384", " 42 239 42 884 46 42 42 1912 42 42 379 42 42 42", " 1386 42 42 42 1204 1198 1924 1601 42 1053 318", " 42 1344 212 42 1971 1470 42 42 42 42 42 42 1182", " 42 741 1942 57 42 42 42 1458 753 340 1349 42 402", " 1765 42 42 42 42 42 42 42 350 1017 42 1195 42", " 42 880 42 532 1520 42 42 42 42 42 42 1796 42 179", " 42 42 42 1739 528 42 1091 1637 42 679 42 460 42", " 42 42 1995 905 1324 42 844 64 42 42 42 42 42 333", " 42 1904 42 1220 1330 42 512 1713 42 272 231 42", " 299 1900 1643 793 42 42 350 1757 401 5 38 42 1756", " 42 1207 42 1308 42 1726 1775 42 42 42 42 393 814", " 1678 1933 42 42 42 252 42 561 1291 42 42 1485", " 1878 42 42 339 298 42 1214 42 42 417 1333 924", " 219 42 1635 42 229 1269 302 1449 42 42 42 1856", " 42 42 1199 1888 975 83 525 42 1030 1484 1950 146", " 42 42 527 1210 901 42 42 42 42 42 400 455 42 1717", " 42 42 42 1822 702 42 42 42 42 472 1489 1743 249", " 42 188 42 1484 1991 42 841 160 42 42 1912 1391", " 486 42 1739 1705 904 550 42 42 42 1671 534 42"};
    vector<string> part2 = {" 476 946 1058 240 1153 781 341 473 42 42 42 42", " 42 909 341 1535 42 42 42 42 489 42 42 792 42 42", " 42 1047 42 42 384 914 42 42 1436 42 624 42 1564", " 42 42 1178 1997 42 42 42 1182 42 42 353 42 1468", " 975 42 462 767 1386 42 380 42 42 42 1304 1442", " 42 299 42 42 42 1982 42 42 1646 42 42 150 42 14", " 42 42 42 1898 469 42 1155 42 42 42 42 42 42 42", " 63 410 390 1679 524 1163 1449 668 943 177 318", " 114 42 269 42 713 42 1550 1159 18 58 1273 1912", " 1198 42 660 42 427 630 2 889 1055 42 1631 42 42", " 568 1924 23 621 1986 958 1127 1783 364 42 1594", " 344 940 1850 42 42 42 42 42 42 1402 308 1472 42", " 1899 410 42 42 42 42 42 219 42 42 42 42 1855 42", " 75 42 42 1233 42 42 42 680 42 400 1224 42 250", " 249 1287 42 1658 42 376 1098 42 582 42 1904 407", " 1256 1235 42 42 1801 42 1714 1505 42 42 419 42", " 1273 42 1804 253 63 42 42 42 1334 42 1419 1049", " 1272 1004 42 42 190 42 1552 5 1658 1414 488 42", " 42 879 42 42 42 42 42 42 42 225 1018 788 740 42", " 1167 41 458 42 503 42 42 1935 42 1282 42 38 1950", " 42 42 971 42 42 944 764 42 42 536 125 42 42 42", " 42 42 42 42 42 42 401 978 42 42 42 42 1749 714", " 521 42 1439 385 730 42 1161 237 42 1854 673 964", " 42 42 221 42 42 1191 313 169 42 42 403 449 42", " 42 42 1778 842 42 42 42 1561 42 1192 909 1330", " 42 1959 42 42 42 42 42 859 42 42 42 296 42 1474", " 42 42 42 1919 42 42 1284 42 42 42 1205 1745 500", " 1802 1820 42 42 42 42 42 1189 1496 843 42 42 119", " 42 42 42 42 42 574 42 642 42 1831 42 42 1131 1734", " 42 42 42 42 42 1289 42 1026 938 1903 42 686 1305", " 42 42 1717 792 42 751 42 42 42 42 42 42 42 42", " 69 42 879 1807 752 953 42 42 1858 733 34 1801", " 532 651 42 42 42 42 786 42 1071 1827 719 1200", " 42 161 42 42 42 1817 42 369 1146 42 1266 1935", " 1580 394 1462 1575 42 42 42 42 432 42 42 42 1415", " 42 594 42 1386 42 42 1056 1112 42 1698 42 42 42", " 1220 1576 444 42 196 42 42 1358 42 1761 540 868", " 42 42 42 1364 42 42 140 622 734 42 1094 1929 578", " 42 290 42 1944 909 42 1385 42 42 42 42 42 42 42", " 527 110 42 42 42 835 42 675 42 42 710 42 518 42", " 217 42 45 42 1491 42 1140 594 799 42 1835 42 42", " 756 42 1553 42 1033 42 1794 42 1407 1668 302 42", " 42 42 42 850 1662 801 42 42 42 42 42 42 42 1471", " 42 881 42 42 42 42 42 77 1172 11 1483 42 42 42", " 42 1715 595 385 42 42 674 1217 42 1815 42 42 42", " 87 623 550 530 42 1370 1407 42 42 42 42 1216 982", " 42 320 42 631 42 1398 42 42 42 42 992 42 42 42", " 848 42 42 1151 981 42 772 972 42 326 42 413 195", " 194 42 1969 1309 42 721 806 42 42 42 42 6 42 1409", " 42 42 690 1741 142 1918 1735 1953 1657 42 1641"};
    vector<string> part3 = {" 953 42 42 941 9 42 307 42 42 42 845 42 42 1364", " 42 959 1026 791 7 1146 42 42 42 42 126 585 42", " 42 71 1310 42 592 42 436 42 42 42 42 354 1196", " 42 1883 841 1897 1856 665 42 42 42 42 1951 1939", " 916 1119 42 42 42 215 42 1780 749 880 1045 1807", " 574 42 1593 42 348 1964 42 1749 42 42 42 42 42", " 42 42 425 42 42 42 1238 1414 664 42 1510 42 42", " 42 42 431 381 1361 481 42 38 42 1690 1219 42 1883", " 42 42 42 42 42 627 1665 42 1605 615 1950 42 42", " 962 355 42 42 42 42 1381 42 1322 1813 636 42 720", " 42 1750 42 42 591 42 790 134 1764 1362 1536 1910", " 759 42 390 42 42 1061 42 42 42 488 42 677 42 1790", " 42 556 42 803 3 42 795 42 42 391 819 42 42 611", " 42 42 42 42 42 936 42 435 42 42 42 220 1959 225", " 880 42 42 42 1055 1176 42 553 1003 324 641 42", " 1995 42 42 470 767 42 42 639 174 624 42 42 42", " 177 575 42 42 276 42 1240 42 1415 231 459 42 42", " 1419 140 285 392 42 598 1091 1258 28 332 271 1392", " 42 1494 42 1513 42 42 42 479 42 42 42 42 469 42", " 42 386 42 42 1190 42 1631 997 769 1140 282 42", " 759 42 42 42 42 42 758 42 42 42 345 42 868 732", " 1505 42 42 1617 42 42 1492 573 42 371 42 684 42", " 585 42 42 472 1849 1639 224 1788 562 42 42 42", " 210 42 1400 920 42 1714 42 278 1793 365 1870 845", " 42 42 42 1311 1113 116 42 376 1174 42 552 38 1859", " 42 163 42 42 1257 42 42 42 1521 42 42 42 42 42", " 541 1152 42 1899 673 880 42 42 42 1442 42 1020", " 42 42 350 42 562 42 42 384 1876 448 42 42 42 1686", " 1466 42 102 42 1799 691 334 242 42 42 1223 538", " 571 1031 1060 1911 42 42 1020 1855 42 1302 1004", " 42 42 42 42 42 1983 42 1728 344 42 42 39 42 575", " 1069 797 42 42 42 1601 1281 42 42 42 1842 42 764", " 42 42 348 42 42 42 1719 978 170 168 336 42 42", " 919 42 1662 29 1550 42 42 42 1695 1393 1796 42", " 132 42 42 1628 1739 42 42 42 42 42 42 42 1970", " 42 4 42 194 42 947 1945 1035 42 42 1501 1150 302", " 470 9 42 1751 1129 42 1793 42 102 1566 252 42", " 42 42 1424 42 42 42 42 549 935 42 42 534 1053", " 999 42 42 42 139 1527 486 42 558 42 1703 42 42", " 268 121 42 42 42 662 42 146 42 42 437 1391 42", " 42 1100 1586 276 42 42 1973 891 42 752 42 366", " 1712 850 113 1742 42 366 307 42 765 139 1277 42", " 1755 673 42 42 42 1295 42 42 42 799 1632 1165", " 42 1340 42 809 42 42 42 56 42 42 42 1595 1949", " 1773 1134 42 594 42 1193 1279 263 42 791 1803", " 42 455 378 749 42 966 42 102 42 1931 42 42 512", " 261 1589 42 42 894 1789 42 42 42 42 1848 673 241", " 1003 1402 42 42 42 840 42 1446 461 42 137 1111", " 1220 1330 42 492 42 1229 42 42 609 42 42 42 381", " 42 295 1263 42 229 491 5 65 280 42 1998 42 42"};
    vector<string> part4 = {" 42 284 614 1386 42 1526 42 1839 182 1867 358 42", " 1478 837 42 42 42 42 523 42 42 974 1701 42 1828", " 241 1746 715 1688 761 42 42 42 1641 355 42 766", " 42 42 42 371 1217 121 112 46 42 42 42 42 349 42", " 1951 42 42 42 42 42 42 345 42 42 754 42 42 614", " 1591 753 42 42 42 42 42 460 42 1640 42 42 1917", " 42 707 42"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 7686;
    if(result == expected) {
        cout << "Test Case 49: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 49: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test50() {
    int numSheep = 2000;
    int maxRuns = 133;
    vector<string> part1 = {"1344 576 1178 576 884 1931 425 109 1594 1127 1162", " 576 576 576 1375 576 576 576 170 1828 232 813", " 576 576 576 576 576 767 576 576 722 576 624 1434", " 428 576 12 191 576 374 576 576 576 1053 1545 1378", " 116 913 1583 576 576 576 199 281 576 576 929 345", " 576 576 1311 576 511 576 996 890 576 576 576 576", " 986 576 1204 431 576 1246 1343 145 1360 576 664", " 992 576 1631 576 576 576 400 1189 576 576 48 576", " 576 1831 272 576 576 1217 576 463 1059 576 576", " 576 594 576 576 1442 576 576 779 576 1488 576", " 680 576 1344 576 576 576 576 576 947 576 1113", " 576 576 576 1834 951 576 1754 576 1275 142 42", " 294 58 389 622 1758 576 576 576 1352 1429 654", " 576 576 576 973 576 1552 576 1307 651 1120 1700", " 576 576 576 154 84 1739 576 1157 1819 576 543", " 611 576 576 576 246 1724 558 207 576 576 657 576", " 576 576 685 714 576 1300 1575 576 576 1670 1464", " 1066 593 680 1611 576 1122 784 576 576 193 458", " 576 127 1122 501 576 576 576 422 576 1995 1590", " 280 576 576 576 576 576 576 576 576 576 576 576", " 819 576 576 576 576 61 1732 433 1623 604 576 576", " 576 576 460 576 58 576 1541 576 180 599 1134 576", " 250 467 576 576 161 835 576 576 1005 576 576 576", " 736 124 1202 526 242 576 576 1813 238 576 576", " 1442 1651 576 833 1627 576 576 576 576 576 1255", " 576 576 576 1490 576 576 576 443 482 576 1230", " 576 1715 1510 576 1802 576 506 576 576 576 576", " 576 576 576 576 576 576 576 576 1803 576 576 795", " 383 576 1861 576 1944 1101 576 576 576 1034 576", " 747 691 353 576 23 576 1973 576 340 576 188 1791", " 576 576 1713 1544 576 576 576 1469 576 1882 576", " 576 1446 512 1337 576 593 986 1444 576 576 576", " 457 576 576 1261 1074 576 576 576 576 576 1006", " 576 1625 576 1845 576 624 576 576 576 576 576", " 576 592 576 449 1409 576 576 1924 1338 576 576", " 576 576 576 1904 50 1337 576 576 90 1975 576 516", " 576 576 576 1770 576 574 576 1721 576 576 447", " 576 576 1268 1044 1954 576 576 301 576 576 59", " 576 749 576 1489 576 576 576 576 576 576 576 576", " 576 1648 1581 1842 576 849 333 576 576 576 851", " 576 550 1422 576 104 1681 1153 576 1090 576 1562", " 576 1939 576 1161 1916 576 576 576 576 576 1345", " 576 186 875 1076 1935 692 576 278 549 576 249", " 576 767 111 576 1882 145 576 1084 1982 453 576", " 402 207 238 576 576 576 576 1235 1333 285 576", " 287 576 576 576 120 576 576 1560 576 576 576 576", " 576 1077 1378 1598 1403 1149 576 346 617 1443", " 173 576 496 457 576 824 576 576 1150 373 375 854", " 231 576 576 576 297 576 576 576 285 955 576 1235", " 1925 1212 576 576 266 660 190 576 576 1383 576"};
    vector<string> part2 = {" 523 111 975 576 1104 576 576 1018 1358 576 576", " 1830 576 68 86 576 576 576 1800 576 576 718 1196", " 576 576 182 388 576 569 1319 576 1795 576 576", " 576 833 576 1264 1854 560 1122 821 158 1927 576", " 576 977 939 576 311 953 338 239 576 576 576 576", " 282 1584 576 576 576 1769 576 1593 576 576 576", " 576 658 576 1279 413 947 149 169 576 576 576 999", " 1984 1611 570 576 15 1845 225 292 576 863 907", " 1849 576 689 336 576 767 576 124 282 266 576 1527", " 911 509 576 106 901 1390 1904 1732 576 576 1404", " 659 576 576 576 1410 1349 576 576 387 233 576", " 576 576 576 1061 51 576 576 1263 1559 500 1402", " 576 576 1336 576 563 1250 1726 292 576 239 576", " 1050 611 576 576 576 576 1589 576 1609 218 977", " 576 576 1893 1883 1955 576 633 1516 576 576 259", " 483 576 576 1904 414 935 576 1236 901 1306 576", " 1913 576 576 1866 1882 576 576 1315 576 576 986", " 576 1749 576 1270 1046 1693 1718 1262 576 569", " 576 576 1384 1690 138 576 1010 576 576 768 507", " 15 1831 576 576 1451 576 576 576 659 1356 537", " 1688 1361 296 576 576 576 576 10 576 1442 576", " 576 1448 576 576 221 576 576 1294 1523 1439 1134", " 576 1980 424 576 1556 1331 1959 1085 576 576 576", " 338 1248 576 58 1789 576 1370 1363 576 576 291", " 515 858 1320 576 1401 610 1404 874 1272 576 576", " 1489 576 576 1504 576 577 576 857 576 1872 1395", " 576 576 297 576 576 576 1928 235 1634 576 888", " 50 11 576 576 576 305 576 1636 576 1645 1402 618", " 576 1667 57 1754 576 576 576 1912 1112 576 1918", " 1502 576 1649 1445 576 576 576 1156 576 356 1492", " 1012 576 576 576 880 321 335 641 576 576 576 576", " 1033 576 1849 908 576 576 996 547 704 576 919", " 576 576 576 579 1316 576 1383 41 576 1025 576", " 111 702 1370 576 576 1048 576 1706 576 576 1386", " 15 575 1097 576 576 163 1705 576 576 766 165 576", " 576 387 404 576 576 1978 1113 119 576 576 576", " 1856 576 216 576 576 1172 576 576 1212 1934 576", " 576 576 431 576 576 576 874 732 576 576 826 576", " 1702 904 576 576 576 576 1104 1948 1667 576 835", " 1085 576 576 1693 576 576 576 576 333 576 1521", " 576 576 576 482 576 576 576 576 576 1376 17 576", " 576 576 576 1722 1069 1090 576 763 1141 1173 853", " 482 576 877 576 1588 576 462 576 47 457 576 576", " 576 576 1471 1455 1174 576 576 576 576 1283 1137", " 576 576 1787 576 1067 1904 576 408 576 576 576", " 1991 1731 6 801 1984 576 1616 576 561 350 576", " 1139 1553 576 576 576 576 1612 1986 576 576 1705", " 576 576 576 1383 460 576 576 576 576 752 576 576", " 576 1013 576 576 447 1791 1957 594 1615 576 695", " 576 231 1452 576 1493 181 1525 576 576 576 576"};
    vector<string> part3 = {" 178 529 1925 1806 576 1693 576 576 576 576 576", " 576 576 1320 576 576 576 576 946 440 775 1737", " 202 576 1993 29 1330 1918 79 1957 576 576 576", " 576 640 1400 576 1831 576 1135 919 576 1933 576", " 1333 1767 263 1003 669 576 1762 1854 1867 576", " 401 576 1756 121 576 576 958 1856 1514 576 921", " 576 576 396 1747 576 822 1998 576 1999 576 521", " 296 727 1904 1531 576 576 576 945 576 576 1349", " 576 576 347 1526 576 1243 63 431 576 789 1759", " 1246 576 576 576 576 576 576 576 576 576 1412", " 576 29 576 576 1615 576 799 1355 275 354 1593", " 758 576 457 576 576 1804 1802 1260 576 576 1596", " 576 576 576 576 576 576 576 576 576 934 576 1801", " 1655 1420 1887 576 578 447 184 576 576 307 576", " 576 1165 576 576 576 825 675 576 177 1817 576", " 576 576 576 1594 1975 121 344 1848 576 576 576", " 1765 576 576 576 236 714 576 978 622 576 576 576", " 576 576 764 576 576 1252 576 1763 1147 1157 1370", " 1219 576 311 632 1865 576 136 576 576 576 718", " 576 739 487 576 1737 1739 1535 455 576 576 576", " 576 576 1546 198 857 1538 1919 576 576 576 1414", " 577 576 576 576 576 576 954 1965 96 711 576 1886", " 880 576 576 576 869 576 576 767 576 1342 576 576", " 576 222 576 964 576 1503 576 576 1307 576 576", " 576 58 864 943 1681 576 576 581 1309 348 576 728", " 576 1906 989 1787 331 576 576 576 576 576 52 911", " 930 576 576 60 576 576 576 576 576 1157 576 544", " 576 15 576 576 576 576 1029 972 484 1204 1025", " 838 1026 576 1163 576 77 576 1000 1100 1737 576", " 404 358 576 576 576 431 576 485 576 1263 1385", " 576 1498 903 576 1428 576 576 576 576 1342 1751", " 576 576 778 576 21 1952 212 1095 576 1475 576", " 985 1891 758 1971 576 576 576 576 576 576 598", " 576 576 576 1526 576 576 576 474 106 797 576 1282", " 1733 1138 232 576 576 576 285 576 1831 1144 1051", " 1712 1773 576 576 1413 648 576 1328 743 576 576", " 1302 576 1084 1162 576 576 576 1362 576 576 576", " 407 576 1853 576 576 969 1048 339 576 576 1173", " 576 1126 1439 1892 1566 576 576 425 576 50 576", " 1607 576 576 1380 576 576 1633 576 576 521 576", " 1006 1530 1692 576 576 576 576 576 635 1525 576", " 301 576 274 576 1980 739 576 576 576 576 1815", " 772 576 576 576 576 576 576 576 1260 576 576 576", " 576 576 1003 576 1925 576 1082 576 576 576 576", " 576 1514 576 576 576 576 1090 576 465 576 576", " 181 576 429 1936 760 252 493 232 576 576 576 576", " 576 1511 576 576 576 576 812 70 712 576 1943 576", " 576 1638 795 1422 220 576 613 576 1224 818 576", " 82 1750 1452 196 1068 576 576 1230 576 1529 268", " 576 576 727 1366 400 576 576 1786 277 576 381"};
    vector<string> part4 = {" 576 1961 576 763 1779 576 990 576 367 576 1874", " 1013 576 576 576 617 499 258 895 1189 576 576", " 576 576 576 576 576 576 349 576 576 218 576 576", " 61 1671 1790 576 576 138 576 1790 576 576 576", " 576 343 576 576 197 576 576 1935 576 3 1822 1470", " 1052 1670 576 576 194 979 576 11 576 576 576 576", " 576 48 576 576 576 189 612 576 401 278 576 1588", " 1330 1035 1569 784 576 1615 576 1524 576 576 1506", " 576 576 741 1382 789 576 1212 615 576 1980 782", " 576 1858 576 137 416 576 396 576 404 352 576 1068", " 576 576 576 576 576 576 1549 576 576 576 576 576", " 576 1516 576 576 576 576 576 558 483 881 576 576", " 50 1740 576 1111 38 1912 547 576 1156 576 576", " 1034 576 576 576 576 576 884 576 804 228 576 1", " 576 576 1948 576 687 576 1234 1108 576 576 576", " 576 576 576 576 1084 1655 576 1231 31 576 581", " 1962 576 685 576 906 576 417 1670 1250 1606 576", " 576 576 281 576 1585 576 1478 1389 576 1332 854", " 576 1369 1344 19 158 576 1888 576 576 436 576", " 576 1031 576 1495 576 576 1575 207 576 1934 576", " 1360 10 311 576 576 139 576 125 1597 503 921 1219", " 576 427 576 576 576 576 1181 668 576 361 576 576", " 1548 576 17 576 576 377 16 1625 1876 576 173 576", " 638 1646 576 576 194 576 1142 185 1226 576 576", " 576 576 400 576 576 159 576 278 788 962 576 1145", " 576 576 576 576 1157 138 576 500 576 366 207 1781", " 576 756 978 263 171 576 576 153 4 1079 323 1896", " 614 576 576"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 11742;
    if(result == expected) {
        cout << "Test Case 50: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 50: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test51() {
    int numSheep = 2000;
    int maxRuns = 133;
    vector<string> part1 = {"1279 1443 897 897 1301 897 897 1378 897 897 897", " 987 1875 897 897 586 235 1008 1222 897 516 1167", " 1773 511 897 384 420 897 897 652 897 591 952 897", " 897 897 897 897 897 897 897 34 449 897 897 1661", " 897 897 897 897 518 381 1465 897 71 685 966 929", " 86 897 897 897 897 207 181 1330 897 897 897 897", " 851 503 484 697 35 1638 897 897 766 1452 897 497", " 897 281 897 897 1067 897 260 897 897 300 897 573", " 433 1171 1345 1138 897 154 897 897 897 1441 897", " 1126 1173 897 637 1842 897 1582 897 1264 11 897", " 922 116 619 1805 897 287 1252 654 19 897 897 43", " 897 897 625 897 393 897 897 897 897 897 846 1617", " 897 1982 897 1080 897 1669 1528 897 897 1808 586", " 1426 897 897 1713 228 897 897 315 897 897 897", " 897 597 781 897 1992 41 444 897 897 897 898 897", " 158 897 897 634 897 1379 897 1332 1716 897 897", " 897 956 897 1432 897 897 680 262 1852 897 1559", " 403 897 1865 1390 355 195 897 897 79 1364 415", " 897 1646 1526 234 1121 897 1099 897 897 725 1674", " 897 897 466 1028 897 360 897 10 153 897 897 1001", " 791 897 897 1624 897 531 1365 858 897 897 897", " 1260 897 101 763 1486 48 518 1601 897 897 897", " 897 1697 897 897 92 938 990 1772 1435 897 897", " 1704 897 844 1050 156 897 897 1888 790 55 897", " 897 897 897 897 609 897 1487 1303 897 284 77 897", " 897 897 1906 897 897 102 120 433 1367 765 1656", " 496 967 1899 897 897 897 897 1167 766 897 1696", " 897 240 897 1247 1744 1109 46 598 897 1948 897", " 897 897 897 995 897 897 897 1163 1876 1544 897", " 232 897 161 1765 897 1490 473 1011 897 897 1401", " 897 1511 1204 897 897 897 765 1766 1358 1636 897", " 1694 1586 897 897 1017 1573 1082 1224 1563 897", " 1492 435 299 897 897 897 313 1801 1002 1918 897", " 897 1832 897 1369 897 167 1764 146 1186 761 897", " 897 222 897 897 897 1491 427 79 897 897 525 726", " 1034 897 897 1150 951 1164 91 897 993 897 1777", " 697 897 897 897 897 490 897 897 31 163 897 897", " 897 897 1955 897 897 897 296 897 897 897 897 897", " 897 806 897 1949 897 897 1157 9 897 472 897 1765", " 733 897 897 991 1371 231 1698 235 897 310 897", " 1042 897 897 897 897 790 897 122 434 562 1283", " 136 1460 527 897 310 562 1741 897 897 897 897", " 1169 1246 396 1929 657 1382 897 13 897 897 1826", " 897 897 897 1589 897 1651 897 1630 1181 897 74", " 897 897 897 897 74 897 897 450 1769 1312 1731", " 587 959 897 897 897 41 1684 213 220 469 897 897", " 476 897 897 897 897 673 897 4 1550 1519 897 555", " 1644 1705 897 897 1044 897 897 897 897 897 694", " 897 1333 882 1359 897 897 770 897 1884 1075 897", " 1735 1803 763 801 897 1589 1816 1014 1349 897"};
    vector<string> part2 = {" 897 1984 1225 1110 897 498 897 897 897 897 466", " 897 973 192 897 897 897 151 1321 1561 897 985", " 185 897 67 252 927 897 885 272 78 897 601 897", " 897 897 847 1402 897 1513 897 897 897 273 897", " 897 1129 897 897 1147 897 1644 1069 897 897 398", " 367 1518 897 897 966 1385 317 897 897 897 313", " 897 897 1122 1758 775 897 897 897 897 837 897", " 897 897 897 228 1025 897 1506 120 1418 757 897", " 1389 918 465 1406 897 1436 897 897 1801 1316 716", " 91 897 897 897 897 897 242 1125 897 739 1607 1614", " 1618 1649 453 1816 831 897 897 1187 897 1117 1310", " 897 897 897 1434 897 897 897 897 897 1599 333", " 879 1495 897 5 1420 897 1399 897 897 897 1999", " 1457 278 897 231 536 1641 897 897 1893 1481 176", " 1274 1774 897 740 636 897 30 897 897 897 100 897", " 1731 897 859 897 897 1229 897 897 1095 897 1591", " 1429 719 897 897 136 897 1580 824 897 897 1349", " 897 897 749 897 897 897 897 897 897 1379 677 897", " 897 1222 1875 897 102 897 1003 897 897 777 350", " 1475 642 897 897 1775 897 897 1834 1059 1864 897", " 1753 897 897 897 897 897 897 1584 477 698 1410", " 897 897 184 897 96 897 1032 232 1229 897 974 897", " 1933 897 897 1649 897 783 1378 1650 897 412 1785", " 897 897 897 1953 1935 897 1629 897 897 1050 897", " 1327 94 775 1373 1034 988 897 897 1120 897 897", " 1671 897 534 627 995 897 897 897 1919 1839 897", " 1138 897 1268 1104 897 28 632 1251 1860 31 667", " 779 897 532 897 1810 897 26 897 1983 1304 586", " 897 897 897 1643 393 1294 1661 1511 897 1638 141", " 897 897 897 700 897 897 897 897 897 897 897 1", " 1048 729 897 897 1775 1589 897 1409 897 897 672", " 1843 1752 897 897 898 897 1704 339 1734 638 759", " 173 1889 1678 897 897 1376 897 630 1561 1111 897", " 1245 897 897 897 897 897 244 897 1500 1092 897", " 469 1128 1703 897 677 897 1149 841 1964 897 1358", " 897 897 897 897 1902 897 897 1483 897 316 1353", " 897 897 897 897 1399 897 1097 41 897 897 897 897", " 532 897 1650 1320 897 897 897 1331 1324 1705 1385", " 265 1840 1024 897 1278 1396 897 1734 897 1830", " 897 1017 1047 897 1858 897 897 201 1024 1625 373", " 897 897 897 897 897 897 1585 897 1922 1773 897", " 692 255 989 897 333 897 1423 52 1922 897 1941", " 897 859 1891 897 445 1132 1744 897 897 82 897", " 897 1299 897 1706 158 897 897 1387 897 897 897", " 897 897 897 1480 430 10 391 169 897 1318 897 897", " 685 897 897 1076 897 419 1322 895 897 133 872", " 350 961 897 897 897 395 1382 897 392 897 759 897", " 897 897 897 897 897 897 897 897 1223 897 897 1906", " 1901 897 897 897 1288 1344 1092 109 1680 553 696", " 897 897 1852 1230 897 736 897 562 1819 1230 897"};
    vector<string> part3 = {" 897 897 897 1248 897 897 1021 670 1552 1560 18", " 897 897 897 897 1133 897 1221 1453 1242 1607 897", " 499 1635 753 372 897 897 897 897 1389 380 1807", " 897 897 1430 870 1353 897 744 1184 897 1838 897", " 317 300 897 443 93 897 897 897 897 1397 897 897", " 897 897 897 897 16 897 897 1003 897 897 536 1810", " 897 897 897 897 897 91 1526 891 897 893 897 897", " 663 897 623 1199 746 897 897 897 312 654 897 170", " 897 1019 897 897 1807 742 1183 1339 1054 94 1466", " 784 897 897 897 897 1527 897 87 1816 897 897 897", " 897 897 1755 1800 1332 227 897 897 345 897 897", " 1486 367 1285 1181 120 897 897 897 897 897 897", " 516 1300 1493 897 897 474 897 401 897 663 897", " 1941 897 897 836 941 501 1086 897 897 897 897", " 897 897 1399 1156 878 1243 1028 897 60 781 897", " 1291 708 580 897 897 757 897 897 897 1870 897", " 177 1869 734 897 897 1281 577 897 897 897 1041", " 1552 1268 1353 897 1417 897 897 812 897 321 1878", " 897 886 525 1886 897 897 897 384 277 897 897 897", " 897 897 897 897 897 897 1560 1472 897 945 762", " 1485 1836 897 897 189 999 1243 897 897 659 897", " 897 1321 897 897 1085 1949 1178 1862 1073 1241", " 22 897 897 897 215 1759 1042 1327 897 647 670", " 897 1877 586 897 897 897 1112 1570 897 1152 376", " 1775 897 1915 897 897 1945 897 897 1051 897 897", " 1930 897 897 1999 897 987 897 692 897 897 897", " 1826 386 897 707 897 52 1292 321 734 1235 701", " 897 897 1613 1044 897 897 1306 1332 14 897 1683", " 432 1650 1919 897 897 189 1679 897 1929 1709 1376", " 897 802 1728 897 1398 1990 1772 831 897 515 897", " 897 457 1996 897 897 897 42 897 1658 897 897 897", " 897 1369 897 568 767 1907 1570 897 897 897 897", " 897 897 897 1434 897 897 897 897 712 897 897 897", " 323 1334 897 11 471 897 76 897 1843 897 995 336", " 1300 897 739 1987 705 897 897 897 639 848 717", " 846 1708 1661 897 897 1713 897 897 897 290 897", " 1194 851 430 897 897 1132 897 897 897 897 897", " 897 897 502 897 897 897 897 1407 831 1480 1393", " 58 897 897 897 1764 1773 897 1842 897 897 1889", " 1014 897 292 1420 897 897 1656 272 877 897 978", " 354 897 232 897 1758 897 897 282 897 1938 897", " 897 897 897 1466 897 897 897 908 897 248 897 897", " 1742 897 897 897 1797 897 897 682 897 897 1426", " 897 1452 897 103 1298 1598 1876 883 35 1150 492", " 897 1256 897 897 109 64 897 1761 760 743 897 1833", " 897 348 733 897 936 897 1857 1782 897 324 987", " 897 1094 1066 443 350 897 1669 897 897 897 1791", " 1391 680 608 1476 770 897 317 897 1179 963 1173", " 1734 1511 906 897 897 1163 897 897 290 897 390", " 1569 897 1162 897 897 650 897 980 897 897 1260"};
    vector<string> part4 = {" 897 890 897 897 897 1369 22 897 897 897 897 889", " 247 897 897 897 1723 603 897 897 1990 427 897", " 692 598 199 897 897 1875 827 1903 912 442 227", " 897 897 696 245 897 897 646 1755 594 764 897 374", " 1944 897 897 1441 4 897 897 897 897 897 2 897", " 897 897 1552 897 897 872 897 329 897 1621 210", " 1508 1449 473 183 897 897 33 407 1667 897 897", " 423 897 1617 233 1666 1529 1411 726 338 1097 932", " 897 552 897 897 942 290 657 897 238 143 1946 565", " 912 519 1769 897 98 1914 682 592 1514 897 897", " 897 929 924 580 897 1325 1344 897 897 897 574", " 897 818 713 897 918 897 1334 1105 897 1767 1125", " 369 913 897 516 1516 897 897 465 897 1266 891", " 835 381 479 897 897 897 805 469 897 897 897 897", " 897 160 1579 1992 897 1677 897 897 1712 342 897", " 986 897 897 897 897 897 897 897 897 500 897 1930", " 897 1874 897 1195 1528 897 1300 897 897 1367 759", " 1891 897 668 897 1333 897 897 897 1754 897 897", " 897 549 897 897 1919 408 897 897 897 897 897 372", " 1306 248 897 897 897 1577 137 897 897 897 1863", " 897 369 897 417 897 897 478 1833 897 194 897 897", " 1980 684 897 1941 628 897 897 897 897 1667 897", " 897 453 897 876 897 897 195 897 897 897 897 1756", " 897 897 897 913 187 897 1322 897 897 897 1878", " 13 897 897 897 897 10 897 494 445 1869 897 1004", " 883 897 106 897 897 897 91 1618 1419 897 897 897", " 897 250 897 1598 897 611 897 897 897 897 897 266", " 432 897 1267 1211 1478 477 152"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 14283;
    if(result == expected) {
        cout << "Test Case 51: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 51: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test52() {
    int numSheep = 2000;
    int maxRuns = 133;
    vector<string> part1 = {"221 1112 1057 542 1057 1057 1057 362 247 1057 1057", " 1057 1529 1933 1057 1057 484 1057 1057 1057 1057", " 393 1057 368 906 1057 1772 1057 1057 1390 188", " 1317 365 92 1057 1057 569 1946 1536 1057 1273", " 1057 1057 1233 561 870 101 1133 1057 1057 502", " 871 1135 1057 1202 521 1057 1057 1057 1057 1057", " 716 67 487 1349 1057 687 1057 1057 1057 1630 1057", " 1437 452 1057 1057 25 1057 1057 1202 1057 117", " 1057 1057 1057 1057 1402 800 1057 852 1057 795", " 628 709 607 942 1057 356 1492 613 543 1783 357", " 1057 1057 734 671 1057 1057 1057 1452 962 1057", " 1989 1057 1057 1057 1057 1194 1057 1057 1057 1057", " 1394 1057 99 1057 1057 230 1057 1029 1034 1451", " 1057 1057 1957 1057 906 1250 1536 423 1057 191", " 1057 1301 1057 1057 1057 1783 1057 1057 1057 1176", " 1324 1057 1057 1057 1206 1057 1057 1057 510 425", " 814 1208 1057 1057 1057 401 1773 969 1595 1057", " 1057 1911 1057 1057 1057 615 1057 1057 807 506", " 1057 847 1119 138 1187 1057 1660 1575 1332 1057", " 1057 76 1057 1137 1057 1891 1057 2 1359 1057 191", " 1057 1057 1057 1778 545 1057 1057 1057 1682 1661", " 1938 1573 278 1057 873 1057 419 1431 775 1057", " 1057 1831 1775 1626 1057 1057 1057 1858 932 1040", " 724 1057 1057 780 1057 1057 503 1384 618 1057", " 27 550 1057 399 610 1057 1057 1057 1057 1983 1057", " 329 1057 1943 1057 1057 1746 1711 208 1057 1057", " 1099 304 871 916 1057 1057 1243 1909 57 1314 1057", " 1057 764 1057 1057 415 335 733 1057 209 1057 1392", " 1391 1057 1057 1057 283 1057 1057 802 1057 1057", " 472 1278 1057 1057 1014 631 1057 181 1057 1596", " 1057 1300 1057 542 1057 1057 84 1057 1057 1057", " 1382 456 825 1057 1057 1057 134 360 1526 113 112", " 1057 1057 992 1057 1057 676 1057 1061 1576 1057", " 198 908 1735 1057 1057 221 760 1057 1057 1057", " 1057 1057 907 85 203 500 1057 1057 157 1057 460", " 459 1057 1057 1057 864 660 1135 1057 1057 1057", " 1057 1057 1057 1323 1539 331 1057 1057 1462 1057", " 631 1883 1057 1057 1057 1057 1057 1057 1057 1156", " 1057 1057 1057 645 955 1057 1704 964 1057 86 1202", " 1057 1057 1057 426 1069 1820 1057 1057 1057 1789", " 1057 1368 1880 342 1057 107 1057 1057 1057 1057", " 1057 1057 1389 1057 1057 1057 1057 1057 187 715", " 1753 1057 1057 940 1057 1057 1057 1057 1057 1877", " 1636 1057 1087 1057 1881 1057 1101 1057 1057 1057", " 1057 1057 416 1752 1521 1057 1157 1057 1116 872", " 1057 79 700 1057 1057 1057 1057 276 1057 753 886", " 334 806 1057 1057 99 1057 1318 1057 1057 1057", " 1057 79 1057 1290 1057 1057 1950 967 1057 1057", " 918 1865 1664 1057 1933 1057 1631 1503 308 272", " 1057 1057 443 1057 945 1057 1057 1057 1057 1057"};
    vector<string> part2 = {" 1015 1942 1749 1057 1057 1057 304 1057 1057 726", " 1057 308 1057 511 1057 513 1780 1395 628 1057", " 129 965 1057 1057 647 470 1057 643 293 1057 571", " 1253 1057 1419 1916 1057 105 1057 1808 1057 319", " 1057 1057 1952 1230 1393 1057 943 1057 1508 1057", " 488 1057 1057 1658 387 1057 1057 1057 1057 1057", " 1057 1057 1048 1057 1057 1057 1336 205 1775 1209", " 1057 1057 1057 1057 1057 1387 1057 1773 142 531", " 1966 418 1057 1057 1057 1057 1057 984 1057 1057", " 1057 428 1081 186 1057 1531 1586 553 1057 1057", " 1057 1057 778 339 1057 1057 1584 1057 1057 1312", " 1057 1057 1561 1767 1057 1057 1057 327 1057 1057", " 1057 1057 207 1057 1954 1057 1057 1081 1661 14", " 1776 774 1448 430 1511 116 183 953 1057 1057 1057", " 1057 1057 1372 508 1057 1249 1457 1057 718 1516", " 521 1057 1057 1487 585 121 1057 1057 199 1057", " 1057 1057 1318 1057 1057 1190 741 1210 456 1201", " 137 1100 1114 416 798 1131 1057 383 1057 1057", " 1057 1914 1057 1057 1038 845 1057 997 1992 1057", " 1030 1226 1586 409 1618 1057 1057 1057 1057 1057", " 1415 1236 1139 86 1230 1323 1671 1190 485 1910", " 1035 1057 1057 1057 1057 203 1057 1057 900 1368", " 1057 983 1008 1057 545 877 1057 1057 974 1057", " 369 1057 1057 1057 1057 1695 368 1067 1057 1057", " 1554 1057 679 1023 1057 1057 1910 1630 1057 1057", " 698 1952 1057 1889 1791 1057 495 1057 1057 889", " 1654 1752 1057 1057 795 1322 132 1861 1062 545", " 334 339 1057 1247 1057 1057 251 777 1355 976 749", " 1057 1212 1057 1263 1531 1057 210 1057 24 1057", " 552 97 1541 1057 1057 1057 1057 716 1811 166 1057", " 1999 1057 1266 1057 1057 1057 1057 1057 1657 1057", " 358 1057 1057 1036 1057 1732 1284 223 1057 1517", " 1037 1421 1057 1057 1951 1057 717 708 603 1057", " 1057 745 1012 1057 1057 1057 1057 987 1057 1057", " 1057 1057 626 1333 713 465 1057 843 1516 1983", " 1051 524 1057 1057 1057 1057 1057 1057 1057 1865", " 700 1057 1277 945 1569 1057 1565 1057 865 1057", " 1057 54 1857 693 1057 1524 1091 477 1863 1057", " 945 1057 1057 1057 1057 1057 1795 740 1057 1792", " 1057 558 841 1057 1057 1456 1057 1838 532 1504", " 1057 352 1156 1057 243 1057 858 1757 1057 1057", " 1032 1057 1057 364 1219 1057 1057 307 1057 1057", " 1081 881 1057 179 1057 1057 231 1029 1057 1057", " 1057 552 1057 1413 322 1318 1057 885 1057 1057", " 1057 1057 381 892 1057 1952 1057 1057 1057 574", " 787 1057 1631 136 587 1057 1854 1057 1386 1057", " 306 19 153 1399 1908 412 954 1057 1057 981 1057", " 1740 1469 1526 1057 1057 1057 1057 1620 116 1528", " 935 1057 1057 1057 1057 1057 1653 190 16 1515", " 1175 1057 1988 1057 562 1057 1057 1057 1057 1057"};
    vector<string> part3 = {" 1201 320 1057 1868 859 1057 1057 1057 1057 1057", " 1057 1057 1853 1057 1057 1057 688 980 1942 498", " 1057 1057 1599 1057 1057 1558 1106 1057 1057 488", " 360 1057 1057 1057 1362 1057 1057 169 1687 1057", " 176 1057 305 1057 1057 1108 1057 1057 931 1057", " 1057 733 198 472 1192 1057 1057 1395 1057 1057", " 1827 512 826 1057 1057 1057 1588 223 1057 844", " 1057 28 121 1057 1057 1057 1057 547 1057 1057", " 1057 244 1377 1634 987 1223 1057 630 1849 1057", " 1057 939 1057 171 1057 654 1127 1057 1047 593", " 464 1057 1057 714 1057 1057 223 221 1057 1057", " 449 1057 1057 585 1804 210 192 1057 1057 1057", " 1057 1057 389 1057 1888 1057 1281 1381 1057 1057", " 1057 1562 1057 1092 1057 1057 1057 1728 1057 1057", " 1057 1260 1057 620 1186 1178 770 1057 736 423", " 1057 1318 479 1057 895 1403 804 1057 404 53 1594", " 1825 1037 1057 1057 1057 1057 1797 1057 1057 697", " 1057 1813 79 624 632 1744 1057 1205 1191 1321", " 1057 1057 1909 808 1057 1902 55 1232 137 1009", " 1480 1057 1514 92 504 353 760 1057 70 1057 1202", " 1057 1057 1057 1057 1057 719 663 1057 1057 1057", " 1057 57 1057 1057 1067 1057 1057 1057 1057 763", " 569 1057 1057 1415 136 1057 1057 1057 1057 1057", " 981 1846 1057 91 266 1057 1057 1057 1057 208 1057", " 1057 1057 1206 1057 1751 1057 8 1057 808 1057", " 1386 490 1057 1057 1057 1057 1057 147 626 1057", " 1576 1057 1711 1132 1057 1377 1057 186 1057 1057", " 887 1057 1778 1057 1057 1057 1057 1057 1057 1057", " 395 1057 1057 386 1850 459 66 1380 1057 1057 1057", " 1057 712 1057 781 1057 1057 1057 1057 239 1057", " 10 827 1057 266 1500 1817 1057 47 483 1057 1267", " 1804 1292 811 1813 801 1902 1165 1057 75 390 1605", " 370 1057 1057 1057 1464 54 1641 1057 1057 1057", " 1233 59 1258 1057 1057 1195 464 1427 1057 290", " 1057 505 1057 1561 642 1842 1482 1057 1057 1057", " 1859 1724 1057 101 1057 1057 1057 1057 1057 1057", " 320 330 1057 1057 1411 1929 1057 1056 1290 737", " 1290 1057 1057 1057 1390 1057 1057 924 60 226", " 1057 1057 974 1057 1732 792 1057 1057 650 1057", " 1057 1647 760 1057 1057 1705 951 1457 1057 525", " 456 980 664 608 1057 1057 1057 1223 1057 962 1057", " 1057 105 1057 1399 1057 1057 1057 1534 1057 1057", " 666 1057 528 1057 1057 987 1057 1057 159 207 670", " 1057 792 39 1830 1057 1057 1551 1934 1057 855", " 459 1543 1057 1867 1057 1057 1057 1057 1251 1057", " 1057 829 413 1706 1057 1751 28 343 1661 1821 549", " 1057 1057 1057 1057 1057 1057 1314 317 1057 1057", " 1057 1057 1057 1887 1898 1793 1057 1057 1057 1057", " 1490 1057 1057 103 1057 772 177 1057 218 1057", " 1057 1057 1255 1057 1057 1452 992 1057 865 1057"};
    vector<string> part4 = {" 786 1524 1120 1057 1026 1057 1291 951 252 1057", " 375 1057 479 1209 306 1057 1599 1329 1057 238", " 1057 1057 1057 1487 401 1057 1057 849 1597 1057", " 1057 1057 1057 1318 1057 1057 1057 1057 1057 1057", " 1057 331 240 997 425 1057 1057 1437 946 831 54", " 1057 1064 1311 1057 1882 639 883 1057 263 1057", " 1057 1057 1057 1057 44 1057 1057 1057 1881 1057", " 1057 1057 1134 1057 1597 1766 622 1427 1057 1057", " 804 1057 1839 1057 1057 1621 1057 1830 321 467", " 1057 322 1821 1833 1057 495 1057 437 1424 1656", " 1057 1057 1057 1057 1057 1057 1057 1057 1468 1057", " 1057 1057 1057 1057 1132 255 944 1440 114 689", " 1023 1624 620 40 140 1057 1057 1750 1057 1839", " 1057 521 1057 1013 1057 1 1262 1057 1057 531 1057", " 1057 1057 1057 958 716 1163 1057 1242 1057 1057", " 425 1057 1381 58 1057 817 1057 1057 58 97 1221", " 1057 971 292 1349 1203 1057 941 531 1943 1057", " 1057 1716 998 1017 532 1057 1057 831 400 1732", " 1057 247 1057 1057 1057 1057 1057 1076 480 1057", " 742 1320 361 1734 1057 1057 1049 1476 1462 1325", " 1057 1057 1057 768 1057 767 1057 1057 1280 1057", " 96 786 555 1057 313 1057 1057 1057 59 1057 1522", " 991 455 1535 1739 1057 1057 71 1057 1057 1057", " 635 1057 1818 1057 1057 1057 1928 1057 1057 1057", " 778 1057 1057 1135 987 1057 1057 1057 1057 1854", " 1057 411 1057 1857 1057 1000 1057 1057 392 777", " 1057 1057 1057 1057 1673 1057 1057 1057 1057 372", " 1057 365 1419 64 1057 1026 1057 1259 1057 312", " 1532 1057 809 1498 1057 1633 1057 1057 685 1057", " 1295 1057 491 1057 1057 1057 1211 770 632 1057", " 1057 686 1292 1795 1057 1757 721 705 1057 1538", " 1057 575 1057 1113 1057 1057 713 1057 1057 272", " 1943 1734 962 1057 1057 1057 1604 1252 1057 1879", " 1057 189 1057 1727 1057 1057 1060 1189 1709 1057", " 1316 1740 1057 1057 1057 926 1057 1057 1057 1121", " 1156 1057 1057 1057 795 1593 1499 1667 1057 561", " 1057 833 1057 819 313 440 1687 760 1343 1057 1057", " 1527 493 1057 1736 1057 1057 1057 1057 1057 1955", " 1057 1057 1057 791 1057 1076 551 1143 1057 185", " 794 1814 1057 83 1487 1184 1057 1870 285 1594", " 1438 510 117 1695 1440 1057 1057 321 661 1935", " 1057 386 1057 738 1057 1057 1626 1057 1057 1329", " 1638 1057 1057 1057 834 1057 1857 1057 1276 1057", " 274 1057 143 1057 1967 1057 1057 1057 1057 1057", " 1057 1057 1057 1390 1736 1078 1057 1796 1435 1057", " 1057 391 1057 1057 1057 1214 43 614 1057 1262", " 1218 619 1057 1057 1057 1021 1057 1057 1057 1630"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 15283;
    if(result == expected) {
        cout << "Test Case 52: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 52: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test53() {
    int numSheep = 2000;
    int maxRuns = 133;
    vector<string> part1 = {"772 1157 400 1942 1157 1157 1252 1157 1157 1157", " 781 1157 1355 136 1157 14 1710 1157 269 1157 200", " 1157 1072 1908 1157 1035 957 193 1157 1157 1157", " 1157 1157 1300 1157 1157 1157 683 1157 1985 1454", " 1157 1157 1157 504 512 1157 1865 1157 1309 1752", " 1858 1826 1157 1157 1157 1157 1036 1157 1157 1157", " 1157 1157 467 1157 1157 1157 1556 1157 1157 939", " 1157 1171 1232 787 923 1199 1157 937 946 1157", " 1157 1157 1157 1157 898 990 425 1157 1460 1157", " 1157 1157 1157 230 1157 1895 686 1663 1157 1157", " 1034 1157 325 820 1157 1206 135 1157 134 1372", " 145 1202 1157 307 1380 789 1283 1157 1770 1157", " 110 1956 1157 1157 1157 830 207 653 1884 1711", " 1157 1157 1157 1157 1157 79 1157 443 1775 1178", " 1157 1157 1157 1157 1157 617 1157 1157 24 1157", " 738 413 1300 904 1157 1157 1457 586 599 1157 1157", " 1742 1150 596 910 19 1157 1157 1157 1247 562 1157", " 1157 1779 1157 300 1157 534 1157 1157 1402 369", " 1701 1952 1454 352 72 1157 1185 1157 1157 1157", " 1535 1157 1157 1157 918 643 1157 1948 1157 1157", " 482 627 1157 485 1157 1157 1157 181 1157 1157", " 1157 1157 1157 1636 1157 1157 351 953 1157 1546", " 784 1427 85 1157 1117 1157 1157 1157 1157 1630", " 1157 1157 1442 1157 1157 520 1157 1157 1157 159", " 1157 111 1157 855 1157 889 1967 590 542 1340 1098", " 1157 371 1157 1157 32 1267 1157 1157 1157 1157", " 306 557 1157 1171 1157 1157 1860 1459 1157 396", " 1314 1618 1157 1157 1157 1157 1157 403 1157 1693", " 1740 732 262 1157 478 1329 461 1987 1157 1157", " 1157 1787 126 1157 913 1157 1878 1157 1781 1157", " 1157 1157 1373 622 935 1157 1157 1157 1157 476", " 1157 1502 168 1157 1421 398 1157 1157 1157 1157", " 1569 1901 1157 523 1157 1157 1157 1157 415 1157", " 1157 1157 1157 1157 1157 1157 24 1157 1157 919", " 7 1157 1018 1157 1681 1157 679 1157 1157 1199", " 1157 1157 1909 1157 1867 582 1157 1157 227 214", " 1830 1409 1786 1157 1157 1157 1157 1157 1157 580", " 1157 232 1814 1157 1495 1157 610 1923 1411 1355", " 1157 1157 1628 1157 998 1157 1157 1157 1248 1157", " 1764 1157 1157 827 1157 1157 1157 1157 1157 1157", " 693 1235 670 1157 1157 1997 1187 1157 1225 1157", " 370 1767 1055 1331 1657 1157 1157 1157 1157 452", " 924 468 509 1157 1200 1157 1157 1157 584 1157", " 1157 1157 1157 615 1157 1213 1157 1157 1690 1299", " 1157 1157 1604 1157 1157 1157 1157 13 1157 1458", " 22 1886 765 1004 944 1157 1883 1157 1157 1157", " 1157 604 1157 168 1157 1336 1157 1157 1157 1157", " 489 1157 1157 743 1157 1157 268 1584 1157 848", " 753 1157 744 1157 425 39 1157 1157 1157 69 1964", " 1728 1157 1817 779 1157 1034 1157 1157 1157 1157"};
    vector<string> part2 = {" 1112 1157 1157 1157 1157 1157 1157 1153 417 1599", " 1786 1157 1157 1157 1157 314 1157 1157 1034 480", " 1157 1157 1157 1549 873 1157 1157 1157 1487 1157", " 1561 1157 1467 1453 1157 1157 1157 1256 92 1157", " 1529 1157 1157 1157 700 1157 278 1157 1277 1157", " 1157 1281 1157 1443 1157 1157 789 1719 222 1157", " 1157 1157 683 1157 1157 1157 453 1157 1157 1157", " 1157 1579 1157 1157 1157 333 1087 1157 1157 153", " 1157 1157 1013 1157 1157 752 1157 1157 1140 1157", " 1157 1157 1157 804 1157 1157 1579 1157 691 1157", " 1157 1157 1158 651 1157 1157 1157 1157 461 1498", " 518 1157 1157 913 1278 1158 1157 1359 1636 1157", " 1498 1157 520 701 50 1157 1157 1157 1206 83 1157", " 1157 1157 110 1505 1157 1091 280 727 1627 1564", " 1157 1157 1157 1105 898 796 1157 1157 1960 561", " 1280 146 1215 1157 1157 1157 1157 1157 1157 1157", " 1157 1157 1157 1157 1157 1157 232 1238 263 1157", " 1157 723 1157 1197 1157 163 1157 1157 587 1157", " 1753 86 1340 1210 373 761 477 1157 501 1157 1157", " 535 1426 1986 1255 1157 1047 723 1157 1157 1993", " 1937 1157 380 1931 1157 1157 1157 1220 1033 1157", " 830 1157 1157 399 1157 210 1107 63 1100 1157 1157", " 1157 695 1157 1157 22 504 1157 1483 742 1157 1157", " 1056 1157 1124 1157 232 765 1157 1157 1157 1157", " 1157 1157 1807 22 1157 1157 1157 1157 1157 1923", " 1157 1157 1108 679 1157 1157 1129 259 1157 543", " 154 1157 853 1157 1157 1157 1157 949 1157 1257", " 1084 1157 287 1224 1769 1157 1520 1157 1451 94", " 1257 931 1157 303 370 1071 1157 1157 1169 1157", " 1247 1157 215 261 1810 611 1157 1577 1157 1157", " 1444 1204 365 1157 198 197 1157 1157 1157 1336", " 661 1157 645 1157 1157 1157 1157 1157 1157 1157", " 1157 1157 1157 1157 225 1157 1157 1157 44 459", " 1157 159 1069 1980 1826 1157 287 1534 1157 1157", " 1157 438 852 348 1157 232 1157 1157 1157 1157", " 1157 740 134 1157 1157 98 1773 1157 766 1385 1157", " 1157 348 1157 1157 1131 1157 784 1157 1634 1475", " 217 1455 1157 1157 1584 1568 1157 1157 1017 1157", " 1157 1157 1157 1214 1660 447 1157 755 658 1157", " 1157 1562 1157 1012 1157 1572 1157 253 821 1157", " 638 984 1157 1157 1265 130 1157 282 1157 848 1335", " 1157 1157 1157 1557 365 589 1157 258 928 615 1157", " 1157 1157 1123 366 1157 1683 1157 1922 1424 1157", " 1157 1157 1157 1018 1157 1334 407 1157 418 53", " 696 489 1157 653 1157 1874 1157 1157 1157 1540", " 1049 1157 1988 907 1157 1157 413 1030 1157 1761", " 1227 43 1157 1127 425 649 1157 116 1157 1051 1947", " 1157 1411 1157 995 1424 1157 1157 790 834 217", " 1157 1157 1157 1157 1157 1157 218 1157 1157 221", " 456 1157 1858 1157 80 1157 1157 1157 1157 1157"};
    vector<string> part3 = {" 835 379 346 217 689 969 617 1779 1800 1157 1157", " 1017 1157 1157 1699 1092 1157 405 1157 1157 1157", " 850 1157 100 1157 572 830 1790 1157 1157 1157", " 1232 1157 498 1157 1429 37 1157 1157 1157 1346", " 1231 1024 1157 1157 1157 1157 1863 1157 1339 385", " 1157 373 1157 740 1157 1790 1699 505 1157 1157", " 1663 1157 900 1157 1157 747 1157 1157 1157 1157", " 1991 1157 121 10 1157 1157 185 1157 1405 1816", " 1157 1157 1157 1157 1157 1636 1157 222 1157 514", " 269 1312 1157 1145 177 1157 1157 1459 1157 1157", " 459 1157 1157 1157 1226 1157 1157 1157 1157 128", " 755 1157 1157 1157 1742 691 887 1240 1157 1157", " 1157 1157 1853 1819 1157 442 1157 349 1157 1906", " 216 1157 1017 709 1157 1157 642 453 581 699 1634", " 603 1157 1220 1157 317 1543 1269 1678 1157 693", " 853 1157 1157 1157 456 604 1157 1157 645 1251", " 1157 1797 363 773 1554 240 1511 1019 355 1157", " 1227 1950 1157 1938 1157 855 1520 20 1615 705", " 1157 1157 1607 1897 1808 1062 39 1157 1157 1157", " 1157 845 1157 1157 1157 475 1157 516 1157 1352", " 369 1516 322 1157 1157 327 1157 1123 983 1157", " 1157 1127 1157 564 1157 886 1477 1947 518 318", " 771 337 762 1182 1096 582 411 680 1068 1157 1157", " 1157 739 632 769 1157 1157 1157 1157 1157 1157", " 1157 1157 1361 1570 1157 1157 1157 1046 268 1204", " 951 1157 1033 1157 1157 1157 1617 1742 1882 1320", " 603 1157 1475 1665 1157 1245 1708 1157 1478 1396", " 662 1157 798 1157 1157 1157 675 1157 308 1882", " 725 191 1157 1157 306 448 416 531 1209 861 1157", " 721 1842 366 1167 1157 1157 1157 78 1157 1157", " 1157 1254 1157 1157 1157 751 1834 1157 1157 1157", " 550 1157 1157 1157 1157 1254 1157 1157 1533 1157", " 1393 221 1157 737 1157 1157 1157 15 1157 800 1157", " 506 1157 1440 1157 1157 1157 398 1153 1360 1157", " 1309 1157 1157 215 1157 1157 1157 1275 1157 1483", " 1157 1157 303 954 598 214 1157 970 1157 1157 1157", " 1157 1157 635 1157 1157 977 1157 1037 1157 1157", " 1157 1664 926 822 1966 1157 1192 1157 1157 1157", " 625 1157 1157 1652 1157 1157 1157 299 258 1646", " 1157 1447 1174 815 1157 874 1157 1157 1157 1157", " 1157 1157 983 1157 12 1157 49 1157 1157 1877 908", " 1157 1157 1157 1157 355 1157 1157 683 1214 1157", " 1500 1157 254 1157 1157 306 1157 1157 1986 1157", " 1157 1157 1157 1157 481 1179 1157 1157 1157 613", " 1157 1157 1317 1157 1157 1157 1157 1819 60 1157", " 1545 1038 718 368 1157 35 1831 1157 1157 378 1157", " 69 1157 1157 1215 167 1157 1064 929 1157 1157", " 1874 761 1982 1157 23 772 230 246 1038 1157 586", " 257 1157 1157 1157 1157 1157 1217 1454 1157 1157", " 1157 1615 516 1157 1383 1157 1157 1035 1032 1157"};
    vector<string> part4 = {" 1157 1180 1255 1157 1722 1448 1157 1157 1316 1157", " 157 466 1527 1853 1038 1157 1795 1157 1157 1157", " 1157 1157 1145 1356 259 835 1157 623 771 1519", " 1749 393 1157 800 1157 546 415 1157 1157 1157", " 1157 1996 1157 1157 1380 1157 1157 926 1157 704", " 339 1722 738 360 1157 92 1157 1115 1157 1157 134", " 1648 1157 1302 14 1157 1434 1157 1157 1157 1157", " 1220 1972 1157 1642 860 1157 402 98 1483 1820", " 1157 1157 1157 1157 1633 75 1157 840 1572 1157", " 394 492 1354 1157 1157 993 1447 1157 1157 1157", " 1157 1157 1157 1157 1157 1977 368 1401 1157 1157", " 1932 1157 1157 894 1157 1157 45 703 1216 1165", " 726 1630 1157 662 954 1157 1157 1156 629 1157", " 1157 60 1157 1157 1157 1157 1198 1157 1157 706", " 1157 1157 1998 1157 1157 1605 1157 602 29 777", " 1935 1157 952 1157 223 459 1157 634 1157 209 1157", " 1772 1157 714 1157 1157 1157 877 1157 1597 1043", " 1157 1157 854 467 1157 1157 1157 1046 1157 1157", " 1817 1157 1157 27 1157 1157 1157 338 1157 668", " 1157 186 1157 1157 1489 1157 79 1157 1157 1104", " 1082 1157 46 1157 1811 1157 13 1157 1157 364 1157", " 1157 1157 1157 1933 1157 1157 1862 1157 887 1273", " 1157 1157 1967 1051 1157 1157 1460 1157 1720 1546", " 379 1157 1157 1157 910 1300 1157 751 309 1157", " 1157 1980 1157 285 1157 1147 1157 1789 1689 1082", " 1868 1157 1157 1862 1157 1157 1157 1157 1885 1157", " 870 840 1157 747 1157 1716 1157 1622 1157 1157", " 99 2 1306 1157 1087 1157 1157 1157 1157 1157 1157", " 1157 1227 1150 1753 1157 1157 19 1157 1157 1157", " 1620 1157 1157 1157 1157 1157 51 1157 1157 1157", " 1157 1157 1735 1068 619 644 1635 256 654 134 1157", " 1157 464 1157 1157 1952 1157 1157 1157 896 1946", " 979 1031 1648 1821 1157 1157 1157 498 1980 1157", " 1605 1157 1157 245 1634 946 1157 177 1966 344", " 1157 1162 1157 1183 1157 1557 1157 1413 415 1157", " 1157 1288 680 180 457 1157 1366 621 1157 1157", " 1409 99 39 1157 1157 1378 1216 1157 47 702 1157", " 1582 1157 1157 535 382 1407 1157 1157 1157 1157", " 785 1978 977 1157 1157 1940 1402 1157 260 924", " 665 1482 1157 1157 1157 1157 1157 1157 213 1157", " 1157 591 149 1157 1157 1157 1154 1157 1157 427", " 76 1157 1552 1157 1289 1633 792 1157 1383 1445", " 1718 308 1157 257 1035 744 1273 1157 1157 1157", " 1501 1157 373 1206 1837 1157 102 1157 1157 1449", " 1607 75 1157 225 1050 1157 363 1506 884 993 1157", " 1424 1157 1157 641 1157 1157 1157 1157 1591 1157", " 1157 1157 923 815 135 1495 504 1632 1157 1157", " 1157"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 15976;
    if(result == expected) {
        cout << "Test Case 53: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 53: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test54() {
    int numSheep = 2000;
    int maxRuns = 133;
    vector<string> part1 = {"1337 1627 1337 1337 1337 198 1337 122 1754 1040", " 1337 1125 1404 915 1337 244 944 1337 1337 1289", " 1337 1337 1337 403 1337 593 592 1337 1337 403", " 1337 1337 1337 1068 1337 1337 388 1337 1916 1997", " 1337 1337 1040 1196 1532 1337 1337 1038 1337 1543", " 1337 752 1337 1505 1337 1337 1337 1337 1337 1337", " 1337 1336 1924 682 496 1337 1337 1337 340 1542", " 1318 254 1362 1213 1337 1337 1337 1337 1337 1337", " 1337 1218 1337 1337 1337 1414 1337 1345 1890 1337", " 1337 931 1337 1337 1772 1337 805 1337 1337 1337", " 345 1337 1337 1337 1516 1999 1337 1337 1337 1337", " 1583 1337 1337 1337 1827 1337 1337 1671 1337 1337", " 1337 1337 1567 1337 1337 1337 120 1337 1337 245", " 700 1337 1393 1605 243 1337 1337 65 1337 1337", " 335 1337 947 1337 1337 121 1554 1337 665 1337", " 1337 1337 1337 1337 1337 1337 124 1542 1337 1897", " 1268 1123 1337 1337 1719 614 1337 1337 1734 1337", " 1337 422 1337 1337 1414 1337 325 1337 1337 1337", " 184 1337 1337 1337 106 613 1158 1306 1052 233", " 1337 1472 1337 346 1011 1337 1337 1337 1337 1854", " 1337 1337 1337 1337 1868 358 1337 1062 1853 74", " 1341 199 1892 189 1337 1337 1008 1437 1337 1337", " 1337 379 533 155 825 1879 149 1337 1337 1337 1706", " 1250 1337 132 1337 1337 681 1337 1337 852 1337", " 1337 1090 1337 1337 1337 72 1337 1337 350 415", " 13 1620 1178 1337 1337 1881 394 51 368 1337 1337", " 732 1337 230 1337 1337 582 192 213 1337 1389 1337", " 1337 1337 1337 631 270 1337 1926 1426 1337 1337", " 144 1255 1337 1337 1549 1279 1337 1337 1062 1108", " 326 1337 1711 32 1372 1337 1337 1337 978 1322", " 1337 1337 1253 816 1455 1007 81 103 865 1021 566", " 1337 1337 797 1337 1949 1554 1337 1092 1337 616", " 1979 1337 1337 1337 175 1337 1337 1337 1337 1498", " 1337 1337 1707 1337 1337 1337 149 1258 1337 583", " 604 1337 1337 1377 803 1337 1337 1337 1337 1689", " 1337 1337 1733 1144 1748 391 1337 1216 1781 175", " 617 1337 1337 1337 1337 1337 1337 1337 1337 1813", " 1337 1337 1337 1337 1337 1337 1945 1337 440 1337", " 1337 587 140 1337 1337 1337 1337 1337 1331 501", " 755 1026 1337 778 1337 1415 1337 1337 1337 1929", " 1889 1337 1337 435 1000 1337 1337 786 384 1337", " 276 1532 315 1337 343 1907 1337 1337 360 391 853", " 1337 1337 1337 58 1337 1261 1843 1337 1337 1337", " 1924 1337 1717 1337 1182 1337 95 1337 1437 1337", " 1337 1337 1337 349 1337 1337 1337 1683 1077 473", " 239 1337 1337 2 1285 1337 519 1436 411 1337 1337", " 670 652 1337 1337 1337 1899 1337 872 447 1337", " 1337 299 1337 1337 426 1337 1337 1337 1337 1337", " 1337 348 1337 1337 66 1642 1337 1337 37 834 1280", " 1337 1538 1609 1337 1337 1956 1465 1337 714 645"};
    vector<string> part2 = {" 1439 1337 1522 1337 1337 475 1337 1337 1337 1337", " 1337 1337 1200 1877 440 1337 17 1337 1676 994", " 1814 402 1337 1337 116 1961 274 418 1337 288 1337", " 527 364 431 1337 872 1337 1990 1337 322 1623 1337", " 1337 1337 577 1337 734 1869 42 1337 108 1676 1337", " 1337 836 1337 1344 1337 1337 1337 1737 975 1337", " 857 1681 1337 1950 1337 1337 196 1337 1011 699", " 700 1337 1337 1753 1337 1011 1948 1661 1337 128", " 1337 1320 1337 1337 631 415 1337 1337 1971 1821", " 784 1337 1337 1337 1337 1337 1337 855 152 1337", " 1793 1337 1337 1337 1337 267 634 1125 823 720", " 1337 370 1337 1366 1337 1179 1337 1337 1458 1337", " 1288 1591 1337 1337 939 1670 1459 1337 1337 1817", " 1337 1337 1337 1337 207 1026 1905 1337 1337 1999", " 915 1337 1600 1337 6 736 1489 1337 1337 527 1903", " 636 1837 215 283 1337 1363 1337 31 1337 132 840", " 1337 1337 1337 1144 947 468 1418 1890 1337 1337", " 1337 1927 1469 1337 1337 1928 1433 1337 819 1337", " 305 1594 543 46 551 1337 1337 1445 1337 1337 1352", " 1066 1371 1714 1337 987 470 1337 1337 1337 947", " 1337 1337 235 1337 891 1337 742 1337 1337 1337", " 1115 705 1337 295 1337 1337 1337 1337 1932 1337", " 1337 1216 1337 1406 1337 761 1337 1337 1337 1337", " 1337 1337 1212 1527 1807 1337 1444 1337 1337 1337", " 1337 515 1599 1337 1489 1248 1337 1337 1337 1337", " 1337 1904 273 750 668 1337 1650 1337 1337 1337", " 1337 1961 1337 1337 1337 1337 1932 1337 1337 1337", " 1337 1124 1337 31 45 1337 1080 466 1337 714 274", " 1337 1337 1576 1337 1337 1337 1784 950 1317 1921", " 204 1337 1337 1337 305 1564 873 1337 1337 1292", " 598 777 1337 1337 64 1337 1681 384 1337 1936 746", " 1337 641 236 1337 1337 413 1337 1847 1337 1337", " 1067 1337 1337 614 522 1337 232 1337 117 1087", " 495 1337 1337 1337 1324 576 1337 403 1102 1337", " 1337 1337 1337 1337 1337 251 1337 396 1636 1337", " 1337 811 1941 1337 1337 1337 1337 1337 1337 1337", " 874 1395 1866 1401 203 29 78 1303 1264 1688 1975", " 1796 938 1337 1482 1337 1720 1337 1337 1337 1337", " 419 1337 1615 7 1337 1337 1337 393 26 1337 436", " 1337 1337 1337 1337 1337 1337 1337 1337 1337 1623", " 1337 1337 1337 1337 144 607 976 129 1337 912 186", " 744 1337 1227 44 555 1337 700 1555 1337 1337 1812", " 1663 1337 1337 1876 67 515 1337 1056 1337 1337", " 1410 994 1508 1337 1337 1337 1337 1337 1337 19", " 1337 394 882 1337 1337 146 1337 812 1182 1156", " 1337 1337 1337 574 1667 261 1337 1931 1638 1337", " 1337 1337 1827 769 1578 1485 1337 1527 1337 1337", " 1251 616 1337 1337 1337 1337 1348 814 1337 1337", " 1301 92 1337 724 484 1337 1337 1468 1337 1337", " 1376 1839 1337 605 1749 1337 1337 491 1337 1337"};
    vector<string> part3 = {" 1287 1337 1337 1337 1337 1337 1337 1601 1646 1337", " 1337 1129 1808 718 1011 1337 20 1337 1337 1337", " 1337 1228 1182 1337 914 1664 1337 1251 262 1353", " 1337 1337 1337 1337 480 1337 1337 1038 1337 239", " 1653 1776 4 299 1337 1337 105 1337 1521 708 1337", " 888 1337 1363 1337 1337 1337 446 1337 1337 24", " 1032 911 1337 1337 1401 1337 714 701 232 983 1337", " 1337 1337 757 1337 1479 1042 1510 1337 649 1337", " 278 1337 1337 1337 1337 1337 324 1337 1337 1337", " 1337 1337 309 1337 1337 746 1337 617 1813 1337", " 1337 1337 1827 1337 1214 1337 971 1244 1523 1337", " 1134 619 761 415 1337 95 1337 1337 1337 1895 1337", " 1545 1337 1337 1658 1337 152 398 1337 963 1337", " 1337 214 1337 1337 148 1337 782 1337 1337 1706", " 1840 1337 1337 1337 1337 1337 1337 1337 1357 1248", " 1327 1337 437 1337 484 1337 1337 1337 1337 1337", " 74 1337 1220 507 843 1159 902 1337 1428 1337 1337", " 1077 186 1337 947 1337 630 1490 1538 1337 1337", " 140 211 1337 920 1424 215 13 1337 1279 1337 1337", " 268 1337 121 1337 739 1337 1337 1337 116 1337", " 662 1337 168 537 1337 1337 1909 1459 1337 1505", " 370 1887 1918 1337 1337 1680 1337 1697 1478 1973", " 1939 527 1337 1095 665 1698 351 1496 512 1337", " 1982 1047 1337 164 943 1337 330 1337 1197 1337", " 1337 1337 1337 1337 1337 1368 1337 1337 1337 1337", " 1340 1337 1773 513 1582 1069 1337 1337 1337 738", " 1337 1589 440 1337 526 192 1337 928 1924 1337", " 1337 49 198 1046 773 1337 1337 1337 1337 543 329", " 1337 1337 904 1337 197 533 329 1337 1065 1050", " 1689 1337 1337 1476 1337 793 1337 393 1337 477", " 1337 583 1337 256 1337 1337 1337 1519 1661 1102", " 1337 1337 1337 1715 1337 357 1337 1337 1337 1337", " 1337 1337 1337 837 754 1337 489 1337 1337 1337", " 1977 1337 1337 1003 1554 1390 1774 1153 4 522", " 1337 1337 1337 1719 1337 1336 1651 1337 924 1337", " 1337 176 15 1864 1337 651 1238 931 1512 445 1337", " 1337 520 1204 1337 1337 1337 503 740 1134 1337", " 1446 791 1295 1462 979 1337 1337 1337 1337 1337", " 1337 23 1365 1337 1337 502 217 349 1337 1838 1337", " 1337 1337 1337 497 1337 965 591 310 1337 199 521", " 1337 374 1337 1341 294 1337 1337 1525 1939 1337", " 1138 195 78 1337 117 1337 1590 70 1551 1337 1337", " 1337 125 1337 1337 499 1473 1337 1337 179 1337", " 1337 1986 1673 1749 171 1337 1337 813 1337 1934", " 1632 1189 1337 1337 1020 1337 347 1337 1798 1337", " 1337 1196 1337 125 1337 1337 1737 1337 813 1337", " 1337 804 1337 1337 1337 1337 1337 1337 1072 934", " 1337 74 1337 1337 1337 1337 1337 1002 893 1337", " 985 1921 1337 1337 1337 1817 759 1731 285 1337", " 1734 1337 1013 984 1920 1337 1337 1337 1337 1337"};
    vector<string> part4 = {" 886 1337 1337 1337 1337 1337 209 1337 1337 1046", " 1337 1999 1337 523 1337 781 1337 1337 1953 292", " 1818 1337 10 1337 875 1611 924 1337 1377 204 850", " 596 803 1337 1332 1524 1207 1009 1337 1449 1337", " 1337 126 313 836 1337 1705 583 1337 1337 1337", " 927 1337 44 1439 1337 1337 314 1837 438 1261 1127", " 1337 1337 1602 950 1337 1337 45 933 5 1337 1372", " 1337 1337 1740 1337 1665 688 1596 1337 1337 1337", " 1259 1337 1337 1337 1337 1337 1337 1337 782 1337", " 1337 1951 1337 1337 341 1337 1337 1866 1337 1337", " 1337 1337 791 1794 656 664 1910 1337 1208 1044", " 1337 445 1337 1337 1337 1337 1337 1274 1337 1337", " 1337 1337 550 1337 1337 1337 1701 1337 1337 1337", " 1337 1337 155 766 899 37 1337 1337 1031 1337 50", " 1337 1337 99 1337 1735 765 1337 1337 191 1337", " 1337 1337 1337 1337 1664 1337 1337 1859 1337 816", " 1337 1337 1337 876 1337 132 1337 215 1337 884", " 561 1609 1873 1611 1337 1337 17 1337 1055 1337", " 1337 1337 1046 723 1337 1337 1337 1337 1426 1337", " 1868 1337 1172 1188 32 1337 1337 1391 1337 441", " 1038 1337 1337 1337 1337 492 1101 774 152 1337", " 1197 1337 1639 684 1337 1337 203 577 1337 495", " 964 241 1337 1337 1337 1337 1956 341 746 973 1337", " 1337 1337 1337 1337 1337 1337 530 68 819 600 1337", " 1022 1339 1472 956 1337 1337 1337 315 355 1337", " 267 1249 237 1306 809 33 1337 1238 260 1405 1337", " 222 1292 1337 1676 479 1754 281 1337 985 240 1337", " 415 858 92 1337 1337 387 680 1252 1337 113 1337", " 1498 1337 1337 1337 1337 1337 213 1337 1172 1121", " 436 1142 148 1337 1337 1337 1337 1337 902 47 1337", " 1337 1394 1223 1337 1337 1337 1337 1886 1337 1337", " 1337 1233 1337 1337 306 1337 1365 1337 609 1337", " 510 1745 1337 1337 1337 1337 455 1337 671 1337", " 1337 1109 1938 1337 1337 1327 1640 1337 1263 1337", " 1337 1561 1337 1337 1337 1883 1337 879 1337 1343", " 1469 1337 1337 1000 1337 1630 1337 567 1337 1337", " 1337 1379 1928 1957 1337 1151 1337 1337 1990 1108", " 1337 1993 1337 1337 1337 1337 1337 1337 1929 1337", " 612 1337 1537 1337 1337 765 953 1337 1337 976", " 885 1337 290 1739 1337 1373 947 1205 1541 1337", " 1337 1337 1337 66 1337 1337 1337 1337 1337 498", " 1337 1337 1336 256 1638 1337 1922 1337 1337 108", " 247 1337 1337 1989 1337 1337 1337 1337 1337 1337", " 1118 1669 1337 1337 1313 1554 1337 134 1337 1337", " 1337 971 1584 731 1337 1337 679 1221 1084 262", " 1883 1337 1633 1337 452 1403 1603 329 1444 1337", " 1726"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 17506;
    if(result == expected) {
        cout << "Test Case 54: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 54: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test55() {
    int numSheep = 2000;
    int maxRuns = 133;
    vector<string> part1 = {"815 1667 1667 1667 1667 1667 1667 226 233 1667", " 1667 1667 1667 1677 1158 1359 888 1421 442 1667", " 1667 1667 106 608 163 1101 906 652 1667 1667 1667", " 1544 1931 183 1667 1019 1959 1969 1667 1667 1667", " 1667 1667 62 1567 6 1322 913 1515 1667 1667 26", " 773 1667 1667 447 1667 239 1224 1667 1667 1667", " 365 1784 1667 1667 221 628 1667 1667 1851 1667", " 1667 1667 1798 815 1667 1667 1582 1504 240 1667", " 716 1667 1730 785 1175 1667 1667 1667 1667 1619", " 1667 406 1144 632 1968 1294 1667 18 1667 1390", " 1116 1781 56 223 362 1122 1667 1667 1667 1713", " 1667 1091 1667 1667 1667 1667 1667 1667 483 286", " 1667 1667 1666 339 1667 1667 1667 1239 1667 1863", " 1667 1683 3 1001 1854 1667 1667 1049 1964 1667", " 276 1997 1667 1576 1667 1667 242 1667 262 1667", " 1667 569 821 1667 1667 1667 1667 1070 1667 1667", " 1667 1667 1667 1566 1667 1025 1667 1667 1181 1667", " 1134 1667 1667 1667 1971 1667 1667 1809 1667 1133", " 1111 1667 1667 43 1667 1667 516 1667 1480 1109", " 888 1386 1573 1667 1667 1667 554 45 1719 1667", " 195 1667 149 1667 1363 253 501 1667 1667 1682", " 1768 1667 923 1667 1667 418 1868 1667 1667 1665", " 492 1667 1029 215 1667 1086 1747 595 1667 1667", " 1667 1667 1667 1548 1667 1667 1644 1781 1667 1516", " 966 263 442 1667 1667 1667 895 1667 908 1667 338", " 1612 484 1427 685 89 1667 1667 189 1667 365 533", " 1667 1667 1667 1667 1473 1723 1667 249 838 107", " 1937 1667 340 1667 1667 1667 1667 1171 1667 1667", " 1667 1667 1965 1667 1667 1667 1588 1667 140 1226", " 933 1667 1667 950 1163 1667 1667 1667 1667 1289", " 1667 1667 1667 1667 528 1864 1667 1667 1652 372", " 234 1667 1667 846 211 1667 223 1667 1996 1151", " 1588 1878 1667 1667 1789 1405 1667 1667 1578 1667", " 1667 1667 1667 1667 1667 888 1667 1667 1667 1667", " 1667 1667 1667 728 1667 1667 225 566 206 1667", " 1941 966 1667 588 1667 891 1667 1927 1594 333", " 478 1667 1986 1667 1667 1667 1819 918 844 568", " 1667 1667 1667 1667 1667 1667 1072 1667 1667 1667", " 930 1112 1897 1667 1667 1658 1053 1667 1667 1667", " 1667 838 1667 1667 909 748 1667 793 227 1667 1883", " 1042 955 1667 590 388 1667 818 1667 122 1667 1898", " 1990 1667 1667 1138 336 175 1667 574 128 1491", " 1201 1377 1249 1667 1775 619 293 50 1667 1753", " 1569 711 1667 191 1667 1667 687 1667 1410 1667", " 1749 1667 174 788 1667 1890 40 1577 206 91 27", " 1667 1667 835 889 1667 1385 829 992 1667 1667", " 1265 1667 737 1667 1309 555 1667 1667 1667 1667", " 1561 1667 1667 1667 1667 1317 1667 1667 1667 319", " 1667 544 1667 22 938 823 1616 1356 1667 1667 1951", " 1667 386 1667 1667 695 1667 1906 1667 1667 1686"};
    vector<string> part2 = {" 1662 1667 1667 1767 1667 1667 1667 1667 1667 1667", " 445 1667 1054 1838 1763 1492 1614 1667 1667 1667", " 901 1575 1667 1667 1667 1624 1012 1134 146 287", " 1667 457 1560 1667 1667 1089 1667 1667 1667 1667", " 1667 1667 1667 1667 569 811 1667 1667 1667 226", " 1667 1667 1667 1922 1667 1667 1667 544 1667 258", " 976 1525 1085 1426 1127 1667 578 763 1667 1771", " 1667 1667 1628 676 1667 1667 1667 959 629 1667", " 830 1667 570 888 40 455 1667 1667 1667 574 1667", " 1667 1667 933 1281 1667 998 592 1667 208 187 1667", " 1991 1667 1667 209 1667 1667 1667 738 1667 1667", " 1636 1667 818 1639 1593 545 931 1667 813 1667", " 1667 1667 1667 1667 454 1667 742 797 1667 270", " 171 1667 1667 1157 1667 1667 1667 1667 601 1667", " 74 868 1667 964 1432 1667 559 1667 1667 1667 52", " 1194 1667 652 1667 1548 1667 1667 1667 1667 1667", " 1667 1667 1031 1149 1667 1667 1667 1667 322 163", " 1277 1766 1667 1524 1667 1667 1667 1193 1667 1667", " 1667 173 608 1667 1667 1861 1777 1667 1667 1366", " 716 1429 1667 1667 1667 505 1667 835 1102 132", " 1246 1667 1667 1667 407 55 932 780 1667 1667 13", " 1895 253 1442 1667 1667 1667 707 1667 780 1667", " 755 528 1755 996 379 1667 872 1667 3 690 1562", " 423 1667 1667 1078 1737 1667 1984 74 194 1667", " 1740 1667 1667 129 1667 1125 1958 1695 843 1667", " 905 1667 1667 1667 1667 1518 1667 1667 1667 103", " 1195 1771 1619 1667 1257 702 493 398 200 1667", " 1667 1197 809 1667 495 140 1844 857 995 1667 702", " 1667 926 1667 964 1145 1651 1869 1667 1667 1162", " 1886 1575 1667 1667 1667 1667 1667 1433 1667 1196", " 1667 349 1667 1667 1667 1667 476 1337 1667 1667", " 1667 236 1667 1667 1667 104 75 1667 590 306 1667", " 1667 149 404 888 1934 1667 954 1667 676 1667 304", " 1205 1147 710 1667 1667 434 1667 721 1667 1667", " 710 1667 714 1667 1667 1573 1408 1667 1375 1667", " 1342 1667 855 1639 158 553 93 1667 391 1667 615", " 1667 1667 1667 1667 1667 1639 327 1667 1667 1667", " 1738 601 1736 1667 1667 1667 1254 208 1667 913", " 1667 818 1948 970 375 1667 1667 1813 1667 1667", " 24 735 1667 251 1667 20 1667 1928 1667 1396 310", " 1713 1667 1667 1815 1532 659 981 1981 119 385", " 1667 1718 1277 1732 2 309 16 697 1667 159 1294", " 1667 1046 1220 1667 1748 1416 1667 1575 1667 1667", " 1667 670 1261 1667 78 1873 1667 1667 787 1667", " 52 795 1667 1135 1667 1695 1587 1667 1242 168", " 447 1667 1667 1648 1667 1667 1837 1667 1502 1667", " 1320 1667 1829 617 1972 1332 1667 1667 623 1667", " 1667 1667 1667 1667 1873 1829 1168 924 981 1667", " 1402 1667 100 1948 227 1667 1212 1667 1583 1667", " 1667 1667 1667 1667 989 1667 953 555 1640 1667"};
    vector<string> part3 = {" 1667 1714 1667 1390 1667 1667 622 1997 1551 1667", " 1073 1039 1667 1667 749 1325 1667 1965 1667 1047", " 691 680 1667 1864 1667 664 1825 1667 1604 1667", " 1191 1667 1667 1667 1667 1667 416 1667 1196 568", " 1233 762 775 1038 338 741 232 1732 747 1667 619", " 1667 322 1206 321 1667 913 268 1109 37 1667 1667", " 255 456 551 1667 1667 1864 1667 1667 1612 832", " 1667 1667 448 1667 1737 1667 915 1479 1667 1667", " 1667 96 1667 1238 1667 1667 1667 1667 1667 1667", " 1667 1153 1667 1667 315 1667 1002 1667 1667 1667", " 1619 1667 1667 1667 544 1060 1667 1194 1667 1543", " 1853 1667 582 1667 1305 845 97 1966 1388 1620", " 1127 1667 1686 615 1667 1667 1656 1038 766 845", " 1156 1667 101 1667 1667 1667 1667 1926 1667 1738", " 1667 867 1404 1866 970 1667 1667 61 1667 1434", " 1667 1889 1098 1205 1667 320 1636 590 1379 1667", " 630 1667 1667 1667 899 1667 1667 1667 1667 1631", " 601 716 1667 1819 848 1667 73 1667 879 293 598", " 1496 1667 1667 1059 1667 360 498 1667 1819 1667", " 1667 1667 1161 1720 1667 1667 1667 1684 1681 1816", " 101 1744 794 80 1510 1667 1667 1667 1667 357 108", " 189 1312 1667 1146 1886 553 1667 10 1667 1667", " 695 569 1667 1667 545 827 1667 1667 1667 1667", " 64 1667 600 1184 1667 266 923 1667 1667 1667 437", " 1042 1667 645 1667 1667 1554 14 1665 1667 1667", " 1667 927 1667 1451 1621 1946 1667 1633 1922 1667", " 1667 908 271 1993 1667 1667 1667 1667 1667 1667", " 318 271 1237 598 1667 1748 1020 1667 1667 1667", " 1667 1667 613 1667 1862 1667 1667 1807 1128 1294", " 1667 1667 1667 1667 1054 1509 1451 1667 434 1667", " 1667 1667 1667 1667 1667 1667 1111 1705 1114 1667", " 425 1334 1667 1667 580 1667 1716 954 1541 925", " 1015 1667 1142 1667 1667 240 540 1667 236 1667", " 1667 1667 1667 1667 1667 1667 1654 1944 403 1667", " 1667 1667 1667 1721 1667 1667 453 1270 1827 1667", " 1667 729 1667 1667 823 1956 1695 1442 1078 1701", " 107 1667 1667 1287 403 1667 1667 1830 1365 971", " 1667 1667 304 1667 1600 1667 863 1667 1667 710", " 1667 346 1370 1231 1667 1118 1552 1667 1667 1667", " 1667 1667 775 1552 1667 1927 1667 1162 1292 1667", " 497 1667 1667 1667 1081 1667 626 1011 732 1008", " 1348 1667 1667 1667 1667 136 1667 1667 1667 1252", " 303 1667 1502 952 1778 1667 1254 1667 1273 1667", " 1805 209 1667 1667 608 1667 1464 1667 117 1038", " 1667 1667 1667 198 1667 1667 1209 1667 1667 1667", " 1667 1667 1667 1667 615 1227 1667 942 1667 1667", " 1904 1667 93 1713 1924 534 1667 1667 1667 1667", " 351 429 1667 1667 1667 1417 1121 1667 1331 1091", " 1627 1667 1667 580 1205 1667 157 1445 1667 967", " 851 1418 1488 966 939 1667 786 1667 1667 1188"};
    vector<string> part4 = {" 1667 1667 1667 482 642 1830 1667 1667 1667 1667", " 606 1545 1667 1667 1667 91 7 1472 1667 838 354", " 1667 633 1667 1667 1907 1667 62 1667 654 1667", " 1095 1667 1667 1135 1417 1667 1667 1667 1905 1648", " 82 168 1667 1965 1667 617 1667 1667 1499 1667", " 1539 235 600 151 1667 1266 1915 872 877 1119 604", " 1667 1398 1839 1054 628 1667 1667 1667 1667 1667", " 1667 1362 1667 898 1999 1667 1667 1667 1667 1667", " 1667 1455 795 1418 1170 1667 1667 1667 946 1667", " 1667 1667 1667 1667 1005 132 1715 1667 1667 1667", " 1667 23 1667 1667 1667 1667 1667 1428 1667 1667", " 1667 1580 245 563 1667 1667 876 1667 1667 715", " 824 1429 1667 1161 1667 1667 803 1667 411 1667", " 1393 726 856 1667 1667 1667 1667 1161 1667 851", " 1007 1786 766 182 1667 1629 1667 1667 657 1041", " 1667 1667 1667 1667 275 663 1218 1667 1667 1667", " 926 1667 1667 1667 1667 1667 1823 1203 1667 727", " 1165 1210 268 1667 1871 1667 1667 547 1667 1667", " 1667 1667 1667 1448 1667 1667 243 1667 1667 1667", " 888 274 1667 4 1667 467 1354 1373 1667 1043 555", " 1659 768 1914 1667 1667 1667 1667 1667 281 378", " 1667 1667 1667 494 1667 1667 1382 1667 1667 1667", " 663 1079 1667 1667 1667 1667 1184 331 1667 974", " 42 1667 1667 1667 351 1667 1667 739 1667 1263", " 1667 1605 133 1667 1667 1619 864 1667 1188 1870", " 1667 498 1667 639 1667 1667 1667 1667 1667 597", " 135 1667 657 1667 428 1992 820 1667 1667 693 1667", " 1667 1667 1667 1667 839 1646 1655 1667 1667 1667", " 1701 1667 1667 409 1637 1619 600 1667 1667 1667", " 1667 304 1667 1002 1429 919 1667 1667 449 1419", " 1077 1133 1082 1667 1667 468 1667 1879 1539 1667", " 940 1755 862 732 55 263 176 615 1767 1979 1667", " 647 1667 573 1624 1667 1873 1667 1667 1667 1667", " 1667 342 550 1394 1667 1667 1667 1667 545 1323", " 1667 1995 1667 1667 1667 706 1667 947 1667 688", " 239 217 1531 1667 1667 141 1079 1667 1247 1667", " 1451 1970 1667 1667 1667 1842 393 1667 1667 1667", " 1035 1667 1815 252 830 1667 1667 291 874 29 1069", " 430 1382 1707 1667 1765 1266 781 1667 1802 1667", " 1667 657 467 1667 1926 1667 1801 1667 1667 946", " 815 1667 8 1190 1667 961 1152 1740 1480 1628 1667", " 1667 1667 1667 1436 1667 1667 1315 1667 1667 1772", " 1667 224 1994 180 1667 558 1667 915 1435 1667", " 1667 1279 1667 1667 489 1667 1667 1667 1667 572", " 758 1784 1667 1667 1836 1139 330 1667 957 300", " 869 1667 1667 1433 1098 626 1667 1667 1667 1667", " 1667 1667 1667 359 1667 1594 259 1667 1667"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 19926;
    if(result == expected) {
        cout << "Test Case 55: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 55: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test56() {
    int numSheep = 2000;
    int maxRuns = 300;
    vector<string> part1 = {"1 1186 1984 1641 1 1 1 612 559 1 309 1 1 1 1 1472", " 1809 317 1 200 1 1 1530 1048 1 1 387 1 859 1546", " 1297 744 276 1076 1183 1 1 1 1 1585 355 1461 1", " 360 1 1 1 1686 206 959 1069 1 1500 232 1 1 1 886", " 1 1 1 1 1 1 1 1 1 1 772 31 1642 1224 696 909 872", " 1688 1 1 1 1 1 183 51 1 1806 1 1 1 1 1 1541 1907", " 1 979 237 858 1862 1 1 1 1 1 1 743 108 1 1 1 1", " 1566 1 1764 441 1 1 1615 1 1 1 60 1821 1474 520", " 1 593 1 1 1879 1 219 1600 1 1 1 7 125 372 1 907", " 1 1 1012 1 1 484 1 1 1029 1065 1754 1150 1 360", " 1 1 502 534 1 1 979 1 1 1 1 1139 840 1879 1 1756", " 1 1 756 618 1 1 1 1 1 1 1155 1772 1191 1 1261", " 1 471 1 1535 696 446 19 1 1214 6 1381 1 662 1", " 90 1971 1 1462 1 1 714 1 1 1 430 1888 196 70 609", " 1179 300 991 1 576 1 737 1895 1 1990 1 222 1 54", " 1 1 1 1 533 1003 1333 790 1410 1 1 471 1 1 1 1", " 1 385 837 516 1351 1285 130 1 1 1455 1 1304 1330", " 1 423 1 1 702 514 1 1481 1 950 330 783 1805 1", " 44 1635 1 1 1 1038 1982 1 1 1 1 1 1812 598 333", " 1733 1 1 1223 1 1 1 1 890 920 1325 1 1 685 382", " 1 1 54 1615 434 1666 663 748 1969 1 1 1042 228", " 1 1 1 1 721 1580 1 1542 254 1 347 96 1 1 1 886", " 547 1619 1 1 1 451 1 1482 1 1940 1 117 1067 1", " 1484 1 489 1451 1 1 1802 1789 1 1 1 20 1 1 1150", " 1490 511 23 494 1 1 1 1 697 1352 1838 1 1 1 1274", " 424 1 1 1 1 433 1119 1057 1 1702 1446 559 1132", " 1 668 1 1092 967 1 823 1336 1213 1 1 1 1 1 1111", " 706 1818 572 1 1 1 1 325 1 935 1370 1 515 1337", " 228 1 730 1 1 1 1 1 245 940 1 1 719 1 1010 1 1", " 1 1 731 1 1042 1950 1565 1076 1 1803 1 61 1368", " 1 1 1 168 1 1 952 210 634 816 1108 858 1691 1", " 1 1 1221 142 1408 1 1 949 1 1 1175 1693 1 1 1", " 1 1635 1 1 1026 1 1 1 1893 1780 1313 226 274 1", " 1 1 1 1 719 1 1 1 1 1 1138 1285 185 1 872 1389", " 470 1 818 1 1 1 997 1 1896 1 1 1 1 618 520 764", " 997 1 1975 1827 1 1 1 1379 1955 1 1 1 1 612 1411", " 1214 1 1 1153 619 1 1 1 168 1171 993 1070 1 293", " 1529 1 1949 1945 1 855 1 1 1110 1104 1 1 452 1", " 1 1 1104 1 174 538 1 1167 903 1 1 360 1074 1285", " 817 1 880 1 1 1202 1 1 1 1 1 1 1 1063 83 1 1516", " 1 1339 1 316 937 571 1 1 1 1 1651 1 1 1547 1 478", " 289 1 1 587 563 1729 1 166 1611 1 754 174 1438", " 1 1 908 1839 1 783 1 421 1416 1 1 1 1 859 810", " 1 1121 1 1 1 1548 779 1 713 852 1 1445 1 840 1", " 1 1 943 1 1 1 1 1 1 1 1 135 1 1 1 540 1 255 1825", " 1 1 1 1256 1 1936 562 1 1 1 1906 541 1670 1503", " 487 1149 1169 1 1 75 540 223 1 1973 1240 1331", " 28 1 472 1 1 885 935 1 1 1576 1895 1 433 1 1 1", " 1585 1019 824 1 1779 1 160 1 1 1 457 1 1 1 1 1330", " 1 1848 1893 152 202 1 705 1 50 664 922 1 906 1"};
    vector<string> part2 = {" 1 1 51 1219 510 884 810 327 1 1 1 1 1569 680 1", " 1 1 1 1 74 1 1637 1 1 1 1 1 607 1 1 1577 1 97", " 208 1 1 1 1746 1117 1 1467 1 982 1 903 1100 1", " 169 1 1 408 1190 1 1 1 1 1 1 837 358 102 1 1 1", " 1 1 1133 1 1 503 1 1 1 1 1 1 20 1 1 1246 1 1849", " 1 1 1 1 880 1314 1 1 1 175 1063 1783 1 1 199 1", " 1573 908 1 1938 117 1 1 1360 1 1 75 1689 1060", " 182 1 1051 1 716 644 1 1 1 1926 1815 235 1 209", " 1 316 1031 1778 1 1935 361 1538 1 117 1 303 1", " 1 1 1 1646 1 868 1921 1273 1 1348 1 904 1 1648", " 1840 1 1 663 1888 1 1 1 486 833 1179 1204 962", " 305 1 1 1250 311 68 10 1961 1714 1053 1 1 1228", " 1 1303 1 1 1490 968 1 1 1 1675 537 1 352 1764", " 1338 1 773 1002 1166 103 674 1 1577 1 1 960 1", " 1 311 1 1137 1 1 1 1590 1 1 27 1367 1 1 1754 1", " 1 1093 469 1419 1 1445 1 359 1 1 1723 1 540 485", " 1731 1 1 1050 840 1 1598 599 1 179 1227 1140 1430", " 1627 1 654 1 1 1669 747 1 1 1095 778 1 725 151", " 1 1667 71 1 1372 770 1428 752 509 1 1 528 1 1", " 1353 972 1093 1 1 1342 1 1 1878 1000 1 1561 799", " 1 861 1 1383 1 1 185 784 909 1 1 1 1 1 1 952 889", " 1347 1 1 940 686 1 1 1 1 1421 42 1 1601 1296 13", " 1 606 391 1 1152 803 1 1 1135 1 1065 402 1644", " 983 1 1 920 1 1 1351 1 1 784 1311 1 1 1894 1 1", " 1 485 1 1560 1 616 1 476 1579 611 1 1 500 1928", " 1 1 1 1 228 1 331 1 1541 1 1 451 1 553 1 1541", " 1244 377 227 1815 1 1 943 1 1 1 737 1 1 566 1", " 805 370 662 61 1 1564 1357 1 1 1 615 423 1532", " 1 1 1581 1 1149 555 1 782 1068 1 1342 1 1 1 1911", " 827 1133 1 1 1 517 202 1 833 1 1985 831 1319 273", " 1889 18 1 1 1 1 1 1 1 1416 1 1 422 1 34 1 1188", " 1430 432 1 651 1833 540 407 1 1 1 1 1 1 1 770", " 1366 1 100 526 259 1 1 1 1 1268 1798 709 650 1653", " 1 1001 1560 1 1 1539 1259 20 1 1704 1481 1 1 1", " 858 607 1 1757 1 1 964 1 1 1429 1 1250 1267 1", " 1 1 1 1716 1 1 1 1459 1 1 1317 162 1978 1 1 1", " 1 1 1 794 1 1 1226 985 584 590 50 1768 1367 112", " 573 1 1 1890 1266 309 1750 1 1 432 1 1599 1306", " 1659 648 1533 1 1461 492 1107 1 453 1 1 305 1508", " 462 1 1576 688 1141 923 426 1 1 1 1528 1 1 1 1", " 1 1 1 807 689 1 1413 1 1 1 1 1278 1 1 196 1 221", " 1 896 1 1 1 500 1 1 1767 1859 1 1215 1562 1724", " 1287 1948 1912 1 1134 1784 1 1947 1 1 1 1 1023", " 1 1 5 1 642 917 1 1741 1246 1446 360 916 1186", " 1 1 1 454 1 1 518 1890 350 89 1445 1 1571 1 1", " 1530 1 194 1 915 1139 805 1 1049 552 1503 1 1", " 1 727 1 629 1 1143 1 811 1973 1 1 1 776 580 1", " 1 848 1 1 1 1 1 1 863 1 1614 1593 1 1616 1 305", " 125 765 352 1 1309 1482 1 1 99 1 1 1 1428 1 1", " 1655 74 885 237 366 555 1 239 1938 550 1 1 253"};
    vector<string> part3 = {" 981 1 1 1171 25 1 1 1 1520 1088 1183 1400 856", " 1 1921 1 57 369 1 1141 534 738 1 1 754 1497 858", " 1 1 1 1 1 1032 795 1 755 1 335 1384 1 1 934 103", " 106 414 1 1 1 1 1 1 1 1 1 699 1 1 1318 1 1562", " 1 1791 1 329 1 119 1987 1 122 1 58 253 415 1 1550", " 203 166 1663 1 1653 359 1 1 1 1 87 1 1 1257 126", " 1100 1336 926 72 1 765 1 756 1 1 1 1681 1953 481", " 333 1058 1539 1943 1 1 1 1 1 1 1 1 1 1 1814 219", " 189 22 1032 203 1568 1163 245 1 901 1 1449 1671", " 993 879 1611 1516 1 675 1392 1 86 1 569 27 1 761", " 1 1868 1 820 305 886 1993 936 1257 890 871 630", " 1204 1008 271 1 1 136 1386 1863 1 1 62 672 1 1", " 1 1 1636 1675 93 1 1389 916 299 1 228 809 1362", " 1 1 248 1 1 1399 1472 1790 1237 35 1 1 1 417 67", " 1438 1 1 1 1 1 516 1 786 1486 569 1 1 1 1 1 323", " 570 914 1720 640 1 1 882 354 497 153 1 223 1 1", " 511 761 1 1995 1 1 55 1 736 907 673 1695 1 1 1", " 1703 217 379 11 1964 1 1 1620 1615 91 371 1427", " 1811 597 1534 1708 1349 1 1 1 51 1 1 1805 1 1583", " 124 1 1 1380 1 71 1 1 281 1 268 196 1103 1 1 135", " 1 423 1813 1 1 1 1806 877 1 1823 1 704 1 1 1 931", " 523 252 1 1 945 1 832 1 1 14 1414 1345 1 648 1", " 1 364 1243 1 506 1530 1 376 1 1512 1 1 736 681", " 1 1 1 1624 1153 1 1 1 1747 1 1 1 439 134 1 1306", " 830 1 532 1 1654 1607 1526 1 1 1 1061 1 1861 1", " 1 419 1097 1 1 1 1 647 1 1277 1 211 1228 1 448", " 1 223 1583 1 1 276 1 807 414 66 825 452 1 1 1", " 1 1 1708 1 590 1 1 1 1451 886 1372 1898 876 1", " 946 772 1 1 110 911 1 409 48 1 100 917 1 1228", " 1606 1 142 1417 1 1 333 1859 331 415 1 1041 1", " 1777 1 1 1 76 1 1568 1 1 1301 1 1 1823 1121 887", " 824 1175 1965 1008 1981 1 1767 570 1 1 1 280 1", " 1 833 1 1 1 1 1 1296 1584 1508 1 1442 1 659 1", " 1 923 340 1828 1 1035 1 1421 1 1 1996 1 1 1 263", " 1 1 768 1 1867 1 1353 1 1 1263 1 1 208 1 1 3 1688", " 1547 1 1551 1 1 1072 1867 1 1007 415 1 1 1020", " 1 587 1562 1 1 989 1206 1"};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 3286;
    if(result == expected) {
        cout << "Test Case 56: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 56: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test57() {
    int numSheep = 2000;
    int maxRuns = 300;
    vector<string> part1 = {"13 1385 13 13 460 13 13 13 13 13 13 640 1081 13", " 779 40 13 13 13 13 1420 965 401 1086 163 1117", " 317 1989 13 13 197 13 1499 13 1316 1141 160 13", " 13 111 1161 13 13 1144 900 801 376 13 13 13 1597", " 13 1589 1369 174 1170 1853 13 13 13 663 13 670", " 1614 923 13 13 13 1628 1625 13 13 13 1459 13 25", " 1398 13 901 1171 1255 1025 13 13 13 13 1375 206", " 13 13 13 13 341 1253 13 13 1661 1561 13 13 13", " 13 13 13 13 1887 13 575 474 1914 1592 1745 1190", " 24 13 44 13 13 1539 1492 13 53 13 13 879 13 13", " 1518 450 1154 61 934 13 13 139 99 563 13 739 854", " 1868 490 692 777 1545 13 933 13 30 415 1121 1593", " 13 1247 13 494 53 556 13 13 129 13 22 13 13 851", " 13 1522 244 1961 1983 1393 13 1369 935 428 13", " 1067 43 13 13 814 13 13 13 13 1713 13 13 1016", " 630 569 13 290 1050 1490 13 13 13 13 13 13 263", " 13 13 413 1407 13 13 13 1673 13 13 13 1122 13", " 1073 13 1113 926 13 1865 539 13 13 1716 1928 13", " 680 67 13 1629 1212 1562 13 631 13 13 13 13 675", " 13 13 1576 13 13 13 1178 627 13 13 13 1544 13", " 13 13 13 192 929 1200 13 13 13 13 1369 13 13 13", " 1220 1101 13 1268 759 13 1076 813 368 1898 13", " 1630 1703 13 380 13 13 457 1278 13 106 1206 13", " 13 13 94 13 13 988 239 718 13 1354 13 1651 13", " 756 1479 741 380 13 1552 1128 13 1515 13 13 13", " 556 13 13 13 13 13 238 1773 1060 13 1912 1748", " 626 13 13 13 1294 13 1369 1459 1932 326 750 13", " 13 13 13 13 13 1204 13 13 1838 13 457 13 422 13", " 13 359 696 1952 13 885 13 239 13 13 1296 13 13", " 1988 67 465 13 501 1704 656 530 13 660 1417 1308", " 13 190 13 13 13 13 1280 13 13 782 13 13 1020 13", " 38 13 13 13 13 13 1362 13 13 13 293 13 13 13 1595", " 828 1150 87 13 13 428 13 1132 13 1618 13 905 1799", " 13 13 707 1936 1742 13 13 789 13 13 13 13 1510", " 13 514 13 13 13 1238 464 13 13 13 13 1103 13 13", " 84 13 13 63 13 13 13 13 13 652 1358 13 13 1113", " 13 13 1346 13 1399 90 13 1987 13 13 13 1643 13", " 13 242 13 850 755 13 13 601 13 13 498 65 1215", " 272 13 13 1382 13 13 13 13 13 1068 13 1693 13", " 13 13 1617 877 13 941 1586 13 13 603 1216 520", " 164 13 13 1970 13 13 188 13 13 1700 896 13 1519", " 13 1564 13 13 708 13 857 83 183 1037 1469 1494", " 224 1173 653 13 13 13 1420 13 1567 952 255 1216", " 1720 13 13 675 1035 1878 13 13 760 1865 1655 13", " 13 13 235 13 447 13 1087 13 261 13 13 1529 13", " 13 1902 264 507 13 1417 1763 1143 13 1750 13 13", " 13 799 13 1955 1822 731 13 13 1856 13 13 13 1306", " 13 13 585 13 1595 13 505 1320 13 13 82 13 13 689", " 731 458 13 1168 13 1465 1152 13 13 13 1931 13", " 13 678 880 1996 1071 13 13 13 588 13 13 19 13"};
    vector<string> part2 = {" 13 1443 13 13 13 1086 13 13 13 1325 1518 678 13", " 665 996 13 13 13 13 13 1959 511 1691 1413 1877", " 219 409 1116 1358 13 13 1189 1675 13 13 13 1195", " 966 937 294 13 13 522 1577 882 154 13 227 13 13", " 13 1758 13 1809 1032 13 1354 612 13 1044 1023", " 13 13 13 13 1275 13 751 1573 13 13 13 1891 13", " 1830 1718 13 13 13 13 13 13 1510 1262 886 1239", " 705 644 445 381 866 13 216 13 376 13 13 745 1952", " 142 13 354 682 13 503 1513 13 13 13 515 459 13", " 13 13 1615 690 1631 607 13 13 186 13 13 13 13", " 13 2000 13 877 1082 13 13 13 1338 13 1782 240", " 13 13 648 1130 1021 1680 85 13 97 1383 1804 610", " 13 13 1316 798 608 1166 13 13 163 480 759 1920", " 13 1343 13 13 13 1183 13 1210 13 13 1797 489 13", " 13 13 222 1742 1344 13 13 13 911 13 13 4 13 1186", " 1024 167 916 1046 738 1208 403 1093 710 1685 13", " 13 13 813 926 667 543 309 13 13 13 13 13 417 1762", " 13 13 13 1877 13 13 1939 1154 13 13 824 13 644", " 453 13 1205 13 274 13 13 13 13 13 13 13 1202 13", " 13 1607 13 13 1606 1430 1865 13 1158 1662 13 13", " 13 1294 907 854 278 13 13 13 1832 1186 13 1128", " 1866 13 1725 13 263 448 13 439 13 13 508 610 1951", " 13 13 818 13 828 13 1583 13 1031 630 13 1194 13", " 13 13 13 32 13 13 1366 13 13 1821 13 13 862 13", " 901 13 13 13 13 837 1610 669 13 13 1422 13 13", " 1173 62 1836 13 13 13 1628 13 1260 13 1036 13", " 831 13 895 13 13 13 1331 412 1278 83 443 742 13", " 13 13 13 13 146 22 1522 41 1903 13 528 617 13", " 13 13 546 1625 13 1645 13 13 13 404 351 280 13", " 33 944 13 1011 1770 1775 510 1644 1878 13 1311", " 13 13 575 1288 13 234 13 13 13 662 333 1814 1105", " 1307 13 245 402 1545 227 268 13 1934 13 1212 13", " 13 950 358 13 13 875 512 1614 13 13 13 13 13 13", " 13 6 1450 13 495 489 255 201 13 13 13 529 13 262", " 507 13 874 13 297 68 1090 393 13 13 1852 13 439", " 1452 13 1820 13 295 13 13 1958 900 449 13 791", " 13 1945 13 13 786 281 119 644 13 13 1272 70 13", " 13 1907 721 902 541 13 491 1164 13 569 1598 13", " 1171 13 681 13 13 1347 13 364 13 1529 13 13 865", " 13 13 1381 482 13 1561 13 1529 233 1990 13 13", " 13 847 13 1174 635 13 905 803 13 13 13 390 13", " 1837 1814 13 1820 971 13 13 1648 1870 1363 13", " 13 13 13 13 790 13 13 13 863 701 13 1391 1612", " 47 13 1289 13 13 13 191 1750 1679 13 1483 13 13", " 13 662 13 432 289 13 13 13 13 13 13 13 13 13 1325", " 1745 13 13 486 13 1103 13 13 13 554 13 1905 301", " 923 27 13 1329 179 13 13 1637 1287 1446 13 13", " 894 830 306 944 632 1929 13 13 13 13 706 272 1870", " 891 1313 13 393 13 217 1562 1624 13 115 1246 949", " 1311 13 1687 13 453 1454 1139 13 584 13 13 13"};
    vector<string> part3 = {" 72 314 13 13 13 286 13 793 91 404 13 13 13 13", " 13 13 13 1915 13 13 13 13 871 208 13 6 1885 1500", " 573 701 13 1656 13 13 13 13 1310 13 13 13 13 1653", " 13 1434 13 13 13 13 13 13 1597 13 1366 428 13", " 13 13 13 13 13 1274 133 13 13 13 13 134 13 881", " 564 13 13 13 212 13 1214 13 1540 13 13 749 13", " 1162 47 9 1041 13 248 573 13 685 1091 13 1494", " 418 13 715 13 330 13 345 1707 1807 13 13 772 13", " 13 653 13 145 13 13 1217 732 13 13 633 13 1083", " 13 1979 1320 13 1297 634 13 998 13 13 13 129 1427", " 13 1935 529 13 13 1416 333 13 1023 13 13 1477", " 13 1877 13 13 13 267 13 217 212 13 907 13 140", " 1715 13 481 1818 13 1123 13 13 748 78 1147 1939", " 13 254 432 621 1398 881 13 13 13 13 341 13 13", " 13 376 935 13 803 13 229 13 1789 13 13 13 272", " 13 963 1501 1828 1823 13 1662 13 13 13 1449 418", " 13 1756 1287 13 1249 13 975 13 13 13 169 191 904", " 13 13 13 13 13 13 333 488 13 718 1394 1546 13", " 797 418 1117 13 13 1841 127 13 608 1239 13 13", " 13 13 1741 901 13 13 1794 1237 13 13 13 513 13", " 1156 13 13 154 13 13 1690 1382 13 1974 13 395", " 13 13 13 13 916 13 13 696 1741 13 13 13 13 1176", " 13 682 13 376 1020 13 13 13 13 1776 1371 13 13", " 13 613 13 1117 13 13 61 111 990 13 13 13 1963", " 319 1063 286 13 1779 13 61 13 13 13 13 13 13 13", " 13 455 13 716 13 13 1020 1650 13 13 1037 13 154", " 13 13 13 1300 532 1139 420 13 13 1030 13 13 484", " 13 13 13 683 12 153 13 13 13 442 13 13 13 13 13", " 13 972 1904 508 13 361 1362 13 511 13 13 13 13", " 29 842 13 491 1130 13 480 1148 13 920 1685 1715", " 13 1943 13 13 13 740 13 13 13 1673 13 13 13 927", " 13 846 1683 13 13 1715 1434 1102 196 13 13 13", " 13 616 1725 449 761 369 1708 13 13 13 1629 450", " 13 1105 13 55 13 603 13 746 307 1735 978 1133", " 13 13 441 680 13 13 13 1500 13 388 13 549 13 13", " 907 1691 13 13 276 13 311 1785 428 13 13 493 1344", " 334 13 818 1131 13 677 1234 13 767 329 1537 564", " 13 1228 13 1679 388 13 13 1134 13 856 13 13 377", " 1950 216 1874 13 13 1289 1098 1851 13 13 1337", " 13 1191 13 13 106 1528 13 1027 881 13 1710 13", " 13 13 586 1015 878 666 13 13 1756 1544 955 13", " 100 1016 13 252 13 159 13 13 13 566 430 1135 324", " 13 1117 1909 13 1488 13 13 13 13 301 640 1607", " 200 13 1280 1200 13 1902 13 13 1619 13 13 13 13", " 13 13 13 13 13 1432 116 1531 1170 13 13 13 13", " 265 13 13 13 13 13 249 740 13 1557 13 13 13 13", " 13 13 13 1059 1418 1468 1124 58 13 13 1954 13", " 13 1715 13 13 1919 594 1273 295 13 1171 1759 1308", " 13 626 1301 1095 13 1956 13 734 873 13 13 411", " 13 13 13 13 490 245 13 13 13 13 13 13 398 13 13"};
    vector<string> part4 = {" 13 13 1734 13 1609 13 1451 933 496 531 13 13 13", " 257 13 13 1877 13 13 13 13 1968 13 13 13 568 13", " 13 13 13 1842 13 1935 13 13 1082 13 13 13 13 299", " 13 13 13 13 13 13 13 13 1738 1072 13 13 1653 1949", " 1654 13 1224 76 13 13 99 13 381 13 13 13 25 1203", " 1151 13 13 13 13 13 1349 1058 69 13 779 13 13", " 13"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 3220;
    if(result == expected) {
        cout << "Test Case 57: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 57: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test58() {
    int numSheep = 2000;
    int maxRuns = 300;
    vector<string> part1 = {"42 402 964 201 1706 42 42 42 483 42 1181 42 1513", " 1446 1587 42 42 1894 42 1549 1554 42 42 42 42", " 42 42 859 229 42 42 42 42 945 42 233 42 796 363", " 110 452 42 221 42 456 42 42 42 42 1830 42 144", " 42 280 42 42 42 42 389 108 42 42 153 42 1469 328", " 1273 42 744 42 851 42 42 42 1372 42 42 1849 289", " 42 210 302 807 871 754 889 1199 1775 1809 1925", " 42 42 108 1885 1456 950 42 1221 417 1457 723 198", " 42 1272 593 1207 42 1781 42 42 1514 42 970 1801", " 42 807 42 1401 42 1501 42 1920 878 1196 856 42", " 1764 1010 1956 42 732 42 42 699 645 42 740 42", " 1140 42 1057 42 42 1859 1559 42 42 282 42 42 818", " 68 271 42 704 42 1321 42 1669 42 42 494 42 133", " 1905 758 885 42 1290 42 1463 42 42 814 42 42 42", " 42 1089 42 384 455 42 42 1674 42 42 381 1797 42", " 42 42 1836 42 42 42 1638 42 1096 42 338 1868 118", " 42 1431 42 42 42 141 1001 42 845 42 230 42 348", " 42 742 1472 42 42 42 981 284 42 939 400 42 875", " 1087 221 733 42 232 42 1996 403 42 481 42 1696", " 42 42 1729 42 42 42 42 1383 1856 42 42 42 1177", " 1954 1336 42 1940 1731 1584 487 968 1302 37 937", " 1995 421 42 931 42 696 42 1089 42 84 636 42 857", " 42 42 304 679 273 968 42 42 1767 42 1679 397 631", " 577 1367 1363 413 42 668 42 694 528 1603 237 735", " 1127 42 42 920 42 1427 540 1340 630 1435 1837", " 624 1853 42 42 42 42 42 42 42 42 913 42 42 1438", " 42 172 42 1030 1815 1691 1386 309 1628 42 42 1392", " 275 42 42 1343 42 518 42 1186 47 42 1836 42 42", " 42 42 1758 1860 753 42 1359 1071 42 42 42 1869", " 42 1474 42 42 42 1263 42 761 822 611 42 42 42", " 1095 42 42 42 1507 42 1952 1362 1351 365 42 42", " 223 1839 924 1989 42 42 390 1035 1563 1140 1485", " 42 1825 42 855 1096 42 42 106 42 42 1233 467 708", " 410 42 42 417 42 596 1814 42 42 42 1111 772 42", " 1397 42 777 1275 42 42 42 42 1497 42 767 42 42", " 42 100 42 1527 1546 1147 42 1759 42 42 42 42 42", " 42 842 42 42 42 1933 1530 924 95 1947 42 1926", " 42 42 1988 42 42 42 42 378 1452 42 42 1515 1230", " 42 42 42 1298 42 1020 677 1840 854 42 42 42 331", " 595 1786 42 42 879 42 676 42 42 619 1360 42 42", " 711 42 42 1247 42 685 1068 42 516 42 42 873 1091", " 486 42 1295 42 42 42 42 166 42 42 1332 1677 42", " 1189 1312 1731 42 42 42 42 42 971 124 42 323 42", " 1756 1597 1411 42 318 42 42 42 42 42 254 793 42", " 42 42 915 42 42 923 1247 42 42 42 1701 42 42 1532", " 1336 797 88 42 185 275 2000 1049 42 1165 42 577", " 1127 42 42 1173 1012 42 42 1592 212 42 42 431", " 170 145 42 1717 42 42 42 641 42 613 712 1400 321", " 1355 42 1655 176 42 1506 1603 664 1776 42 42 42", " 1898 1190 410 1108 42 1467 42 42 42 566 922 42"};
    vector<string> part2 = {" 42 895 139 612 42 108 42 42 42 42 1649 610 42", " 1865 42 42 42 1162 42 613 1863 42 1807 42 1029", " 42 681 42 354 301 42 509 364 42 42 1827 42 42", " 1596 42 42 42 42 42 42 42 1381 42 42 755 42 42", " 927 1721 1504 42 7 1323 42 42 95 993 414 42 1748", " 42 1288 1668 42 42 1661 42 1191 42 1581 42 310", " 42 555 91 997 42 183 1112 42 42 42 1412 42 42", " 812 128 196 402 42 42 226 1010 42 42 42 517 1299", " 42 731 1312 42 612 42 42 42 1851 42 42 42 42 42", " 747 270 1987 1124 42 29 1422 42 537 42 1264 84", " 42 163 42 1618 42 42 42 42 42 42 1116 1355 66", " 735 58 42 1666 42 42 42 1612 1591 42 1291 1985", " 42 1598 42 42 42 42 977 42 42 1372 957 632 732", " 339 42 1636 42 42 42 443 1766 849 1588 1953 42", " 836 555 42 42 1200 42 42 389 103 42 42 775 498", " 1295 42 1386 586 42 632 42 42 178 350 1432 42", " 598 1276 1772 192 12 1002 904 42 42 42 42 42 822", " 1481 38 1490 488 42 1137 42 1954 42 915 42 1179", " 42 696 42 42 767 42 1486 202 42 895 1129 42 560", " 1312 17 1377 42 42 1934 42 1346 42 55 42 42 42", " 42 42 1323 42 42 1042 317 42 42 42 42 42 692 525", " 42 1912 1304 821 42 1673 42 42 42 42 42 510 144", " 42 525 1153 111 1703 1851 42 42 1460 42 42 42", " 42 1314 42 56 748 42 42 358 42 42 311 1682 42", " 5 42 1270 42 1547 42 42 795 42 42 42 42 42 1697", " 91 1464 1533 1960 1369 42 1616 1898 42 1370 1642", " 225 1248 1670 42 853 1059 1017 635 42 42 1966", " 42 57 42 42 42 1542 42 944 1315 28 685 1490 446", " 1899 1584 42 42 1196 42 42 322 897 1403 42 593", " 1550 1328 1854 42 334 42 42 42 1363 42 1189 42", " 1620 952 42 42 1302 42 42 42 560 721 42 42 183", " 42 42 1852 1410 42 1008 42 42 97 460 1493 1738", " 42 42 186 42 42 1093 42 1225 372 42 652 42 1800", " 450 42 42 1637 42 42 42 42 42 1315 42 42 1861", " 42 1627 1481 516 42 42 42 1034 42 1136 42 42 42", " 1098 179 413 42 42 42 42 1502 42 42 748 42 42", " 42 42 1702 296 42 42 42 1652 42 42 42 42 42 1425", " 22 926 1403 1810 1153 42 42 42 1485 158 1407 1498", " 42 760 941 42 537 447 2000 42 42 1929 309 42 34", " 42 42 416 395 1217 42 42 1868 150 42 42 235 637", " 336 1247 42 872 42 42 982 1640 42 997 42 42 1701", " 42 42 1678 42 372 1975 528 42 337 1888 42 775", " 861 1976 42 486 42 539 1527 109 42 42 42 42 42", " 142 42 42 42 42 1965 42 1146 42 1242 42 42 42", " 1976 1218 1430 42 42 1603 42 42 1000 42 1494 1443", " 244 333 42 42 42 718 42 1934 682 1731 909 209", " 42 718 42 1868 241 267 42 944 42 809 42 113 1831", " 1534 42 42 560 1025 42 778 42 901 1706 119 92", " 42 42 42 175 42 42 1044 1203 42 42 5 811 42 42", " 1390 42 858 559 1684 690 1002 1997 826 42 1443"};
    vector<string> part3 = {" 42 1112 42 42 1942 42 42 42 1101 42 972 362 1381", " 552 42 42 1404 129 42 42 1473 905 42 1722 42 1511", " 42 1283 1819 843 42 42 42 15 42 42 42 42 42 924", " 725 42 42 42 75 238 42 42 1809 1590 197 42 42", " 42 1702 1973 173 42 1535 1193 42 1109 42 1322", " 42 1576 42 42 1394 197 900 1111 1012 837 1934", " 42 145 557 1157 1857 1347 42 42 85 42 1719 42", " 623 928 42 692 1319 42 42 42 42 114 42 456 1764", " 1693 1592 42 766 42 1625 1927 42 335 382 42 42", " 489 42 42 1306 1919 42 1240 42 42 366 65 790 42", " 42 1943 19 42 42 42 42 1079 1595 1841 42 335 42", " 42 1776 42 1804 1469 42 42 42 42 896 42 826 687", " 42 656 184 42 42 1554 864 1834 1811 710 42 196", " 42 1936 794 42 1992 1730 267 715 42 163 42 106", " 42 1211 42 897 42 42 42 42 4 244 42 1335 135 1536", " 42 1020 42 491 256 209 413 42 485 177 42 663 42", " 42 42 802 446 42 931 1069 42 42 42 260 29 42 42", " 42 42 1179 42 42 42 42 1384 471 1478 42 1320 42", " 42 1891 379 771 318 434 1631 1920 356 42 42 42", " 42 1851 411 42 1416 42 915 42 105 42 336 509 184", " 42 155 1069 42 1643 42 42 1975 42 42 42 886 929", " 42 42 42 42 1106 1177 42 1284 42 1380 1765 74", " 1546 1090 1344 1419 42 419 42 42 1834 102 844", " 42 42 993 42 42 1766 42 1922 1433 42 714 1830", " 1635 1992 422 64 952 42 42 25 42 42 1197 42 748", " 957 42 42 42 259 42 42 42 42 42 42 42 626 42 42", " 445 1612 42 558 42 42 289 42 42 42 42 42 42 42", " 42 853 42 1301 451 1771 42 42 42 1098 42 42 339", " 897 552 133 42 506 42 42 1443 1254 42 858 733", " 932 1627 76 1276 42 42 42 42 1003 42 1971 99 42", " 42 760 42 1596 577 491 42 1890 511 42 1906 1505", " 1033 42 725 1138 42 42 249 1596 42 42 42 42 931", " 854 42 214 1037 42 42 42 1560 42 547 42 1689 4", " 1088 42 1579 1653 1431 42 570 42 108 42 42 1583", " 42 42 42 1793 42 42 42 353 42 298 1034 42 42 42", " 42 42 735 1158 401 42 42 42 42 42 42 42 342 42", " 1733 1050 42 778 42 1836 127 1974 1712 42 1278", " 42 1260 42 42 42 1136 42 42 1510 79 42 1638 42", " 42 42 42 42 1279 325 173 1599 1045 42 1096 134", " 42 873 965 42 649 901 42 42 616 42 912 1306 42", " 666 42 1381 1182 42 42 42 42 42 455 1775 826 42", " 436 763 42 42 42 1487 1486 639 42 42 42 536 544", " 42 1200 1500 1744 42 42 1831 1684 1075 42 42 1475", " 1359 1071 553 42 42 849 42 42 1093 733 42 42 1210", " 42 42 42 738 1967 479 1704 8 42 42 42 42 1082", " 42 1743 42 1844 1552 42 42 42 702 42 1248 42 42", " 363 42 42 42 42 917 42 42 42 997 750 42 42 42", " 42 42 42 1231 42 42 42 1822 902 42 42 928 1019", " 488 1564 358 42 42 608 647 42 1324 635 42 1702", " 42 1169 42 42 42 118 42 966 574 42 42 42 948 42"};
    vector<string> part4 = {" 1440 42 42 42 42 910 42 505 553 42 1248 42 1175", " 42 1284 451 42 978 1243 181 1590 42 42 674 42", " 42 42 546 177 799 1865 42 1843 42 1529 1292 761", " 379 42 705 42 363 999 42 42 42 159 42 1159 42", " 42 1043 42 1963 42 42 1637 42 856 168 1969 42", " 1980 42 365 42 295 610 1153 42 42 442 1864 1928", " 42 42 418 396 42 74 42 42 546 1397 1721 42 1596", " 1352 1299 1515 42 42 42 697 690 1029"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 3582;
    if(result == expected) {
        cout << "Test Case 58: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 58: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test59() {
    int numSheep = 2000;
    int maxRuns = 300;
    vector<string> part1 = {"1193 576 576 576 415 1389 1683 271 576 576 1662", " 576 1766 576 889 576 576 576 1628 1023 1325 110", " 677 715 576 576 576 1086 576 576 80 1590 576 1220", " 576 1326 1474 79 1018 576 576 467 15 1823 576", " 576 1462 576 1966 576 576 1497 576 576 576 1338", " 994 1449 576 576 1225 576 576 871 576 502 685", " 1607 576 576 262 576 576 576 576 1481 576 455", " 430 992 576 576 576 576 700 576 771 576 576 576", " 564 576 576 576 576 576 206 632 576 938 576 576", " 576 576 47 235 576 576 1382 1186 576 576 1742", " 533 576 1053 576 576 344 1465 576 576 576 1448", " 1993 1885 576 703 714 576 250 576 576 1024 1985", " 1844 696 19 576 576 1306 120 1036 576 576 576", " 576 1708 1042 918 576 576 576 576 576 1621 576", " 576 576 576 180 431 576 892 558 576 1522 576 576", " 33 624 576 1276 576 83 576 576 576 576 576 576", " 576 1759 576 576 576 1904 631 576 576 576 576", " 576 576 576 510 576 985 576 576 576 1292 798 808", " 639 576 1899 576 576 576 576 440 576 576 1598", " 576 576 576 1125 1042 576 576 576 576 576 576", " 1274 1920 90 39 1712 576 1625 256 576 576 553", " 586 576 576 576 325 576 486 576 1807 1813 923", " 576 886 1456 762 1718 1495 576 576 576 576 576", " 215 743 1509 576 1475 576 1181 576 576 577 1051", " 576 1526 1712 576 1038 576 178 576 153 1538 178", " 576 576 880 1823 1193 576 1691 1459 660 1636 576", " 255 576 868 645 576 576 1848 576 576 669 1936", " 1699 1557 576 1597 576 689 576 576 1186 376 576", " 576 576 18 576 934 576 1118 576 576 576 1205 1255", " 1889 576 576 576 471 576 486 576 576 576 419 287", " 576 576 919 576 576 1072 576 699 1045 1671 721", " 1955 576 576 231 60 576 576 576 1265 155 576 1258", " 671 591 1821 859 576 576 576 576 576 695 576 576", " 576 1441 1103 576 310 795 1900 1387 1573 1250", " 1074 670 222 576 576 576 1353 576 576 899 576", " 1491 249 1143 683 576 792 576 649 103 194 153", " 576 576 1503 178 576 259 1580 576 576 576 576", " 1118 576 968 576 1050 1048 576 576 471 576 576", " 1428 576 576 576 576 576 1625 191 576 576 576", " 576 1634 576 576 576 576 241 1743 576 1380 1599", " 1670 576 115 493 159 1414 1027 20 1198 1038 44", " 1209 1688 576 576 785 576 1858 576 576 576 185", " 576 406 576 576 1071 576 576 1118 576 576 1212", " 1811 1714 1947 1973 1008 576 576 883 576 576 1570", " 912 441 576 576 576 576 1753 1910 576 576 727", " 576 1031 1158 1407 1051 733 1064 576 576 576 1014", " 1970 1884 576 576 576 576 576 576 576 576 537", " 576 1967 87 576 1438 493 1221 89 576 576 1826", " 1480 576 1479 576 354 1828 272 576 151 576 1431", " 576 1286 257 1048 576 451 576 576 576 576 576"};
    vector<string> part2 = {" 576 1520 576 576 576 1839 576 576 576 408 180", " 576 576 576 576 576 576 44 92 1042 576 1072 576", " 852 576 32 720 734 576 575 1541 576 41 576 1979", " 576 576 576 576 757 1309 403 576 576 576 874 91", " 576 219 1467 576 1885 1215 576 676 576 653 1896", " 1621 576 891 496 576 576 576 1751 576 576 1794", " 576 576 1877 576 576 576 576 576 1495 576 576", " 576 1475 152 576 1781 184 1756 1555 576 576 1043", " 1056 576 1330 1947 576 1043 576 433 576 576 576", " 718 1770 576 250 576 1245 576 576 576 576 576", " 192 1952 576 576 576 576 1676 67 744 576 407 576", " 670 576 576 421 240 576 392 1928 576 1971 578", " 1277 576 576 731 576 576 576 576 576 576 1230", " 400 576 576 576 1693 60 1688 490 576 576 576 576", " 576 576 576 37 576 576 1010 576 576 576 1954 1828", " 576 576 1955 576 576 576 1959 869 576 1453 576", " 1615 576 576 1391 135 1129 576 351 1892 700 1661", " 641 1426 576 576 889 576 924 576 1977 1444 1157", " 481 1073 576 251 576 576 377 576 576 434 576 576", " 576 799 576 1406 576 1156 164 548 1399 576 1080", " 225 693 415 373 576 576 576 576 576 576 576 576", " 576 576 576 576 1800 435 576 576 576 576 1808", " 1640 98 65 576 764 916 576 576 1119 634 1846 576", " 576 576 576 576 576 598 371 576 576 576 576 1321", " 1196 135 288 1175 576 576 907 576 472 1346 562", " 576 426 576 576 1842 576 1056 576 845 1344 1281", " 576 485 1059 576 576 576 576 576 1457 82 576 1128", " 287 576 759 576 69 150 576 576 865 576 576 829", " 1921 576 1952 679 576 576 576 576 576 1840 576", " 576 438 183 576 1539 576 576 576 576 1604 576", " 576 1809 576 576 576 1978 1266 878 576 576 303", " 1560 1299 773 576 1823 1567 456 172 624 576 917", " 1519 1327 576 576 16 576 576 1643 1349 476 576", " 495 576 1914 1160 576 62 576 1569 576 1616 576", " 433 1528 576 576 167 863 542 440 576 1087 576", " 597 432 576 576 502 576 576 576 576 576 1014 576", " 221 576 278 420 156 1529 391 407 232 96 576 576", " 576 710 576 576 576 576 606 699 576 1237 833 10", " 576 576 1840 1604 576 320 91 576 858 576 576 454", " 964 576 1323 576 959 576 576 576 1052 609 169", " 576 576 576 576 1321 576 1229 1160 951 576 576", " 232 576 1685 1047 338 576 1904 576 576 576 302", " 1516 576 576 1027 576 1561 576 576 1682 576 576", " 576 1127 576 576 192 576 971 229 940 1736 1550", " 576 576 1446 1170 576 455 576 576 576 569 1137", " 576 576 479 576 934 1545 936 462 576 576 1371", " 576 1950 576 576 576 1272 576 1901 576 576 576", " 576 576 576 410 576 1369 576 576 576 576 1903", " 576 576 576 576 576 1917 709 576 334 576 173 576", " 576 576 576 576 1010 576 576 576 214 576 576 155"};
    vector<string> part3 = {" 455 1986 528 576 1391 1942 576 576 1786 160 636", " 576 1797 576 1745 1723 576 1576 576 62 576 576", " 1981 576 610 593 951 1426 411 1207 576 8 1257", " 153 576 1559 576 1687 155 481 576 1354 169 576", " 576 800 576 576 576 1076 576 576 1497 576 1480", " 252 576 1057 576 576 550 576 1699 576 576 576", " 54 576 576 958 567 576 576 576 576 576 1764 350", " 576 576 1036 1186 1574 1644 1142 1256 341 576", " 576 576 921 1210 576 1153 576 576 576 576 71 576", " 576 1073 1985 576 1881 576 64 1167 576 1691 576", " 430 576 1951 98 1720 576 576 425 6 77 576 576", " 1351 576 1857 576 775 576 1889 576 72 576 956", " 576 576 708 576 1718 1398 576 576 1497 819 738", " 647 576 576 576 566 750 576 576 63 576 1680 576", " 576 576 439 186 1369 1535 576 712 576 576 576", " 1895 576 958 1451 576 576 576 868 576 576 1265", " 576 576 1184 679 1585 358 576 576 576 3 576 576", " 576 576 576 1201 576 395 581 576 576 576 576 472", " 1394 576 576 361 331 576 141 622 576 32 576 1504", " 1715 1718 576 1491 385 576 576 576 576 576 576", " 576 301 125 576 576 1720 313 576 752 576 576 371", " 576 576 966 576 841 576 576 382 576 1169 576 576", " 513 1129 468 681 576 1203 1526 576 838 1127 1817", " 576 898 1873 613 1956 1488 576 1631 576 924 576", " 1622 1053 1196 1376 789 576 324 576 141 701 146", " 1735 576 576 1105 762 74 713 576 1278 8 576 132", " 1992 1158 576 576 976 576 604 576 1285 576 576", " 576 935 576 1661 576 576 576 1110 576 1890 747", " 6 576 576 576 576 576 576 1238 852 576 1936 576", " 808 915 576 576 576 572 576 576 576 131 576 976", " 861 1152 1648 576 1986 576 576 1041 514 576 576", " 1217 576 576 576 988 576 120 576 1298 396 576", " 576 996 158 576 576 445 576 576 1442 576 576 576", " 1628 177 576 1080 179 576 576 1542 886 1553 576", " 1589 717 1013 576 576 576 671 576 1157 1211 598", " 1497 1504 1810 1390 1045 576 576 576 576 576 1101", " 261 576 576 1567 576 1208 1807 1478 576 576 576", " 1750 1281 576 457 576 120 1065 576 576 576 651", " 1965 576 576 1399 18 576 135 576 576 165 281 576", " 576 576 576 765 576 1501 1732 1058 576 605 576", " 576 576 1935 1716 367 1887 818 1785 576 685 576", " 576 450 576 732 148 1474 576 576 1196 650 1218", " 576 1684 1948 576 1193 1302 1782 576 576 576 576", " 576 273 576 576 576 576 520 576 392 576 576 311", " 509 1326 1433 413 660 576 576 576 576 1767 576", " 576 1668 576 576 576 576 576 576 1137 1896 455", " 576 509 1318 576 576 576 651 147 929 59 576 767", " 576 1428 576 576 1628 1584 503 576 1798 1725 576", " 576 1629 288 470 576 576 1232 576 1231 576 1426", " 576 576 1074 576 1372 576 17 576 462 1746 576"};
    vector<string> part4 = {" 1378 889 576 1494 576 576 1711 576 1256 576 576", " 576 576 576 1608 238 394 576 576 576 576 119 576", " 576 1899 630 576 1519 576 576 1493 576 1313 576", " 576 576 576 1962 1869 1886 1232 576 576 576 603", " 23 576 753 1887 576 161 1473 60 886 289 576 1656", " 576 576 576 72 576 656 576 579 1207 576 1005 1630", " 576 231 576 400 708 576 1331 413 576 677 150 576", " 56 1019 576 56 576 576 706 1006 1946 576 576 1592", " 576 1772 576 576 576 576 209 623 576 1981 1497", " 576 472 576 576 576 576 643 576 576 766 1598 1902", " 576 576 576 1460 1507 576 1212 655 715 209 500", " 847 1329 576 1380 576 576 576 576 576 134 576", " 576 1429 576 576 576 576 576 576 576 984 927 576", " 576 576 767 250 1640 25 540 1300 576 576 576 576", " 576 576 1549 576 576 156 1228 576 597 576 576", " 1518 576 1110 576 576 1731 576 1429 102 576 758", " 576 576 1669 42 576 1896 576 576 576 743 576 298", " 576 576 576 369 576 821 1049 101 576 576 576 950", " 155 1766 576 576 209 576 1709 576 576 1722 1154", " 576 576 225 576 576 576 576 1687 576 576 1962", " 576 576 576 576 1923 576 576 576 728 576 295 582", " 1182 853 1485 925 1093 36 576 576 576 1750 1186", " 576 576 576 373 1769 576 1830 576 576 576 576", " 576 576 1710 576 1722 576 546 576 576 576 576", " 576 197 1306 1735 105 576 568 576 576 576 466", " 299 370 576 576 576 1696 576 800 1339 765 103", " 1656 576 365 576 1792 576 576 1216 576 576 669"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 5184;
    if(result == expected) {
        cout << "Test Case 59: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 59: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test60() {
    int numSheep = 2000;
    int maxRuns = 300;
    vector<string> part1 = {"897 1231 897 897 1615 1149 897 897 897 1758 897", " 897 451 1137 897 405 392 1735 897 897 897 1755", " 897 897 794 897 897 1244 897 897 897 897 1183", " 477 884 897 178 1259 1645 887 1791 897 1486 897", " 897 1565 60 254 897 897 1670 897 897 897 1047", " 594 897 897 897 505 897 897 897 210 1813 271 897", " 897 897 1063 1607 1340 939 1234 897 897 804 897", " 897 1744 588 897 897 897 62 758 714 897 897 897", " 1329 1422 710 1068 897 879 238 897 897 897 1943", " 1202 897 1113 316 179 897 1041 128 897 897 460", " 897 897 897 897 436 497 897 897 897 897 1801 897", " 897 897 897 990 897 897 791 897 805 340 897 897", " 1891 301 897 897 897 1447 1770 117 897 813 690", " 332 1146 897 897 897 897 897 1516 226 892 1993", " 897 897 1927 1726 209 1060 897 1286 897 655 1776", " 897 978 897 897 1219 1370 897 897 867 897 1811", " 897 1911 897 213 897 897 897 897 1362 897 1305", " 897 897 1743 730 897 1087 652 69 34 897 897 763", " 897 897 897 897 1642 897 897 897 897 765 897 698", " 897 1288 1227 897 897 897 897 897 897 1799 228", " 897 897 897 897 1588 897 661 897 1657 1739 897", " 897 639 897 897 897 897 897 897 446 897 1394 156", " 897 1310 1151 897 1271 897 897 897 1841 439 1085", " 897 897 897 211 1864 897 168 897 1573 897 596", " 1728 897 1657 153 1811 567 999 726 1174 327 897", " 49 897 1152 897 897 1045 897 897 1181 897 897", " 681 524 1593 83 897 897 897 897 423 615 1509 897", " 897 1453 897 897 897 897 1907 582 897 1214 1695", " 743 897 1145 1312 897 690 897 1107 825 971 897", " 1802 897 897 262 897 1060 897 41 1646 897 897", " 211 897 1186 1845 645 897 897 897 1400 1613 1917", " 470 1605 173 1816 1997 897 1625 1095 897 897 1163", " 897 897 897 897 541 208 897 120 229 1634 897 897", " 897 897 897 897 1234 412 193 897 897 1276 991", " 1964 938 897 1763 745 897 1244 897 897 781 897", " 126 1885 774 734 1261 498 1111 897 897 193 1671", " 561 535 897 1912 1647 897 897 897 721 1393 212", " 897 695 321 1657 897 1105 897 897 897 252 742", " 897 1719 1141 897 481 897 1938 1324 616 1222 897", " 897 897 1944 897 1687 820 897 438 357 897 897", " 707 897 1803 897 897 1976 897 897 1594 1743 897", " 652 897 1375 897 897 976 1918 897 748 532 1586", " 897 897 897 897 886 897 897 441 327 861 1985 897", " 1763 897 1181 1525 897 897 897 897 897 897 855", " 897 897 897 1561 897 897 206 122 756 897 897 897", " 897 535 897 1243 774 445 214 897 897 314 897 897", " 1663 897 1866 440 1607 897 897 897 33 897 897", " 1262 711 980 105 897 897 897 1172 818 897 897", " 897 897 897 1918 1658 897 897 897 897 1244 897", " 431 897 1196 897 897 897 144 897 897 889 48 54"};
    vector<string> part2 = {" 897 897 897 897 693 897 897 514 1834 235 820 897", " 1632 897 726 897 897 897 897 897 711 554 897 1981", " 897 897 791 897 897 1976 526 897 518 1746 1212", " 981 1160 897 897 897 897 897 897 897 897 897 219", " 935 897 984 1051 478 897 1872 22 91 582 427 897", " 141 897 1018 1739 897 897 897 897 1336 1227 897", " 897 999 897 1500 454 1658 922 897 136 897 897", " 897 1936 897 897 897 897 1438 897 897 897 897", " 897 897 1380 1414 897 1835 897 1541 556 897 433", " 439 1689 897 1095 900 897 897 897 897 1567 897", " 897 897 897 1403 1777 897 127 1090 897 1573 571", " 471 897 897 1979 483 1260 897 897 1602 1833 897", " 897 1908 897 897 897 110 897 1055 547 619 897", " 897 897 897 772 897 1859 897 897 897 1685 897", " 897 897 897 897 897 1037 422 1824 897 897 897", " 897 1632 294 897 1124 1310 877 897 616 897 1345", " 897 897 897 897 1706 633 500 1513 847 897 641", " 75 897 897 897 1224 897 1152 897 897 897 897 1667", " 521 483 1619 897 897 1645 617 1782 897 296 986", " 897 897 24 1198 897 611 897 1626 897 897 897 897", " 776 897 897 897 1450 897 1325 571 1623 897 804", " 294 497 756 897 1355 258 897 1633 897 1261 897", " 897 897 1799 897 897 599 785 897 1112 1345 897", " 897 176 1022 1284 897 897 897 897 1889 897 897", " 897 116 897 897 897 1551 14 897 897 897 20 1468", " 897 897 897 1527 769 897 897 178 897 1445 897", " 1798 897 897 897 897 170 897 897 897 897 897 897", " 1884 897 760 878 290 897 250 1828 897 897 10 1875", " 909 897 897 439 719 138 897 897 1706 1285 897", " 897 897 897 1276 977 485 1956 397 162 897 622", " 793 585 842 1660 1581 929 897 897 897 1707 1818", " 1937 1628 1206 975 1322 1016 897 1382 897 897", " 897 897 897 897 1544 897 1080 897 1915 1403 1929", " 897 897 1012 1424 897 372 897 897 897 1611 907", " 897 817 951 1224 897 984 897 897 897 897 172 544", " 897 897 300 227 897 897 1570 79 1290 513 360 1211", " 897 897 860 528 897 899 897 1540 897 1538 897", " 1672 897 1911 1533 1858 9 855 115 635 897 1919", " 291 812 796 897 134 1847 897 1630 897 897 897", " 1396 897 897 897 5 1611 897 897 1220 897 897 1250", " 897 897 897 897 897 897 1851 897 631 897 897 897", " 1950 897 84 72 897 897 897 897 1994 897 897 897", " 897 1211 897 1116 897 897 969 358 1840 320 752", " 827 1118 1131 897 897 1108 627 447 897 897 897", " 734 1862 860 701 897 669 897 1317 1434 1788 1670", " 814 1636 897 1883 897 897 1695 897 897 897 564", " 897 897 310 897 897 95 929 445 174 897 1699 1901", " 897 897 897 897 1664 897 897 897 897 489 897 413", " 96 897 897 897 897 557 897 897 897 1300 1618 1052", " 963 102 897 897 897 584 897 897 897 706 486 897"};
    vector<string> part3 = {" 1615 443 1074 897 897 597 759 211 897 214 1385", " 897 14 897 897 526 897 122 13 576 1651 286 1371", " 897 1035 1856 897 1494 897 897 897 897 930 897", " 897 1968 686 897 897 897 897 897 897 1770 897", " 897 1631 897 514 897 897 897 897 897 296 1297", " 1696 1955 639 897 1959 897 1996 897 53 1678 897", " 897 338 897 897 897 283 707 897 897 897 1095 476", " 162 894 897 728 897 1540 389 897 897 1640 397", " 1140 1487 1066 897 1665 897 897 768 642 897 323", " 897 897 376 971 897 699 677 311 182 897 1942 1354", " 1645 897 897 496 897 897 897 897 897 897 556 1699", " 897 897 897 897 897 1149 871 897 897 173 897 897", " 897 897 897 897 897 897 897 897 897 1249 558 897", " 897 93 897 897 897 1715 897 1836 960 1968 1361", " 1408 463 897 1125 1105 897 1897 897 83 897 46", " 707 897 897 897 1588 1886 897 551 227 1383 897", " 1061 897 1050 897 1364 897 897 897 897 897 1053", " 141 934 1028 897 227 811 1524 897 897 897 897", " 1606 314 810 1976 897 165 897 1594 897 464 897", " 897 897 758 80 897 897 1572 179 217 1680 897 1942", " 458 897 897 897 626 1393 65 1772 897 592 1627", " 897 897 897 897 403 1769 302 897 470 897 897 897", " 897 1051 1127 897 897 592 184 1519 897 897 897", " 396 880 1125 1097 897 1538 897 897 897 1630 897", " 1093 1292 1311 181 897 1027 897 897 897 897 577", " 897 1901 1874 1832 897 1193 910 1522 897 897 1354", " 1544 981 978 897 588 897 897 897 897 897 1404", " 333 1831 31 897 897 1970 897 897 897 897 897 897", " 897 897 897 897 777 897 897 1516 1023 897 897", " 796 866 438 1433 897 888 897 70 897 1417 897 897", " 817 1 897 897 897 716 1961 687 1869 897 897 1679", " 897 897 897 897 897 897 631 897 897 897 609 1139", " 897 897 1534 897 1549 403 897 1650 897 897 874", " 897 897 897 897 398 806 217 897 897 943 1517 897", " 1314 469 897 897 897 565 883 897 1994 897 897", " 897 897 897 897 897 897 1390 1267 1595 897 1400", " 1306 897 897 528 1429 897 599 617 1822 897 897", " 897 1045 763 930 897 897 33 897 897 876 897 897", " 897 897 897 897 897 931 1215 1264 897 737 255", " 1671 455 897 897 897 897 295 897 1742 897 897", " 1858 897 978 1271 897 490 960 1011 897 1566 897", " 937 545 1117 629 897 897 88 897 521 897 897 2", " 897 897 897 1024 897 289 897 897 897 897 897 897", " 897 1027 897 319 1760 35 537 897 897 505 1948", " 897 897 897 897 897 897 897 897 897 897 1382 23", " 897 747 897 1350 897 1081 1682 1631 897 1495 897", " 897 897 897 897 1164 897 897 1928 427 897 897", " 839 1553 897 897 897 897 897 1503 897 1395 897", " 897 682 897 897 897 1408 897 897 1020 1671 547", " 897 1592 897 1861 897 759 897 1037 1188 212 897"};
    vector<string> part4 = {" 1555 884 897 897 897 1498 1325 849 1431 1037 897", " 897 1953 897 897 897 1320 563 150 1736 897 897", " 383 185 1431 897 738 897 897 897 1049 897 132", " 897 254 1184 897 1633 779 897 897 1385 897 1765", " 897 897 1717 1156 157 769 202 897 897 1844 1507", " 897 878 897 1763 897 701 1388 1420 897 116 897", " 1903 425 897 1272 897 1968 897 1495 140 101 897", " 897 283 213 897 897 897 897 897 156 897 897 427", " 897 897 183 880 298 1692 897 897 1086 897 1349", " 1843 897 897 1810 32 1552 897 1685 897 897 1311", " 232 450 805 897 897 897 1563 897 897 362 897 897", " 1150 897 897 897 131 897 1216 1756 897 897 816", " 1259 897 897 897 897 1507 257 897 897 897 897", " 897 897 1733 897 897 1666 897 1372 692 1467 897", " 897 897 492 21 1109 897 457 54 699 367 1087 1053", " 897 566 467 897 897 577 263 736 897 897 1963 980", " 897 777 575 1004 897 944 1276 897 39 614 422 897", " 897 374 301 1833 1057 114 897 595 1564 1544 897", " 897 897 897 1709 1400 897 1130 675 897 897 897", " 1116 1743 1835 684 683 897 29 897 897 1320 219", " 1452 1199 615 1881 1946 897 897 897 817 897 897", " 740 936 897 897 1089 897 188 897 1022 995 897", " 897 897 897 1439 897 897 897 618 55 897 897 897", " 897 897 1633 897 1690 897 897 1265 1090 897 897", " 1864 1627 897 1879 1240 897 897 897 135 1404 1379", " 641 897 897 897 341 1043 1511 897 47 582 1032", " 869 1891 128 277 326 897 897 897 735 897 57"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 6321;
    if(result == expected) {
        cout << "Test Case 60: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 60: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test61() {
    int numSheep = 2000;
    int maxRuns = 300;
    vector<string> part1 = {"510 835 732 1057 1057 854 886 1057 1057 698 1057", " 1057 1057 1139 436 482 1057 1057 1057 1057 424", " 1057 1922 304 1057 191 1057 1413 1057 1193 416", " 828 1046 1469 610 654 1057 1551 1252 1057 112", " 1416 1377 1057 1057 1644 1057 1057 1057 1057 1057", " 221 1057 1057 372 1033 1249 1084 1815 1858 871", " 1057 1057 184 1057 1057 1434 1867 1575 1057 755", " 1575 1057 293 702 1455 606 827 673 1057 1057 1057", " 1057 50 1057 1057 1334 1538 1057 1057 1057 1057", " 150 539 1057 1468 1057 1444 1057 1057 1748 841", " 151 59 618 1057 1057 1057 1057 1057 1551 1057", " 1057 1610 863 1076 1057 189 808 38 841 802 1057", " 1057 733 601 1057 1057 1057 286 1859 699 1057", " 918 1057 1057 249 647 1701 573 1057 372 1057 1057", " 1057 172 886 1145 1057 1057 1057 1057 1057 1057", " 1057 1541 1057 1057 1057 964 1057 1834 1057 1057", " 1452 951 1057 572 1057 1057 1057 1057 1057 1057", " 1057 1057 1503 1057 1057 258 875 1057 393 811", " 1027 1057 1430 1828 756 332 1057 1057 1116 1107", " 1057 659 752 1057 474 1057 439 1486 1639 1057", " 1057 1057 136 1057 1057 1057 177 848 1919 1989", " 1215 1057 1294 1057 1797 1510 1143 1045 1444 1057", " 1473 1057 4 1057 1057 1057 671 1057 1178 453 1057", " 1039 1057 1057 1057 1057 1761 258 1057 1057 1057", " 468 1057 393 767 443 61 801 1650 593 1057 1400", " 1057 1057 1640 304 1057 62 217 718 1057 636 600", " 1006 176 1057 766 593 1041 335 1057 1057 47 474", " 1057 1057 1684 1733 1057 1057 1057 1057 510 1464", " 1057 1057 203 1057 1763 587 1057 887 1057 397", " 1057 1057 1341 1057 1057 191 605 1057 1097 1057", " 1298 1057 1057 1057 1057 1057 603 1760 1057 444", " 1057 1057 101 1102 1835 1057 1057 1057 316 1664", " 1057 1057 1057 565 1057 771 1057 1203 1001 1057", " 1325 1057 1057 1694 1239 1057 1057 1057 1057 978", " 5 1057 1057 903 1057 1057 701 843 1057 1057 1557", " 1057 1057 1057 1057 1057 1057 85 1274 1604 520", " 1057 1057 345 1925 354 776 1057 1517 914 181 952", " 1737 1057 1057 1057 705 124 1057 1620 1057 1057", " 1057 1057 205 1704 1057 1057 1057 1057 1057 1057", " 1057 1056 1057 1360 21 303 1057 1115 71 1057 1057", " 1057 1057 1057 1057 1057 1057 1180 1057 1057 1901", " 397 1409 379 1057 1057 874 1057 1536 1230 1057", " 1281 967 1057 1057 748 751 1057 1057 1188 1602", " 1057 1057 674 1057 1057 1650 695 1504 1695 342", " 1057 1057 1057 1057 1057 187 1057 10 1057 1057", " 218 1057 1091 955 756 266 798 1057 1440 1057 1057", " 151 1057 1057 975 1057 1057 1057 1057 1057 678", " 1802 1307 1057 1057 558 1703 1057 1057 1057 1057", " 407 100 1763 1057 1057 976 1283 1791 1057 1057", " 1057 1057 1948 1056 350 1057 291 902 1057 21 1236"};
    vector<string> part2 = {" 1696 1057 1754 87 1057 1057 1057 1057 1057 1057", " 678 870 926 1057 1057 404 1694 1592 403 694 216", " 1057 1078 1343 1057 1057 1057 1442 1057 1057 1057", " 731 1057 1057 1144 921 1057 1057 1057 104 1515", " 1057 1057 1560 93 1057 1057 1057 40 453 856 1216", " 1047 125 1057 1057 1057 1057 631 1726 1057 1057", " 701 1057 1057 569 1057 502 1057 1526 1057 1057", " 1419 1057 555 1057 1057 563 1861 1057 1305 1079", " 1433 1057 1057 1057 414 1057 536 177 1057 290", " 1057 796 1057 1057 1057 1310 533 1252 1057 1057", " 1070 1057 56 1097 1839 1057 1057 790 1057 1057", " 1057 1586 1691 1897 1236 320 1057 1057 613 802", " 1057 1057 1910 1057 12 235 181 823 1057 1057 1057", " 1888 1983 1883 1057 1410 481 309 1057 653 1325", " 814 1057 1057 234 1057 1057 757 235 274 452 1057", " 1057 1057 1751 1057 591 1057 1057 1057 1579 1057", " 71 1906 1380 1057 1959 1057 1057 1057 1529 1057", " 1057 775 730 1526 971 682 1057 1327 499 1057 1057", " 1057 1467 1057 1057 778 501 1185 1125 1049 1057", " 1057 1057 1057 1057 1308 1057 1230 1057 615 551", " 1979 416 737 1077 1693 1057 1057 1057 1057 1057", " 1057 219 1210 1057 1057 1057 1487 1057 1057 1057", " 1057 81 1583 229 1057 1057 1990 1057 1730 758", " 1080 1519 1057 1057 1470 1057 1057 1609 521 205", " 1057 1138 837 377 1220 1057 1421 1374 1160 1799", " 424 449 214 1755 1057 1057 583 1057 1786 1057", " 1676 1718 555 1057 1057 1057 543 1057 908 1057", " 1057 1057 1057 1057 1235 1057 862 1057 1505 241", " 1057 1284 1057 1057 1757 1510 138 654 89 172 1057", " 1057 1057 1700 1057 1057 1057 1871 1057 539 1057", " 1057 1057 1057 1057 1057 1057 1057 1634 1057 353", " 1057 1057 1992 1057 1562 500 1057 47 366 1413", " 635 928 1057 1057 1057 1057 1501 1057 1743 450", " 207 1057 238 828 179 1038 853 1057 1653 390 1057", " 1057 1057 1057 1057 1057 1246 573 1057 413 1057", " 1057 157 1057 838 1124 931 495 1932 1057 1057", " 1057 1264 1667 667 1834 1057 1666 1057 1057 207", " 983 737 1057 9 1943 929 610 1057 1408 1057 1057", " 1057 1057 1057 468 1057 1057 1650 1057 1057 1057", " 1040 240 1702 917 1057 1057 1057 1057 1057 633", " 1057 983 365 1057 112 1057 644 1057 1057 1839", " 571 1934 1057 1057 1145 1435 1057 729 1057 1057", " 1057 1972 1057 1057 1646 1057 1057 1057 1057 275", " 1057 1057 103 1057 257 791 1057 1250 1057 1057", " 1592 1602 1057 1057 1057 190 1118 1057 1057 1255", " 1959 1481 1812 1057 1057 1057 753 1057 1057 392", " 589 827 851 1057 1459 1057 768 758 1057 775 1676", " 1057 1057 1057 36 1057 1057 629 1381 532 120 1057", " 1057 1057 353 1057 1926 1057 1057 1057 1057 1057", " 169 1057 1121 1057 1826 1057 1867 167 1057 1057"};
    vector<string> part3 = {" 1214 1583 1057 1431 1057 140 1198 421 1057 1057", " 1057 325 1057 1057 416 1579 107 1510 805 725 1057", " 1057 882 1057 1057 173 1466 1057 1912 1057 1057", " 1057 1077 36 1057 925 1057 1705 1294 1057 411", " 1057 1057 1057 1798 1057 1057 1103 925 1057 1057", " 1719 1055 1057 1057 1057 1304 1057 921 1057 1057", " 1057 568 1057 1057 1057 544 525 1057 1057 1705", " 1057 939 1130 1057 1975 1057 594 1627 1057 1057", " 1057 843 1841 1057 1141 1057 820 1057 1057 1039", " 1057 1057 1057 1057 1057 1057 1057 1057 1057 787", " 1057 1057 1057 818 1057 1332 1020 1057 1057 1623", " 1272 325 73 1057 1057 1057 347 997 626 1934 1057", " 766 1057 1378 1057 1057 15 296 1057 1057 1057", " 157 1774 1057 1057 1057 1192 1184 1025 1057 921", " 1057 831 1057 292 1773 1057 132 1277 1098 1538", " 105 1057 1057 1882 1057 1057 1057 773 1335 1057", " 1057 383 1057 179 1057 1057 1057 1792 1307 383", " 833 1760 1057 1057 1057 304 1057 316 191 664 1779", " 1057 1057 1470 1057 1502 901 1057 304 1057 1057", " 704 1374 1057 1057 1057 1105 1151 1269 1746 1057", " 1482 1057 1057 1057 401 1057 1057 1057 1057 1057", " 1057 1107 273 1486 1057 1057 375 1057 1948 1057", " 1057 1057 1057 1057 985 1057 1692 325 1057 481", " 1700 1141 1057 1057 183 1401 1057 1057 1057 275", " 1850 1796 899 849 1057 1057 1057 1057 1057 235", " 1057 1057 1057 1119 859 1057 1142 1057 1057 1057", " 425 1057 1977 775 1550 337 1057 318 366 781 1057", " 1057 1415 580 1577 1057 1494 1057 1170 1752 1057", " 840 1057 1057 1943 368 1098 1644 451 1057 345", " 145 790 1057 383 1377 1057 1057 1851 1057 604", " 1860 923 1057 1316 1408 1057 759 1591 1057 1057", " 949 443 507 1057 1484 1313 1057 1057 1057 1938", " 1057 552 484 981 1057 60 1057 1057 1057 1057 247", " 1057 1057 284 159 427 1057 1057 1057 1057 417", " 1057 1276 1090 1176 1057 176 1057 663 1436 1057", " 638 1416 1057 1057 1057 1057 1630 1489 418 817", " 1731 1573 840 711 1057 1057 913 450 1057 1057", " 208 1720 1057 695 1057 638 367 605 1057 1057 1057", " 538 1057 930 1057 1079 1057 347 1057 1057 430", " 1925 1840 549 1915 1811 647 1057 1057 1472 1057", " 759 1620 1621 1057 1057 1057 148 1956 1057 364", " 1057 1057 1057 357 1145 1057 311 491 1057 1437", " 1057 1719 415 1057 1057 1057 599 596 381 1057", " 420 1527 1057 1177 1057 972 1940 1057 576 799", " 1057 1057 1090 1057 952 14 1478 1057 1057 639", " 323 1057 1057 761 961 1057 1311 1924 1057 1057", " 1310 1057 1202 1057 773 653 1184 1057 1166 1324", " 1057 436 1057 1235 1057 688 1057 675 1057 1057", " 1057 32 1960 32 694 1057 1057 477 1057 1183 1057", " 1634 1919 1057 1057 1057 1057 1751 396 163 1057"};
    vector<string> part4 = {" 387 868 1292 444 1057 1057 851 1110 827 1057 1242", " 189 1817 1057 1560 775 184 581 281 1335 390 272", " 1057 1057 351 1057 460 1241 1057 1057 1057 1057", " 1057 1707 1057 1057 1416 1057 1086 1892 1057 1057", " 38 1057 51 1057 503 1057 1057 1057 1057 484 875", " 753 1057 1057 656 1057 867 1300 127 994 1057 1057", " 1057 1276 1222 1057 1406 696 139 1955 1057 1057", " 1018 1196 577 398 124 1665 116 1057 1057 1513", " 1057 1057 122 1057 477 1057 1057 1057 1057 1057", " 67 1057 1057 1255 1858 1057 780 217 818 1057 417", " 1057 1057 1057 1057 621 1057 1847 1576 1057 1057", " 863 1057 1057 344 1440 1057 504 1057 1982 579", " 1057 811 1057 1057 1057 1057 1057 1057 406 1057", " 1057 1057 82 1057 1489 1537 1057 1057 1057 1057", " 1057 661 1550 297 1201 1057 1637 286 1196 1352", " 1057 171 1839 1057 1758 1057 1057 1057 880 947", " 1152 1057 1077 894 1057 1057 1600 1057 1057 584", " 1199 779 291 819 1057 1792 1037 1057 1621 431", " 1057 1057 1057 1351 984 1057 1057 981 1057 1057", " 1395 1057 979 1057 1220 1057 1983 677 1057 559", " 1302 541 738 670 1057 1057 1057 1 674 1057 1057", " 125 1832 1161 1057 1057 1057 1057 960 1057 1057", " 1057 1057 1057 1057 752 1057 1057 1057 1057 1057", " 274 1057 30 1232 1057 1057 1057 471 1057 1998", " 1228 1057 1057 195 1579 1040 1057 1968 1057 513", " 1504 1072 938 79 1343 1057 1052 1057 1057 51 1229", " 1057 143 1057 774 561 604 1224 1057 1057 1235", " 1057 1057 1057 1057 1057 1057 1057 185 495 1986", " 1045 1057 1057 822 1363 1057 1665 1020 1159 1057", " 1642 1197 1938 1057 1394 1561 925 1846 1057 1057", " 1057 151 1057 1675 1057 1938 1057 1057 1057 1057", " 1057 1057 976 1265 1057 467 568 1057 454 1057", " 1057 1761 1834 1056 1577 1057 1076 792 964 1057", " 1057 1481 1057 1144 1057 929 1057 1057 1057 1057", " 1057 767 372 1057 1543 1057 1057 1057 1057 1858", " 1057 1123 1057 1431 1057 164 1057 299 1057 1057", " 1057 1868 1305 1181 1057 1057 1148 944 267 1057", " 1057 1182 1057 954 1057 418 787 1057 1057 1057", " 1057 1553 878 426 1057 1057 1057 1057 423 1095", " 1057 707 1254 1057 673 1057 1961 638 1625 1057", " 1057 1463 1057 413 130 369 1057 287 1057 1057", " 1057 319 1209 1222 1057 1057 1880 978 402 106", " 1246 1057 1292 1540 1057 102 266 1451 1057 538", " 1057 1057 259 1057 1057 1940 1426 1057 690 1307", " 1057 1057 1057 1057 1057 1057 1937 1057 1311 1057", " 1057 1057 427 1057 1057 1057 1057 1042 1329 1057", " 1057 1057 1057"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 6780;
    if(result == expected) {
        cout << "Test Case 61: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 61: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test62() {
    int numSheep = 2000;
    int maxRuns = 300;
    vector<string> part1 = {"269 1157 1157 695 1157 770 1157 1849 1157 1157", " 1157 1355 1971 1157 1157 1157 1461 370 1157 195", " 1299 989 752 1157 324 1157 1946 980 1157 1157", " 1399 1157 1157 1157 517 1654 1157 232 1157 646", " 1472 1157 1157 884 1172 785 1157 1157 1380 1157", " 1157 1966 1157 1157 1157 1157 818 114 1157 1157", " 1157 1157 1157 1743 203 1157 1157 293 1157 310", " 1302 1157 801 1157 813 548 637 479 1157 1157 467", " 1157 1004 294 1157 1157 1157 1128 423 1157 955", " 1866 1980 999 1038 1210 1157 1250 1494 49 715", " 773 1157 1157 1157 192 836 1157 168 1157 1157", " 1083 1157 1157 1157 1157 1157 1157 1157 743 1157", " 510 1179 1120 1157 1534 1090 104 1157 1096 1157", " 1601 891 149 1157 1208 1157 1157 1381 1157 113", " 1157 714 862 1714 395 1157 340 1551 1157 842 1157", " 1346 1731 30 1084 1157 1157 1157 1084 1157 1157", " 1221 1157 772 1491 1157 1157 1157 1157 1157 807", " 1157 1157 1157 1157 1157 1522 143 986 1054 757", " 1157 1157 1162 1534 1350 1187 1157 1157 1801 758", " 1157 1157 865 673 809 1216 1157 1157 1087 1157", " 1157 1569 1476 512 1157 265 1157 1998 930 1835", " 1433 1157 103 1404 1157 7 1157 835 452 1157 116", " 1157 338 1377 606 1157 1763 1423 1623 179 1157", " 1801 1157 1157 1664 1157 1157 1157 1157 1157 1316", " 856 1157 1157 1157 1172 1469 1157 614 1157 833", " 1157 1157 1429 124 1157 1893 572 83 1207 1157", " 1157 1157 953 1157 1157 640 1157 1157 1563 1276", " 1620 1157 400 985 188 1157 555 1157 450 218 826", " 1157 1157 543 1083 1157 40 1023 1157 1157 34 1754", " 1157 194 1823 475 1087 1123 1709 1157 233 1157", " 1157 196 1157 1157 484 1157 995 159 1692 1157", " 6 1157 1157 1059 1565 789 1157 1157 1693 960 743", " 1157 1157 1996 1849 377 1612 1157 1634 1157 1157", " 1157 1453 235 1157 1157 1157 554 1157 534 1823", " 1412 1157 1157 1157 1428 1157 1311 1652 926 1852", " 666 1157 76 450 1157 523 1157 1157 982 1421 1293", " 1157 12 1157 384 1755 914 1737 1225 1157 1157", " 1157 88 1157 1672 458 1157 1157 628 1843 1157", " 963 1298 131 1157 1157 207 1636 1157 1157 1397", " 1157 48 1157 1157 354 1178 1157 186 1157 1157", " 1157 242 481 1157 1562 1034 785 1328 1157 1805", " 1732 823 1157 1157 25 148 993 1157 1930 1903 1157", " 1157 1157 1157 1157 1157 1157 1524 1157 705 1157", " 357 34 1157 273 1157 1157 1157 49 1074 1755 578", " 1157 237 1537 1157 1665 1157 1157 1157 45 1157", " 1157 1157 736 1157 1157 1157 1157 1157 1157 1543", " 1157 1157 1814 1157 1157 1157 1157 1157 1472 1516", " 594 1157 212 1157 1157 1157 1597 1157 785 1226", " 400 512 794 1192 1157 590 719 1226 631 571 1730", " 1157 1157 1157 337 173 1178 378 878 1746 1157"};
    vector<string> part2 = {" 1157 473 901 1340 720 1157 1157 1157 1157 1157", " 1157 1157 1157 214 679 1157 350 1157 550 1809", " 1559 1157 982 919 1913 1157 1157 828 1157 1157", " 680 1157 129 905 209 1157 1157 1157 505 1157 930", " 1941 1954 761 1157 337 1066 1588 1026 1099 863", " 93 1157 1157 1157 960 522 1157 1027 1157 102 1481", " 935 1157 1082 1504 1157 1386 1157 1857 1157 1611", " 1157 1872 352 1348 1157 1771 1157 451 123 1157", " 1157 1157 1157 1052 1157 1137 1157 1522 1651 1269", " 623 143 98 1322 1946 1157 741 1134 1280 1157 1835", " 1157 1157 1157 1785 1446 1742 1861 350 1157 1157", " 1157 1513 1157 1952 210 1157 1157 1733 32 508", " 310 1730 1157 1117 1925 681 1157 1594 1157 1157", " 654 1723 669 421 1432 1157 1157 1157 1157 7 1157", " 1157 1163 1157 1157 598 1157 253 1530 1157 209", " 1157 711 1837 907 1286 1157 849 1157 1157 1157", " 1157 1157 1157 633 1115 199 689 1157 1704 1829", " 1502 959 1157 1922 1157 1157 1234 1157 1157 141", " 1157 1452 1596 1868 1056 1157 1157 1157 1157 1157", " 804 1157 887 1339 1097 494 1157 1157 95 478 1153", " 1591 1157 1157 1620 1157 998 1381 1157 1363 1157", " 283 1903 70 1157 85 1157 1922 1157 1157 35 376", " 450 1259 527 1157 681 189 1157 1157 1980 1157", " 148 1157 1748 1157 176 1157 1157 1157 1157 90", " 94 1157 1157 1157 1 199 1010 138 1157 1922 289", " 1157 1157 396 1971 89 888 1103 1157 752 1157 1157", " 1157 1157 725 1865 1559 969 569 1571 1157 1157", " 1138 926 1157 1320 1157 1173 1157 1157 507 1157", " 1157 1396 1157 508 1455 1157 1157 1157 1157 468", " 355 1368 467 734 659 1140 1664 1157 1157 1157", " 1157 1157 1468 1157 1769 1157 9 259 1157 1418", " 264 252 1157 1157 1041 1268 1157 1157 1157 706", " 1457 1157 1157 766 1157 1157 1709 245 1292 1157", " 560 1157 723 1880 460 1157 1157 1157 1157 1246", " 1843 1157 373 1711 1157 1292 24 1157 1157 1593", " 1980 853 1811 1423 704 1157 1157 1157 1157 1157", " 1157 1175 1157 1741 1034 1475 1212 1914 1157 386", " 268 1157 1157 1049 387 1157 1157 1157 964 1455", " 1157 1652 462 1157 1381 1149 1157 1157 592 1157", " 1157 1943 1463 141 1157 445 1157 1157 1065 479", " 1157 150 1276 1157 1602 1157 1157 1157 1157 1157", " 734 1157 1157 1157 1372 1157 322 1157 1157 23", " 1157 1157 1019 1157 1157 1157 1157 1157 1157 1840", " 1322 1157 175 1931 1586 1157 1157 1157 1629 114", " 1157 704 1039 1157 1157 1157 766 1484 1571 1413", " 1157 174 1349 1157 1157 1157 1442 1157 1157 545", " 1157 534 425 1195 967 1157 1157 1157 54 142 1157", " 1157 124 1157 1157 1157 1157 1615 1157 1917 1157", " 1157 1157 1923 1157 1512 86 1157 1157 647 339", " 1157 259 1157 1004 494 302 1157 1157 1157 610"};
    vector<string> part3 = {" 1730 1157 1157 1157 1157 98 1157 1157 362 69 799", " 1157 1157 1157 6 1697 1228 1157 1157 1828 1157", " 1157 1157 1157 426 1319 1619 262 1157 1562 1025", " 261 1157 1157 1157 1157 13 1157 1075 1397 468", " 327 1157 813 1157 1157 1120 1676 1358 1157 273", " 1849 591 751 1068 829 1157 1157 1157 1069 1157", " 1157 1157 1157 143 155 1418 1450 1046 1157 1157", " 598 1530 1157 29 1571 1157 1835 1157 636 1562", " 1981 706 949 1569 1157 196 1157 1157 1774 1157", " 1111 1716 1748 451 1157 345 1694 1067 1279 1157", " 1607 1157 1157 1157 1157 1157 1157 1841 1349 747", " 1157 518 470 1842 1157 23 1821 1170 1157 1157", " 1157 1157 359 1157 1539 156 1157 1157 591 1157", " 1157 1157 552 1157 1157 1157 1157 1483 325 251", " 1157 459 1157 1157 1157 1322 636 506 1157 1318", " 663 1157 132 1157 1191 1157 1285 371 1157 1157", " 1157 1157 1157 1734 1157 1157 1824 461 753 1157", " 1157 1157 1157 1767 427 1157 1964 1157 1100 1157", " 1157 1157 1157 1157 1370 808 1332 1157 367 1484", " 406 1157 1175 1157 264 720 1157 1227 92 1157 1157", " 37 1157 1155 1157 812 1494 309 1157 1157 1208", " 1834 1157 1157 1483 1157 1157 165 1157 1655 1157", " 1135 1886 1157 1157 127 1157 1157 1157 1253 1882", " 204 1157 1411 828 1657 1565 1362 588 911 1157", " 1021 1157 1543 1157 1326 1855 1157 425 1445 1157", " 1157 1157 1157 1829 997 1157 1266 1594 1157 1157", " 203 1204 1157 1157 1157 201 271 1579 1858 1157", " 1157 1888 649 1157 1157 1879 1157 1157 1382 1157", " 1157 367 1157 1157 732 56 1157 1157 1394 151 512", " 1966 1157 696 1157 1157 1649 1395 1157 1157 1157", " 1884 1842 810 1367 1157 754 1157 946 1157 1817", " 497 1157 1637 1616 1208 393 1157 1157 1157 1157", " 744 557 1157 312 1157 756 1157 1157 85 1573 651", " 1333 1157 1157 46 652 1157 1157 1614 1297 1725", " 1687 202 341 1157 597 1601 1157 1864 1157 1422", " 1157 1157 41 1077 1334 1789 1157 1157 1157 1891", " 1157 1157 1157 1956 986 1157 1157 1600 1157 1157", " 831 1157 42 668 343 536 789 1157 1157 1157 1214", " 1745 1157 130 1013 1820 1157 1157 1157 875 1157", " 1157 1157 1157 300 1935 1157 1157 1712 1157 1773", " 1740 1089 656 1157 1771 363 1678 1453 1628 1157", " 1157 1722 29 1580 1157 1856 308 524 1362 1157", " 187 364 55 1082 517 169 1339 639 1099 101 720", " 1144 1157 144 1157 1637 1157 1157 1157 1157 1061", " 1789 1157 1157 868 377 397 1157 877 1157 1157", " 1157 1157 1157 981 1083 923 1157 544 1157 1157", " 531 551 375 808 937 981 1808 1157 1157 226 1157", " 1019 1157 1157 769 1157 1157 190 313 1157 1157", " 1157 1157 1192 1025 1801 373 1157 1675 1157 1321", " 1157 1095 1157 1157 1857 963 1157 651 1157 1157"};
    vector<string> part4 = {" 1157 1157 1157 1157 1102 1436 1157 483 1157 1157", " 1520 1157 1265 127 1232 1805 902 1157 357 469", " 1838 808 1157 1157 1157 1878 1644 290 950 1924", " 443 1869 1157 1157 1157 1259 1157 1409 15 1157", " 1251 691 1833 1775 1250 1409 1858 1157 139 1157", " 1157 1680 447 1157 826 1157 1157 1157 1942 1157", " 1157 93 257 1134 1157 1157 109 895 510 683 1378", " 1442 1157 88 1157 1177 620 1525 1157 1157 1157", " 1157 737 78 783 1089 604 1697 1757 1824 1157 1157", " 601 1157 1157 1157 1157 1157 268 1993 7 1711 1354", " 1157 1157 1157 1157 465 1600 1157 1157 14 1157", " 256 1157 1157 1191 1706 1351 1157 1157 1157 1296", " 232 201 300 1864 1157 777 1157 1157 1667 1157", " 684 1157 1157 135 810 1157 1157 775 753 1157 1152", " 781 924 1157 1157 586 250 1157 1157 1157 1157", " 1157 1157 1157 1157 1157 1018 1157 1609 1157 884", " 1314 1157 1787 1157 659 660 1157 1157 1645 584", " 1628 1676 1157 1157 1157 1157 474 1451 1157 1157", " 1440 834 1630 284 895 973 1157 1157 1157 1157", " 1157 275 1157 1157 1157 1157 1157 816 1157 1157", " 1157 615 1215 934 1157 569 1157 1820 722 1157", " 1157 1157 1157 1509 1945 1157 1157 1438 1157 486", " 558 1157 935 617 1025 131 1157 1157 1157 1157", " 1157 1157 1497 1985 1157 1157 1157 1441 437 468", " 337 1157 1157 1157 66 1157 550 1463 1947 1157", " 1157 1157 1157 1157 1157 774 362 701 1745 881", " 1650 1157 1222 1440 1157 1157 253 1157 1392 737", " 1422 1873 1442 1157 1157 1312 1308 1157 1202 1542", " 650 1157 920 1157 1157 1917 101 1360 1568 1808", " 318 772 1157 1157 296 1157 207 1157 1157 571 1157", " 1111 505 1157 1371 641 1476 467 1157 1157 1157", " 1157 1989 1491 1056 1779 1996 1157 1700 754 345", " 1711 1157 1157 353 1157 1157 1157 420 1157 1428", " 1157 339 1157 781 1595 1157 1157 1820 820 1326", " 1157 1157 1157 1801 1157 1157 1606 1157 1907 129", " 1157 1157 1744 1917 1014 775 1157 1157 1576 1945", " 1157 1157 928 1157 1922 1157 1659 579 1157 1157", " 1157 1894 1157 1157 1157 1157 1157 1225 1556 1544", " 1157 17 1157 1157 1157 645 1157 71 1157 1157 1515", " 1157 1157 916 1157 1157 1911 1157 1236 1157 1157", " 1157 1157 1094 1704 1157 1055 1157 1157 1157 1157", " 1157 1914 1157 318 1157 1312 498 1186 1562 1824", " 33 1858 1951 555 1524 1157 641 1157 1555 1157", " 1157 1157 657 1890 1157 1839 1157 1157 1157 1157", " 1484 1157 1610 544 1593 1984 1157 1492 1157 1157", " 571 1157 1157 1437 525 1677 1157 1157 1357 1767", " 1121 852 1157 510 1157 1157 1165 1157"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 7252;
    if(result == expected) {
        cout << "Test Case 62: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 62: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test63() {
    int numSheep = 2000;
    int maxRuns = 300;
    vector<string> part1 = {"556 1311 1951 1772 1337 166 613 134 1337 1041 1337", " 97 1337 1605 561 1337 1863 1890 1337 991 1337", " 450 349 1337 1462 393 1337 1337 729 1337 1776", " 1337 1337 543 1337 429 1337 1337 656 1792 1337", " 113 1337 139 1318 1337 1100 1899 93 825 1337 597", " 1337 259 887 1337 1337 1337 1337 137 1337 855", " 116 1556 1450 1337 551 1631 1337 289 1337 8 1337", " 1337 1337 1337 1242 1070 279 1337 1337 1337 1337", " 1337 1337 1624 1436 1337 1192 1337 1337 1337 9", " 1844 1337 380 1085 1337 1337 1337 1337 1337 1370", " 1337 1337 1337 1337 1337 288 930 1734 1337 1337", " 239 1337 39 990 1161 1210 1401 1901 1337 1337", " 43 1551 1337 1337 1337 1846 1337 1337 1337 1337", " 1337 1337 1337 1337 1337 1273 1337 934 1337 1074", " 1337 1386 1337 48 1151 1337 1480 511 1337 1337", " 1842 685 1337 675 52 41 1337 1337 610 365 1072", " 1135 1337 1337 497 1337 1337 1337 162 1337 1337", " 872 1337 1337 1098 1834 1058 681 28 1905 1337", " 1382 1431 1337 1204 1433 1337 1337 1337 1251 1337", " 1987 1391 1337 386 1337 1337 1503 1337 1771 518", " 600 1882 1337 1337 252 1000 689 1337 1337 265", " 1337 1337 770 762 394 1337 1337 1337 1337 1728", " 1337 1337 712 304 1337 1337 1337 1552 1405 1337", " 1356 1709 981 1337 1337 739 1562 1337 1545 1337", " 1337 1516 1552 1971 237 1337 1337 1337 1337 119", " 278 1337 1337 1337 1337 1013 790 1337 1337 1337", " 715 1337 1278 476 1337 42 1972 306 505 1337 953", " 1337 1337 1886 1675 1337 1337 72 896 1337 1337", " 1337 1337 1337 877 1337 1649 1150 1337 1742 303", " 1884 916 1957 1337 1337 1809 1337 1337 1337 1337", " 1337 1998 1337 310 160 1337 1337 1388 3 1337 1337", " 1337 1337 1337 1337 1897 1337 816 1337 1337 1593", " 173 1503 297 1627 1337 1337 1337 1337 1337 1337", " 1337 1337 532 227 1337 1337 1847 1785 1518 157", " 1337 861 1337 1337 232 1337 1337 1337 953 1337", " 1337 1337 1337 293 1337 1337 1337 1337 1337 1337", " 1337 914 1337 1337 1337 235 673 1337 1337 1337", " 143 1337 1522 278 1337 1337 274 1337 1687 1337", " 1337 1337 1337 180 373 655 1337 144 1337 642 802", " 1189 1337 1586 1337 1337 1337 1337 1497 1337 1337", " 1048 679 1709 1337 1337 868 1337 569 1337 1337", " 1337 1969 1135 1337 1007 1337 1337 1337 1337 1337", " 1337 1337 1099 1337 1337 1337 1337 1109 1337 1337", " 1337 1337 1337 72 1337 1337 1337 1337 1337 443", " 1337 1337 1337 368 1243 1996 1337 1337 1337 1337", " 1337 1434 1337 1879 1337 1337 389 254 1337 1028", " 1969 1337 1593 1337 1337 1337 224 903 124 1337", " 1337 1113 1337 1597 594 1337 1078 1337 1337 1027", " 768 1337 1337 435 338 1265 1920 1337 1381 1906", " 1568 995 1337 1337 1337 323 1337 1337 1337 1337"};
    vector<string> part2 = {" 1337 1337 1337 1337 1337 661 476 1887 1337 1337", " 1337 546 1337 1337 1337 659 1337 203 243 1337", " 1337 1337 1657 1153 152 1337 1337 1337 1644 1337", " 726 338 1439 148 1337 1337 1337 1337 1337 1337", " 1337 1970 1337 435 956 1166 1337 360 1337 1337", " 688 1609 1337 1337 1337 562 327 1167 1224 1337", " 1337 1337 1337 292 173 1337 1337 1337 1337 67", " 1494 1693 1077 1337 1337 1337 1337 397 1337 442", " 1337 1337 1337 1586 672 602 1337 1337 1337 792", " 694 141 422 385 1337 1651 484 550 1210 1337 1337", " 1337 1337 1337 1345 1337 1337 1676 1337 1337 1337", " 1239 1337 1337 899 1549 1337 1957 1337 321 1256", " 1402 1337 1499 1337 1337 1940 1337 206 1337 1337", " 1337 1337 1337 1745 1709 1337 349 1337 208 743", " 1337 1337 1337 1337 1337 53 1337 1337 1051 1337", " 1545 1337 1337 835 671 404 1337 1337 1337 1970", " 104 1329 653 496 559 1337 1337 946 1238 1337 1419", " 242 1341 1656 1337 335 1337 1337 1337 1700 1337", " 1337 1337 1337 1337 1337 464 1512 1337 1337 1337", " 162 58 1337 176 1337 1337 1431 1337 1337 77 947", " 656 1337 1337 1243 1337 1337 1337 748 1225 1337", " 1337 439 1457 1138 1337 1399 1337 1337 468 116", " 667 1337 1364 967 1337 1299 1337 1337 1072 598", " 1337 1337 1337 564 200 186 729 894 1337 1337 1422", " 765 1337 1337 1337 1337 1337 886 1834 1337 1080", " 1337 1337 462 1242 1337 147 1800 1337 1337 14", " 1945 1337 1493 1380 1337 1187 1337 1053 557 1337", " 1337 218 1312 13 580 977 1337 1392 1337 1337 1337", " 1337 1337 1337 1337 1337 520 1337 1337 1013 546", " 1337 1337 1337 289 27 979 1337 1337 328 1337 1337", " 700 1315 12 380 1378 984 801 164 1140 1337 376", " 1337 1863 1365 282 1337 1908 1337 1337 1337 1699", " 1337 1337 1820 1337 1687 1337 1337 1337 566 1326", " 1337 1337 1337 472 1337 1337 769 1337 1337 1337", " 181 1337 495 1449 225 492 1337 830 1796 1337 1337", " 1337 1337 1337 243 1337 1337 1720 677 1337 825", " 1337 905 1337 1337 964 1337 1337 857 24 994 982", " 620 1337 1436 1384 1337 1484 1337 519 579 1337", " 71 1337 1420 1325 683 1337 25 1337 458 1337 1880", " 1337 1334 1337 334 1580 1337 1232 506 1337 1337", " 1336 348 1290 880 1337 1515 1998 1608 733 153", " 1337 1337 1135 209 250 1337 1382 506 1337 681", " 1337 1337 1337 1651 153 1943 1337 1337 56 148", " 1362 1337 704 1553 1337 1337 226 1337 1337 1588", " 1337 1337 1345 1651 1337 147 1337 447 1337 1337", " 1337 1122 421 1337 521 1478 634 1079 1623 1337", " 1337 70 1324 230 1620 1427 1511 1337 1337 555", " 1337 624 981 1319 31 220 1337 1337 80 1337 1337", " 1337 706 1337 1993 1337 1337 19 1337 1337 1337", " 1337 241 716 1337 1337 1337 907 1337 1337 1337"};
    vector<string> part3 = {" 901 1337 1337 1337 1133 1337 1299 1825 1337 1337", " 1337 1337 1337 1337 1468 596 1337 410 1337 8 1337", " 1337 1337 922 1337 1337 1520 62 303 101 1337 1337", " 1585 1005 66 1337 616 419 1337 1337 1337 1729", " 1337 1337 323 8 238 1614 1337 582 1352 826 1641", " 931 1891 1974 1007 1337 1337 1337 1378 1337 716", " 1230 658 1337 1044 169 1337 1337 1337 554 1900", " 1337 1337 109 1158 1337 1337 360 1337 1337 971", " 570 1328 1523 1337 409 238 204 1119 124 1337 122", " 118 544 401 1337 807 1337 1337 1329 1337 623 1337", " 781 1780 1646 1337 1337 1757 1531 1324 1337 1337", " 144 1447 1337 973 1337 1337 1374 109 1337 547", " 1939 1337 1337 914 1337 1337 1337 828 973 1337", " 1283 1540 1695 1337 476 1515 1337 1339 1337 1337", " 1337 1337 1231 1337 472 1337 1337 587 1337 1337", " 458 1337 1337 1454 1337 1337 1337 1674 45 1337", " 1952 1337 917 354 1162 1838 1858 1714 328 1340", " 1337 1337 1337 597 217 1337 1337 1337 1480 1337", " 1337 567 1337 540 1337 218 1337 1337 1337 1337", " 1337 1337 1337 1337 78 524 1337 691 76 1337 1337", " 169 855 1337 424 1337 1337 1607 1337 1337 1337", " 1337 1337 1337 1337 1052 1337 1337 257 734 1337", " 1337 218 1326 1337 1337 59 1337 1516 1337 1852", " 1134 403 1337 926 1337 675 1337 1166 1337 1337", " 1337 1761 1751 1337 1279 1337 1025 1337 1037 1337", " 754 1337 1337 444 1337 943 714 993 1337 1337 1556", " 1337 1839 1267 1559 1337 1337 1337 1337 1337 1000", " 1890 681 1337 1337 735 1713 784 1337 1337 29 688", " 1337 1337 593 889 1748 1337 1337 1337 1268 783", " 1337 1280 1337 801 54 1337 1766 1337 534 1337", " 994 161 334 661 1337 1337 1337 639 1228 1337 1337", " 870 355 1337 626 1661 1337 757 1337 1337 1337", " 16 1337 1337 1334 1216 1337 697 385 1845 226 1337", " 760 1556 1337 1337 1337 1661 1337 1033 1337 148", " 1698 402 1337 1337 1617 1375 1470 1337 84 482", " 1337 900 1337 1337 1827 927 593 1792 31 1130 1337", " 1337 1337 1429 1445 1337 287 1376 1337 1337 1337", " 1337 1337 1337 504 1337 1490 1337 1337 1246 1337", " 1337 1337 1170 559 1246 1191 1337 568 1337 1728", " 1337 1627 1337 237 1337 1337 886 1337 104 1101", " 1631 1412 80 1337 1056 1290 473 1337 1337 1337", " 860 1337 1337 1337 1337 1732 131 1337 580 19 98", " 1337 1337 1337 1018 769 1337 1337 1337 101 1337", " 1951 1337 1598 1337 1770 1337 934 244 204 1337", " 1337 879 1337 263 269 1024 1337 1337 1727 1337", " 985 1337 1337 239 1337 1889 108 1337 1457 960", " 1337 814 1956 1337 1337 1337 1337 1337 1734 133", " 1337 1337 1541 490 1337 1904 1854 1733 1832 1355", " 1337 1922 1337 1962 944 258 1337 1897 1763 431", " 933 1062 1337 937 1337 1337 765 1291 1337 1217"};
    vector<string> part4 = {" 1337 1674 158 1745 1337 16 68 1337 70 1337 1857", " 1996 1774 1337 1337 1233 1337 1337 450 1709 444", " 276 1337 655 79 1337 1337 1337 1337 1346 1337", " 1664 1397 418 1337 1337 965 692 427 1337 1115", " 1337 1337 908 771 1337 1337 304 1337 992 1337", " 154 1337 1448 1337 574 800 1337 1167 1634 1337", " 1337 1337 1337 204 1233 305 1337 774 1337 26 314", " 1337 1044 1337 1049 1895 1337 1337 1337 1337 1337", " 1337 1337 1337 1337 1337 1337 1337 1492 1337 1337", " 1337 1337 1636 750 1337 1337 1958 1337 1230 150", " 1758 569 1337 1337 352 1337 1596 1454 760 1898", " 1337 450 1391 1337 1337 1337 1032 1524 49 1337", " 1337 1337 1337 1337 1337 1653 25 1337 1337 1337", " 501 1130 1337 1337 1337 1337 952 1337 1337 1337", " 1329 1337 1337 1541 1337 1337 222 1337 1337 334", " 1232 1392 1337 1337 1337 561 1141 1337 585 90", " 1337 926 1337 1337 1337 1337 1673 1337 1179 1337", " 45 1337 2000 207 1568 497 1545 907 1613 1337 1797", " 1064 1337 1662 1337 1337 1337 1337 1337 1337 548", " 1946 1337 1337 1337 1337 1337 1440 1337 1337 176", " 1847 1455 1337 1337 1337 1337 1337 1816 1337 1494", " 1337 1337 1337 1337 52 1924 1337 69 1337 1337", " 1337 1337 1508 1337 237 429 1337 1337 1040 4 1337", " 1337 1478 1337 1337 1337 1337 802 1337 1337 1337", " 1337 1337 1347 810 1660 1337 1337 1337 1337 1228", " 326 401 1337 468 1857 1337 1337 260 1337 1337", " 1156 1337 1337 830 1722 1337 566 529 897 1337", " 831 1015 174 1133 1337 358 1789 1337 1194 257", " 1337 1337 1337 1337 1493 739 1337 1353 1337 1337", " 1337 1337 1936 1337 899 1337 1421 1337 1831 804", " 1337 1337 1194 1337 1770 1339 1337 1337 1713 1337", " 73 1337 1337 1337 1337 1949 242 1337 1070 1789", " 1337 1235 1337 1076 1952 308 1337 1337 1337 1337", " 65 1337 1337 1835 1337 1337 1867 1337 1337 983", " 1872 1114 1277 1337 1337 197 624 1337 989 1609", " 1337 1092 1999 1527 1337 1337 1337 1337 1947 1337", " 1761 1337 1337 1337 1337 1337 275 1337 1334 1337", " 1337 409 1718 1337 1888 449 1337 697 1277 31 1337", " 1337 1337 1337 1535 855 537 1337 553 1865 1337", " 1131 605 1759 282 1337 1337 1597 1337 1337 1337", " 1337 1492 1337 1337 1337 1971 1337 1337 1337 950", " 1337 401 1972 851 1337 1337 1112 1337 1092 1337", " 1337 1337 1337 1337 1337 415 803 1337 1337 1337", " 1337 1805 513 826 1337 1337 225 1337 1337 1337", " 1506 1111 1006 1337 1337 1843 1337 1337 452 1337", " 1337 1337 668 1613 1337 334 418 1615 1337 1337", " 305 1337 9 375 1337"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 7692;
    if(result == expected) {
        cout << "Test Case 63: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 63: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test64() {
    int numSheep = 2000;
    int maxRuns = 300;
    vector<string> part1 = {"1667 999 40 891 630 1667 1667 1667 1667 1522 876", " 1667 395 222 1861 1125 1678 754 52 1148 1667 415", " 924 551 370 570 3 1667 1294 1667 1026 363 1817", " 1667 415 1667 43 1667 1623 102 1663 1667 525 1667", " 1667 1667 770 1102 1667 357 1667 1667 1667 1506", " 1548 1667 1667 1667 302 1667 1667 508 1667 1667", " 1667 1667 1667 1667 1667 1667 47 1667 1030 1404", " 405 1667 1667 356 656 15 430 1482 34 562 121 1667", " 1800 1667 1628 1667 1617 1667 809 1667 1667 1667", " 493 1198 1667 1667 1667 1667 444 1667 1667 1667", " 1667 1667 1667 8 1667 1667 1135 1531 147 174 1929", " 1650 1667 1667 364 1273 983 1667 1470 540 1667", " 1667 1667 1667 1046 964 536 1667 1306 431 1667", " 1667 1667 1667 1667 1896 1667 1667 1667 1667 1667", " 1667 1439 549 1667 1667 987 733 1426 1667 1071", " 1597 1696 582 337 1667 1007 1667 1667 1667 1667", " 433 1667 1634 1017 1667 548 1667 1667 1667 1457", " 805 1667 1667 1303 1667 1667 1667 1667 1694 1667", " 1667 1667 1375 37 1667 1667 1667 1667 334 186", " 1667 382 1667 1667 1667 1282 1667 1667 236 1667", " 95 1082 347 103 997 1667 1868 1667 50 1667 293", " 1667 1242 847 1667 1667 1667 1667 874 1667 1084", " 1667 973 1667 40 1812 1731 1667 1220 1667 1146", " 669 338 1667 1667 1667 731 68 726 1887 1667 161", " 411 1640 1667 1667 1550 1077 1667 1667 1235 1667", " 67 994 1667 1487 1244 335 1667 1667 1767 471 1667", " 275 950 1835 1667 856 702 1667 1012 1648 1667", " 1667 1667 1667 1667 674 1667 1338 476 1667 444", " 15 50 1667 624 1667 1210 1667 677 1667 1470 1667", " 1667 1667 1667 1372 1667 1667 1054 1667 1874 1667", " 123 1145 1667 604 1119 1667 1667 1667 488 1828", " 1667 1667 1667 1241 1410 1667 1665 1034 892 1667", " 277 1667 920 1667 1667 1036 804 1667 1667 1667", " 1667 1667 1211 1667 1667 1667 1667 491 1667 1667", " 378 1687 1667 877 865 1428 830 1667 1667 491 1724", " 1667 1667 929 1216 1667 952 1079 1667 75 1858", " 78 1639 1667 1133 1824 1667 1638 1667 1667 1306", " 948 1882 1667 1667 542 425 672 1667 283 1667 1667", " 1985 1667 1667 1667 1667 465 1667 410 563 1667", " 1667 647 1667 332 1667 1667 1947 1667 1667 1667", " 1667 1570 1667 1631 1667 1667 491 726 1667 1561", " 1667 290 1667 1667 1667 785 1667 1667 1667 1630", " 621 1667 1667 1667 1037 1922 1667 1667 1667 1667", " 1667 6 1667 319 1667 596 240 748 1996 1667 1276", " 1667 793 1230 1667 1252 1770 163 1667 799 1099", " 1111 1667 77 411 418 346 15 30 1667 231 1667 1667", " 1667 1667 1667 1667 1667 1667 1667 1667 849 622", " 1667 1835 635 1667 1667 71 1732 1667 633 1194", " 1667 1238 1667 1667 8 518 1667 1667 1667 341 1717", " 1808 1667 346 1667 1821 1667 1667 1667 1667 1667"};
    vector<string> part2 = {" 249 850 1667 1243 339 286 1667 782 1667 1667 340", " 1667 1667 1028 1667 1667 1667 1909 1808 1785 10", " 1667 1590 1667 1667 1237 1667 337 1301 518 1667", " 1381 810 1667 1168 1101 844 1792 1667 1667 1667", " 1667 1752 1667 1667 1667 1548 634 1667 327 984", " 690 1667 1667 588 1667 1667 1667 1899 1667 1264", " 1575 1615 1476 1667 1667 1086 1605 1667 480 1667", " 1667 1805 1667 1667 1369 316 459 1125 1667 1667", " 1044 1667 307 1667 1057 1144 1723 337 1667 1856", " 357 1894 1667 1667 1988 1524 1667 1848 1667 1667", " 1855 1667 1667 1453 1667 868 1667 1476 1667 1689", " 1667 1087 1667 1667 744 1667 1667 534 1667 1667", " 1667 1599 28 1667 454 1969 150 155 1667 1667 1433", " 1635 1667 1667 1667 572 1667 1667 1667 990 282", " 1667 1801 1667 1667 373 1667 1667 1667 1999 478", " 1503 628 1667 795 309 1667 1667 1878 467 914 1667", " 1667 1667 115 1174 1667 1667 305 1214 1667 1667", " 1667 1552 1944 59 703 1667 845 691 1667 731 1667", " 1430 220 1667 1380 1816 1667 1161 685 1667 1667", " 574 283 812 1667 1446 1667 936 369 1667 1667 75", " 1976 1667 1667 1667 1313 1667 1177 1667 823 1667", " 509 1115 1667 253 671 1667 1667 1299 1667 1693", " 567 1903 793 1238 1667 1667 1637 1667 316 95 1018", " 1393 895 121 1667 1667 585 1938 1943 1667 1720", " 1667 1667 699 764 119 1667 1667 1667 76 1542 927", " 1667 1667 1596 1667 1667 1667 319 1154 1667 1468", " 1859 1347 1667 273 1667 1635 681 1667 982 821", " 1806 823 237 1667 1667 1667 1667 1667 280 1671", " 1667 1667 717 1667 1255 969 1667 1920 177 1667", " 1249 1156 1667 1467 1667 1155 1396 1694 1667 1418", " 1667 1667 1075 311 1496 1771 1667 1297 1908 124", " 1667 1643 1667 1858 900 14 1258 1627 1667 1674", " 1325 978 1667 1667 1229 1667 498 277 317 904 1667", " 76 1841 1667 279 1667 920 1667 1851 1667 1667", " 1989 1667 1667 223 1667 1667 1667 1667 1667 1305", " 1805 1667 652 1667 619 682 1231 1224 301 709 1646", " 1735 1667 1558 309 1892 1667 191 1667 1345 1525", " 1667 1667 1005 1175 43 1667 1667 1667 1667 938", " 1667 1249 646 828 591 1667 787 1978 1667 1480", " 1667 1667 1667 722 1667 1667 1667 1815 1594 1667", " 1667 1667 1667 1667 1667 156 708 546 1667 1667", " 1477 1667 911 1614 1667 281 762 1667 1667 1667", " 687 389 39 1667 1667 601 1526 1667 1667 1667 1046", " 1667 1633 722 238 630 1667 47 1667 1667 1667 1303", " 1667 1589 1667 1711 1667 1667 1667 1594 1667 1667", " 365 1667 1667 1667 1667 1667 1667 1667 1667 1667", " 1667 475 367 1326 1455 1667 410 1134 1667 1667", " 470 1114 1667 1667 1667 390 1667 1352 1667 1667", " 1280 508 547 1408 1096 1735 1667 496 36 1667 1185", " 172 999 11 108 1667 1409 1667 1667 1667 1667 1218"};
    vector<string> part3 = {" 641 559 251 248 1667 1103 1667 1667 1641 1187", " 148 891 739 131 189 1667 1701 478 421 1667 234", " 198 1232 370 1667 31 1667 1860 1654 1667 1667", " 1667 1667 1033 1541 1633 1667 767 1667 1916 1667", " 1667 1178 1667 88 1667 1667 1667 1696 1667 1621", " 943 524 1667 836 1452 1667 651 1667 1667 1403", " 924 1667 961 1368 978 1667 532 1231 1465 1301", " 1667 191 1852 1667 1379 1667 1528 382 1867 1667", " 1667 690 929 1667 1667 533 138 1869 1667 609 961", " 1206 1772 1667 1667 1667 1667 1109 1667 1609 1667", " 1668 1667 1141 1489 1667 1740 1667 1083 1667 1228", " 1772 1667 1667 1667 1667 1667 1667 1667 1667 1468", " 1176 1667 1667 1667 1667 2 1900 485 1174 1927", " 1946 1667 1667 179 1046 1667 1667 1667 1667 1667", " 1667 722 1667 1667 1667 233 823 807 1904 1391", " 985 1667 1014 1667 1667 1772 1667 1667 1667 1667", " 1224 792 1667 1667 1667 1667 234 100 1667 1667", " 1667 1667 1354 1667 280 1667 489 756 1667 893", " 949 691 1667 1667 1667 1667 1648 51 880 1219 1667", " 1667 142 1667 1226 669 105 1667 1667 1208 106", " 1409 1667 1947 1667 947 1667 642 1667 1667 1667", " 1667 1176 1667 1571 616 1340 1120 725 1667 1219", " 1667 1667 1726 1179 1667 1230 1667 1667 1667 1667", " 1373 1604 1772 969 1167 1667 1667 932 1667 1667", " 1667 1667 1654 1297 1667 417 1667 1871 1352 813", " 1667 723 992 328 1397 866 1667 1695 1536 1667", " 1541 1667 238 54 1844 142 1667 634 1667 552 1981", " 383 1667 1699 1667 165 776 16 1667 1540 1754 1667", " 1667 656 229 1667 1667 1667 1667 1667 1667 1667", " 989 1667 1667 1667 1667 1667 1885 549 1905 1667", " 1908 1667 1667 455 345 99 1667 1667 637 1667 1667", " 1667 1667 1717 786 1667 279 1667 514 1299 1082", " 166 1178 1459 1771 1667 1667 667 1667 1667 1667", " 940 1667 1820 1667 527 1667 1667 698 584 1667", " 277 1379 1695 1667 1667 1667 1667 1014 1667 1667", " 1667 45 1667 1667 1667 1674 1365 1827 1667 1667", " 1667 1667 551 1667 1170 821 453 1776 1667 599", " 1707 1460 134 476 216 1645 1667 1667 1667 1659", " 1667 1566 1667 632 1667 1667 1667 410 1667 1667", " 1437 1059 1205 1667 1667 1667 1667 1102 585 437", " 1667 1667 1667 1667 1667 727 1667 1667 1667 1667", " 1667 1667 96 1108 1667 1667 1667 488 1022 915", " 83 1667 1667 1667 1289 1807 1110 1208 1667 1667", " 829 1667 1667 1612 1667 1667 1667 1667 1786 46", " 55 1667 864 1667 1667 1667 106 140 1667 1667 1667", " 1671 1889 1466 1667 1667 1667 1667 574 1724 1316", " 1775 1205 1244 1667 1667 1923 1924 1667 1057 324", " 1667 1667 295 1081 83 1667 1528 1667 1667 1667", " 714 1667 1545 1667 1667 1667 1275 1667 1667 1667", " 199 468 1667 1558 499 1036 1246 260 1154 1667"};
    vector<string> part4 = {" 937 1667 407 1667 1140 1667 1493 1667 1667 992", " 1225 1667 1667 1645 301 1667 1667 1667 1931 1667", " 1667 479 1667 1667 1667 88 1667 1667 936 691 1508", " 225 1667 1667 149 105 510 377 1420 203 405 1667", " 1494 1667 1667 1791 1593 445 1349 618 1667 1667", " 1667 1665 1667 165 1901 98 603 1796 1667 1090", " 710 1707 1323 1023 1306 1667 1667 1667 1667 398", " 1667 1667 1390 1204 1667 1648 453 1667 1667 1781", " 747 1667 1667 806 1667 1944 1667 1667 305 1055", " 1361 1667 1667 887 1289 1667 1667 1123 1667 1667", " 1667 1667 1082 1943 655 1384 1667 430 610 1667", " 3 1667 220 675 1667 1667 214 1667 1667 1249 30", " 1178 840 925 810 1667 95 1194 1667 1667 243 785", " 1290 1667 1667 1667 1667 1667 1667 1667 452 129", " 725 1714 1667 1988 1667 1667 668 215 1667 1667", " 1257 14 1891 1667 1667 1698 1087 1667 1375 849", " 1877 766 1667 1667 1434 1667 219 1667 240 1667", " 1667 42 1667 1626 1667 1667 979 1667 1603 1667", " 104 1667 83 1667 1667 665 1667 1667 935 729 1667", " 1667 225 1667 618 1447 1667 1667 1667 1667 1667", " 457 1667 1667 1592 1350 1667 1667 1667 1667 1667", " 1667 958 1667 1044 1667 1667 757 1667 1667 193", " 1667 1024 1667 1667 687 933 1667 599 1489 1667", " 1667 434 1667 589 1667 1667 1667 1667 521 1667", " 1106 1825 158 1629 1976 1174 1667 1763 526 1667", " 1667 1667 1078 1667 427 1667 1480 541 707 1667", " 1667 655 1667 1667 1017 1667 1531 1457 1581 802", " 1667 1667 1667 1667 525 97 900 1230 838 1667 1667", " 308 1507 838 1667 1956 399 371 747 1667 1667 1382", " 503 1620 1667 1667 795 1043 997 597 1667 1750", " 1551 1267 1667 1327 1907 1667 947 1931 349 1608", " 1667 950 1667 1667 1093 1667 1667 1667 1667 1667", " 1667 1667 1667 1667 1515 1667 312 794 1365 1667", " 1287 765 1667 1667 1711 1987 1370 1667 1667 99", " 1863 1667 1251 589 1667 1667 288 623 1667 1034", " 1667 1667 1667 1667 1667 544 257 552 1667 171", " 1667 157 1293 1667 1667 1667 1667 1597 1007 1667", " 1667 753 1667 230 182 1667 1204 1669 1667 582", " 651 909 1667 1667 1667 1667 1583 1255 1667 1647", " 1667 1667 1667 263 1257 1667 1667 738 1667 1667", " 1667 1049 615 1920 1667 1880 242 1667 1667 1485", " 1918 68 1667 706 1178 1135 1667 1146 1667 1665", " 1667 1667 93 92 371 465 240 109 1307 1667 1667", " 178 903 566 1667 765 1667 834 1112 1667 1667 1605", " 1667 1667 1286 1667 1878 1615 1667 1667 1667 1053", " 1667 876 833 1667"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 8823;
    if(result == expected) {
        cout << "Test Case 64: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 64: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test65() {
    int numSheep = 2000;
    int maxRuns = 1100;
    vector<string> part1 = {"917 1690 18 1697 592 1112 1 1 1821 1 1 1 160 1", " 1 89 1 1 1 1460 262 1 1735 1 1204 1 1 1546 813", " 1 1 1438 1402 1332 1 1560 664 1 1 608 1 1 1 1", " 604 1 209 983 863 1 1 1 144 1 1 642 979 464 1", " 1 1063 1 1 1 226 577 522 49 1 1 1 437 1 1 228", " 1 1783 1 549 451 429 1381 1 870 1 1892 1 1595", " 940 1 1 1 1 602 1 1 1800 1 1 1 1 1 1 1 1 1 1331", " 1 88 1 1 178 1 1497 1 1 1 1 699 1 1 1 1 215 1", " 1531 1 1 462 491 1 87 1691 621 281 1786 1 1651", " 1 1 289 72 1 1 1 856 845 371 1 1 1649 609 1 1", " 652 1 78 301 1 1292 1 364 1 807 80 1 1 1 469 1", " 1 1887 463 1 1227 845 1487 1 1 1 1 1 1 590 1247", " 1259 1 454 1 1269 201 1552 1 1924 40 583 1 1174", " 1 1 1 1 372 46 1 1548 709 1 277 1 1080 1 1 1809", " 1 1 1 465 1 1 1 1837 1856 947 1 1610 1 1 1 1797", " 1 631 1 1292 1 1102 1 1 1 1 1 1320 1328 1176 311", " 1 1020 907 1 1 1 1 1 1781 430 887 1 1301 1830", " 1 1 1 1 1 1494 395 1 1 1924 1 504 717 429 1 1867", " 1 1 1409 1909 896 1 169 1 1 570 1 1 1 1 1 150", " 1432 1 1 1903 872 1 1251 593 1 1 108 1 1 1 1 1", " 1 1264 414 1 539 1385 1756 1993 744 852 1 1 1370", " 1537 1806 1624 145 1946 1 287 1036 1 1 600 1 1", " 860 1 1382 1 1188 1 1 332 1393 1 228 1 1 229 1860", " 304 699 201 164 1 1 734 1 1 1656 1661 868 1 1", " 1740 1 1 1 1 1 1318 1 1199 1 1731 1477 1527 1728", " 1 64 1 1157 1 1 1 1688 1 1050 1 1 1 1 1 1 1195", " 1 1 1 1939 1940 543 1 1 1 1 1 731 32 1955 1 1", " 394 324 1207 1848 1 611 1 1 960 1670 1 1 1 1891", " 707 1631 1029 1286 1 1064 1043 1 1 1770 336 103", " 1263 1096 1 1595 1 1012 1 555 1 1596 1 1 1 1 439", " 526 1 324 688 1 590 1141 1 1 1 634 1 1 1599 1059", " 1 1958 1 1493 24 1 1281 792 1 41 1127 1 820 472", " 659 1 1 533 1 790 1183 1 1 1 529 1141 228 1 1", " 1146 1159 1280 754 1 1 1 1 805 1 639 570 1 732", " 1126 494 1 1 174 1 1 907 994 1115 1945 1 778 1870", " 1820 1821 1 1692 1 639 1 809 1 1 1817 1 475 1", " 1 1158 750 1 137 437 380 1356 1 1 1 1 1 1667 1", " 1 537 1 971 1 213 211 1908 1 1584 1321 56 1501", " 1 1 1 1 1234 1 1 909 1644 736 1501 1 1 197 1872", " 1 1 1 1 1 861 1 1 1 1 1 1922 290 1613 1 1 1 1", " 212 999 1994 1210 729 1565 296 1 1059 1 515 1", " 1583 1 70 1248 1 291 652 1 1 1 1037 1695 857 1", " 775 1 1532 1 66 965 1162 1090 1 1 324 1213 1 1", " 986 1 1559 1 1 1 1 1 1 1 1201 1 1105 1 1 773 1", " 1201 1 1504 739 37 97 1923 1 1573 920 403 1195", " 1 1 929 1101 1 455 1 1 1747 1020 895 936 1 1 588", " 174 1 1985 1094 740 1659 1829 1 124 1332 1 1803", " 1 1 1 936 1 1 1945 1 611 1900 1 1 1 1 1081 314", " 1968 1 1 1 1139 147 368 1318 485 1 1207 1548 1625", " 1 1456 1 177 752 320 1 1856 1 1368 1 1 1068 1026"};
    vector<string> part2 = {" 1 1 1 890 502 566 1 1511 1 290 1 1 1706 1 1 1", " 500 1911 1 1082 1914 408 1 663 630 1 1 1 1 428", " 1 710 742 1588 1 608 927 1 1358 1 1635 1730 320", " 566 1 1544 1 1 1 486 1 416 1 995 942 1145 479", " 1441 1 1 1829 59 1 1539 1 1 746 310 810 1983 1818", " 582 1 1 861 1 1 1444 1273 1 1456 426 1852 1 621", " 1232 1 1 1 217 870 1075 240 1 850 304 550 1566", " 1 1 1381 2000 1 1 1 1 1860 798 1 1 1731 1 294", " 1 1 1 1458 1 1415 1546 235 1 16 1385 1335 1263", " 1 1122 1558 17 493 1795 1079 1 885 1588 1079 1", " 963 1979 1 1 928 463 1 1620 1796 1147 1707 1 1", " 1 466 1522 275 1 597 1 1 1 733 1 196 1 1 876 31", " 1 893 813 1 1 956 312 992 1298 1 1703 1609 1 1200", " 73 1 1 1 1281 376 1 1 1753 86 1606 195 469 943", " 144 1 1948 481 13 36 1 1 1581 694 103 1349 1 393", " 1787 741 1 1 189 620 1 1 1 1 1423 737 1 694 1336", " 1831 1016 738 1261 1 1871 1729 1304 742 1 1 1", " 1 1665 1 1 1928 1 1332 1 377 1 1 1 1680 1 1 1", " 619 1 1 510 753 1 1501 438 1 1 716 1 536 1 1 1", " 988 1 1667 1281 1301 1 1 1 1 1 1 1 1 1385 258", " 906 1 1 1728 1135 1339 1 1 38 1769 115 1 1991", " 1 1 1689 512 1771 1 1 526 1 1 452 1905 1 1021", " 846 1 158 189 1 1 1 1578 1 1 450 1 1 1964 927", " 1 74 658 249 1997 259 1 1885 1 1 1394 186 819", " 1 1 1 46 1130 1 144 1 260 1 1 1 1160 126 1 1 48", " 1 1 1023 946 283 1 1041 300 1 630 1 1 1336 1 1", " 167 1334 1356 1 1 729 447 1674 1 1978 1 1 104", " 761 184 1 1388 1 1764 1 1 645 1 1 1 473 543 812", " 1 257 1060 716 1634 1724 1 1 1 1 1 1277 1 1 1", " 789 1 383 1401 1 199 418 798 1 1 510 1287 1 325", " 1 1763 1490 1145 1 1 323 1 1 187 1452 1 1757 913", " 1 890 1026 894 1129 1 1624 1 536 489 959 1 1 1", " 579 1269 1 1 306 1366 1576 1777 1 160 1 1 1 1", " 1 994 1410 1 64 810 1293 1894 824 285 1 336 1", " 1062 833 1 1 914 1 1697 1 1418 427 1 414 1 1674", " 1 524 926 1 1 1721 195 1 235 1219 433 1 1479 1276", " 1 1 1 423 1 78 701 1 1 1 1 1 1 1 196 1 1 280 1", " 1 631 1 1 364 1470 1411 1309 1781 23 1 1295 1824", " 1 940 1 1 1 1 62 416 1 1 1758 1 1 1835 1024 1", " 1 1 1 1 84 1046 1 1 1 1314 1 1 1 1719 882 415", " 1 1308 1 64 1437 1 1 522 1726 1 1 1789 1 1 616", " 700 1 1622 698 1 1 1 892 1054 1566 1481 1667 1985", " 820 1420 1194 602 1931 1 913 1 1 750 1 1 1846", " 1672 1626 1 1920 1 1 1963 1 1343 1 1 1 1 1 1 1", " 1 1 456 1 1 1334 1 327 1 1 620 1 25 1675 1921", " 995 1 496 1 1 1 1 1 1 798 1 581 1 1 157 1719 265", " 1631 1 1169 1 1 1 1 1 1944 1610 1 1 451 805 1345", " 1 745 1 1 631 1351 1 1661 1058 678 1807 1640 800", " 642 1052 1 1627 1 1990 1 1 1 1 1 1 1 1 220 86", " 1714 1291 839 1 1041 1 1 1 1 1 119 1815 1724 1"};
    vector<string> part3 = {" 1 1473 1491 379 760 835 1957 756 1290 533 1 1", " 1 1 1 1420 1976 1380 1730 1 1 1 1 1 1 1 1 1288", " 1 1009 1 1 1 1 1 1 944 405 1 1 1 995 1 1 803 1993", " 142 1 1 181 1738 1 944 1 1 562 1529 393 1 1 1", " 1 285 45 1332 1 1 1092 1 1 1 23 1 1 1558 1350", " 1 679 1 443 1 827 727 1 1 1078 1 382 1 1 1 1290", " 1 1 1475 1 1034 48 1 1 1 1 1 1 637 1 1303 1 744", " 1 847 1 1871 614 1 1846 997 197 1 11 1 155 890", " 1 1113 1 1 747 1 1 1 1 1 1817 1175 1 1585 1 1", " 1035 767 1151 1998 1 710 1 855 1140 1 1 364 1", " 1598 1 1800 1464 1 1 892 1017 448 1140 1 845 1", " 1 1821 745 265 1970 1 1506 854 1 1 1885 1 1 1", " 1 203 1 1 1 446 1226 1 1 1 1 1 974 1 234 756 1376", " 1246 1458 1893 1 1 1 346 1 89 1 7 883 1816 1349", " 1 1 1160 1 747 1 532 109 1 1014 1 1 427 1 1648", " 586 1 1848 1409 1 1 1 1462 1 914 1 1854 1 1752", " 1835 1 1 1207 1 1819 1 678 1131 1 1497 1 226 1", " 1 1 1199 1 1 1 1990 1 1187 1 503 1 1 153 1753", " 1 1 1 1 1 1 1897 318 1171 1818 474 1 749 1 1 1", " 1 685 1 1944 757 1 432 201 1 1 1 1470 1094 18", " 1 358 630 680 1 1 672 1 1433 1 1364 1103 1 1 102", " 1216 1 1848 1 1 1 1394 1 1 1760 1 1 1 1 1374 1", " 1 511 1777 1741 1 1260 1205 503 641 843 1 1 1", " 1310 1 1763 1821 1951 1 1234 1822 1 1 1200 1 1", " 1 1 1 1 377 1583 1 647 219 1 911 87 1583 1841", " 1358 3 26 1423 1 5 1 814 1 587 130 864 1 342 1", " 1752 1 1 1128 1143 1 184 550 1 1 1532 1122 758", " 27 662 469 455 1 1 1 1 1 108 55 998 556 1 1 1053", " 175 1 820 1 1 1313 1232 1715 201 1 1 1582 324", " 1 1 1 872 152 970 1 1 1 1 24 422 1264 1 1 1 1", " 1 1143 1378 1044 1602 1417 1 1 24 1265 1494 1", " 1933 1 683 1911 1312 1702 1 764 1 1 1 1738 1 1", " 1226 1514 424 1218 1 682 1 1 1 1 1 1 349 686 1969", " 1 1 148 1 761 1 1 1 1 1 680 1 218 1978 1 1 114", " 902 1 1908 693 765 1170 1634 1 1 1983 1 1 1442", " 304 1 1 846 1271 1859 1265 350 1 1668 1 1388 436", " 1708 856 1789 1526 1 636 10 1 302 1 1000 1 853", " 103 589 1"};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2000;
    if(result == expected) {
        cout << "Test Case 65: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 65: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test66() {
    int numSheep = 2000;
    int maxRuns = 1100;
    vector<string> part1 = {"1362 13 900 1804 925 13 13 13 13 1760 13 13 13", " 1916 84 1692 13 1916 1078 13 13 765 13 1549 972", " 13 13 13 780 518 666 1446 1791 142 13 13 900 1644", " 402 13 222 344 196 554 13 13 413 1669 1097 344", " 13 13 13 13 13 672 844 1471 13 13 867 431 13 13", " 13 13 13 13 795 724 13 13 13 715 13 13 13 602", " 13 13 63 13 1169 868 13 13 1367 1827 13 13 13", " 1952 13 13 13 1429 1224 13 13 552 13 845 13 683", " 13 13 1839 13 1785 1125 1484 13 13 13 13 13 13", " 222 1578 1825 13 1161 13 1033 13 13 1206 1024", " 1158 13 13 146 13 792 13 1656 13 13 1886 649 13", " 13 13 13 13 13 1391 13 1133 437 1081 755 1928", " 1460 17 1960 13 1600 13 1389 843 651 13 659 13", " 790 13 1497 1972 13 13 13 13 707 780 140 2000", " 13 411 1664 13 13 13 917 12 1414 13 13 498 1721", " 752 1201 390 13 13 13 13 13 13 13 13 13 13 144", " 1273 1333 400 1719 13 1858 130 1492 1934 13 13", " 1561 13 593 39 13 474 351 13 712 13 1133 471 13", " 13 632 222 13 13 516 13 152 1530 13 1900 13 1889", " 13 1275 1868 13 350 13 13 13 13 13 1546 907 373", " 1375 1116 13 1356 13 145 1391 158 324 282 13 1207", " 13 501 802 993 1329 13 13 13 7 284 1957 13 13", " 13 13 1159 13 13 27 782 13 13 700 13 13 13 1236", " 696 1213 13 13 991 13 108 13 364 399 13 13 16", " 13 964 329 13 13 13 13 386 13 13 13 1520 13 13", " 13 1249 13 1381 13 1333 13 1706 130 13 13 13 13", " 1955 1052 13 1252 497 148 1295 796 13 13 600 751", " 13 1986 13 1005 108 13 132 945 1949 13 13 954", " 1476 13 1365 425 1895 13 13 1570 13 412 13 326", " 1355 13 411 13 13 622 13 13 13 818 616 13 13 20", " 13 13 13 1865 1345 823 13 1920 1 750 13 13 1875", " 13 13 1535 1578 902 13 873 1305 13 1897 13 13", " 1933 450 19 13 1 1680 102 1166 13 1023 13 841", " 13 13 13 1988 13 13 1394 1113 1886 540 13 13 13", " 399 1151 657 13 13 13 13 13 849 959 13 926 1824", " 220 1925 13 13 13 1565 13 13 256 112 300 13 13", " 255 1316 1552 1210 806 1515 746 13 1771 440 728", " 13 13 13 13 1289 13 1568 1876 13 13 13 13 13 13", " 1723 13 13 451 1857 1220 13 686 13 13 13 13 13", " 710 706 1501 13 13 13 13 13 13 717 728 13 49 13", " 13 13 920 503 13 1684 1983 13 1248 13 13 13 433", " 13 13 497 1670 1804 348 13 1765 780 147 13 13", " 13 387 13 1148 13 372 13 958 1743 1634 13 1136", " 48 13 13 13 1663 13 13 1116 13 13 13 13 1912 1964", " 13 13 13 13 1027 13 538 759 13 1198 237 946 13", " 1938 13 13 726 918 13 1735 694 13 13 461 1617", " 13 13 13 13 813 13 1451 13 1988 13 13 1149 364", " 202 13 13 1908 496 1889 52 13 83 282 606 13 13", " 13 13 836 13 13 1202 13 290 13 13 13 13 13 1769", " 455 13 1445 1573 960 13 719 1046 1290 13 1396"};
    vector<string> part2 = {" 1152 13 463 13 13 13 1027 13 737 13 13 13 13 13", " 907 13 953 13 13 1479 1547 1273 13 13 1356 1919", " 13 13 13 435 13 1125 615 1217 1158 13 13 44 13", " 13 13 253 1041 1472 13 1831 297 13 722 850 311", " 880 13 13 579 201 469 13 13 546 1294 13 260 13", " 853 13 183 534 13 13 590 1686 13 13 13 13 419", " 13 13 208 61 13 968 543 13 13 13 13 13 13 13 519", " 13 128 13 13 13 1434 627 93 13 1175 143 13 13", " 13 13 13 629 13 1628 1751 13 13 1488 350 13 955", " 1995 13 13 90 13 13 13 13 1460 1432 1217 13 13", " 1803 1844 13 362 576 13 443 1849 1514 13 415 24", " 452 1056 13 1980 1760 13 922 13 359 205 13 13", " 13 227 101 13 383 1592 1627 1548 467 13 1934 1066", " 1301 1446 424 13 418 1517 13 425 921 13 1249 755", " 13 13 13 605 13 1233 1315 1322 779 1607 13 13", " 490 1256 1716 6 641 13 13 1424 407 438 290 13", " 860 1201 1949 1239 13 1706 13 13 13 13 13 1637", " 540 1976 1476 1784 13 990 792 13 236 228 956 1949", " 250 13 13 13 13 372 13 733 1683 13 13 1696 653", " 669 623 13 137 13 13 13 13 13 13 13 13 13 853", " 13 13 1369 13 88 770 13 13 13 1771 1418 301 849", " 710 715 554 13 1149 937 13 933 896 150 13 13 13", " 13 1401 13 1828 123 13 595 202 314 402 13 135", " 1634 252 329 1466 542 287 1498 13 13 806 170 1478", " 1445 999 13 1819 1144 241 13 13 13 448 1247 13", " 306 986 218 13 1842 13 1428 380 312 13 13 13 1051", " 13 1632 265 13 13 13 13 13 13 1579 1721 13 188", " 13 1497 1088 274 13 13 13 13 13 13 1657 1805 458", " 1051 13 624 186 841 459 485 13 842 13 13 1588", " 13 1657 1549 13 13 666 1924 13 13 13 1893 13 1205", " 1971 1220 625 13 714 13 705 939 13 1069 47 13", " 818 979 13 13 13 13 13 13 391 1510 13 1236 13", " 113 964 13 797 13 1327 13 13 13 13 199 13 462", " 1749 1748 13 13 320 13 1133 13 1214 13 13 13 13", " 1972 871 561 754 1860 13 13 683 363 13 816 13", " 1706 197 110 13 13 869 13 13 663 1408 760 7 434", " 290 1219 595 13 1195 13 889 13 772 13 564 13 13", " 1639 1165 13 828 1738 13 13 13 95 13 13 104 13", " 975 13 13 1467 13 13 13 87 13 1491 796 13 13 981", " 13 13 309 13 13 13 13 13 31 1826 13 1333 13 13", " 71 13 13 13 13 13 449 1639 13 13 13 1594 13 544", " 13 13 301 13 659 13 1133 148 13 13 13 13 13 522", " 13 1609 1514 13 181 1170 1377 968 13 1682 13 13", " 242 13 867 13 1636 13 13 13 1153 13 329 13 285", " 13 1958 13 1868 1886 1113 677 13 13 13 13 13 1784", " 13 13 13 305 13 13 13 13 1366 13 252 13 1079 13", " 13 1234 13 1531 13 288 13 72 141 361 13 1959 13", " 1177 13 1824 644 164 13 943 1325 1724 49 13 13", " 1370 1409 13 13 13 13 1127 13 13 13 1349 13 606", " 1994 266 736 13 13 13 472 1787 1288 353 13 1655"};
    vector<string> part3 = {" 13 13 13 13 13 942 13 13 13 13 586 13 13 671 13", " 13 13 1632 853 314 13 739 1350 13 606 522 43 13", " 13 13 13 13 13 1034 13 635 13 1739 13 13 13 1850", " 229 180 786 984 1211 1520 1023 1679 277 13 1789", " 1440 13 154 1547 13 13 1952 1716 1438 340 13 1523", " 13 806 200 1987 229 552 405 906 13 13 13 13 126", " 13 13 13 13 13 1356 13 13 13 752 13 1153 1455", " 13 13 923 13 1616 13 378 615 13 1106 671 1258", " 13 13 1242 13 13 846 1873 13 13 780 1898 13 13", " 661 13 13 13 13 13 13 1378 13 1556 13 41 1903", " 13 1083 13 13 1935 13 13 13 1726 13 13 13 13 13", " 13 13 730 13 1799 13 13 13 13 1330 1611 945 13", " 13 1603 1870 623 13 13 1487 13 1008 13 637 254", " 13 13 1625 13 822 13 13 13 523 740 1651 488 13", " 612 1921 1374 130 13 1375 13 13 13 13 1520 1460", " 634 13 13 13 1814 1624 13 1995 1934 13 645 13", " 527 13 13 13 1017 1602 13 13 82 13 13 13 13 13", " 13 1898 13 13 1545 13 13 13 13 13 1181 735 13", " 13 950 13 13 1350 13 1758 384 13 246 13 13 755", " 1549 13 125 13 1943 13 13 1658 854 603 15 13 13", " 13 13 13 13 1658 13 572 13 13 1886 822 1895 1850", " 1512 13 902 13 854 13 1442 13 350 1786 1546 13", " 13 13 1124 261 820 13 13 13 578 1596 1322 13 1653", " 13 114 885 13 142 1605 1481 13 13 1628 1301 13", " 173 936 13 13 13 13 1268 1065 13 13 13 1161 13", " 824 1412 341 13 1719 28 740 13 880 1086 13 13", " 13 885 13 1770 13 13 283 13 1357 1739 13 558 960", " 1471 271 13 1153 13 13 13 13 1081 271 225 13 13", " 1051 13 13 485 13 13 13 13 1990 13 13 1895 13", " 13 25 1195 13 13 852 693 13 13 1086 13 1724 13", " 13 509 13 1774 13 985 13 13 13 13 1320 1914 1870", " 13 13 13 1966 13 13 1164 13 13 685 13 13 13 13", " 13 13 13 990 1351 1944 872 151 13 1585 1021 13", " 13 802 13 1364 1525 1205 110 13 13 1683 1364 13", " 13 284 1490 13 60 516 13 13 13 1390 1367 13 656", " 1354 13 13 13 13 13 1252 450 13 13 13 640 476", " 13 1244 5 13 1234 203 13 1472 1926 981 13 13 706", " 1638 1697 13 932 13 13 1949 1322 1684 13 311 357", " 798 13 1686 13 13 13 13 1317 1206 13 1961 13 491", " 13 523 13 1657 13 206 13 13 1136 1960 13 146 13", " 366 13 689 13 13 121 775 13 1650 13 804 1480 672", " 324 1192 982 13 922 13 13 13 1088 13 1162 13 1670", " 1963 13 353 13 859 13 13 13 1140 1817 13 9 13", " 556 802 13 13 264 900 1469 850 363 13 13 13 3", " 13 13 550 1848 13 13 13 13 202 13 516 13 13 13", " 336 13 791 13 13 13 1374 1875 373 13 13 1981 24", " 1080 398 13 1659 13 13 96 13 13 13 35 909 13 13", " 13 737 777 1117 13 776 1409 13 538 13 833 345", " 150 437 758 1747 1401 798 13 967 13 935 13 773", " 892 405 1656 13 1556 13 1967 13 1501 1332 1658"};
    vector<string> part4 = {" 726 13 13 13 762 668 502 13 13 533 222 13 1690", " 13 13 1716 424 794 1784 1325 1930 13 990 13 1687", " 13 13 13 13 13 1438 13 669 13 826 972 1674 956", " 13 571 13 13 1182 1182 13 13 1842 699 1118 13", " 13 780 13 13 13 698 13 56 13 1887 885 1276 1770", " 13 1310 1877 187 13 13 13 349 658 13 1310 13 1056", " 13 1501 888 951 13"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2000;
    if(result == expected) {
        cout << "Test Case 66: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 66: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test67() {
    int numSheep = 2000;
    int maxRuns = 1100;
    vector<string> part1 = {"1015 565 42 170 1391 250 1686 42 42 42 42 42 1229", " 652 42 1229 943 42 182 77 1264 42 1950 338 1934", " 42 42 42 101 42 42 582 42 42 1310 42 166 1768", " 42 42 42 42 42 686 42 42 1009 42 42 42 693 42", " 42 42 42 649 42 42 42 1346 42 42 42 42 1927 1294", " 65 42 485 1204 42 279 977 42 42 42 42 42 42 1455", " 344 1953 42 180 1483 1281 1304 432 42 1954 42", " 42 1969 42 42 1172 42 1931 989 1641 42 42 42 1448", " 42 454 116 42 42 42 216 42 1916 42 42 1362 881", " 42 1235 42 42 42 42 1247 42 848 841 42 500 435", " 249 42 1676 205 1034 42 900 42 42 42 42 1550 42", " 1656 1632 1971 426 790 42 42 81 42 42 42 849 3", " 679 698 1562 42 42 42 762 42 42 42 1123 42 42", " 42 42 1982 574 42 487 42 42 785 429 1091 42 42", " 1283 1415 42 42 1576 1887 357 16 42 42 975 42", " 42 1525 1501 1572 42 42 42 1058 238 42 1236 337", " 42 42 42 866 42 42 1550 110 1259 42 42 670 42", " 599 42 42 42 42 485 451 42 42 42 42 42 42 42 1753", " 42 348 42 11 492 42 1940 203 1251 1400 678 1410", " 42 42 42 28 42 42 42 1254 42 19 42 1420 1677 1693", " 42 42 46 42 1419 42 42 1393 1334 42 42 1617 42", " 280 306 503 42 42 7 42 42 42 42 1922 1465 1860", " 42 496 42 42 1357 42 654 409 1342 762 970 410", " 1145 42 42 42 1819 229 42 42 1896 42 404 42 42", " 1172 42 42 1986 42 42 1015 1158 42 1648 42 42", " 42 42 42 42 42 42 541 693 1503 858 42 70 1461", " 42 369 42 864 42 547 42 42 42 42 1976 1288 42", " 42 1046 42 388 42 977 1163 1060 1505 367 1900", " 42 1129 838 42 514 42 438 42 270 42 42 1936 42", " 1491 445 42 220 42 1083 42 732 1930 42 42 42 1515", " 1802 42 42 42 81 1942 1984 976 485 42 42 1844", " 42 418 810 520 1904 42 1965 42 1776 1832 42 129", " 1214 1669 42 52 42 42 1289 42 242 1377 42 42 1447", " 42 42 42 256 42 396 42 735 1784 42 42 185 1805", " 42 42 42 1029 42 55 42 1153 813 42 1047 42 42", " 249 42 778 42 42 42 42 42 1399 1835 42 42 1259", " 42 1747 1753 255 42 439 42 1390 42 42 416 1841", " 738 42 42 42 42 42 1591 716 42 520 42 42 471 42", " 42 1312 42 42 1983 42 42 42 802 42 1880 173 42", " 1402 1849 1810 42 42 987 42 42 42 1744 1405 42", " 42 42 42 42 1395 42 42 841 599 42 1992 358 42", " 42 42 759 546 1565 1950 42 42 42 42 177 42 42", " 1081 137 42 42 515 1659 1713 42 42 612 1339 1056", " 42 105 42 42 598 42 42 1272 42 421 42 42 139 42", " 354 1069 943 42 240 826 42 42 42 956 1681 42 42", " 100 1830 42 80 42 856 42 1939 42 42 685 54 558", " 1515 1360 656 42 42 116 42 577 42 42 1847 580", " 1904 42 663 865 1926 1707 567 42 1190 1661 814", " 1200 1776 403 806 1460 330 1038 42 387 79 42 850", " 42 1409 1797 42 1642 1405 877 42 1433 42 42 1927"};
    vector<string> part2 = {" 1096 241 523 42 1627 42 1944 42 42 1285 254 1606", " 42 630 42 42 42 42 42 14 552 42 820 1359 42 42", " 1841 660 1803 42 540 42 42 42 42 42 1983 475 42", " 42 42 42 42 42 42 1001 1707 42 42 1672 42 676", " 42 1144 1500 64 42 1265 42 42 42 1081 42 42 511", " 1427 42 1151 603 42 42 42 42 746 679 1039 1113", " 42 523 1307 446 42 1430 42 42 42 42 42 404 1554", " 275 42 42 1885 42 3 42 1164 42 592 1380 1236 856", " 20 851 42 42 42 1539 981 1111 1381 42 25 42 1164", " 1067 42 405 937 163 1300 381 231 42 42 1253 944", " 42 381 42 42 465 42 140 42 42 100 1883 42 42 42", " 42 42 42 42 42 1423 42 42 42 1870 42 42 1311 42", " 42 42 1585 42 1301 366 42 42 923 1353 1508 1544", " 1199 42 1587 1467 1598 1465 1033 884 42 42 42", " 42 42 1491 42 42 556 264 42 42 754 517 42 42 42", " 42 1219 1395 934 42 42 42 42 42 239 42 42 42 258", " 42 524 42 1079 42 87 933 42 42 1112 1549 42 42", " 1588 42 42 42 42 42 42 42 42 518 42 253 1755 42", " 713 1595 416 42 1106 98 1245 1324 1065 42 42 1605", " 1066 42 42 42 868 1278 1337 1028 58 42 1145 1117", " 42 686 42 128 1222 42 42 701 42 1981 699 132 127", " 1761 1330 11 1846 42 198 635 42 42 975 923 42", " 42 1266 1094 42 1023 268 42 106 495 242 42 42", " 42 764 42 42 42 9 1026 42 42 564 42 32 42 1540", " 42 42 42 42 42 42 331 1824 260 953 1587 42 635", " 42 465 1037 42 1406 42 1512 1823 42 1412 179 162", " 1301 42 217 42 42 42 42 1566 42 491 243 42 66", " 42 1034 315 1176 677 1248 42 1087 1161 455 1109", " 552 812 42 42 42 1096 42 42 42 42 42 1632 1628", " 42 94 42 199 42 42 1572 42 42 42 42 42 101 1671", " 555 42 42 1815 1785 1622 42 42 42 42 42 42 42", " 617 42 42 42 42 974 42 42 1525 42 42 1612 42 1210", " 42 188 42 42 42 902 42 42 42 42 1286 799 42 42", " 1810 42 396 42 1686 42 42 42 1408 416 1046 693", " 42 42 431 1562 42 1678 42 42 1201 42 378 1586", " 42 42 1079 579 1020 1045 792 42 1591 1876 1799", " 534 1201 1046 378 291 301 1660 42 42 42 1490 42", " 177 1247 1706 42 1118 1369 42 42 1231 42 739 42", " 1537 538 113 536 1747 277 42 254 42 1687 42 42", " 42 42 42 203 42 42 42 42 1458 63 42 1431 1371", " 764 42 1979 353 1776 42 419 1643 1228 123 84 357", " 1733 42 1756 1818 42 42 341 42 1226 628 42 42", " 42 42 42 682 1092 42 1411 42 1907 42 284 28 42", " 1169 975 42 326 403 42 42 42 42 1985 508 1460", " 1569 1493 42 1055 744 42 42 1888 42 42 42 42 814", " 42 42 675 42 1735 1919 42 42 42 42 1063 489 42", " 1043 547 185 42 42 782 1293 443 42 42 1487 42", " 596 42 1415 42 42 853 690 496 42 42 42 446 351", " 1326 42 42 42 1092 42 582 727 42 995 1687 1372", " 42 1029 1639 42 533 1178 42 1848 864 42 42 689"};
    vector<string> part3 = {" 42 889 42 815 825 745 42 42 42 725 42 42 70 1346", " 42 42 1709 854 1655 1930 42 561 1100 1467 42 42", " 1415 42 42 1451 521 42 42 1321 1004 941 42 42", " 1850 1321 1396 42 1238 42 42 683 42 42 42 42 1544", " 1849 42 1508 42 42 1399 42 168 72 42 600 1324", " 42 42 1708 379 130 42 42 42 42 42 468 42 42 1835", " 1499 27 1228 42 1494 42 42 142 1456 42 1270 421", " 1867 42 538 1571 977 42 358 1674 42 42 42 626", " 831 42 1578 1798 441 42 42 297 1912 42 108 288", " 42 42 1972 68 42 1156 42 42 1024 42 42 534 42", " 42 42 985 1322 1404 42 1014 42 641 533 42 1745", " 568 42 42 367 1050 102 326 1185 42 42 42 42 42", " 42 1721 1957 42 42 42 1227 42 1857 359 42 42 24", " 42 42 1177 1316 1496 1304 42 42 42 42 42 42 42", " 42 42 948 42 1785 42 1667 741 42 42 1728 42 42", " 42 42 42 42 42 42 42 42 484 110 42 42 1834 42", " 414 42 155 24 138 1105 42 95 42 1599 1873 1731", " 42 42 42 1273 42 537 271 187 42 1493 42 999 1485", " 225 1879 1972 1766 1190 1942 1201 42 1453 444", " 42 1421 1518 42 142 1205 968 42 42 42 1729 42", " 651 922 42 1919 1683 42 42 42 42 42 733 397 42", " 42 63 42 42 42 1554 42 1937 855 1481 864 42 42", " 42 42 42 42 282 42 309 1441 42 5 895 1185 1202", " 42 42 42 42 42 42 42 42 370 661 619 42 42 42 312", " 1812 857 22 642 42 42 42 42 2 42 1132 42 42 1213", " 793 42 894 42 42 284 1658 1707 840 42 789 1868", " 42 266 1481 42 42 42 42 750 42 42 1677 42 1786", " 42 42 1937 482 42 42 605 811 698 69 1616 1170", " 1948 42 590 42 42 42 1760 1295 315 42 42 42 290", " 642 163 907 1804 42 170 42 42 634 1557 42 1977", " 42 42 42 42 75 217 628 753 42 1107 152 42 980", " 42 42 1864 710 42 93 496 1110 42 1592 187 244", " 420 42 42 1789 1725 42 623 2 408 958 42 1025 1336", " 42 42 830 657 546 57 599 42 1816 42 42 1912 42", " 42 794 42 42 1538 13 1752 42 676 42 931 1451 956", " 42 42 42 42 636 1543 986 42 42 42 1513 790 1210", " 42 42 42 42 42 898 42 42 42 42 1599 42 1033 590", " 42 618 42 42 934 42 1672 1342 262 200 1835 323", " 42 42 42 42 42 1862 325 1729 1596 35 103 535 42", " 42 42 42 42 816 1139 42 271 1275 899 42 1646 42", " 42 42 42 845 42 42 18 511 388 1268 42 42 819 42", " 509 233 554 1546 42 42 42 1619 42 1554 732 42", " 42 42 42 42 42 1060 154 1545 699 42 1120 1703", " 42 1093 42 532 42 225 42 42 42 42 42 42 1485 42", " 25 1994 1478 42 42 1675 42 1268 679 474 42 376", " 42 42 42 42 42 42 1282 687 42 1732 323 1916 42", " 42 784 1960 533 1237 42 920 42 42 260 42 42 1628", " 42 1738 42 1578 1207 42 42 42 42 42 42 42 42 42", " 1480 1671 503 42 42 1324 42 814 1004 1721 479", " 611 42 42 42 42 1438 42 42 42 240 42 42 1447 1198"};
    vector<string> part4 = {" 42 42 42 1346 1277 42 42 42 359 42 42 1674 42", " 42 671 1142 42 42 42 248 42 42 1723 474 42 219", " 172 1971 42 42 42 1554 1124 640 42 42 42 42 1031", " 42 1575 42 42 42 42 103 42 42 42 27 1301 1084", " 1963 42 1824 42 42 42 1658 797 1398 42 42 42 93", " 194 42 877 230 42 1513 1753 42 1053 42 42 668", " 42 1853 42 363 42 351 1389 42 42 1460 42 947"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1994;
    if(result == expected) {
        cout << "Test Case 67: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 67: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test68() {
    int numSheep = 2000;
    int maxRuns = 1100;
    vector<string> part1 = {"576 386 1242 576 1660 672 969 1561 1459 576 717", " 576 1179 1378 576 576 1722 576 1165 576 576 576", " 365 576 1444 576 1915 118 576 1100 576 505 1884", " 288 142 634 576 576 576 576 1650 576 576 1011", " 81 444 576 576 576 576 122 576 576 576 301 370", " 880 1159 1542 153 576 171 1224 576 391 1012 298", " 1008 576 576 107 844 958 576 576 576 360 576 576", " 576 111 576 345 576 632 576 757 576 555 1960 576", " 1570 576 1581 576 1779 798 576 576 576 576 576", " 576 576 783 576 576 576 576 576 576 576 1366 576", " 663 1911 576 576 576 1648 115 802 755 576 341", " 945 335 1690 576 1021 576 712 576 1947 576 1168", " 576 1881 4 576 883 576 576 1120 576 576 576 576", " 576 106 576 234 576 173 576 862 647 576 576 1186", " 576 1163 576 458 1223 415 576 576 576 1597 576", " 488 576 1427 576 576 543 576 576 252 308 576 1841", " 391 1124 654 576 54 488 452 214 576 576 576 999", " 576 576 576 576 576 576 240 1289 576 576 576 619", " 1325 576 576 576 1583 687 576 1329 100 576 1380", " 1175 735 576 1435 576 1987 1413 1628 705 632 576", " 496 70 6 576 576 576 280 1976 713 576 576 576", " 1170 928 1816 432 576 867 576 390 576 576 576", " 987 576 576 1033 576 678 721 275 576 576 576 576", " 911 576 1346 576 1835 576 231 576 13 297 46 576", " 576 576 576 576 576 757 556 576 767 597 576 1148", " 576 576 1668 576 1012 576 314 576 683 1227 1565", " 576 898 1980 576 1597 576 576 576 326 576 576", " 483 252 1657 338 1068 576 813 1329 1115 576 576", " 576 576 576 1222 576 1412 893 576 89 1742 576", " 489 643 576 1258 576 576 1695 1058 576 104 378", " 1630 1115 576 576 576 576 1724 576 1700 1929 1824", " 1422 1277 576 576 546 576 362 344 576 966 576", " 576 576 576 576 1784 576 14 1596 576 576 1870", " 576 576 1388 576 963 576 576 1770 576 576 576", " 716 576 576 605 850 71 576 576 1151 610 884 576", " 1207 576 1466 749 576 1327 293 576 1741 576 583", " 576 576 576 576 691 1533 1749 1740 576 343 576", " 576 576 172 35 576 1527 1182 113 1404 1032 54", " 576 910 362 1963 1592 1112 576 789 576 371 576", " 490 576 576 1287 1857 326 576 576 1352 690 241", " 576 576 1257 576 576 576 576 576 619 576 576 1339", " 576 1079 576 86 1797 1537 668 941 1467 576 341", " 576 1863 1889 563 783 1985 1772 576 576 576 576", " 1100 576 576 1039 576 243 576 1501 576 576 1215", " 572 576 576 1471 576 576 576 1588 576 1483 576", " 576 688 748 749 576 540 576 1638 576 576 406 1283", " 576 576 576 576 126 754 1615 252 1171 576 576", " 383 576 576 1256 576 576 576 576 576 108 576 1364", " 1853 540 1033 576 576 576 576 602 576 576 1254", " 120 576 470 525 899 266 1380 576 1689 576 1712"};
    vector<string> part2 = {" 576 823 1223 1584 576 1152 1740 1156 536 576 576", " 1445 430 576 576 590 576 632 576 700 576 576 576", " 1760 576 576 576 1330 576 576 645 576 576 1306", " 576 576 576 576 576 1191 576 648 1746 576 1768", " 576 576 1854 576 98 576 440 1389 576 388 661 576", " 478 576 576 477 576 576 576 576 383 576 1992 576", " 1673 1535 576 576 1544 576 1618 1678 576 576 1388", " 576 212 1333 425 576 576 576 299 576 1091 576", " 818 576 1898 284 735 576 48 576 576 1880 1552", " 576 838 576 1610 576 576 576 925 576 576 576 576", " 121 419 637 1162 285 576 576 1762 576 14 576 576", " 335 576 1312 576 576 576 576 576 779 169 983 576", " 194 716 576 1996 576 576 576 1140 576 1886 576", " 576 751 576 576 576 391 576 576 21 1984 576 970", " 1560 1734 215 499 1708 576 464 1749 576 1397 555", " 1880 576 1524 576 576 576 1663 576 169 1652 576", " 576 725 576 1437 576 490 576 576 140 873 576 1174", " 576 576 576 1848 197 1778 1723 576 1566 576 944", " 576 576 806 490 576 576 576 1132 576 576 1015", " 576 576 1234 1321 576 576 1111 1428 576 489 576", " 1344 576 1864 74 844 576 576 576 1062 576 56 1105", " 576 576 1143 413 1412 292 770 576 576 576 141", " 849 576 576 1814 576 576 576 728 576 576 576 576", " 576 99 576 535 1018 576 267 576 1265 576 576 576", " 576 576 576 18 202 576 304 576 576 168 576 576", " 576 576 576 576 1406 576 200 339 576 641 576 576", " 1801 576 576 576 576 576 576 1189 1974 1000 682", " 576 576 576 1772 576 233 414 688 883 576 1912", " 576 1965 576 576 14 576 1587 102 1651 576 1685", " 576 576 576 576 411 576 1609 736 1536 782 576", " 576 576 776 576 576 629 1413 326 576 576 576 576", " 1325 249 1263 576 576 1374 1615 576 576 1115 685", " 576 576 848 576 576 576 1948 576 576 576 1014", " 576 168 1461 576 1818 609 187 871 876 576 576", " 745 516 339 576 1369 913 576 576 1981 576 1342", " 576 576 576 819 576 1966 576 576 576 561 1440", " 1521 1495 233 1137 576 576 760 258 911 1171 576", " 216 576 1782 879 576 1015 1541 576 576 393 576", " 346 1661 576 576 565 291 576 576 576 1086 576", " 1079 576 960 160 1441 576 576 113 1786 576 576", " 576 1397 576 576 576 576 1430 576 576 576 576", " 1594 1772 1368 1405 576 576 1180 35 1236 576 576", " 1176 1457 836 576 1376 295 576 576 576 576 1929", " 489 771 1154 576 576 576 573 576 305 576 576 576", " 576 496 576 1368 8 1956 576 386 1905 576 576 576", " 576 576 576 1184 566 137 375 576 576 790 134 575", " 576 21 576 576 576 30 1299 576 722 237 576 576", " 576 704 576 576 388 314 576 576 576 576 576 576", " 1369 576 576 1004 576 576 1882 91 576 340 201", " 576 340 576 1027 576 576 1795 407 940 1879 576"};
    vector<string> part3 = {" 770 538 17 748 1446 1009 576 8 1164 1127 1835", " 576 1336 501 576 567 576 1081 576 576 576 1687", " 1666 576 162 576 576 576 120 576 576 138 576 576", " 576 576 576 576 576 1291 306 576 576 1163 1027", " 1136 1155 576 770 1648 768 576 75 1048 1696 576", " 576 576 607 576 576 576 1520 1237 576 859 976", " 576 576 522 1984 576 576 576 576 1286 1958 576", " 178 576 826 1928 576 576 533 1788 327 37 576 1573", " 1320 708 576 232 862 576 576 576 1119 576 576", " 576 1901 576 1789 576 1989 336 618 576 576 576", " 576 572 576 1532 576 857 394 576 576 1194 1978", " 725 1510 58 995 576 1906 1531 1748 855 576 576", " 1753 407 537 576 576 1144 576 576 576 576 576", " 576 1376 1498 535 226 238 576 576 576 1505 1192", " 379 227 576 1137 915 1325 576 576 576 65 576 576", " 576 1178 576 1391 1091 576 576 576 576 958 442", " 576 1753 573 1615 576 576 372 576 406 166 576", " 259 708 1007 528 597 576 244 576 210 576 1349", " 1664 576 576 856 649 576 576 576 1748 576 717", " 357 576 576 576 1563 679 707 548 576 456 1253", " 576 942 986 576 576 73 576 1321 576 576 576 576", " 576 969 2 576 1044 596 1933 576 576 576 1278 1", " 576 576 1309 576 728 1379 23 326 576 421 1473", " 1963 576 1153 1540 576 576 576 808 1200 82 576", " 1467 639 576 1195 576 576 459 1473 576 576 689", " 576 1157 576 1046 778 576 1246 576 576 66 576", " 576 576 576 576 576 33 82 1531 1344 1590 1145", " 576 576 576 822 1640 576 576 576 248 576 576 576", " 576 1864 801 576 674 576 576 576 576 625 1275", " 576 576 1399 576 798 1351 576 576 1440 576 91", " 576 1001 576 1741 576 576 576 1225 576 576 389", " 576 576 1261 576 576 140 276 576 662 576 1005", " 576 576 382 576 427 576 1744 576 979 964 576 576", " 1906 576 290 554 1413 1607 576 576 576 649 576", " 238 51 576 1375 576 576 1527 576 797 603 576 576", " 576 576 576 576 1040 576 1865 1208 576 576 230", " 380 1195 576 576 576 576 1404 576 576 125 223", " 576 576 576 262 638 932 1047 576 576 987 639 1997", " 394 576 576 467 1348 1055 576 576 893 397 821", " 1495 384 538 1319 576 576 289 576 576 1304 1340", " 576 1510 690 1860 417 576 964 576 576 866 576", " 576 321 576 576 621 1086 1597 576 576 868 576", " 576 576 576 576 239 576 1658 576 576 891 576 1440", " 256 576 576 576 576 576 576 820 576 1784 576 576", " 576 1583 576 576 576 1779 576 775 1495 576 786", " 576 116 545 892 475 694 1173 634 576 576 444 576", " 13 1558 576 1598 1433 576 576 576 606 576 1074", " 1231 1541 576 594 122 576 1525 576 735 576 576", " 57 1759 1956 576 576 576 725 984 1000 576 1052", " 644 576 576 576 524 576 576 576 722 1274 576 576"};
    vector<string> part4 = {" 576 576 1180 1595 1550 576 89 1770 576 1856 1586", " 576 1232 1722 576 576 576 576 1190 576 1651 576", " 576 576 1327 576 1443 843 1323 1886 856 576 1959", " 1094 26 1772 1329 576 576 576 576 576 318 576", " 1003 116 576 576 1229 1892 1077 479 119 275 1446", " 576 1562 576 103 1579 377 1705 576 576 576 576", " 576 576 1121 1948 1541 113 724 576 576 576 576", " 122 1236 728 576 639 431 544 576 576 481 947 576", " 576 576 576 576 576 906 576 576 576 1534 576 1102", " 1151 576 151 507 123 208 576 576 1627 1238 1753", " 576 576 576 576 576 576 721 576 1706 1969 576", " 576 576 349 576 576 576 576 263 1119 576 576 615", " 576 1652 576 576 586 265 1550 989 576 576 576", " 1679 1784 576 580 576 576 576 99 372 1051 425", " 576 576 576 576 576 1258 1219 576 145 74 1282", " 240 1099 576 576 1036 576 1649 576 860 384 576", " 1674 576 1683 576 1318 576 576 576 576 679 576", " 1405 576 1687 576 234 576 1484 1909 196 1907 576", " 192 576 701 576 576 543 1023 1808 918 85 1523", " 576 576 1865 1106 215 1412 1138 53 737 1711 799", " 189 576 576 1065 576 326 576 576 576 576 576 429", " 155 1249 576 576 1187 576 1500 955 576 614 576", " 576 576 576 1786 576 1314 576 576 732 576 1706", " 238 637 152 576 576 576 576 576 31 576 649 576", " 576 1350 891 576 708 576 576 386 576 1382 576", " 576 2 576 576 576 576 1397 576 1202 560 15 1639", " 341 1515 1586 576 576 576 576 576 1227"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1997;
    if(result == expected) {
        cout << "Test Case 68: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 68: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test69() {
    int numSheep = 2000;
    int maxRuns = 1100;
    vector<string> part1 = {"897 946 1117 1040 732 897 1997 897 956 176 897", " 1157 1212 897 1861 257 1901 897 897 897 1961 1960", " 897 897 1999 168 897 304 710 897 1915 836 636", " 897 897 897 897 897 209 39 897 897 897 897 897", " 93 897 897 1560 1200 1408 897 897 897 897 897", " 47 897 1069 1746 897 1984 897 897 897 857 897", " 897 897 897 897 542 897 1790 211 843 720 1419", " 852 897 897 897 1008 640 1615 897 897 897 1728", " 897 1622 1254 897 1727 897 897 273 897 897 897", " 1755 765 897 408 897 971 897 792 533 1829 882", " 1168 759 897 897 897 463 897 912 951 897 568 897", " 897 1825 519 194 1519 297 48 897 897 897 897 111", " 1067 1354 897 897 897 65 897 897 897 897 897 897", " 897 1278 1567 897 897 68 1334 897 897 1653 897", " 391 897 897 897 897 897 828 55 102 897 648 897", " 1223 766 897 897 429 897 1568 506 1401 1589 897", " 897 897 1809 653 149 897 887 897 276 897 306 1541", " 897 783 897 1330 897 343 1799 477 897 897 897", " 978 1887 897 582 335 1093 1278 1174 934 1712 897", " 335 897 897 842 897 897 897 897 963 897 897 1167", " 897 1315 897 303 897 349 1629 897 897 360 1476", " 1180 897 1478 453 365 1502 897 897 897 1169 1880", " 897 897 1944 897 897 407 897 897 432 854 897 1356", " 1087 177 897 1285 897 399 685 897 897 1762 897", " 1786 897 236 1351 897 816 908 1426 897 13 264", " 738 897 897 1297 156 1183 268 897 897 897 897", " 897 306 897 1891 941 897 897 897 706 1054 897", " 897 285 1790 897 113 897 284 1688 897 279 897", " 897 897 897 897 1014 897 897 107 1013 897 872", " 1070 279 897 897 643 291 897 897 1478 897 897", " 203 897 897 741 897 966 270 842 897 897 1975 897", " 897 897 897 897 897 897 897 897 1010 897 897 897", " 922 1383 897 70 897 897 897 918 897 897 540 897", " 897 1779 897 897 897 897 897 213 897 125 897 897", " 897 897 897 897 1208 1240 897 897 1034 897 1153", " 1325 897 1852 897 897 897 1416 897 897 791 97", " 1597 234 897 1516 897 237 897 1475 897 243 897", " 897 1259 550 897 1263 233 825 897 1169 897 897", " 897 897 1327 329 1662 897 1576 232 897 951 897", " 675 897 897 897 897 897 1052 897 897 897 882 956", " 897 897 897 165 1432 305 897 826 483 897 897 257", " 897 897 209 1232 897 19 443 1150 897 897 542 897", " 897 516 412 897 765 401 1630 389 1030 897 820", " 1348 1918 897 712 1633 813 897 1158 897 897 897", " 1763 897 897 49 1185 897 1865 1580 673 57 32 897", " 897 976 1010 897 897 897 897 206 897 897 336 1216", " 897 27 848 897 521 738 897 897 897 897 1164 897", " 815 1305 896 897 897 897 533 1490 999 897 897", " 1798 1524 897 1168 1502 897 998 889 897 897 1818", " 320 897 897 897 897 1439 897 897 1819 897 897"};
    vector<string> part2 = {" 47 897 897 897 897 1606 897 897 411 897 897 897", " 1221 640 1978 517 897 897 897 829 164 897 897", " 1757 897 143 253 1349 1662 698 324 1287 595 1054", " 166 1627 897 1974 1258 608 1770 897 213 981 897", " 682 1263 1124 699 168 897 368 159 897 897 897", " 1441 897 897 897 463 897 159 897 897 1106 1589", " 830 452 1831 288 897 1450 1559 897 897 897 897", " 493 897 897 897 124 897 897 897 897 897 897 1568", " 1740 897 557 521 897 542 697 1613 30 897 897 897", " 897 897 1449 897 446 979 897 1413 897 897 897", " 897 897 1423 1006 897 419 897 897 897 897 764", " 1560 106 1460 897 897 897 897 897 897 1461 303", " 897 897 610 897 897 1936 897 897 897 1575 724", " 1909 1375 1342 897 720 897 1104 897 897 223 683", " 897 897 52 897 490 1896 1380 897 1725 897 897", " 937 731 897 897 1421 897 897 1367 841 897 897", " 897 897 897 382 897 843 1430 897 496 897 897 1248", " 1763 519 897 897 897 1897 897 997 103 544 1960", " 897 239 897 1129 897 1501 1907 897 1242 607 897", " 126 897 484 897 897 1526 897 897 778 895 897 1084", " 897 897 897 897 897 897 897 897 63 1510 897 1850", " 882 1925 897 897 1726 897 897 1233 1532 1532 897", " 1605 897 313 897 897 897 897 1137 897 719 702", " 1491 897 897 897 726 67 348 897 1332 1099 897", " 897 1616 1334 772 897 687 780 897 466 897 1522", " 1223 1335 897 1204 712 177 1517 897 1456 897 449", " 1180 374 1974 897 1216 897 897 1677 873 807 1054", " 897 441 567 897 522 1335 897 897 768 897 897 356", " 1569 505 897 1020 344 897 384 897 804 897 56 1051", " 809 1733 647 852 1304 897 1836 897 897 897 897", " 897 897 897 1097 521 897 897 1966 897 615 897", " 1730 1763 466 897 897 1950 897 897 897 1274 110", " 897 1952 897 1043 50 1533 1457 450 600 897 897", " 644 897 897 354 1760 564 32 897 1814 1783 855", " 538 492 253 467 1468 897 539 1780 897 1607 696", " 897 897 897 833 1638 1563 895 897 897 1467 897", " 897 897 897 839 265 897 897 897 897 702 852 897", " 1177 897 897 897 897 1618 1254 897 897 380 897", " 290 897 897 897 897 897 897 897 897 11 897 163", " 1765 897 186 213 1110 897 897 897 897 755 1666", " 347 897 897 568 897 897 897 897 897 704 897 1573", " 897 118 897 897 1777 1240 1074 897 340 897 306", " 1656 897 792 1635 897 897 897 897 897 1503 84", " 897 897 897 897 442 765 1000 105 897 1896 224", " 897 897 695 897 1820 897 132 1735 1477 897 897", " 1378 649 1218 1970 897 1863 897 897 1208 897 897", " 1288 1326 897 897 509 102 897 1727 50 751 1734", " 924 554 897 897 1815 897 897 897 26 683 129 897", " 897 897 897 897 11 897 1548 284 897 1222 897 897", " 897 897 897 897 141 285 1375 897 897 897 897 831"};
    vector<string> part3 = {" 1518 897 897 1263 897 1016 897 897 897 897 897", " 897 803 1713 328 908 838 897 897 738 897 897 1907", " 897 1207 85 897 897 897 789 1125 1732 1065 897", " 897 897 897 897 897 897 897 897 1067 544 897 897", " 1754 897 1758 1845 637 897 816 731 542 1733 238", " 897 423 897 897 1314 1311 740 897 897 897 1897", " 1555 1970 1388 445 897 897 1886 897 1067 1848", " 897 1813 1857 262 877 897 107 157 1423 1554 133", " 897 142 897 511 1250 1258 1455 1378 1152 973 1794", " 897 897 897 662 1479 567 1903 897 897 892 897", " 1391 1522 1604 298 988 1288 897 897 60 532 897", " 1685 438 523 72 1159 1951 897 1037 897 373 675", " 897 718 897 1669 897 731 1176 1466 705 1730 897", " 897 897 1946 1007 448 628 897 897 261 897 897", " 1531 897 897 1926 897 390 74 678 897 623 1860", " 255 1556 897 897 1825 897 372 897 1854 816 897", " 1151 897 1910 897 508 1553 897 159 897 897 897", " 1221 1852 379 1780 1066 897 897 897 1861 897 1269", " 459 897 897 1656 1692 897 952 720 897 1612 1370", " 897 859 1562 897 897 1763 1473 1159 159 897 1516", " 1351 897 897 1226 897 897 776 1284 897 897 897", " 897 897 1474 897 897 153 1582 897 1070 1044 897", " 897 65 897 235 1766 1418 897 1796 897 176 897", " 897 895 230 348 2 897 897 336 897 897 108 897", " 71 1931 1502 634 897 897 765 897 897 1167 1858", " 112 123 897 1463 897 897 1493 1991 897 574 27", " 897 340 239 20 897 897 772 897 897 1859 1963 897", " 897 897 897 1237 48 897 897 897 924 1323 897 897", " 1102 126 897 1038 569 897 897 897 897 1142 897", " 103 897 897 1368 897 897 1874 897 1286 897 774", " 897 1517 1765 366 897 897 897 1004 1323 1242 869", " 897 653 595 500 897 897 1332 1021 1456 897 185", " 1559 897 897 897 245 897 897 897 1349 897 897", " 897 1295 897 897 897 897 897 1024 1367 1525 897", " 897 424 897 897 813 417 897 897 497 1911 1931", " 912 1878 897 897 1133 891 773 897 897 897 1378", " 897 897 897 897 897 1573 897 1187 897 1722 897", " 490 897 897 897 1167 828 596 1386 897 897 897", " 897 226 897 530 1929 237 878 897 484 644 636 1291", " 897 897 897 897 1188 897 548 1263 897 897 897", " 1835 406 1264 897 897 1786 897 1103 1554 897 897", " 897 507 897 897 1316 897 897 83 816 897 897 651", " 897 1998 897 897 897 897 299 897 1950 897 457", " 1885 897 897 897 897 897 1560 1993 897 532 897", " 897 1087 897 897 897 411 1676 821 897 897 897", " 897 461 1647 718 897 897 897 1498 1579 897 897", " 897 657 893 1971 897 893 884 406 579 1550 897", " 896 897 1076 1513 1999 897 897 897 161 897 1097", " 897 897 897 897 897 897 13 897 1454 1241 897 440", " 731 1673 1040 269 897 287 897 1549 563 1759 897"};
    vector<string> part4 = {" 1865 362 897 849 897 1484 1344 897 1622 1415 1506", " 897 1336 1062 289 1038 897 897 257 897 897 897", " 1470 897 897 1460 1832 897 897 897 897 897 1277", " 582 897 897 1729 897 930 897 897 897 897 897 38", " 1032 897 1771 897 897 897 897 897 233 687 897", " 897 1111 897 389 897 897 897 604 897 568 285 897", " 1032 897 540 1266 1293 1966 1089 1667 897 1360", " 1811 1158 897 897 897 699 1964 897 224 897 897", " 1002 1183 897 897 1698 1650 930 897 1911 1512", " 841 897 1999 527 876 897 897 1906 897 1071 1518", " 897 73 897 1748 897 1087 683 1481 897 1005 897", " 897 1669 897 272 897 897 897 1618 897 265 897", " 889 897 317 1219 1742 65 897 1957 897 897 897", " 93 897 897 897 1676 1135 897 897 1152 897 1405", " 353 897 616 1156 897 869 576 897 897 375 897 36", " 408 1303 897 897 1680 16 903 1662 569 897 317", " 581 897 897 897 56 1054 1576 897 897 897 897 48", " 97 513 897 897 1422 897 897 897 1495 85 897 897", " 897 371 747 1969 558 22 547 159 897 264 1774 935", " 897 204 897 1781 1934 54 892 995 897 897 928 897", " 897 897 1305 236 421 897 330 290 897 693 1779", " 1288 897 897 517 897 897 654 578 433 91 897 897", " 766 426 1533 1207 897 1540 897 797 897 897 897", " 897 1462 897 897 897 541 897 1518 897 897 897", " 1971 1942 237 1854 897 897 897 1041 897 1025 8", " 691 897 973 897 897 897 897 1629 1555 897 487", " 188 897 897 897 897 897 897 1267 897 897 86 897", " 595 1795 897 897 897 897 48"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1999;
    if(result == expected) {
        cout << "Test Case 69: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 69: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test70() {
    int numSheep = 2000;
    int maxRuns = 1100;
    vector<string> part1 = {"1057 1229 1057 387 473 1697 1057 1057 1816 1057", " 1057 1062 753 1057 1057 545 1057 341 346 1354", " 1057 1057 645 1057 1058 579 903 1057 1057 1842", " 1057 1057 1057 1057 1057 736 1057 665 32 690 1057", " 1905 1844 1903 1226 1057 1771 1113 1057 1057 1057", " 1418 313 1057 1533 258 146 1859 1057 1800 1596", " 1057 1057 1057 1057 1349 452 1057 223 988 880", " 1057 263 945 1600 1057 1057 1057 1119 1057 1057", " 1444 1549 1057 1057 1057 1057 1057 1057 1057 1532", " 1057 1057 1392 1586 805 1057 925 1057 1057 1057", " 1258 1839 1057 269 1057 1057 1290 1055 1057 1057", " 501 1113 605 1203 1057 1037 1861 1222 1057 362", " 1615 1626 502 1057 274 1905 1057 1057 1533 1057", " 1548 1057 1057 1057 1057 1057 1057 1057 1603 1922", " 1057 651 1587 1057 32 1057 1164 763 1057 1137", " 1057 1057 1057 36 1057 722 1207 1057 1057 222", " 1057 1650 1057 1668 1057 1057 1576 1057 1057 1057", " 1057 512 876 1057 1057 1368 1057 1057 1057 563", " 1273 167 1093 1012 1057 1057 125 634 1452 1057", " 1057 1057 1634 1304 645 1159 1057 1057 1420 1057", " 1057 1057 1057 1057 1057 853 1057 296 994 1057", " 601 91 1057 1982 1057 1230 1668 909 437 531 124", " 680 60 1057 751 1057 1057 1576 1032 1057 1943", " 1057 1057 415 486 801 754 1057 1811 859 16 1898", " 604 1057 1057 66 1057 1057 459 621 1007 1057 1057", " 1057 1057 1071 1057 1933 84 1931 1057 1532 1057", " 543 1057 1352 1057 1057 1077 1457 79 1057 1778", " 1057 1368 709 1263 1057 1057 1057 508 986 1057", " 1099 1057 1998 1377 477 1054 1057 932 1057 1057", " 1672 1057 1766 812 1057 178 1435 195 1669 45 1057", " 1057 1057 1057 1057 456 1057 1445 1489 1057 1444", " 1057 1057 995 1057 1487 316 59 1792 1057 1322", " 1057 1259 1203 428 1265 1057 1057 1057 1057 1057", " 1057 1057 424 1771 1057 1057 1057 3 1057 1749", " 201 1057 1693 1057 1057 656 1057 732 946 1243", " 1057 1057 905 1057 1057 1057 1057 1057 1319 733", " 1103 450 1057 1057 1770 231 605 1307 1497 1057", " 1063 1057 1057 1890 125 1057 1057 1044 1057 1012", " 1057 1057 1057 1057 1475 1057 225 1057 241 738", " 1153 1057 1057 629 1057 1855 561 570 1057 1057", " 1057 1057 1057 1057 1223 1057 1057 1057 1057 1609", " 1249 1057 1057 1057 130 234 1577 1057 1322 1057", " 1057 1848 1621 114 1994 1657 1057 1641 1057 933", " 1057 286 1973 978 182 1057 1057 1057 1912 628", " 1719 1057 1057 1824 1922 1057 295 1057 1057 1057", " 1759 1057 1057 1057 1601 1260 1057 900 1282 660", " 611 1057 1057 1982 1509 1057 1057 1057 1057 535", " 779 1057 1240 1057 1845 1057 1057 1072 1703 1823", " 4 1057 1028 1057 1057 1057 1752 1057 2000 1033", " 1689 1057 777 1057 1057 1224 1057 1057 8 1057"};
    vector<string> part2 = {" 1057 1057 1380 1057 676 990 1519 1057 1057 1566", " 1941 1057 1057 1057 1057 1057 1057 1057 1057 838", " 1057 1057 270 1057 1057 1556 209 1057 1057 1219", " 1057 1439 1057 1907 1057 656 1057 1057 1057 248", " 1261 1046 1396 859 1274 1132 1057 1364 1057 1922", " 1705 601 1057 205 912 1799 851 1057 1608 1057", " 536 1057 1057 1057 1057 1290 1063 932 1057 547", " 1057 1980 1782 1057 1057 1057 939 1326 1057 1057", " 1057 1057 1083 1770 1483 1057 1177 1391 1057 1057", " 1057 1565 1057 1057 1057 1776 1057 1819 233 1418", " 1057 977 1057 1057 359 1057 1057 1057 626 558", " 1057 1115 1057 1057 1057 1057 1057 1678 1669 1057", " 47 1057 1057 1507 1622 1260 882 1712 1149 1066", " 468 226 1057 1057 1057 1060 1175 145 1057 884", " 1057 1412 1057 1057 1754 1057 382 1057 1057 1057", " 1057 1057 676 1057 795 1057 1057 1057 1003 1057", " 905 1057 1057 902 1057 1057 1057 957 929 1999", " 1057 720 473 1057 700 1057 1057 1748 1057 1926", " 1576 1700 1057 42 672 896 1798 1057 549 1057 1057", " 1093 1057 892 1057 1236 1057 383 1057 687 1212", " 1057 1057 1057 1057 1057 1057 1057 135 668 1743", " 1057 1057 1057 1057 1057 1057 1057 748 1057 1200", " 187 802 1361 1021 1057 1057 478 1057 1057 1057", " 1057 1057 1057 1057 1057 1784 1057 1057 1961 1057", " 1057 1057 326 1057 1057 1057 1663 1057 1057 1535", " 1057 1682 1057 1057 1057 1057 1057 1057 1057 275", " 52 1972 1057 339 285 509 1057 214 22 1092 1057", " 1057 786 129 1688 1057 1057 109 205 1057 990 970", " 1057 1057 1792 1057 1057 1284 1211 1057 1158 831", " 1057 135 1057 574 1057 1057 1912 1057 1445 1399", " 1944 1057 978 767 1734 581 1472 1057 1694 1627", " 1057 1378 1057 1503 470 1057 555 1334 1057 1031", " 1560 1296 1057 1057 569 1057 1057 769 621 1405", " 1057 1384 851 1475 1057 1057 1057 1057 1057 1447", " 1566 842 1057 1414 1057 1057 1352 1057 1057 610", " 940 1290 530 977 1057 1057 1057 1057 478 217 1909", " 1826 874 1057 378 1057 1547 1678 1057 1196 1057", " 1264 1057 584 1057 65 1029 1717 1226 1057 1057", " 1057 366 1057 733 1057 954 1057 1057 1057 1726", " 1057 1057 1329 1057 1629 1057 1057 1948 920 1057", " 1057 80 1057 1057 1057 1057 1057 1057 1057 1057", " 1057 1693 1057 1057 1068 1057 1057 1057 1913 1057", " 1725 1778 138 1057 1057 1057 1057 1057 1484 1630", " 693 1057 488 1051 1057 1290 790 253 1057 1531", " 1057 1057 1575 320 1057 1240 1961 1252 1057 1057", " 418 1057 1604 1057 803 1057 1057 1057 1765 86", " 1103 130 324 1057 106 833 1057 1621 689 1057 257", " 1742 1180 1057 1057 1057 1057 439 129 1630 1057", " 617 1057 1057 1243 1057 978 1034 102 1057 1057", " 1592 1463 1057 1057 474 1057 1156 1057 1057 627"};
    vector<string> part3 = {" 1057 1057 1057 1057 1057 1209 1057 895 1057 1057", " 80 235 1057 1057 1955 1057 1057 1968 1057 1712", " 1057 783 1230 350 1057 1297 1057 1057 1057 1212", " 1481 1057 1057 251 1057 1555 1205 542 1057 410", " 1057 256 410 33 1057 1057 1057 1168 577 126 1626", " 1910 1057 1057 1057 55 1609 1057 89 190 1278 1057", " 1057 982 1829 501 1057 1057 1057 1057 847 261", " 861 343 1169 425 1229 110 1057 1057 333 1277 1057", " 1057 1445 1057 1057 1737 1057 171 1057 1057 636", " 1057 68 1057 1057 1057 309 1057 1989 1057 1057", " 643 846 1057 1057 506 1057 358 1596 1057 1057", " 1057 1057 1057 1057 1057 1057 1057 916 1233 762", " 1333 1057 1190 1057 190 1057 1057 1057 1119 1491", " 812 818 1522 1057 1057 133 244 1057 1057 1057", " 264 118 1057 1057 1057 1057 1253 1057 1057 301", " 434 1057 1057 1490 1057 93 790 1057 694 1057 1057", " 1057 1057 218 1057 1124 1057 1057 1439 1297 1550", " 1057 1553 1057 1616 1057 1057 599 248 900 471", " 1057 1572 1057 1057 540 130 1205 1030 1057 1057", " 1982 1057 1369 1571 1057 1057 1801 427 401 1337", " 1732 579 217 1057 1057 787 488 219 147 1057 1057", " 1057 1459 1490 684 1057 1057 1057 1057 1894 910", " 1057 1702 1520 1701 1057 963 498 1615 1057 1057", " 1057 1057 1057 1057 1057 1701 1042 1057 1791 1057", " 389 1057 1452 831 1057 1057 1057 325 1057 1057", " 983 1057 1057 417 580 1731 1882 10 1057 1057 839", " 1057 562 1057 1183 1057 1507 1057 1744 1057 359", " 388 1532 47 1057 1295 1057 1057 296 1057 1733", " 1057 1948 1057 1057 1494 741 1057 295 1068 1057", " 1057 1143 1057 1057 439 490 1057 1057 1057 1607", " 1057 672 1057 1057 1057 1735 1057 1057 534 591", " 1057 1057 1057 1057 280 1152 1057 1057 1057 1057", " 1907 941 1057 1057 1057 1057 1057 1057 1854 1057", " 1057 302 522 1057 247 1057 1057 1057 113 1057", " 931 1057 1057 1313 1827 44 308 1057 1057 1057", " 1057 1057 1057 1210 1057 1057 1548 345 1057 1862", " 503 1057 1138 94 1057 240 1057 1057 1057 1412", " 1057 300 1564 1057 1561 1057 1057 824 973 1057", " 1220 1057 1057 1057 1057 1474 1057 1057 1057 1057", " 1695 1057 1057 980 1057 1359 613 692 844 598 1057", " 1057 1057 352 1057 1057 1057 1371 1057 1057 1859", " 516 1057 363 241 1057 1958 1940 659 1057 1057", " 1057 1868 1492 465 1057 842 1973 1057 1057 453", " 415 454 1697 920 1057 1057 1057 1057 1057 1057", " 330 1317 1057 1057 1057 1057 997 1570 322 1662", " 1047 1057 1057 994 1098 1057 858 1065 1057 1057", " 354 1454 1057 1057 1057 1057 1057 1057 1057 1057", " 1057 1057 1619 1831 1057 1057 1662 1057 1812 1076", " 1057 1607 1057 1057 1057 250 920 1057 1057 1057", " 1609 890 1057 1607 1057 352 1057 396 1057 1057"};
    vector<string> part4 = {" 1705 1057 1057 1057 1057 1579 568 1057 935 947", " 1290 1697 1057 1134 79 943 1057 1057 411 1057", " 1455 1704 603 1057 280 1057 1416 1057 1472 1156", " 1057 1057 1057 237 1057 298 1984 631 1057 993", " 1057 1808 1554 1057 1057 1532 1762 1057 1057 1057", " 1412 1530 548 1057 1322 1057 1057 1057 1057 1057", " 1057 1057 825 1057 1219 652 1057 1057 1872 1057", " 1057 1057 294 315 1057 1057 446 1057 1057 1878", " 1057 465 1378 1909 1057 1057 1057 1057 256 1467", " 1163 990 1057 1057 827 1057 1057 1057 1057 1057", " 1695 415 1057 1633 1057 80 1057 1057 1637 1057", " 903 1330 1057 1057 1057 1823 1057 1899 223 111", " 1057 1057 1057 1057 588 1057 1057 1057 1057 1057", " 1057 366 1623 72 1057 1994 1717 851 1057 1057", " 1359 1057 1057 1057 1057 710 1057 113 1339 607", " 1057 1986 1057 1057 1057 1057 1057 1057 1057 139", " 1941 1057 288 986 1057 1057 1553 1057 647 1057", " 1057 132 1007 1057 254 1057 1057 162 1801 1399", " 271 1057 880 307 1048 24 1057 1057 1465 1057 392", " 1057 1560 1057 1171 1057 1057 15 1057 1170 1310", " 1057 1057 1057 1057 23 1811 1543 1460 1057 1385", " 1646 1014 951 1033 593 1057 1057 1568 1057 1057", " 1057 1057 1057 733 1057 823 1057 69 1057 1057", " 1511 426 1057 1057 1057 280 1057 1057 1057 1057", " 1862 1057 1057 1871 108 1057 1178 1716 167 1057", " 1057 1242 1057 1057 641 1863 629 762 1024 1568", " 1982 1057 1057 407 1057 1057 315 1516 15 1057", " 1039 1281 1914 1057 1057 1057 1057 1057 1878 376", " 1057 1057 1114 691 78 1593 362 1733 1520 1057", " 1260 189 1057 1057 1057 1057 1057 156 358 1057", " 1663 348 1057 1057 832 220 1847 1057 743 1057", " 1947 1057 1057 653 1725 1057 483 1057 1057 228", " 1057 1057 1057 620 1057 1590 1404 1269 924 522", " 976 1057 1057 1057 1057 206 65 588 1189 1057 1057", " 1697 586 1275 1057 1849 1057 133 912 1057 1057", " 606 539 1057 1194 268 1057 1486 1970 534 1057", " 1990 1057 609 1057 1057 1057 1057 1057 1057 1057", " 1057 915 1057 1057 1057 1415 1175 277 1586 1182", " 1952 821 1057 483 1361 1057 1057 1057 207 1057", " 469 410 1552 1057 144 1752 1941 1872 1057 1057", " 1057 1057 74 284 1470 1303 580 1057 1967 1057", " 44 642 1430 1057 1057 1057 1403 1057 1268 1057", " 1057 934 1057 1057 1057 1057 1511 1781 1057 1057", " 1057 1057 1539 1824 843 1687 1057 348 18 1057", " 1057 756 1804 1057 1518 1057 1057 298 1057 1057", " 930 1057 220 1984 995 1845 230 1540 100 1057 1057", " 501 620 1057 1057 1057 1057 1199 1057 84 1057", " 486 93 1057 543 1692 1323 1057 1057 696 346"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2114;
    if(result == expected) {
        cout << "Test Case 70: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 70: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test71() {
    int numSheep = 2000;
    int maxRuns = 1100;
    vector<string> part1 = {"1199 1034 1201 1382 1157 235 40 477 657 1157 652", " 1210 1284 1157 904 1157 1157 985 1157 456 927", " 1157 1157 1157 1917 1537 751 698 899 1157 1157", " 1157 808 1157 297 1506 1700 1157 1157 1690 1157", " 1340 558 1157 1895 921 1641 1134 582 1157 1928", " 1157 627 1157 525 1157 678 1323 1691 621 1522", " 295 1157 1157 1723 366 1157 1157 1023 1157 1157", " 1157 1157 738 1157 1738 605 1805 1157 1157 1157", " 1157 1157 1901 1157 384 571 1881 485 1157 1157", " 854 899 1157 674 755 1157 1378 1157 1992 104 1157", " 786 1157 1157 1564 1157 1157 1157 1287 1157 574", " 1157 1157 1157 1157 1157 1157 1523 1157 1319 1157", " 1157 568 1859 1157 430 1157 1117 905 1157 1157", " 1157 592 456 1157 1107 138 1701 1157 1157 1157", " 1157 1329 1157 1157 1157 589 1002 1157 1157 1783", " 1157 1673 1546 1157 1157 1157 1157 52 1157 1800", " 1157 1242 1157 1157 1157 1157 16 1157 1563 1790", " 923 646 1157 1157 1890 1157 1157 1157 1157 1157", " 530 1054 156 304 35 782 1157 1157 1676 1157 433", " 729 710 292 1157 792 1157 1353 1710 6 1861 147", " 1972 534 1157 1157 1157 1157 1157 716 385 1157", " 1646 1157 1780 1157 1157 249 248 672 1157 1157", " 871 1157 1157 1157 1157 1157 1888 729 677 1157", " 1157 1157 1159 1157 1678 276 116 88 1157 1157", " 1157 1157 1157 1157 1157 187 1085 170 1157 1157", " 1157 1157 1157 1307 535 1157 1157 13 1157 1355", " 1031 1157 1157 1343 1157 2 1913 34 1249 1157 137", " 1157 1233 1246 1726 1157 187 522 1057 888 1157", " 1392 1430 1157 280 1764 1157 1157 1777 1157 85", " 23 1157 1216 375 1157 1157 171 1466 945 1182 735", " 536 795 1157 1713 1875 1157 1748 1157 1906 1157", " 1161 849 1891 1398 1157 1157 1848 1890 1157 1157", " 1080 1157 1157 1157 1157 1268 1157 1157 1157 1157", " 4 611 1157 1157 1688 1157 966 476 1157 1157 1462", " 1898 1157 1157 532 719 1157 961 1157 1157 1157", " 950 1704 1157 1157 1157 1092 1157 859 1157 644", " 644 1157 1157 1157 1157 550 1656 1157 1157 1157", " 1157 1677 1157 1492 852 546 1695 1375 1375 208", " 1290 1780 243 1157 1157 1157 1359 1271 1181 1157", " 1157 383 687 1157 1157 706 1157 1007 1157 1157", " 649 968 35 1157 64 1175 1157 1898 1157 1157 1157", " 1842 769 1157 66 893 1157 871 1157 1476 1157 1157", " 1662 1157 1107 1157 1157 1638 240 1157 1549 1157", " 1157 280 1157 526 714 1157 1157 1157 385 518 641", " 1157 1157 1157 1157 1157 1392 1881 1242 425 1157", " 1468 1157 1157 608 1334 1815 936 1157 811 813", " 1709 738 1157 1157 814 890 1989 1157 1157 1157", " 1157 1157 167 1157 1157 1835 1157 1157 246 439", " 1157 88 1141 1730 1157 911 1157 286 857 850 54", " 1157 545 215 1471 177 1146 1157 1157 1207 1721"};
    vector<string> part2 = {" 72 1157 1157 572 1157 640 1157 1157 1157 1157", " 931 1157 1157 1157 1157 1670 998 1157 1157 1643", " 1610 1157 1541 1157 1157 1157 1157 1157 1157 949", " 1157 1157 1157 1157 1297 1112 1698 1385 1981 1157", " 1157 1430 436 1157 1157 475 1157 1157 1997 1737", " 332 1157 571 1594 1089 1157 1609 1021 1157 1157", " 611 1157 1123 791 1157 1157 1157 1157 1157 1938", " 874 1511 1741 737 1157 1157 1157 478 1157 519", " 1157 1157 755 955 906 287 1157 1667 1157 1157", " 1029 1157 1157 1157 937 127 1437 1157 1157 860", " 1904 1086 1157 1362 544 1157 299 1157 1157 1157", " 1407 1157 1157 403 107 127 129 1157 1157 1462", " 1157 1157 1157 1157 568 1157 1113 1157 770 1157", " 1157 276 1157 1157 338 1157 1327 159 1157 577", " 1157 1157 1157 1157 1157 1157 1157 473 1157 1157", " 1753 1948 1157 1454 1157 1157 849 1157 618 1157", " 1157 1290 1544 1840 1157 1577 75 1157 1975 1233", " 1157 1157 318 843 1157 1455 96 556 291 1157 255", " 1289 1157 426 40 1917 1157 1497 1008 1861 1157", " 1157 1157 836 1097 399 1157 193 362 886 144 1349", " 1157 566 1157 1157 481 1157 1991 1157 1968 1157", " 14 1157 1813 821 1589 1940 1157 1157 219 33 1157", " 1157 106 1157 1213 1157 1787 1157 1739 1157 1157", " 1342 1157 796 1157 1126 1886 1850 1157 1356 1157", " 1159 1157 1789 1157 1157 1250 1157 220 1435 1157", " 1157 1157 1464 341 453 28 1350 1764 1157 1233", " 1025 741 292 1157 1908 1157 203 1049 1366 1157", " 1157 1760 1157 1157 1157 287 1593 1157 1157 1157", " 1157 1157 1157 947 1157 850 1157 242 1157 865", " 1630 1157 1157 1157 1157 764 133 1157 546 1157", " 1277 309 1157 330 381 1157 1997 1157 1157 1914", " 1143 305 1350 855 1929 1157 915 1292 1157 1157", " 1157 1090 1628 1587 1157 1675 1157 1157 1157 1157", " 1157 325 1157 1157 1157 1157 1972 1157 1157 853", " 341 634 43 1157 1157 1221 1157 388 1157 1157 316", " 1584 1157 1157 1157 1157 1157 1640 1157 1157 1157", " 1889 1157 1157 1157 1157 782 1157 579 82 1157", " 1617 1157 391 1157 1157 1157 936 1157 1157 1157", " 1157 895 1081 962 1792 1157 1745 1157 1157 1157", " 783 1157 387 1157 57 371 204 380 985 1157 1157", " 1157 1157 1157 1157 1157 1804 1157 351 401 1157", " 1157 1157 1157 1157 484 1157 1025 654 1157 344", " 1386 1157 1157 1258 1157 1157 1157 1157 201 1157", " 1157 350 532 79 1157 1157 1641 1619 1903 1118", " 1157 293 1612 494 44 1717 1157 1719 1963 1022", " 1157 1157 1157 1157 1157 1157 1157 1120 635 1157", " 154 1157 1258 1157 119 1149 1170 1157 1157 1157", " 752 1157 1157 1157 1157 183 202 1688 1157 1961", " 1245 1157 1157 256 16 1157 1157 1507 1157 133", " 1157 1779 820 1157 920 730 1624 1890 84 1168 1100"};
    vector<string> part3 = {" 1157 1026 781 1032 1157 1227 724 411 1157 1157", " 1170 1911 1157 1145 1157 1157 1157 1157 790 1157", " 511 1157 1157 1157 1157 1721 1157 1157 251 1757", " 110 1961 1157 1157 1435 1468 862 1157 1157 1157", " 1157 1135 1205 1157 1157 1157 1677 1157 1157 1157", " 1157 1157 968 1157 1528 1157 861 1157 1380 1157", " 1975 1157 1157 1157 1002 1341 169 1157 1157 1157", " 1157 1297 1157 739 1157 405 1157 1157 1157 1157", " 1157 1157 1771 1157 1157 1157 956 1157 1157 1897", " 1157 1062 1157 1157 1116 1878 1448 1157 1157 1841", " 1157 435 1157 1157 1183 1154 1157 1151 917 1157", " 1157 1023 1157 251 1820 15 1157 1157 1157 1157", " 1157 1157 1157 1808 163 1157 1157 979 429 982", " 511 889 1157 1157 1238 1194 346 1157 883 1157", " 1157 1833 1157 552 1157 1086 1157 1126 413 1157", " 1157 1709 1157 212 1157 1157 1157 1157 614 1086", " 1751 23 1157 1379 1157 580 1313 1157 1563 1157", " 442 1157 1157 1157 1157 538 1157 1489 998 1157", " 1157 1157 1157 1291 1157 1126 519 1157 728 600", " 1157 1876 1157 1015 1157 1157 483 1542 1157 1115", " 897 670 1157 1157 1603 1157 1157 1157 1157 1157", " 91 1241 1157 507 1157 1825 682 589 1157 1173 192", " 1926 224 259 1845 1157 988 29 1157 1239 1157 1157", " 1157 1157 1157 568 1461 388 1157 1157 356 1157", " 1157 1157 1157 954 1157 101 1157 1774 1157 1426", " 632 897 649 765 1157 1157 968 116 683 1852 1157", " 738 1157 1157 1157 1157 1157 1465 210 1157 1157", " 1157 913 1034 197 1157 1395 1600 1355 1235 1157", " 1157 1157 1468 104 436 871 1910 1157 1292 1826", " 1157 1157 1849 1597 1157 1157 1157 1157 1157 1465", " 1157 631 828 586 1157 1287 157 221 280 551 1157", " 519 1157 1791 1157 1157 1157 1157 1157 1157 1355", " 1157 1157 1157 258 1358 850 1157 1722 1157 1157", " 1157 1602 1157 1084 1092 1444 1747 133 1157 727", " 1533 256 1157 1157 1157 1983 1157 678 1157 1157", " 1157 1911 504 1157 1157 1157 1157 1667 1157 1183", " 1157 1157 1385 1157 60 1157 1997 72 747 1157 825", " 780 1157 1157 1157 1135 1157 536 1524 1823 1582", " 1157 1157 1157 1864 535 1157 834 244 762 1157", " 1157 75 1157 1164 1157 1748 1157 1157 1157 1157", " 1157 854 1157 1157 1157 1103 580 1157 825 1220", " 1157 1157 106 1157 1722 691 1157 1157 521 812", " 189 1151 1157 1157 1157 1157 1157 1157 1157 733", " 1157 347 1157 1157 1157 1157 1157 1157 1332 1157", " 1157 1157 544 1157 1157 1808 1157 398 1225 1157", " 303 1157 1157 1553 1157 852 1157 1157 1157 1803", " 1157 400 1157 1341 789 1157 1454 1157 1157 1157", " 1157 1157 1157 1239 451 1157 1425 1157 1492 1157", " 922 1157 1157 1157 1157 354 577 1157 401 1157", " 1157 437 1157 1157 123 532 1157 738 1157 1157"};
    vector<string> part4 = {" 1157 1668 1157 1157 1157 1157 1157 1157 1157 1157", " 57 1157 277 1635 1157 1788 728 249 1157 217 1157", " 1157 1157 1850 1157 1157 841 1157 1658 1157 573", " 463 1157 1157 1239 1157 294 1157 1098 538 1157", " 1157 870 1157 1157 882 1157 1637 218 1157 1157", " 1157 992 389 667 1157 1157 1157 1157 1157 1157", " 1157 588 1653 899 528 1157 6 1157 1599 383 1131", " 1157 1157 1325 1157 885 530 1360 1157 1157 1157", " 769 1177 974 235 1157 1121 610 1157 120 1157 318", " 347 1157 1447 1157 306 1157 1157 1157 1157 1157", " 1157 242 1157 1157 63 201 1157 1157 1273 1926", " 762 226 1764 1157 1341 747 1826 1157 523 1157", " 1303 1157 1558 1766 1817 1157 1976 1157 1360 1489", " 893 1157 1157 1157 1157 1157 1676 1704 1157 1157", " 1157 221 1162 1157 1157 1157 701 1157 1157 1157", " 1157 189 1157 1157 1518 1157 1746 482 1881 1113", " 1904 447 1157 628 1157 768 664 1157 1157 1157", " 1157 61 1157 114 29 1157 1157 1305 1354 1894 1157", " 785 1157 1929 176 1157 1157 1487 1838 1157 154", " 1157 1157 1157 1901 1602 629 1282 861 1726 1157", " 1534 1357 1157 1079 1157 1377 1019 1405 1157 1157", " 1226 1157 141 1652 608 1157 1972 681 1157 1157", " 1157 866 388 1262 644 1157 1157 1644 1075 1001", " 1157 38 1157 1157 315 163 1157 1157 1194 1429", " 1157 1157 1157 1157 1157 144 505 961 1157 448", " 1664 1157 788 1157 1157 1157 794 1157 1157 1157", " 719 100 1198 1882 850 1157 1507 1157 1157 429", " 1128 1157 1157 1147 1157 668 1157 857 1157 1172", " 62 1370 1157 1157 958 1157 972 716 1513 950 1157", " 1157 1689 1157 1157 1157 1200 1157 1695 1152 59", " 1157 1157 1157 998 1989 1957 1853 541 1991 859", " 1157 1157 309 1109 1157 1157 1157 196 1157 1157", " 1157 1157 775 1989 694 1917 1157 1221 1157 1157", " 1056 202 1157 1157 909 1157 752 1157 365 1157", " 1157 1157 1157 277 1157 1157 1231 498 1500 334", " 614 248 29 980 1157 1157 545 1660 990 1157 1876", " 1157 1157 1157 1663 337 168 1157 1933 562 1421", " 1109 1157 1157 1157 1051 1157 815 1157 1157 1157", " 1155 1157 1847 1157 1627 359 1409 583 1205 759", " 1572 1157 1589 1157 1157 1157 1157 332 1157 1984", " 1200 1157 379 274 1307 1157 1157 1157 1157 1157", " 1157 1256 1157 120 1157 1052 1635 1157 546 1157", " 1351 1157 1157 1157 1209 603 1157 1157 1536 1267", " 998 146 1792 1157 1694 1157 1157 1536 529 617", " 1157 1157 835 1157 1157 1157 1203 589 1075 1157", " 1825 1157 1157 588 1157 1364 47 1297 1049 1900", " 1721 1157 1157 1157 1157 1493 1157 216 1701 901", " 1827 1157"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2314;
    if(result == expected) {
        cout << "Test Case 71: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 71: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test72() {
    int numSheep = 2000;
    int maxRuns = 1100;
    vector<string> part1 = {"454 1378 1337 329 1337 70 1337 512 1583 1419 1337", " 1547 1337 477 1337 1337 1893 1337 1337 175 1337", " 458 720 1481 1748 1337 1669 1337 1337 1300 1337", " 720 1337 1721 339 207 1279 1406 542 1337 1337", " 203 1337 1337 1337 1337 1447 230 1337 534 1406", " 1997 1337 1382 1337 1337 1337 436 1589 1337 1447", " 1337 1337 1388 1337 1337 3 879 1325 1337 1337", " 904 1302 1337 1337 116 1337 1337 641 1337 364", " 1337 722 1337 432 1337 1337 1337 420 1918 1337", " 80 780 846 1337 1210 1292 1337 1337 991 1493 560", " 1337 1337 1337 1337 1337 788 1337 801 540 1595", " 536 1093 903 735 1337 1337 1337 348 52 1337 1337", " 1337 128 1490 1337 1337 1337 1337 1337 858 632", " 1337 1514 617 1904 258 1337 1337 1337 1337 1210", " 1337 1881 1372 1337 875 1392 1337 1337 1337 892", " 1337 1337 1337 1337 631 1510 956 1854 1371 266", " 1337 1038 1337 1337 1337 1337 1337 1042 907 1044", " 1410 1103 64 209 1337 1822 535 943 1337 416 785", " 1337 1182 1317 1060 22 651 1337 1337 1337 1337", " 1926 1337 1675 592 1337 1688 336 1224 780 718", " 1337 1337 1430 1337 469 1337 1337 1337 1337 1350", " 1337 1337 1337 1337 126 1337 287 713 1337 418", " 1073 525 1337 1337 1498 1337 287 1961 1337 1711", " 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337", " 169 1540 1337 1337 524 1337 1337 869 1337 1337", " 1337 1337 1337 1337 1337 1603 1337 1337 1337 1337", " 1337 1337 1982 1337 1337 627 1337 1337 526 722", " 672 83 1337 1337 1337 1337 1337 1337 1978 242", " 1337 1337 1776 406 1079 934 778 1337 1451 1608", " 1664 1337 1293 1337 1337 1337 1337 1009 1007 1337", " 1337 1337 1337 1355 1337 1337 1337 1337 1337 506", " 977 1926 1593 1337 1337 1337 1480 780 1335 1337", " 1337 1992 1832 1337 1677 1519 1337 1337 918 1337", " 1337 1694 1337 77 1337 1337 1337 1337 1337 1337", " 552 1337 1337 37 1628 1337 1337 1337 1995 1337", " 1378 258 1337 1650 50 1337 1337 981 1337 1337", " 1541 1337 304 207 1814 1337 1175 1337 115 1337", " 1337 1084 1722 1158 1337 1337 202 443 1337 1337", " 397 1337 1382 1854 1707 1337 885 1730 936 1337", " 1337 1337 1337 1337 1803 1337 1337 1865 1686 1337", " 1337 928 1337 1337 1754 1337 1337 1805 727 406", " 1353 1337 1713 446 923 1300 1337 1133 1337 1312", " 1337 1337 1337 1337 1963 1337 1512 1769 1337 428", " 1337 1337 1337 1337 1337 1177 694 948 1873 1337", " 1402 1337 1706 1310 1337 1941 1337 1337 1337 1337", " 1337 788 191 1337 1337 1337 88 934 1578 731 1074", " 1337 1067 1337 703 1337 1337 714 1337 148 380", " 1337 1217 1337 1337 1993 746 1490 1337 1337 1333", " 1337 1978 1494 1337 1475 986 1337 258 1049 1337", " 1337 1337 484 411 1337 1337 1337 1337 1337 33"};
    vector<string> part2 = {" 937 1337 1440 1227 1337 1172 345 1337 1337 1337", " 1337 995 1714 871 1337 1778 916 1697 1 1337 700", " 1337 1337 1337 1337 1337 955 1683 1337 1337 1358", " 1337 1337 1405 1212 1508 1337 1337 295 1337 1337", " 469 1256 1337 1337 1745 1337 1337 1337 1337 1376", " 1337 388 1337 1337 132 1261 188 53 1337 1103 1156", " 1222 1337 1337 1337 1337 1337 149 1337 1337 1337", " 1337 963 1337 882 1337 1515 1337 1337 1337 1969", " 1160 1860 1337 1337 1337 1461 1688 121 1337 19", " 1532 955 1084 1062 1727 1479 1337 1337 861 822", " 1324 1443 1120 1115 1337 720 859 1493 1758 1730", " 870 1337 1268 1337 1337 1337 215 1337 1337 1789", " 1775 1337 1337 712 1337 1813 1886 19 1221 1159", " 1337 1596 1337 1517 499 1337 1416 1337 1337 705", " 1337 1337 1337 1337 1337 1337 1337 1337 1337 1163", " 1337 1337 324 477 1337 561 1337 1337 1337 1337", " 31 963 1337 1337 1337 1337 1337 851 491 1150 1337", " 1337 1337 447 1337 1337 1286 1337 1337 1709 1337", " 1035 25 1337 1337 1337 1337 1337 1894 1337 1337", " 773 1337 1283 1337 1337 1337 1803 1337 1337 1337", " 1337 485 1545 1337 16 543 582 1337 93 6 1337 1337", " 1167 1039 1168 1091 1797 1337 1337 1297 1337 1337", " 1337 1337 1337 1337 1337 1816 1337 670 1337 850", " 1337 1337 561 1337 1337 1337 1337 1337 1337 119", " 1899 1337 1062 1337 1337 1337 1337 671 1337 1337", " 503 15 319 1658 761 191 306 1090 1156 1337 1337", " 1337 1337 1877 1337 1337 1337 1337 1337 404 1712", " 1337 1337 1337 705 1181 1337 604 765 1337 1337", " 250 1337 1337 1337 1340 1337 610 1337 1337 1337", " 1337 1337 1337 1337 1337 1337 142 1482 792 1337", " 1092 1337 1286 454 1337 77 1337 86 292 469 1337", " 1337 1013 1337 242 1337 1084 288 1153 1337 1337", " 1410 1337 1337 344 1337 1337 826 1337 207 1212", " 1337 1655 1337 1337 1991 1337 1337 1337 759 1337", " 1337 1337 1337 1337 1337 360 1337 1337 1337 1337", " 149 537 671 245 225 1337 1907 1337 1337 1137 1337", " 1337 6 1337 1337 1337 1337 1337 1337 1988 1337", " 1337 695 1337 1337 1409 1337 214 1716 1907 798", " 181 21 1505 1489 1325 1337 661 1337 1337 1337", " 1337 1337 192 1337 1092 208 1337 1337 521 1858", " 1337 1249 1337 1337 899 952 1337 1337 1337 680", " 1337 1337 1337 1847 599 1337 824 1337 1337 1337", " 1337 728 439 221 1337 1337 401 1082 1744 1993", " 1337 214 757 45 1039 1337 1703 158 1153 1337 1337", " 1337 1337 1337 1337 1337 1072 1337 1196 1337 1337", " 380 1337 1134 105 41 1337 881 1337 1337 1337 1337", " 1894 1337 1337 1337 1337 1337 1337 1337 631 765", " 1200 650 1976 1337 1337 1932 1337 585 1102 1218", " 1337 403 1707 1240 118 1337 1337 1556 1337 380", " 1908 925 487 1337 1337 755 1337 1337 864 287 793"};
    vector<string> part3 = {" 1337 1335 1337 949 1337 1337 1989 1337 1337 1097", " 1192 618 1228 1337 1337 1337 83 1337 1337 1337", " 1337 1337 1735 1337 1845 1337 1198 1337 1337 1337", " 1337 1337 1485 1805 498 604 1337 1337 357 1256", " 793 1941 949 1337 1337 1518 619 1337 1337 1183", " 391 1337 1337 1337 628 1156 1248 1337 1337 476", " 579 1337 1337 546 1337 994 602 756 1337 1328 188", " 973 1475 1337 1337 530 1337 346 1337 1337 1337", " 82 16 1337 1970 1231 849 542 86 1337 1617 1337", " 1035 1337 1337 1337 636 194 1337 620 1337 1926", " 1337 1337 1337 1337 250 1337 283 1361 1739 1337", " 1471 163 1337 1551 121 1337 1776 834 1337 700", " 1744 1337 1337 310 1393 1359 1337 1337 1004 1337", " 1337 1332 1337 1337 678 1337 1551 1337 1337 1337", " 143 1337 1438 1337 1691 1337 1851 1337 1110 901", " 1281 1337 1381 1711 1337 1337 1148 1337 379 1337", " 1337 1337 1106 1337 1289 1337 1337 1538 1796 1337", " 1337 1492 1553 508 1337 48 1865 1337 1337 783", " 1337 669 1858 1337 425 1337 1337 1478 1030 1734", " 179 477 1249 1337 1337 1337 1337 1508 1337 500", " 295 1337 926 1337 1077 1605 1337 1337 1337 1947", " 559 1141 1763 1337 1645 253 783 1337 1337 1170", " 1337 1406 1881 1897 281 1337 1281 1517 1120 415", " 1337 1337 1129 1337 1337 356 1337 1337 1184 660", " 782 1337 1337 1245 615 1635 1337 1337 1455 1791", " 1337 70 1156 383 1337 1337 1521 1337 2 1337 1337", " 1812 1903 1337 1337 482 376 231 1337 1866 1988", " 246 1118 1885 1826 1385 1337 1337 1337 725 1696", " 1337 1337 950 323 406 1422 1337 1818 1337 72 1337", " 1444 1337 1337 1337 1956 831 1337 1337 436 220", " 1337 167 1124 1337 1337 1337 1337 982 1337 1337", " 1337 1701 1285 1455 437 1337 1337 563 1337 119", " 1946 1337 1337 1337 1337 1877 738 727 1337 1177", " 1071 1198 1337 1973 1337 1337 939 1337 1337 766", " 1337 1337 696 714 1902 1973 1634 48 1337 756 1337", " 803 595 1456 1955 1765 1337 1337 1337 307 1337", " 1337 1337 1507 1337 710 1142 1337 1337 1337 1337", " 409 1337 1337 1776 935 464 895 1240 1337 1337", " 1232 1337 1860 1616 1337 1974 702 661 1337 825", " 1337 1337 1337 617 1337 97 1337 1266 309 1337", " 139 963 803 1464 1337 109 813 383 1337 1023 973", " 669 1337 244 1337 1337 1337 379 1337 234 1507", " 1337 1337 1337 1732 460 1337 1802 91 582 1779", " 1093 1315 1337 723 1337 30 1277 1337 1337 1657", " 1337 891 1337 1337 360 1738 1691 15 705 1891 1337", " 420 1337 1322 1337 1337 1337 1368 1337 1337 1037", " 1337 1337 1004 1863 1337 1337 1337 1586 1906 1341", " 449 1337 1337 1704 1337 1506 1300 1337 498 1080", " 535 1337 1337 1337 322 1337 1337 887 1337 1513", " 380 691 1122 1337 1502 1337 1667 1337 1337 1337"};
    vector<string> part4 = {" 1337 1046 1769 1337 1516 482 1337 1857 1337 1337", " 1966 1337 1337 1337 1337 1337 1337 1337 1337 1337", " 160 1337 143 663 1337 1337 1337 597 1337 1337", " 1599 1337 1311 1337 1337 1417 1337 1337 1337 1036", " 1337 1337 1195 1337 1337 1798 1910 573 1512 1831", " 1337 1590 1337 1337 829 929 274 1843 1126 1337", " 1766 1620 446 1243 1337 1337 121 1529 1337 1337", " 1337 1707 1337 1009 1337 1578 1337 1337 1337 1558", " 1212 1600 1337 1337 1337 1 1337 1337 1337 408", " 1337 1337 1337 1337 1230 1751 70 1337 1337 1337", " 795 1337 1337 1751 1337 989 33 1337 1337 1337", " 1337 719 1337 1472 1337 1337 1954 1399 1337 420", " 1337 1337 1337 1337 1337 1484 240 1597 1174 931", " 1337 1337 1337 897 369 111 1997 1536 1106 1337", " 605 1337 1337 1579 1945 1337 1370 1337 1337 1337", " 830 1337 1337 1337 1337 634 1337 1337 875 1415", " 1826 1337 1337 1337 1337 1663 639 1336 1337 1337", " 1337 1337 166 1337 1337 1337 1337 113 1840 1650", " 1521 1337 1337 776 1337 1451 1337 1337 480 1331", " 892 981 1337 1337 1337 1337 1337 1337 1337 1337", " 1337 615 1337 1209 1347 1337 1337 458 1880 1337", " 192 1337 1337 747 1337 707 1337 708 1337 1200", " 1680 1128 1337 1337 1337 1520 1337 1337 1808 1480", " 1337 1873 1337 1337 443 1337 1337 834 1337 1731", " 1717 898 1374 1337 1824 1811 1337 1717 1337 1337", " 1337 1273 1316 356 458 1599 264 1337 1337 1467", " 602 1337 325 359 1337 1337 1337 1337 1104 1270", " 1337 1337 61 1883 1337 1009 1337 211 1246 583", " 1337 1337 708 260 1301 1215 1337 1361 1337 407", " 1422 98 286 861 1337 1337 1337 1337 1004 1337", " 1337 1520 1337 1337 1337 637 1337 1337 1337 1598", " 1337 1144 66 324 1254 1337 472 1337 675 1337 1337", " 1337 1577 1852 504 1087 1337 1195 1337 82 1337", " 1565 1337 1337 1337 1337 1875 1337 585 1337 1337", " 1337 1337 1337 823 1993 1337 1633 1337 1337 1337", " 1337 1337 1216 154 1170 1337 1269 163 1337 1337", " 1943 1337 318 1582 710 204 1337 1983 1337 915", " 1337 1344 550 165 844 1522 1226 1337 217 855 1182", " 1337 190 1337 1337 1337 1590 638 1337 169 1316", " 1525 762 1214 1792 1337 1337 1337 1337 1337 1337", " 962 1664 1337 1337 1337 445 1075 1337 1337 1337", " 1657 1337 1217 1337 403 1337 1337 1337 532 1337", " 1337 236 1195 1337 1717 1273 1698 1337 765 1692", " 1337 1337 1616 1645 1337 1559 1337 1337 1337 1337", " 1010 194 1337 1337 1337 1691 1337 1337 1598 1337", " 1337 779 1859 1337 1337 1337 1698 508 1229 1337", " 568 977 534 1337 1337 1337 1337 370 1348 1337", " 1942 34 1337 1337 1337"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2674;
    if(result == expected) {
        cout << "Test Case 72: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 72: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test73() {
    int numSheep = 2000;
    int maxRuns = 1100;
    vector<string> part1 = {"685 610 1667 1667 1667 1667 692 1301 300 1759 1667", " 1667 1348 1667 1667 326 170 1056 1667 1537 1667", " 977 385 1667 1667 1667 1667 1667 1667 1007 1667", " 1667 1667 1500 1063 908 1008 1667 1667 1816 1667", " 186 1667 742 1667 1667 1667 359 829 1667 1415", " 1328 1667 1667 1667 269 889 1667 1667 139 1667", " 1667 1667 1523 1617 1587 1076 357 1667 1667 551", " 1667 1667 1667 1667 1062 1231 1667 1667 1667 1667", " 885 1667 1667 1667 1667 1667 1667 1667 2000 1667", " 1086 121 1667 53 541 398 1827 1667 1300 1040 24", " 1667 1667 1398 848 1667 1084 892 1456 1667 123", " 225 1667 1667 1667 1838 1348 1667 1667 1667 1667", " 479 1667 1667 1229 1667 1991 929 1667 1667 1918", " 1667 842 1118 1667 466 1577 871 1180 301 1268", " 1314 1667 1667 1080 1667 1667 1667 1667 1667 1373", " 668 1667 1667 1806 1667 1667 1480 1667 789 1667", " 881 891 1478 1667 1758 472 1556 1667 1944 1667", " 1667 1138 1667 917 1667 393 1507 1677 1667 1991", " 1667 1667 1667 1352 1667 1231 1667 909 1667 308", " 1667 534 1667 1667 1667 1667 1667 1667 1667 24", " 1667 1667 1432 1022 1667 1297 1667 484 1667 1667", " 1389 1667 195 443 1702 1107 1667 1667 1667 801", " 1633 1667 1667 1667 1667 1667 1667 1708 1667 1667", " 1667 366 1667 1667 1330 1667 1290 1667 1667 1468", " 1009 1667 1667 1299 1516 1667 1667 413 1667 1667", " 1205 124 1667 1515 1667 1667 1625 1667 1667 1358", " 1398 1667 743 1667 1486 1667 1667 7 880 1928 1667", " 1667 1667 167 1090 1667 263 1667 1740 720 1667", " 1413 1557 1667 1667 1481 1395 1667 382 1667 1816", " 710 1800 872 1667 1688 1667 1667 1984 1667 1667", " 69 1667 1887 1432 1667 1667 464 530 1667 71 1513", " 380 1460 1667 1982 1667 1667 1667 1667 1976 1834", " 1667 1667 1667 1667 684 1667 1325 1667 1667 478", " 1667 1667 939 1641 1667 883 1939 1595 1667 1667", " 1667 1667 1667 1667 1667 1667 90 1667 1667 973", " 1667 1667 1687 520 1667 1667 1667 1667 1373 1667", " 1667 1667 1008 1667 181 1667 1667 1667 1667 1667", " 1256 1808 507 1667 210 1057 1667 1339 105 1667", " 171 1667 1667 410 1667 1209 1667 1667 711 1667", " 1667 364 1667 1667 1667 1667 1667 145 1667 1397", " 1667 292 661 602 1667 1531 1667 1667 679 755 1333", " 1667 1667 1667 1667 1793 1667 374 1667 1078 729", " 1667 1667 1817 1667 1667 1667 50 1667 1667 601", " 676 1667 495 1667 1392 1667 1667 853 1667 1667", " 1427 1733 1877 1667 974 1667 1667 1122 1407 814", " 1615 1667 1209 1667 1332 32 1667 806 1299 1667", " 1667 873 1667 1667 800 1667 1667 1676 469 1667", " 160 1667 1055 312 1667 1667 1667 1928 1667 249", " 1667 315 1667 1667 1667 1188 1667 1667 1667 1667", " 1534 373 182 195 636 1667 100 794 1667 1667 1667"};
    vector<string> part2 = {" 1593 1848 1667 1667 1667 1070 1691 1667 1218 1305", " 1667 1728 508 1667 1667 1036 1667 1667 1667 1667", " 1667 870 475 1667 1123 1667 1327 1667 1667 1667", " 1096 367 645 1667 1667 1667 1667 1667 1776 1667", " 1667 1667 594 1496 1667 697 1412 799 767 1489", " 583 1667 1667 1667 952 1667 77 1667 1667 1667", " 1667 878 1667 1357 1667 770 1667 1667 355 976", " 365 1667 888 1667 1667 1618 840 1667 1667 1667", " 1667 1667 1667 1599 596 1197 1667 1738 1667 1667", " 1667 1920 1667 1459 861 506 779 1667 1310 889", " 1667 1667 1667 66 1667 430 1667 846 1667 1667", " 1667 1667 1609 1667 1067 1711 342 203 362 1667", " 1570 1492 1667 1385 1217 1667 1667 1450 1667 1667", " 1667 689 1857 1667 517 1667 782 1627 1749 1667", " 1667 1667 442 1667 1667 1667 1667 1667 1667 1078", " 1287 1667 1810 623 1667 57 1667 411 1667 1667", " 1667 1667 468 173 80 1667 1667 582 1667 1667 1667", " 517 1049 189 1667 1667 1094 670 1667 940 452 1667", " 1667 1667 1332 1667 1242 1667 1667 978 1389 1667", " 1667 956 1667 1667 1667 852 1667 1667 426 1447", " 1028 691 6 1667 400 1148 1447 1486 1667 1873 541", " 843 1667 1556 446 396 1667 1667 1667 578 1547", " 1034 1667 1755 1667 453 1667 1667 1667 1852 1667", " 1512 1667 1667 210 700 1667 1273 564 1667 1667", " 665 1667 1119 1667 1667 419 1009 1643 125 558", " 1667 477 1667 1728 1667 1585 1404 28 1538 528", " 1667 1667 1788 1667 1667 1757 124 1236 1429 1667", " 529 1667 1856 1667 1667 875 157 2000 957 1804", " 1667 1667 424 626 940 1527 929 1778 1667 1952", " 1667 1667 1667 1667 1848 1667 1252 1667 1667 1667", " 1667 1667 1667 395 1083 1792 1667 1667 1436 1667", " 579 1667 398 1736 1667 354 112 1509 1667 845 1667", " 1667 1667 1537 1667 1667 1667 1667 109 1285 1667", " 1667 637 963 1721 1667 43 28 1667 637 1667 614", " 1669 1601 249 1667 1667 1667 806 1667 1186 1667", " 399 1667 1667 1204 1667 1667 1667 1667 1499 427", " 1667 988 603 1667 1937 1667 1667 739 1667 1667", " 1667 1956 1667 1667 1667 1667 1008 374 1944 1279", " 1767 1416 1667 1378 1667 1667 1273 1841 571 1667", " 1667 1667 1248 384 1667 291 1667 1667 1115 1667", " 528 1667 1667 1667 1667 1667 1667 675 1701 97", " 1920 1460 1854 1667 529 1667 1723 1667 1667 188", " 1667 650 1667 1535 1667 414 1667 1667 1667 1667", " 913 1949 1043 1104 1667 1667 1892 636 1667 1667", " 505 1667 1750 1667 996 1667 1667 1976 1203 1352", " 1667 1301 864 1947 1667 1667 1667 1667 1667 649", " 102 1667 1667 1667 1759 1488 1667 1667 1578 1128", " 1667 704 1667 1199 1667 1503 1667 1667 1667 1265", " 1667 1774 1667 1667 707 1193 1667 20 1667 303", " 1777 1509 1229 610 1942 785 1667 1667 1667 774"};
    vector<string> part3 = {" 1667 1667 1951 1262 1667 1667 1667 1667 1667 1463", " 1667 1667 79 1667 1667 1589 1667 1667 1667 1667", " 1667 916 1282 1667 1667 1667 1667 779 423 1667", " 1667 1667 1667 1667 278 1667 1020 1667 1667 431", " 1667 1667 1667 1871 1955 1667 1640 1989 1667 84", " 826 1667 252 1667 577 1667 1667 115 1667 1667", " 1611 1667 1287 596 1667 788 1667 1614 1711 1763", " 1667 270 1641 1667 1667 280 608 1958 1667 1667", " 1022 1667 1667 1667 365 1667 1667 1667 1811 630", " 604 1188 905 1667 1667 1667 1382 1122 1667 1847", " 1667 1667 1667 1667 392 1667 1667 1667 1667 701", " 1667 1336 289 1667 1978 852 836 1667 624 1667", " 945 1667 1667 1667 541 213 1667 901 1667 443 1257", " 1868 1667 1636 800 1667 1667 1667 1667 629 1393", " 263 1971 1667 283 1731 1474 135 1091 1667 1667", " 1667 953 1667 1667 1667 1667 280 591 1667 1667", " 428 1667 1667 46 1947 1667 1667 1667 1667 1667", " 1667 919 1620 1667 1667 542 1667 1667 1896 1122", " 1667 949 1667 1667 1059 98 1405 1667 458 1667", " 1667 407 784 667 1155 1317 1639 1667 783 1049", " 612 1667 1667 1667 1667 142 1667 1667 989 103", " 1667 376 1667 1632 427 1716 1667 1667 957 1667", " 1372 1435 780 1378 674 1667 572 1260 1521 1667", " 1601 1667 1505 1466 85 1667 849 1797 284 791 137", " 1667 847 1667 951 1358 1443 631 1667 1667 1693", " 1667 1289 316 1773 1667 1757 1667 1667 1667 200", " 130 1298 1667 1667 1667 1667 1670 25 1667 1755", " 824 1667 1667 1041 1667 1667 1667 1018 1667 1356", " 1667 1478 574 1667 1442 399 1667 1667 1667 1287", " 1667 764 1667 1258 1418 82 1667 1667 1887 1667", " 1667 1683 104 1667 1667 1667 1667 582 1410 1442", " 1899 1667 1667 530 1667 1667 1667 1667 1667 1667", " 168 1667 1667 1153 806 1667 555 1667 983 1667", " 1216 1667 1182 175 132 1257 1667 1003 1418 961", " 1667 969 1631 1667 1667 1667 351 1619 1792 1667", " 1667 1667 1807 1162 1667 1667 1667 345 1667 234", " 1667 1400 124 702 1667 271 1667 1667 1667 1667", " 1667 1667 1667 490 206 1667 947 1667 530 1667", " 793 1667 1268 1667 1667 412 1513 1667 1014 1541", " 844 1667 1667 283 1669 381 1667 653 859 1667 685", " 796 751 1667 1667 4 1667 1667 1886 802 1667 1667", " 1667 1667 1667 459 1667 1667 1667 1667 1667 1667", " 181 1667 1667 136 1667 1667 1667 1667 1932 1667", " 1667 1667 1667 1562 1148 1667 1667 1017 1667 1593", " 396 1512 4 1667 756 1308 1667 1667 236 1667 1667", " 210 1667 1667 1667 1232 1696 1244 838 548 747", " 1965 1667 1667 1667 932 245 1667 1667 1667 907", " 1473 1667 307 1667 352 1667 1530 647 1667 340", " 1667 1722 1667 1667 1667 1667 1667 1667 1667 168", " 244 1897 576 1667 1774 1828 1667 1667 1667 1667"};
    vector<string> part4 = {" 1667 1667 1667 1043 1596 1667 1667 1667 1691 805", " 1414 1030 1667 1667 1451 1667 1667 785 1667 684", " 505 1667 1067 1697 343 1949 1088 1453 1667 1831", " 1667 1457 1667 1667 1667 425 1667 707 386 1667", " 1667 1667 1667 1667 1224 441 1667 1667 1059 1432", " 17 1335 1667 1667 473 1667 1667 1667 201 397 1475", " 1667 1530 1682 549 881 1667 1667 1667 1667 1457", " 310 1667 806 1667 14 1667 1217 1667 1668 1667", " 432 423 910 1796 963 1667 1667 1667 719 1567 1978", " 1667 261 1667 1667 724 1379 1532 1667 1193 195", " 1667 151 1845 1667 1667 1667 1667 664 137 1093", " 1667 1068 1667 1587 197 1667 189 1667 296 1667", " 1667 1667 1318 1610 1667 718 1301 1443 1667 1667", " 1667 290 1667 1411 273 1667 273 1667 1547 1667", " 1667 687 757 740 412 1701 1667 1667 1667 1667", " 1667 202 1667 1667 1892 1667 1667 189 1667 1079", " 49 1667 900 1667 605 904 1667 1667 1667 455 1667", " 697 1713 1404 1667 1714 680 1831 1667 739 1686", " 1670 1598 1667 1667 1667 1667 953 12 1667 1667", " 1412 1963 1667 1667 1065 1667 1667 1667 1667 1667", " 1238 1667 1667 1667 1861 1667 1968 1667 1667 1667", " 42 1660 1667 1765 535 708 1040 1667 1667 1667", " 1667 1667 334 1667 1041 638 1699 1667 1667 1667", " 1371 380 1667 1841 1667 1317 1667 1667 1499 991", " 1667 1484 433 1667 679 1667 1667 1667 1536 1667", " 1667 1667 1667 1651 1667 944 442 1667 1667 1667", " 1667 1667 1667 1667 1559 1667 1620 1667 747 1000", " 1880 535 1667 1667 1565 617 1667 659 197 1698", " 1319 1667 1667 471 1667 635 1667 1667 1667 1526", " 1667 585 1667 1667 1248 1072 908 780 1667 1366", " 1667 516 1667 1035 1776 1667 903 716 1980 1889", " 301 1667 555 23 1667 628 1667 1667 708 63 1373", " 1667 1667 1667 1667 1667 1667 1667 1667 105 1667", " 1667 1749 780 1667 1817 1667 1667 1667 1385 1667", " 1667 1667 1667 1667 1324 1667 1512 1872 1667 1667", " 339 990 261 1667 1667 510 1667 1770 1638 1667", " 1522 1667 507 432 560 1667 995 378 56 1667 1667", " 1778 1667 1667 1847 1667 1667 1706 1667 1667 1667", " 1667 1667 393 1667 1667 1667 1667 1667 1471 1315", " 1667 1322 1264 544 301 240 1621 1406 1667 1667", " 598 1963 1667 1667 1667 1877 1667 1667 1667 539", " 1537 1918 1667 1034 1667 434 1667 283 1667 1408", " 1667 1667 1205 828 1667 1667 1344 1667 1667 191", " 1700 1667 1667 1667 1667 1667 1667 571 1762 1163", " 1306 1667 1667 1667 1667 1667 760 1667 1002 868", " 1667 919 1758 1667 159 1667 1569 1510 1370 907", " 1536 1992 1667 1736 1667 1518 1699 1667 349 1667", " 1293 1814 1611 1929 1667 412 956 1667 123"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 3334;
    if(result == expected) {
        cout << "Test Case 73: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 73: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test74() {
    int numSheep = 2000;
    int maxRuns = 1500;
    vector<string> part1 = {"910 1570 1126 1954 1 1 545 1484 1571 1894 661 1", " 1 1 1875 1 1796 554 1 1803 1 1 1 1667 1321 393", " 1 1 1 1 1 1 1 1843 300 1 186 1078 1 131 1012 1696", " 984 1 137 389 1709 1 1 1 1 1 1 871 1 1471 1 1", " 1 1 97 1331 1677 680 469 1861 1 1 1 1 984 1148", " 335 1 382 1963 583 1 424 1 1 1681 1089 1 1 546", " 356 1852 511 1 1 1191 31 1745 1 1 1143 1003 1264", " 1 1 1 1 1 383 1 981 819 923 1 1 1 809 1 1 1806", " 1 856 1 1021 283 1824 284 1934 1 462 1 668 270", " 1305 1 1 1 291 825 762 97 1 1 1 802 290 917 538", " 1 832 1857 287 1532 1 1520 845 1618 122 1 181", " 1 744 1 1 3 1 1 636 1 1 1 1 460 1521 938 1 1484", " 1 1627 37 1442 1 1 1254 1 727 174 185 578 1707", " 1 1607 1 1 656 1 1 1668 1 1 125 1 1 1 1 1065 1", " 1 1 651 1 1 1 1 788 1 1 1 1672 1 1 1527 1 1 352", " 1579 1 1 1249 1 1690 1030 1 1840 1 596 1185 1", " 303 1610 544 1 423 787 1959 1774 1171 489 1 1622", " 1 1 1 1 1 1177 1319 1330 1 1366 1 1 1292 1 1 338", " 1257 447 1275 1 1145 1975 1 1794 1 1 683 1 1 1", " 1306 1 767 539 1 972 1 233 1 213 906 229 1684", " 1 1 1 1879 540 1 313 1757 1 1 1408 1509 1568 1", " 1 1 1 1654 1704 1722 890 1120 1 1 578 1 1 1 513", " 943 286 406 1211 1 1 1 1 786 166 1450 1 1281 1", " 1 1 1 1 1 1499 1 1 633 198 1607 1910 778 1 1 1102", " 962 1 1 1 1 1184 164 508 1676 1 690 1 1219 1814", " 1073 1740 1794 1 1122 1 1 749 1 1686 1872 954", " 1 1 1733 829 1707 1 1 1 1588 1 1 1900 1064 1 1", " 1 1 510 1 1 1456 1 1789 1497 1 1 1965 1 112 889", " 1 1 1 1547 1 1 1 1 781 1 1231 1 1 741 1797 1 1", " 1 276 1 1289 1 1245 1 1 1 1 869 1 448 1561 824", " 1814 1943 1 1 1 1 1196 1 1963 1 1 1 1984 357 916", " 1 1 1680 1380 1 1 452 1 1 986 1 356 1 1577 1 1", " 1 1 1 1 1 628 1 476 307 1 1 1 1 1196 821 1 1509", " 1 1588 1 1 1 1749 1519 1 666 1 1 1959 1 1 272", " 589 1351 621 1 1 180 287 1000 101 1 98 1116 1", " 1008 1 1 1 1 1 281 1 1 676 1 1 1268 1 1799 1 1", " 1 493 335 180 1 1445 63 1 144 1 1 1 1 1 1086 1", " 1 1370 1 1 1 1 1929 33 1883 1701 1 1 1 297 1 1", " 1 1 1 1 1164 1 1490 1 1919 1 564 1 1 1 880 542", " 1 1 1 1 1 238 1 873 1611 1478 1 1 531 1 1461 1", " 96 1 1431 1 1733 1 1098 712 341 1 206 559 1 1", " 890 1744 1 1079 1 915 716 1708 1 529 1 1 223 1", " 1 1 1 462 1 571 1 1 1 1 1329 184 1161 1 1 1 404", " 577 1 1 799 1107 1 1 1 1421 1 1709 569 1 1534", " 1 1950 1 1 858 1 1584 349 1 1913 1 726 1 1 1 1", " 1 1 1420 810 1963 862 1 1214 1380 1 1 1021 1095", " 934 120 1958 1956 1 401 77 518 1 1 1630 1874 1", " 1 1 124 1393 1 1309 1755 1703 1 1 1 723 1 912", " 1 1539 1023 79 448 1 723 590 1298 1716 666 1543", " 160 1 347 1 1780 157 1174 138 621 491 1 195 268"};
    vector<string> part2 = {" 1 1 1 994 709 1 1 1125 1 397 1634 1 1231 1 1 1", " 1786 1006 273 628 1 1855 1 1 1 1752 1409 1571", " 1 1054 1 916 1059 1 1128 1 1269 1997 1 1 1593", " 1840 1246 1 1 342 1 1 1 514 1212 1 923 1 1 596", " 1 254 224 1 296 1 1 1 1 263 1952 1425 1496 1 1", " 1 1289 1 1 1969 1 1 1 674 1546 1317 941 479 1", " 1 644 181 1 1 1 1 1731 508 1653 1 1353 783 1 1385", " 1589 1 439 1 112 96 142 1981 1 464 1 1292 278", " 1 886 1 1 1 1 867 1 1712 1 1 740 1 1 1 1373 467", " 1 1 939 1 1 182 1 1 1 1 1600 416 1651 1 1 1 1", " 1 1 599 1 1 1 873 1 458 1 1 1970 1 1 1 1 735 1", " 486 508 360 1 1 1383 1 363 1 341 57 953 1 1 1", " 1 1407 629 1 1 1869 1 1 207 711 1 1 1 1 571 1", " 1 1 1999 1639 1517 1 1 1 1747 1 1 1 747 445 420", " 1839 597 1 1425 1 1 284 1231 1 225 1 1010 235", " 605 1697 1 1 1 59 1 1027 1 1 1 857 1 1 434 1903", " 1158 1 932 11 287 1735 1811 1 1 1315 1 676 42", " 1 1 1094 675 1975 1070 1187 1 1 1053 1005 1 1", " 534 30 1 1058 540 708 1 766 1 1 1 1144 1 1 1478", " 972 1 1 1 1 1 1 582 1 1220 1 1 436 1 1 429 769", " 1 726 1666 1 553 552 1 1 1 1 1869 804 1 1 642", " 1 930 1721 1 1 1706 1 1 130 462 1007 255 1 1 1", " 53 1 1 97 1435 225 1 948 493 1984 1 1 1 960 130", " 772 1 1 1761 1773 1 3 52 1884 774 427 876 601", " 1 1412 1785 1328 1861 1654 1 1 675 1522 1 1 1", " 1 1 518 1 1 58 322 1686 1953 1799 1 1 1384 1993", " 1330 1 1838 1 573 658 1477 1224 471 1 181 1972", " 1 613 1 1 1 1 1 1161 1 1552 1 1 1021 1324 1 1", " 875 1 1 1 1 1 1 314 1 1479 599 1 1 107 1 1 1 1", " 1 1609 1 1 1 1290 1 1 1 1 1 1 1 535 795 547 1", " 12 1 1071 15 160 1 1 1456 1 213 1799 1 77 436", " 1 456 114 1 500 1917 1395 1 1 1047 1 1338 635", " 1 1 994 802 578 799 1 409 1 1 1 1 1 1355 1 1 254", " 1 1 1 1 1131 1 1 1 1 1368 979 13 1 1 1 1 773 1", " 1 1 1 1613 679 1 305 1903 747 719 1 1 1 1264 1", " 1 1 541 1 1 1 1404 1 1 1391 1 222 1 394 864 1", " 1 1 972 1 363 97 744 1733 1695 1 1 1603 620 129", " 1 1 1 524 1220 1 513 1 61 1 1 283 1 1 1382 1522", " 1 1 1 1602 1780 1 1 1 220 1 576 1 1 504 795 973", " 1971 1969 564 535 1943 1821 1 1912 1 1 1624 242", " 204 1 1 1 1 1542 1034 1700 1927 1340 249 1 1 1962", " 1 1544 1 216 1 1 1975 926 1 1257 499 1 1782 1662", " 1 6 297 356 1 646 1 1 1139 1 1 1621 1 252 1 1", " 1 1660 1 1 790 1 1 1 736 1 1 1 1 1 73 1 1710 360", " 1 1 1751 206 1 1 632 541 1 1 1623 1153 546 182", " 1515 1 1018 362 1 1 9 1750 1 1 1280 436 1 1657", " 930 1905 1 1 791 1 1381 1 1996 812 1 1080 1 831", " 1402 1 1130 1928 1 1 1 1 1 1 1 7 1 1 1307 1948", " 1 538 163 1765 1 713 827 1 1349 1708 1 1 1 1803", " 867 1 1537 1 1 510 1 1414 1533 1484 1030 1 1373"};
    vector<string> part3 = {" 1175 1 1 585 951 1 973 1 1 1 1 1 1495 1 743 1", " 1 214 1228 787 1 1 1 1879 1 1 1909 1 1 956 1 1430", " 1 1595 86 1 1 846 441 304 696 1880 1 594 1 1 1", " 1 1 528 1549 1 1 656 1 443 1 1 1837 1 844 1 1", " 1332 669 539 1 1474 775 1 1 1328 1 1246 1 735", " 1 726 1 1 1 288 1608 1851 733 1 1057 1091 1 1", " 1 879 801 1 1 1 1 1 1 1 1 140 1 808 1 1632 1 1", " 1 1 484 1 1 1056 1 1723 1 1 1 1 598 1715 1129", " 947 1 1 1929 1964 1 738 132 1 1 1 302 1 1 722", " 1525 1 1 1 1 1 855 1 418 1 1 294 1978 618 1 1", " 1 1 825 914 1 1 1 1 1 674 1329 1 113 1612 477", " 906 1 1 719 1169 1 413 1 1 68 1345 1 71 1 1 12", " 1 75 625 1357 177 1 214 1938 1421 1 1054 1 573", " 1 1 411 1734 478 1 1 21 1 720 852 1 903 1624 1", " 1397 786 136 701 1 730 1899 1838 1687 881 1 1", " 534 1 1 1793 1 1674 979 1 1 1962 579 1 884 1163", " 1 1 1 1 1 1 1045 1243 1976 1805 761 1 1 1370 1", " 1 1857 1275 1 26 187 1 1 750 1 1 378 792 105 99", " 1058 1335 291 309 1 1 1019 1338 1091 1538 1 116", " 1 1 1666 1 1 1 1 1 998 1 1 1271 1833 1367 1 370", " 1590 1 90 1071 681 804 1271 1 1 1 1400 1 1851", " 1 949 1 1 1 435 1 694 1 546 1462 58 1 1 595 1", " 1 1 964 1 1 1 1512 1103 1 1898 353 1417 1 1452", " 1 1 1 1 1258 1 1477 1769 1790 1 654 1 1 1 1 1345", " 1997 115 1 1 1029 1 353 1 476 1 1 1378 1217 776", " 1 1 262 1 703 1 1492 342 372 476 1 1953 906 1", " 1 983 290 1 480 263 1 1897 48 1392 1 1 1 1 1578", " 1320 1284 1851 1 1 847 1218 1 329 858 1860 1 136", " 1643 900 502 1 162 1 749 234 1 367 1075 788 419", " 1244 1 1 1 1200 1048 1074 1 1 1 584 1 575 1983", " 1 1923 1056 1083 534 1895 537 1 1 140 1 1554 1", " 1656 1 1 1 1 1750 408 1298 1647 1 1 1835 1 998", " 1 1945 21 1 698 1 32 1 1949 1 774 1 1580 360 662", " 949 1491 885 1 1 150 1 1 1564 1320 305 1 628 1", " 1 1 1 1 1583 1646 1 1 705 1 1 30 1963 1 1 793", " 1008 1 1 1958 1 441 1887 1 1359 1 240 947"};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1999;
    if(result == expected) {
        cout << "Test Case 74: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 74: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test75() {
    int numSheep = 2000;
    int maxRuns = 1500;
    vector<string> part1 = {"13 13 13 1025 1637 1682 13 13 13 432 13 395 181", " 13 13 11 431 1213 38 777 432 13 13 13 164 501", " 13 13 170 13 1473 13 13 1461 13 13 94 13 13 847", " 954 13 13 1718 500 13 13 511 1635 163 662 749", " 13 1538 769 13 13 218 1390 13 13 13 13 13 1187", " 13 471 13 577 461 13 831 13 3 1756 13 1109 811", " 1845 13 13 13 13 13 393 1918 13 13 13 800 13 1320", " 1846 13 13 13 13 13 13 13 1453 1895 13 1482 952", " 1226 13 242 1763 1665 13 201 731 610 13 1706 13", " 355 13 786 13 533 13 1401 1201 1840 13 98 248", " 1274 894 13 13 1974 945 13 13 807 1521 13 957", " 13 181 13 1655 1413 1232 13 1375 13 13 249 13", " 1346 1281 13 1418 13 1598 431 13 13 13 13 1237", " 530 13 13 252 419 13 13 13 13 538 297 135 1794", " 1919 1323 791 740 13 13 13 13 13 13 1865 1675", " 186 263 1056 134 1909 1743 13 13 13 13 743 1468", " 13 1200 13 392 13 13 13 1125 988 1474 1649 13", " 13 1769 942 1065 13 1293 13 13 293 13 13 1568", " 13 171 13 13 13 13 13 683 1475 13 13 1237 1774", " 13 1535 807 13 13 1551 316 13 13 13 1505 13 13", " 173 13 13 1749 13 683 1802 539 965 856 1903 1224", " 13 1810 13 1649 936 332 13 1489 677 13 13 13 1248", " 1763 1508 13 13 1930 127 13 13 13 1175 13 1569", " 13 528 13 13 667 1467 13 688 13 1197 1054 190", " 13 1246 13 13 1962 13 13 13 13 1171 1727 13 13", " 13 1300 533 200 1434 13 13 1280 900 13 1179 793", " 399 385 1459 1919 402 434 272 13 1865 13 13 1852", " 13 310 13 1895 13 13 1480 13 13 1934 510 1066", " 13 13 13 13 13 1188 13 1057 13 13 13 50 136 13", " 560 13 13 13 1283 13 13 13 13 1198 1574 13 641", " 646 1110 13 726 1635 1942 13 198 1302 13 13 13", " 13 1919 1879 13 13 1805 13 1800 575 13 13 13 473", " 734 1395 13 1057 13 1090 13 1973 159 687 13 13", " 13 205 391 1091 13 13 547 13 984 13 69 13 13 13", " 13 1612 13 13 537 13 13 797 587 13 13 1324 13", " 13 1851 13 13 13 136 13 512 229 13 13 13 986 13", " 13 13 1870 13 13 448 13 689 13 13 104 13 474 13", " 13 13 13 1082 13 380 13 1639 13 222 800 13 322", " 730 13 1285 1806 616 13 728 13 395 231 351 1501", " 1325 746 13 1781 1596 1168 13 536 13 13 13 13", " 810 847 13 13 13 1153 751 13 156 1848 1913 13", " 739 677 1701 13 510 357 1958 152 13 1614 1034", " 13 1525 13 1155 1734 13 1480 1697 13 1126 13 13", " 13 13 13 1313 13 110 803 1320 13 723 313 13 756", " 264 13 302 13 13 1903 1312 523 13 1935 13 1777", " 13 13 13 13 1426 1012 105 1626 13 13 1453 13 1117", " 13 1388 13 1443 1550 13 13 13 13 13 1462 1914", " 222 13 1575 362 13 13 1819 13 13 1740 1878 1473", " 1399 728 621 13 1808 13 170 250 13 13 662 13 1302", " 13 844 1595 285 13 1422 13 1114 1550 13 453 13"};
    vector<string> part2 = {" 13 13 1155 13 13 13 13 13 13 960 13 13 13 13 13", " 1422 1203 13 13 13 13 1244 13 366 13 13 1921 122", " 1408 394 13 1377 1361 725 13 1427 1558 13 13 301", " 13 1291 13 1429 1467 1153 13 13 13 13 13 36 13", " 13 13 13 13 13 13 13 13 13 1067 144 13 1873 13", " 13 13 113 13 13 479 1586 1689 13 3 13 284 1182", " 1495 995 13 71 13 867 13 13 13 13 511 456 1722", " 13 13 1767 1381 370 13 1712 13 13 13 308 13 518", " 15 13 338 13 13 13 155 13 13 372 425 1874 13 1325", " 165 13 13 1270 13 13 939 588 13 1780 13 13 287", " 201 611 13 1495 13 1459 13 446 13 13 795 13 13", " 13 13 271 13 13 867 13 13 1885 1766 649 881 830", " 138 13 1977 46 916 13 13 13 13 289 1989 242 13", " 13 13 284 957 13 13 1738 244 1449 13 13 13 13", " 399 13 810 13 13 13 13 13 13 998 13 316 895 13", " 13 13 13 13 13 13 1819 13 13 13 13 1453 1100 1382", " 593 1114 13 13 13 1396 13 13 13 13 13 13 1118", " 182 13 13 13 13 13 464 13 13 77 13 645 13 13 13", " 820 1820 13 13 13 273 13 13 13 13 13 1800 84 13", " 1365 1447 13 13 559 966 13 1612 1933 13 742 13", " 13 1520 497 530 13 410 13 13 13 491 13 13 350", " 423 13 1204 13 13 13 13 446 308 13 13 13 13 1106", " 62 1690 1382 13 13 1406 1931 1043 13 13 13 200", " 13 889 1269 1721 1379 13 13 13 57 229 13 1326", " 334 938 13 460 13 285 84 13 13 74 1084 1942 13", " 818 13 13 13 358 13 13 691 13 584 1080 1595 13", " 1823 41 13 13 1694 1418 802 13 13 13 1065 13 1796", " 1518 432 13 13 13 13 13 1274 13 13 1510 226 13", " 1405 630 1925 1711 13 405 195 13 13 13 1675 319", " 13 513 1537 1616 515 1978 13 1806 13 13 13 678", " 13 819 1016 13 138 755 13 533 13 1153 1079 13", " 964 13 13 91 13 13 1757 13 13 1729 168 13 1698", " 13 273 13 13 13 328 798 181 13 1483 563 69 13", " 13 87 13 13 1288 13 135 1056 1080 124 92 1685", " 13 1831 181 13 13 299 13 499 1157 13 13 13 692", " 575 13 13 13 164 13 1256 299 177 1099 76 13 322", " 1409 13 13 1289 13 13 13 1643 593 810 13 803 13", " 13 13 1757 13 55 13 1107 1196 997 1744 355 1807", " 75 13 13 13 13 737 676 13 1409 13 13 245 1113", " 13 13 13 359 13 13 13 814 650 571 13 13 13 13", " 873 13 783 13 13 1583 13 13 13 13 600 724 13 1177", " 13 864 13 13 1067 13 13 13 584 1256 1362 533 13", " 686 13 157 1463 126 13 13 365 1853 13 13 13 711", " 13 13 1121 13 13 13 1845 1122 1106 13 582 350", " 945 168 405 13 13 13 856 13 13 13 13 1585 13 13", " 571 1133 1770 13 13 648 13 13 13 686 13 13 13", " 13 13 13 13 13 13 976 951 13 1476 13 1985 131", " 13 945 436 1941 1782 1163 13 1450 13 13 1246 574", " 303 13 1841 13 13 113 13 1404 651 13 526 405 13", " 1921 1809 478 982 1437 13 1204 1247 13 1250 362"};
    vector<string> part3 = {" 13 13 563 1221 820 13 13 13 1068 1156 853 13 622", " 980 651 460 13 13 13 387 67 1281 935 13 13 13", " 118 13 477 13 129 408 1439 1514 13 13 13 13 1936", " 13 13 84 941 13 78 1769 1810 1720 13 817 13 1215", " 635 1202 1183 772 1555 6 951 200 13 1540 1414", " 13 13 13 13 13 1312 179 13 13 13 13 1474 1215", " 13 13 1368 1267 13 77 985 13 13 1230 13 13 13", " 1515 13 1462 13 107 538 1233 408 13 1723 13 13", " 259 1660 775 13 557 13 1663 442 13 1794 13 511", " 13 850 1013 13 491 13 13 1478 13 499 13 1679 1081", " 950 13 265 13 1637 13 13 13 13 1385 13 13 13 13", " 1469 13 1345 13 884 884 13 29 1690 1124 903 13", " 13 13 13 647 13 1519 13 13 1918 13 992 13 13 13", " 13 504 819 220 659 1675 1228 13 1878 1360 1759", " 13 13 380 1839 13 1679 1186 13 13 1172 547 13", " 13 1613 1313 1359 1566 13 13 874 13 1855 13 13", " 959 1150 577 1225 1637 13 13 133 87 1886 13 13", " 140 13 13 1316 13 13 1960 636 39 1976 1331 368", " 839 1009 13 1216 6 13 13 13 13 1620 13 1071 326", " 664 1821 13 13 1691 13 13 13 1686 673 13 13 13", " 1516 93 13 145 13 13 1580 13 40 13 13 13 875 13", " 1600 1304 24 13 1214 800 13 1169 13 13 13 13 13", " 13 811 13 1872 1661 13 13 13 1305 13 97 380 13", " 13 1302 13 545 3 13 13 13 1586 13 587 13 1246", " 1705 13 998 1598 13 13 31 1739 287 316 13 1347", " 13 13 13 13 869 502 1777 452 13 13 379 13 1411", " 13 13 13 13 13 1605 13 13 13 13 13 974 437 13", " 13 13 13 13 1966 13 237 1980 13 1646 13 13 1380", " 13 1818 1067 304 13 13 13 13 13 1432 13 13 1857", " 13 13 13 134 746 13 1716 541 1018 13 997 239 13", " 13 1313 396 13 13 13 13 13 13 13 13 188 1727 5", " 620 13 1147 1178 767 13 1740 1412 1815 13 13 13", " 1582 13 398 532 1921 1360 13 1237 226 13 406 13", " 13 1661 122 13 1391 1940 549 1150 677 13 406 13", " 1601 13 1624 1164 389 1850 937 13 13 1330 407", " 13 13 425 1545 573 1738 1566 1506 504 1071 749", " 13 434 796 982 438 1134 13 1911 1761 1331 178", " 1959 1237 13 957 13 13 13 1535 1580 13 87 13 1321", " 13 13 1673 1254 13 1569 1252 134 13 1379 553 13", " 13 271 186 13 369 13 13 1539 1085 13 13 1269 894", " 1187 44 13 13 1761 13 13 13 13 13 13 929 13 13", " 1027 13 13 1220 13 367 13 13 13 1239 13 13 1251", " 1521 121 1668 168 499 13 13 13 54 13 1223 13 13", " 13 93 816 1041 436 399 2 613 13 13 1527 558 1527", " 543 13 214 13 13 1684 262 1608 13 1402 805 13", " 426 13 1095 703 13 1981 1473 334 216 1943 13 942", " 13 13 1582 13 13 13 13 130 13 1579 13 1494 13", " 155 628 13 13 13 13 13 13 13 13 13 13 13 1261", " 1920 1322 577 13 819 1978 13 665 13 1567 1170", " 1953 51 13 325 1252 1430 13 13 13 13 64 641 452"};
    vector<string> part4 = {" 13 13 270 13 13 915 132 9 13 105 572 566 250 13", " 1098 13 1287 1155 13 13 13 769 13 1180 7 138 1448", " 13 173 13 13 13 13 937 13 1522 1210 1377 13 13", " 13 1752 1413 1295 13 1284 1633 206 13 13 980 13", " 13 13 13 13 13 13 13 13 13 13 13 761 630 13 772", " 13 13 1759 13 787 13 380 13 1497 1714 13 1029", " 1513 13 633 296 13 181 1072 13 13 1975 13 13"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1989;
    if(result == expected) {
        cout << "Test Case 75: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 75: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test76() {
    int numSheep = 2000;
    int maxRuns = 1500;
    vector<string> part1 = {"42 1945 572 42 42 42 1271 1007 42 42 1667 42 42", " 42 1462 898 42 1688 1284 42 42 42 42 42 1243 499", " 1647 1083 42 42 791 717 1475 42 42 1504 1805 546", " 42 42 1195 521 311 42 42 42 42 42 42 42 1233 42", " 627 42 42 633 124 42 42 42 1229 42 42 42 1307", " 660 1508 849 42 930 4 42 1272 42 42 42 673 42", " 1010 42 42 42 831 634 993 42 42 42 42 485 238", " 1255 42 42 1822 1333 42 42 44 42 847 1831 42 42", " 1375 568 42 42 42 42 42 42 42 157 42 1940 42 998", " 42 42 870 42 533 42 1168 1 1425 42 42 186 812", " 42 699 42 42 279 42 669 639 1779 1454 1411 68", " 642 1289 1618 42 42 148 551 42 644 42 451 42 146", " 42 1264 1598 42 42 42 368 179 1786 42 61 401 1617", " 42 686 42 42 169 42 42 1038 876 704 922 155 1464", " 1822 42 42 106 1273 42 1817 42 42 42 654 42 270", " 1813 42 731 42 832 42 795 1736 42 784 1862 42", " 42 457 42 1712 489 1488 537 42 1345 1975 42 42", " 42 42 800 42 42 42 1420 1761 1550 333 42 42 42", " 42 42 17 656 42 580 42 42 1842 42 1216 1993 42", " 1035 1358 42 42 42 1809 42 42 42 42 42 1071 1205", " 631 84 42 42 569 42 42 1789 733 42 42 42 610 42", " 42 42 42 965 42 121 42 1037 42 42 741 42 1657", " 42 402 42 1351 42 42 42 240 42 981 42 42 703 465", " 42 42 42 1890 42 67 42 42 42 42 54 519 42 382", " 1210 42 1761 42 42 42 42 42 1542 42 42 42 42 42", " 1864 42 480 42 1248 44 1663 1873 42 1496 42 42", " 1344 2000 1545 1749 42 42 42 42 1953 42 1918 42", " 564 42 408 42 42 1986 42 42 520 42 1463 42 42", " 169 42 992 918 42 42 1875 42 42 42 991 1327 42", " 42 335 42 42 878 42 64 1129 251 42 42 42 42 840", " 42 1313 1745 42 1475 706 173 42 1825 42 42 1285", " 1777 1057 42 1812 42 42 42 1290 905 1403 1204", " 42 42 42 1540 42 42 1849 1103 191 42 1362 42 42", " 94 439 42 613 143 1820 42 149 205 42 855 279 614", " 1895 42 42 42 42 708 1746 707 42 1434 1903 14", " 733 237 42 236 978 42 42 42 42 1713 971 42 42", " 42 62 42 233 42 654 1554 42 21 42 1699 42 42 42", " 1181 42 1528 581 42 42 42 1865 54 42 8 42 829", " 42 42 71 42 528 1201 42 1285 42 42 42 42 42 42", " 797 1970 1444 771 42 42 42 1961 1213 1539 896", " 42 1380 902 789 1206 42 42 42 651 913 1767 672", " 288 42 42 1724 42 42 42 42 42 42 1636 42 42 1094", " 1868 42 42 1326 1377 42 179 42 1193 83 524 42", " 1700 42 42 42 1095 1228 42 42 1285 42 529 303", " 541 1149 1047 42 42 743 1811 42 1144 42 42 1948", " 42 1358 676 878 103 42 42 42 1352 42 1500 1438", " 42 413 42 1790 42 49 42 994 42 42 42 1986 1667", " 722 1366 372 1723 1407 165 254 42 964 78 293 990", " 1545 42 888 336 49 721 42 382 42 42 42 1602 42", " 42 361 235 42 42 42 42 42 1128 42 1572 42 15 42"};
    vector<string> part2 = {" 42 42 645 999 1794 690 509 330 42 42 1923 42 378", " 1167 300 1883 374 1330 42 1490 42 42 42 103 42", " 42 29 42 42 387 1875 9 42 42 42 1405 890 42 42", " 166 1618 42 1602 571 1121 956 1308 1629 42 1290", " 1275 42 42 42 1692 42 955 929 42 1427 1960 1589", " 42 42 42 42 42 236 56 42 909 42 42 266 42 42 1193", " 42 265 42 42 1145 188 1511 1434 710 1962 42 1171", " 42 42 1270 1270 42 42 386 42 243 876 42 454 42", " 42 18 1935 42 42 720 1167 1035 397 42 1047 187", " 1769 42 42 735 42 691 42 42 42 42 11 150 42 516", " 115 42 42 42 1190 42 732 1996 42 42 42 42 42 192", " 42 929 118 42 408 42 1541 42 351 42 1918 867 42", " 42 1801 42 759 1770 1515 42 561 762 438 1955 973", " 163 545 42 42 42 1236 42 1542 42 1708 461 1531", " 1887 42 103 42 184 42 42 42 42 42 42 339 42 1365", " 1772 42 42 289 42 42 846 1766 692 1973 874 164", " 42 690 1968 498 42 42 42 114 42 221 42 1199 42", " 42 1450 42 1463 116 1267 42 791 42 590 42 1569", " 42 42 42 42 166 42 42 1698 42 42 1185 128 245", " 42 42 42 346 42 42 42 42 42 1520 42 42 42 42 1882", " 42 42 1940 37 42 104 42 42 422 42 1548 1035 42", " 42 411 291 1763 42 1811 1879 1808 1315 42 42 42", " 42 42 1114 42 1513 1680 593 42 42 42 1059 42 1856", " 1323 42 1562 571 1242 42 42 572 706 42 1589 1125", " 42 42 42 42 1009 42 649 42 42 42 42 42 42 916", " 42 42 720 42 679 42 655 42 42 220 42 316 42 738", " 42 756 215 433 42 42 42 42 42 1117 619 42 42 830", " 42 1901 699 665 1564 42 42 293 42 42 1163 1764", " 42 1813 42 42 42 816 150 950 42 42 182 251 1985", " 42 42 1762 1262 42 1664 1661 1052 534 42 42 1009", " 42 42 42 492 42 42 1918 42 1867 42 1400 1931 317", " 42 42 42 814 877 42 1904 42 42 42 42 100 42 45", " 1773 27 42 42 42 42 1399 42 856 42 42 42 310 1049", " 1363 1606 42 794 42 42 42 42 1897 42 42 42 42", " 1360 787 42 42 42 119 212 42 42 42 10 1242 42", " 42 325 42 42 394 1914 1498 42 645 1304 42 951", " 42 42 42 42 911 42 42 1653 42 826 42 42 42 42", " 42 877 42 42 1412 514 644 42 69 42 373 42 42 334", " 17 646 1321 42 42 573 42 42 832 42 1299 42 363", " 1099 823 1832 1988 1345 42 1157 25 1847 42 530", " 42 1754 42 42 42 1689 312 42 42 42 42 42 42 42", " 738 635 42 42 42 1464 47 1645 605 42 1451 631", " 817 42 42 203 42 1759 42 42 866 42 60 42 1743", " 42 42 42 958 691 42 1761 42 42 42 42 42 1015 42", " 42 42 1594 14 990 42 1438 1642 578 42 42 42 262", " 42 1575 42 478 42 42 1793 42 42 42 42 503 1816", " 42 1216 346 42 57 42 970 42 42 760 42 42 42 241", " 42 488 297 1834 42 42 42 42 42 270 611 974 195", " 42 42 42 220 715 1055 42 42 747 1049 449 978 1993", " 804 42 1441 42 42 1559 42 489 1525 1448 42 42"};
    vector<string> part3 = {" 1720 1450 1126 899 42 1038 1635 42 42 957 39 1470", " 27 745 676 1963 473 42 42 1611 1791 956 42 42", " 146 42 42 42 1075 42 42 1996 825 894 42 1032 42", " 42 42 307 42 42 109 517 1208 1131 1286 42 980", " 1939 1673 42 429 42 773 42 42 1936 1618 42 42", " 42 42 42 42 42 385 42 42 874 42 881 1180 614 42", " 843 939 42 1589 42 715 42 1100 278 1587 1776 42", " 364 42 42 1083 5 1350 1352 42 42 698 361 42 42", " 816 42 42 1653 192 42 42 42 756 42 42 938 42 1667", " 869 42 1542 42 42 268 42 927 201 95 1226 1712", " 1492 42 42 1847 42 342 42 42 78 1817 1827 42 42", " 42 42 1580 42 42 42 42 42 42 682 42 42 42 138", " 1188 932 42 34 1574 623 42 1952 42 42 542 42 1492", " 42 42 161 42 42 42 630 37 76 42 42 1042 1173 42", " 42 1714 85 1859 355 42 42 570 1392 42 42 1776", " 1986 291 519 491 42 1242 42 447 42 166 42 1697", " 1693 42 1217 821 42 42 1631 42 749 42 42 236 42", " 22 640 42 277 677 42 42 124 42 1757 42 42 42 1743", " 1680 42 42 13 42 42 515 42 42 1779 1252 42 1870", " 42 798 42 42 42 1635 42 283 42 595 42 42 959 816", " 42 42 1642 42 1138 42 1623 42 1500 649 42 42 1109", " 707 717 42 42 152 49 42 42 1949 42 42 42 42 1937", " 42 1214 42 310 238 42 1106 42 42 42 42 42 42 42", " 337 281 42 49 1727 1003 42 423 760 1258 56 1781", " 42 25 482 1852 42 573 42 42 927 1045 591 42 764", " 42 1565 42 42 42 593 42 981 1409 42 42 42 1962", " 42 145 42 42 42 42 42 1728 1658 42 770 42 136", " 1562 42 42 42 42 42 42 1881 42 364 42 245 305", " 1987 42 1218 42 883 1255 42 42 42 456 42 42 1670", " 42 42 1255 1519 42 1012 344 42 42 42 42 710 1019", " 1053 42 1360 42 42 42 570 42 42 42 42 42 995 1165", " 1476 1436 42 42 494 234 42 42 42 1537 42 1254", " 42 161 42 42 730 42 42 663 1611 42 42 42 1375", " 1616 42 42 1705 1456 42 1591 502 498 42 861 42", " 638 496 1229 42 1301 42 170 42 42 42 15 517 42", " 42 806 1036 502 1912 1836 835 42 789 42 652 1918", " 42 42 2000 42 42 988 119 1741 42 42 880 42 323", " 1775 1353 42 42 42 1873 96 566 42 1983 1502 42", " 1698 42 1258 42 42 42 42 42 42 327 646 42 42 215", " 42 1134 42 822 519 1748 697 42 1065 728 42 42", " 42 1057 1443 42 71 1441 1527 42 433 42 42 799", " 42 42 1840 1057 629 42 42 3 42 42 1928 42 42 42", " 1569 42 42 561 42 1865 42 1282 42 42 286 588 42", " 1539 740 604 42 42 42 1864 42 1718 42 1716 42", " 42 42 42 42 1331 42 920 1371 42 42 557 42 338", " 575 50 42 42 689 42 42 42 42 216 522 42 42 42", " 1921 1601 1284 471 466 1224 42 18 172 744 42 42", " 585 629 42 42 1664 15 42 562 648 608 42 42 42", " 42 42 1025 42 42 86 42 42 42 1875 675 42 42 42", " 42 1628 42 42 456 42 42 42 1770 393 1111 1426"};
    vector<string> part4 = {" 42 1839 707 42 42 1127 1298 777 42 1188 1498 42", " 1101 42 1594 42 1595 1775 42 42 1679 335 42 736", " 1175 1394 1966 1600 817 1448 498 42 1718 42 946", " 30 42 42 1150 1351 1520 42 42 42 1419 42 233 1863", " 609 42 1937 1977 1241 661 42 337 1876 42 42 1998", " 1121 42 42"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2000;
    if(result == expected) {
        cout << "Test Case 76: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 76: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test77() {
    int numSheep = 2000;
    int maxRuns = 1500;
    vector<string> part1 = {"576 265 576 589 576 576 992 576 576 256 576 576", " 1025 576 201 1017 576 576 576 1438 970 1813 11", " 475 240 955 903 576 800 1930 576 1335 576 254", " 576 309 1165 576 275 1162 576 576 203 576 576", " 576 576 574 576 576 1808 576 740 120 1283 576", " 1745 576 477 576 680 285 458 916 178 576 1872", " 1346 208 576 576 576 576 576 576 576 1952 576", " 576 576 576 576 576 701 576 576 576 576 576 576", " 308 576 833 576 576 730 297 576 576 748 758 225", " 576 1756 848 576 576 1800 576 576 576 525 576", " 576 576 576 272 576 576 576 576 995 1406 576 344", " 576 1070 576 576 576 1283 1537 576 576 1185 1835", " 576 576 495 94 576 154 1691 576 884 360 576 576", " 1934 1689 550 576 642 981 1276 576 1180 577 1094", " 1244 1047 192 576 429 537 133 576 576 1738 1204", " 1070 576 576 1902 1677 899 576 576 576 576 659", " 1006 504 534 1814 558 576 1254 576 576 1477 1790", " 576 201 1761 1915 987 576 576 576 576 1225 1078", " 155 59 576 1195 1285 576 1401 576 1256 1988 576", " 576 576 576 518 576 1954 1668 576 1222 576 291", " 576 568 1357 1525 576 576 576 576 1746 51 576", " 502 1960 1670 576 993 506 1467 1365 576 576 576", " 576 1524 1966 279 576 394 576 606 576 1543 576", " 576 1169 838 1421 994 1797 576 470 576 576 576", " 576 576 576 576 1032 576 183 811 1156 1807 576", " 166 576 1024 1814 576 623 576 576 1089 1017 576", " 576 1384 444 911 576 1796 347 576 576 1345 1944", " 696 1829 576 901 576 1781 1327 49 207 576 576", " 576 576 701 959 576 1040 576 576 576 576 1749", " 576 569 11 576 576 1581 8 576 576 379 364 576", " 576 576 597 576 204 1972 576 1497 594 576 876", " 576 576 168 138 1809 369 576 576 576 576 576 378", " 1701 1898 576 576 576 576 576 576 1073 599 576", " 576 314 323 576 576 576 1974 576 576 1410 576", " 472 1005 576 576 576 88 1682 576 1289 576 682", " 576 1660 440 446 371 576 1765 1532 576 208 576", " 576 638 576 576 576 1520 576 1299 1869 576 913", " 1771 576 576 576 576 576 576 576 576 918 576 576", " 1842 576 576 190 1947 1848 576 576 576 774 576", " 576 690 476 576 576 576 1052 805 576 1489 576", " 328 576 576 576 576 576 877 576 998 110 576 1297", " 1189 1740 576 1876 1435 576 576 247 1005 576 498", " 576 1599 1742 1463 631 576 552 576 50 436 1623", " 1812 576 576 1000 1358 549 576 677 576 1721 576", " 1080 576 576 576 576 1219 1616 1973 576 576 1653", " 576 1963 576 1245 1572 576 576 767 576 576 1994", " 1925 576 576 576 576 576 1360 576 576 576 400", " 576 548 576 1315 211 510 576 576 576 839 1050", " 674 576 576 1413 1533 576 826 1521 576 576 250", " 1486 24 30 576 21 576 576 641 576 1600 576 162"};
    vector<string> part2 = {" 576 1604 919 576 527 576 208 880 576 1851 576", " 576 576 274 576 576 576 576 576 576 576 576 576", " 1282 402 576 576 1862 602 576 576 1766 576 1980", " 576 576 805 576 220 1909 576 1670 1975 576 576", " 935 1546 1602 576 464 1014 576 1149 576 576 1780", " 1840 576 406 576 884 576 576 576 258 666 354 576", " 457 576 507 892 576 1284 461 576 1173 576 576", " 576 576 576 528 1897 1310 576 945 1481 1022 576", " 576 576 576 1474 748 576 1274 1995 576 1328 992", " 576 1004 1713 576 576 123 1715 676 576 1354 576", " 576 576 576 1913 308 905 576 1205 1282 1322 576", " 576 576 450 576 576 576 1651 576 576 576 576 1520", " 576 554 576 576 576 576 93 576 439 576 480 576", " 1200 1593 576 576 801 1837 1362 1297 576 98 1564", " 576 576 696 576 576 1484 610 576 576 768 470 576", " 942 576 1286 1142 1828 576 600 576 576 76 576", " 576 576 1025 576 576 576 946 576 1233 576 1023", " 1188 490 811 550 1081 576 576 1942 576 576 576", " 1995 608 253 576 1835 75 1071 501 576 576 1853", " 576 576 338 1619 955 576 576 1155 612 1044 249", " 576 501 576 576 576 576 1336 1821 576 576 576", " 576 576 576 576 1610 1470 1516 576 1148 1150 576", " 1947 576 698 938 88 576 576 1171 576 576 1119", " 591 576 263 576 1655 576 576 576 786 422 1553", " 1280 576 1870 1867 576 576 576 1156 576 1868 450", " 530 1576 576 590 1935 977 576 576 629 609 576", " 576 576 576 576 1195 576 576 576 407 576 576 900", " 576 576 576 576 1276 651 992 576 1682 72 1733", " 576 576 1505 264 576 576 1409 1739 576 1704 576", " 576 1724 576 576 1490 1592 1518 51 915 414 576", " 576 1100 576 576 591 576 1918 630 576 1674 1871", " 1464 576 576 576 925 576 576 576 576 609 705 576", " 877 576 462 27 576 1312 576 991 754 576 576 823", " 576 576 609 576 102 1580 576 247 678 576 1928", " 576 576 576 576 925 576 576 576 375 612 1540 576", " 576 576 539 1507 1121 576 1310 576 576 576 576", " 1923 576 886 1363 1769 511 576 576 1470 1393 822", " 576 576 748 1995 1369 2 56 576 576 576 1824 849", " 57 1011 1387 576 576 576 576 576 461 576 576 576", " 301 1344 1281 576 1172 494 576 576 576 576 576", " 786 1729 634 528 1811 576 477 1797 343 401 576", " 398 874 576 495 571 576 576 221 576 576 576 1942", " 576 1047 576 576 1837 576 576 576 794 576 576", " 1916 1048 576 576 576 705 576 576 576 576 1331", " 576 1272 576 576 576 1241 576 797 576 1159 576", " 576 709 576 1391 576 1984 260 576 1386 906 701", " 1705 731 576 576 576 381 576 576 970 666 1997", " 576 576 781 160 576 1838 578 576 576 104 670 1485", " 925 336 827 315 576 1438 576 1378 804 1446 163", " 576 875 576 576 126 576 576 576 763 576 793 576"};
    vector<string> part3 = {" 1149 576 576 576 399 443 576 1187 1620 576 1445", " 1627 1549 758 576 576 576 302 1899 1110 855 576", " 576 576 576 576 514 1165 977 1884 576 576 576", " 1463 1976 576 576 576 1182 576 576 576 576 576", " 113 576 1146 576 350 576 576 576 1206 576 576", " 576 576 266 1366 1400 576 624 1215 580 465 979", " 576 1294 1060 133 409 1250 1560 576 515 1204 576", " 576 576 576 1243 576 1366 53 576 576 241 576 576", " 1004 353 576 1843 576 576 1697 576 576 576 576", " 133 358 576 576 1922 1288 1601 576 576 1368 576", " 1369 576 576 352 576 576 576 576 430 576 1786", " 1298 576 576 458 576 576 576 576 1925 576 314", " 576 576 660 569 1679 257 1694 53 576 1076 576", " 1025 257 565 576 576 576 576 576 1512 431 463", " 576 531 1217 313 576 576 576 1116 576 1139 547", " 576 576 1703 1967 1866 1343 1397 576 1792 576", " 576 576 1325 576 185 522 576 576 704 576 982 576", " 1353 576 576 1842 576 472 576 576 300 789 1215", " 844 576 1128 576 576 576 576 1058 1674 1129 576", " 576 1773 576 576 576 576 27 1017 576 576 576 576", " 576 181 1437 576 863 811 277 576 576 576 576 874", " 576 576 576 576 832 571 576 576 935 576 576 909", " 191 1814 1807 386 576 1207 1770 1412 1489 576", " 173 576 576 576 754 576 812 576 576 576 576 576", " 576 566 857 621 1635 576 576 576 21 699 576 1977", " 1846 371 219 576 576 576 576 1453 1997 576 648", " 576 260 1982 1903 663 576 576 1229 576 576 1444", " 576 1380 576 576 576 1225 576 576 576 1017 576", " 1144 703 576 1749 576 576 1201 717 1824 576 576", " 576 762 576 1584 1422 1780 1995 1146 576 1485", " 933 1458 576 576 714 576 883 1412 576 1121 576", " 576 576 576 576 576 576 1097 555 138 297 576 1824", " 576 576 576 1387 576 576 576 576 576 576 576 576", " 576 225 780 5 576 576 576 576 1742 166 576 576", " 598 496 576 576 576 576 158 576 576 576 576 576", " 1976 576 840 576 576 535 576 576 603 799 934 368", " 1334 157 1591 248 576 576 576 322 576 1159 1642", " 687 576 576 1450 1952 576 576 576 576 576 203", " 576 576 576 576 246 576 638 576 576 1051 1349", " 576 562 576 153 836 576 1232 576 576 1864 1095", " 102 576 576 424 576 576 576 576 856 804 576 882", " 576 576 342 576 982 1459 1874 576 576 576 534", " 815 576 576 233 576 1824 576 1240 898 1687 576", " 576 576 364 958 1542 327 1413 492 425 732 576", " 1147 576 209 576 414 1136 1971 576 1739 576 576", " 576 576 15 576 576 937 576 576 1577 839 576 1978", " 218 1631 1818 1726 576 576 829 576 576 576 398", " 576 1101 576 576 576 804 1649 451 1371 1933 576", " 576 1696 1466 576 461 1892 16 1464 576 1527 36", " 342 576 338 576 1273 1019 576 474 576 576 576"};
    vector<string> part4 = {" 196 1215 1084 328 359 840 576 1080 576 576 1752", " 576 576 1774 1542 842 576 1875 1537 576 576 576", " 576 576 576 440 891 541 576 98 918 576 576 576", " 608 322 221 17 576 1407 701 1827 579 797 1864", " 1076 576 576 718 756 1396 576 576 962 919 829", " 215 576 576 576 576 1416 989 1335 287 576 576", " 576 576 550 576 576 576 576 1074 131 1713 679", " 1582 576 576 175 1293 1236 1713 576 1780 576 1021", " 576 576 1389 1920 1812 576 576 822 791 576 576", " 863 576 576 1498 576 576 117 619 576 576 576 576", " 576 35 576 576 711 576 621 1358 1253 1666 576", " 576 576 576 726 1167 576 465 278 1332 537 748", " 576 91 1183 576 576 576 996 576 1470 1841 1690", " 26 1633 1255 1283 1520 576 576 336 576 30 576", " 1448 576 722 576 576 842 1860 576 370 798 1346", " 576 624 1009 576 1538 576 564 1319 780 887 1559", " 576 1984 1396 126 1368 576 576 576 576 1692 576", " 1846 1233 576 576 576 576 316 1517 576 1833 576", " 1047 215 1418 576 576 576 576 576 576 76 1877", " 1540 576 1943 761 456 576 576 576 576 1588 576", " 576 576 576 523 1270 576 1906 668 1333 576 576", " 869 576 1002 1799 576 576 1600 162 1948 576 576", " 576 734 508 576 1579 1164 262 1173 133 1083 576", " 730 560 576 576 576 1047 576 576 163 647 576 334", " 1986 576 711 576 576 576 1123 1916 864 576 576", " 510 1146 576 576 1006 576 133 576 720 315 407", " 1794 576 576 365 576 1084 1749 576 576 576 1619", " 1139 576 1302 576 576 576 177 1794 576 1192 565", " 576 171 576 576"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1997;
    if(result == expected) {
        cout << "Test Case 77: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 77: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test78() {
    int numSheep = 2000;
    int maxRuns = 1500;
    vector<string> part1 = {"897 897 444 351 897 897 897 897 1689 897 1922 897", " 623 1762 107 897 897 897 312 232 897 897 897 897", " 449 1991 1292 897 897 2 1621 1375 897 1904 545", " 1075 1828 897 897 897 897 897 1288 1904 1254 897", " 897 25 897 529 897 1926 897 1658 897 897 438 897", " 195 769 430 897 897 768 1518 627 335 1062 897", " 1252 897 897 1469 897 897 897 897 897 1959 897", " 633 411 551 897 897 897 1573 974 897 1484 39 1207", " 72 897 662 1592 1850 897 897 95 897 897 314 897", " 897 859 669 897 511 1634 1586 1170 242 1550 1390", " 1458 897 1579 1456 897 897 288 569 78 897 381", " 897 897 897 897 1493 637 897 897 757 897 395 417", " 897 897 897 256 897 897 1384 1165 1523 201 897", " 897 861 167 894 1058 897 897 897 528 1642 897", " 897 591 897 633 771 897 897 568 715 1837 1522", " 848 256 1800 897 1088 897 897 897 1299 1072 897", " 897 897 97 1669 897 946 897 897 1777 82 897 897", " 897 505 1530 1744 897 897 897 897 1065 897 897", " 897 897 1676 897 897 897 1450 897 1783 897 84", " 119 354 777 287 897 1867 897 872 575 897 897 897", " 897 1349 897 820 1164 897 897 897 946 885 834", " 1635 173 1675 317 897 897 897 897 776 255 897", " 897 1660 928 897 897 897 1545 241 897 897 1979", " 897 897 1902 1928 897 501 897 897 897 897 897", " 897 1836 852 897 1064 1586 1336 1897 1266 1828", " 897 1286 897 850 897 897 1683 113 1322 897 897", " 1471 897 897 735 1198 338 897 1930 897 897 683", " 897 897 1892 239 891 897 897 1945 309 1635 1045", " 897 897 1139 1224 1647 897 897 897 897 1909 1202", " 1023 897 1252 1275 1333 897 494 897 897 1582 897", " 897 897 897 897 897 897 675 897 897 897 76 897", " 1810 897 897 858 897 897 709 897 1243 1034 897", " 897 897 1561 897 1318 897 1852 897 305 1942 897", " 897 897 897 207 897 897 1130 1189 675 897 897", " 555 1757 897 475 897 900 897 897 1014 557 897", " 897 1892 354 830 161 897 1491 1471 897 897 897", " 897 897 990 1868 1526 897 1135 331 897 897 897", " 163 455 1123 897 1887 897 897 935 227 96 897 1395", " 897 897 826 897 897 1871 1551 897 746 897 310", " 897 838 1233 897 897 897 633 897 897 203 897 854", " 245 885 661 1176 897 897 1990 1341 547 287 897", " 897 817 897 897 1977 57 1125 897 585 250 499 897", " 897 1633 835 897 1498 661 583 897 897 897 897", " 897 897 303 897 897 676 897 897 55 897 1798 897", " 1339 897 1799 1752 897 897 897 897 1040 1151 897", " 897 1950 158 895 1805 897 794 897 897 897 1996", " 897 142 1416 897 897 1299 897 897 897 897 897", " 1041 897 897 396 897 1315 607 897 381 897 226", " 897 897 897 926 1113 897 687 897 444 427 742 897", " 897 1507 1299 897 1892 897 897 897 897 1452 636"};
    vector<string> part2 = {" 897 513 897 1422 897 897 16 284 897 897 70 897", " 1227 897 741 897 897 1935 897 1464 1241 625 897", " 897 897 897 822 1134 562 1635 897 897 897 436", " 254 897 897 59 897 897 1079 897 1425 1800 897", " 522 897 497 776 835 1188 897 897 897 561 897 891", " 350 897 897 897 897 897 1436 897 1252 897 1193", " 897 897 448 256 897 897 897 157 897 950 1693 897", " 1730 897 588 897 897 897 897 1424 836 897 1002", " 1347 672 897 897 897 1369 897 897 897 671 897", " 897 897 897 1630 897 897 897 922 664 1204 1692", " 408 897 1773 897 893 478 897 897 280 897 889 897", " 545 1622 1726 381 897 897 897 897 770 897 1580", " 897 571 897 897 897 1084 897 821 1971 1825 897", " 1118 897 897 897 707 897 74 1425 615 1246 897", " 897 385 897 897 897 144 897 1776 254 897 1664", " 1320 897 103 897 897 1010 897 897 1774 298 897", " 1737 897 1713 194 897 285 897 1636 897 1431 897", " 11 1391 897 897 1886 1523 897 345 897 940 897", " 897 897 309 897 164 401 583 1040 1513 897 897", " 1854 897 661 897 897 94 897 992 897 897 118 897", " 897 897 897 897 485 897 897 307 954 897 319 897", " 455 897 897 897 1992 1736 897 1346 916 897 805", " 438 897 897 897 897 997 460 897 736 897 897 897", " 512 298 1409 897 1929 1321 897 897 897 897 897", " 897 837 476 897 897 1753 897 897 150 897 897 897", " 897 897 897 897 897 897 897 1927 1435 563 1903", " 897 839 1624 1449 897 253 897 330 262 1119 897", " 897 897 897 897 432 897 1869 225 333 588 1082", " 741 897 1602 418 897 799 1143 897 1096 1036 897", " 897 1562 897 1052 897 897 203 1652 897 897 897", " 897 1841 897 1296 897 359 364 1818 897 1658 897", " 1427 897 497 486 897 1232 1944 897 367 1831 897", " 683 763 897 897 875 897 897 897 770 11 1445 419", " 1510 1239 392 1722 897 897 226 1656 294 658 897", " 897 286 897 609 897 996 22 897 897 873 1910 1425", " 897 897 897 186 897 897 424 897 1210 897 897 48", " 897 1162 897 625 897 897 897 1928 549 897 878", " 1132 897 897 897 897 1505 655 897 1689 1287 1653", " 419 897 897 897 897 1104 897 585 1423 897 1189", " 1842 85 897 897 744 885 179 897 181 142 897 897", " 897 80 897 897 1656 1330 897 897 440 93 897 1194", " 803 897 897 877 91 897 897 543 897 897 1952 34", " 897 418 897 897 1478 1222 748 512 993 1341 897", " 65 1308 492 722 1894 897 897 897 1984 897 1729", " 897 1609 897 1905 897 897 897 897 897 897 252", " 897 897 246 897 1425 1314 897 596 897 72 897 512", " 897 897 897 1395 1684 140 1467 758 1351 751 1823", " 778 897 482 1968 897 904 553 897 897 897 897 897", " 897 897 1283 897 897 897 1467 1870 897 777 1096", " 1595 1014 897 897 1170 897 897 897 897 948 897"};
    vector<string> part3 = {" 972 897 897 952 1239 692 897 897 897 1761 897", " 897 897 897 1923 1220 1576 1584 897 897 1928 547", " 897 897 576 897 897 897 282 897 897 946 825 174", " 1018 897 897 1247 961 951 897 1482 897 834 897", " 1642 897 897 1601 990 936 897 897 838 1839 473", " 1783 1627 115 897 897 1281 897 717 897 1169 897", " 897 920 897 112 897 897 897 1420 1333 897 584", " 897 897 897 44 686 897 897 492 897 1794 897 897", " 897 189 1777 897 897 691 897 897 897 1448 230", " 1168 810 99 897 897 314 1901 1017 897 897 897", " 897 897 897 897 897 897 1132 897 897 897 1515", " 511 1797 1195 805 897 1370 897 897 897 897 1592", " 1048 897 897 184 897 897 897 104 897 202 897 897", " 897 897 897 897 897 897 897 897 1737 897 897 897", " 185 897 1103 897 897 897 897 1706 897 210 53 897", " 1940 897 897 1634 897 897 954 897 897 1562 897", " 897 1014 342 528 897 123 897 1090 1980 897 1331", " 897 1402 1515 1311 510 1240 897 897 897 1976 897", " 897 1704 897 784 402 897 897 1995 32 1525 1552", " 897 897 1516 1924 897 897 897 35 240 897 897 897", " 897 919 37 1641 897 1643 897 1694 1322 897 643", " 975 1430 897 897 238 1396 764 923 1856 70 1080", " 897 897 897 108 897 555 897 897 897 897 1822 897", " 1853 897 897 598 700 897 897 897 897 897 735 1522", " 897 897 897 897 897 897 897 897 1609 868 1394", " 897 897 897 897 897 897 897 897 897 897 897 897", " 758 720 897 197 296 897 971 897 897 1950 897 897", " 67 1056 1059 897 897 1353 897 897 910 1762 850", " 897 1465 897 897 740 897 897 897 1863 1102 648", " 897 1904 897 1556 1459 1497 897 897 897 897 897", " 651 590 897 374 33 1750 92 1510 897 1652 13 90", " 1760 897 182 1978 549 897 265 897 1191 1920 444", " 897 1169 1298 1554 897 351 860 897 671 1552 897", " 897 263 897 1822 89 897 1881 897 738 897 897 1913", " 1895 897 897 192 897 1837 897 897 897 897 413", " 1591 897 897 348 897 1974 897 897 1115 897 457", " 897 897 897 897 921 897 479 897 897 897 310 924", " 897 897 1925 1329 359 897 623 897 831 515 897", " 897 897 1092 1148 322 929 897 1178 315 1594 1076", " 897 1576 897 897 809 897 1340 897 1758 324 463", " 897 338 897 807 897 897 897 897 897 897 897 897", " 424 897 1640 897 1885 1446 1719 897 855 1020 897", " 229 897 897 897 897 897 897 897 1962 897 897 897", " 897 916 897 1354 897 897 1003 121 897 1001 1318", " 897 1823 443 1360 856 162 605 897 1005 897 897", " 1969 897 897 897 1898 541 897 897 126 897 1815", " 897 677 707 897 897 9 897 1397 897 897 954 897", " 159 897 897 1515 897 499 1466 897 897 1022 897", " 1652 897 591 897 798 897 10 897 897 897 355 897", " 1591 897 897 897 103 1894 897 897 787 64 897 1629"};
    vector<string> part4 = {" 897 995 967 265 1968 1404 897 1246 897 897 1535", " 1145 60 1438 897 897 897 897 1662 897 897 897", " 897 897 897 897 1933 897 897 176 897 1500 1760", " 897 897 1899 486 897 897 897 1487 897 1540 1186", " 897 897 941 1863 897 897 958 897 897 897 897 1992", " 1224 897 201 118 897 402 1244 792 897 1907 1914", " 1476 897 385 1138 897 1504 897 897 1953 897 897", " 897 897 897 897 897 897 1693 1823 897 897 897", " 1783 969 1062 897 897 897 179 897 897 897 897", " 775 417 745 14 897 734 897 897 282 1100 504 897", " 897 406 359 897 459 1994 897 897 1637 897 897", " 871 897 897 347 897 1630 456 1340 897 897 67 1910", " 897 897 897 897 897 854 897 897 996 638 398 438", " 897 897 897 530 897 1712 16 897 897 897 897 897", " 352 897 790 834 897 897 1851 1826 897 1492 715", " 1484 897 1636 716 102 897 897 897 897 897 1658", " 897 897 897 897 151 897 897 897 897 141 897 1389", " 305 234 897 1847 897 320 1138 897 550 1228 1052", " 1923 949 1355 1294 897 795 897 897 897 897 333", " 890 897 991 1988 1235 897 897 1518 897 897 799", " 897 897 897 897 875 897 1976 1251 897 1212 897", " 1162 897 897 50 1467 897 897 1839 119 897 897", " 1241 897 1063 1279 897 1990 897 1369 878 1669", " 1341 1128 1622 897 897 1159 1749 1386 897 1177", " 1710 1314 897 52 1272 897 458 1138 897 897 590", " 1669 897 128 897 1962 229 1816 897 897 861 897", " 476 161 1811 897 731 1928 462 897 897 861 897", " 1963 897"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1996;
    if(result == expected) {
        cout << "Test Case 78: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 78: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test79() {
    int numSheep = 2000;
    int maxRuns = 1500;
    vector<string> part1 = {"1057 1870 1356 1057 1057 1057 1057 1045 1057 1142", " 1911 1057 1057 781 1762 1579 1601 793 1057 1442", " 1057 1057 75 1057 144 852 1575 509 1057 121 1057", " 1057 1057 1057 1057 1002 1004 987 849 641 1668", " 189 1560 1945 1057 1057 1396 103 412 1057 1057", " 368 1385 1057 1057 200 1057 1745 1057 1481 640", " 990 1057 1057 1057 1746 1057 1057 1466 796 255", " 1057 624 1057 1057 959 1057 923 1633 1702 1005", " 874 1335 638 347 1057 465 555 1181 1057 329 821", " 1057 1057 1691 112 1057 1057 1594 1906 1057 7", " 1057 819 1057 1797 1057 927 1057 1057 1057 1057", " 1413 1057 1057 1057 456 815 1950 1057 1721 763", " 1057 767 1057 189 1429 1057 982 433 1753 996 1057", " 1839 1057 1687 1672 1057 53 1963 1360 428 1519", " 1012 1057 1529 1057 463 1057 1057 1057 375 1057", " 1057 911 1460 1057 787 1057 1191 1057 344 1057", " 1087 1057 1057 1887 1057 1124 1057 1057 1057 1057", " 1223 544 699 75 1685 1057 949 1057 1057 205 432", " 1057 1057 1057 1146 1057 1057 1527 296 1057 1057", " 344 1932 1577 890 379 84 645 372 898 543 1057", " 1057 680 1389 1028 289 1057 1057 1057 1057 1057", " 1057 1057 1057 1057 1057 1057 894 156 1057 1057", " 1057 1813 672 711 1057 1057 1057 1018 1057 1057", " 1556 1457 1824 1057 1057 1057 1057 229 1144 1768", " 1057 1057 1057 731 1762 1057 684 1057 1050 1057", " 1328 1057 1403 1057 1057 1897 1057 1262 1114 1057", " 1634 1057 1057 1057 1057 1057 1380 1635 855 1057", " 1057 38 1057 1057 1990 1057 581 1057 549 359 1057", " 1605 382 1057 440 1057 1458 1057 1057 1051 1540", " 1149 766 1057 1057 1057 1057 667 1057 535 1057", " 1057 1057 1219 919 1057 1057 507 1057 222 1176", " 1518 1057 795 1734 1443 1760 1057 973 1057 1057", " 215 1300 655 627 1057 1057 1057 152 1271 1057", " 1057 1057 283 1963 491 1057 1057 1057 1057 1057", " 1057 1057 1057 1057 1057 1057 1057 1057 1057 1057", " 1058 41 1832 1057 1057 1057 127 1376 1057 1057", " 50 1057 1057 1623 316 82 1057 1057 928 743 1057", " 1057 37 222 257 1057 1057 1057 657 1057 1496 459", " 1057 684 1057 1613 1507 1057 1057 1994 1057 1057", " 1057 791 164 1057 1330 864 1001 1781 921 142 468", " 580 1872 1057 1057 1057 1057 1472 1057 1057 1057", " 1057 1445 1057 1357 1057 93 688 1057 1057 642", " 1107 1057 1242 239 1057 1057 1057 1057 1523 874", " 1057 1057 1057 311 708 1057 1057 1586 1057 1057", " 1057 405 1057 1553 1755 749 1057 1161 1057 1057", " 1057 355 1567 1057 1763 1057 1294 1573 792 264", " 1510 1057 1057 962 1057 1940 1057 1057 1057 1057", " 1314 1651 894 366 1918 542 635 1986 1057 1057", " 696 1057 1057 1565 1057 1057 199 14 1057 1752", " 739 1544 1057 1057 1057 1297 444 1868 1972 1513"};
    vector<string> part2 = {" 645 1057 1057 1263 1057 11 1057 1432 1096 1057", " 1057 1080 1000 1084 722 1057 1057 1057 1057 350", " 1057 479 678 1057 1057 1598 1057 1057 1057 1057", " 1057 85 471 904 1057 1057 993 729 1057 1057 1369", " 1057 1057 1057 1891 1074 609 1057 1082 1057 1552", " 1057 1478 1041 1217 489 803 1057 1153 216 1057", " 523 1057 62 1976 1057 818 174 1357 323 1057 1758", " 1057 1057 1550 677 1011 1057 1636 131 1057 2 119", " 1057 1057 672 1057 1057 17 1057 1057 1675 1057", " 1476 318 1057 911 1057 1831 1057 149 1057 1057", " 1958 1057 1057 669 1057 969 383 962 643 578 1997", " 1458 1057 1325 1057 489 1057 1057 77 209 1057", " 1057 1057 1292 1057 943 1057 693 396 1057 1057", " 150 681 305 1057 745 1057 1933 1057 1335 1057", " 1057 712 1057 1781 694 1057 1057 1232 1906 1057", " 1057 1057 1057 579 289 1553 1057 304 44 436 1057", " 1057 1057 1882 542 1057 571 754 1406 1057 1970", " 1057 737 1124 592 1057 1057 1925 1057 1057 1057", " 533 1057 1057 1057 520 1057 1057 1424 846 993", " 1057 1057 1871 1057 1057 1057 1799 1057 269 65", " 1057 972 1057 1057 1190 1057 1057 1057 776 1057", " 1057 1828 1057 1057 1057 1057 1377 1057 687 1057", " 569 1808 1324 1955 1986 1057 1057 502 693 629", " 1631 701 1057 1670 285 1057 1057 1057 1057 1057", " 1057 1057 1057 1215 1410 1057 766 800 1057 306", " 1627 1057 1057 1057 944 1394 1057 1229 1057 1431", " 1057 1057 1057 439 1057 1101 1057 1057 1813 1057", " 1310 1316 1057 256 1057 896 1057 1777 1057 176", " 1057 1057 1057 1057 1389 542 1176 1245 1840 1057", " 1057 1057 1057 612 1057 1070 1057 1057 519 1057", " 1057 1057 507 1057 1057 266 1057 1791 1057 1057", " 232 1473 1057 1057 1849 1057 1057 1195 1057 1057", " 1057 1509 1057 1057 1094 1057 1057 1057 1057 1063", " 861 1057 1057 1880 1722 1057 1872 1057 1057 1057", " 559 1062 1459 1057 1057 1057 1111 1057 1966 1057", " 965 1057 1864 1386 1057 381 83 1958 455 253 1057", " 1057 1057 1057 1840 1057 1057 818 1057 198 1057", " 1861 1526 1057 1057 1502 1057 648 1057 799 930", " 321 1057 1880 1057 1599 1859 1835 37 496 1057", " 1057 1057 1773 1057 81 1057 1057 1073 580 101", " 1057 1057 1057 1057 1057 1057 1057 1057 1072 1057", " 1057 1057 841 1057 1057 1057 1057 1057 97 330", " 818 60 1740 1080 1868 1057 1181 1289 1057 1304", " 1132 368 1057 1057 1057 376 1057 1078 1057 1057", " 1862 363 1057 1057 1057 1274 1057 1057 1057 108", " 1057 1278 1057 1057 468 1057 126 111 179 1057", " 84 997 1623 1057 1079 1057 1057 1057 1057 1057", " 1797 1695 889 247 1057 1057 1623 1173 1057 1057", " 1057 437 1057 900 1057 1057 1092 1057 1057 1057", " 88 1819 791 1034 1215 935 1792 1057 124 1055 1357"};
    vector<string> part3 = {" 1155 1298 1057 360 352 1237 247 97 1748 1454 1057", " 1271 1285 1057 1857 1057 1057 1057 1887 591 1057", " 569 1057 497 1057 945 1136 1057 1408 1464 1057", " 1057 1057 1057 1057 1918 1728 1057 1852 1057 1057", " 1057 866 1886 201 1057 1057 1436 201 1057 1057", " 1057 1057 1057 1057 885 1057 825 444 1057 1594", " 1057 785 1057 1057 1057 113 1442 1057 1750 1057", " 298 1057 1057 943 1057 1057 1057 1705 1057 939", " 305 1057 1057 1057 1057 326 1057 1057 1057 1343", " 1057 1230 1057 490 1057 1935 1057 1057 578 1057", " 1483 1112 1057 1156 1057 1057 1349 1057 1057 1080", " 1828 1057 1054 1057 1057 1177 1057 1057 1317 1057", " 272 1730 1057 1057 1057 934 672 1890 1057 1057", " 510 1057 19 1583 1057 1057 443 322 564 1057 526", " 1057 1692 1057 1986 1057 1077 1432 1657 1057 1057", " 1057 1057 1057 354 1057 674 15 821 1057 1057 1057", " 983 1057 216 1057 188 1057 52 1057 651 642 1057", " 1057 1057 1057 1691 263 1085 1030 1057 1057 897", " 1057 1222 1422 1139 1057 1057 1057 778 1057 1809", " 1057 1057 1057 1057 1432 440 1057 623 1973 1057", " 1057 1057 1057 1111 1057 1912 1057 911 1264 1057", " 514 1219 176 1611 1330 102 1189 1057 1075 1057", " 1057 845 1005 1057 619 1930 984 1057 121 1805", " 1057 1043 1057 567 1057 1544 1379 1407 1834 1946", " 1057 227 752 1057 76 1057 829 1057 1057 1057 1057", " 1057 1679 169 1057 1057 1057 1057 1057 1057 1057", " 303 1057 1057 76 1057 1771 83 1565 1605 1057 1057", " 1542 895 238 1410 1477 1220 1057 640 1117 85 1057", " 1456 1818 1057 1057 917 14 43 912 933 197 1057", " 1057 1057 582 1057 465 284 1343 835 1459 690 228", " 1020 1839 1057 1057 1057 695 1057 1057 1311 807", " 1057 1057 1057 573 1057 1057 1057 523 1057 1756", " 1165 1057 590 1057 1057 1057 462 1057 411 810", " 1461 289 1057 1057 523 1720 1057 1872 1790 1057", " 1631 1057 1057 1057 1656 1320 801 267 30 822 1057", " 1057 1057 1057 1057 1057 1057 1057 1361 1777 1057", " 1057 1057 297 1057 1057 1728 1057 864 1057 1588", " 642 1057 1057 1057 1057 944 1057 1175 1057 1057", " 1057 191 1627 1057 265 1057 915 1057 1057 1421", " 1057 1057 1057 1057 549 1057 1187 1057 1057 1057", " 1057 1057 389 712 1057 1057 1586 1363 1057 1612", " 1057 1396 1057 1057 453 1057 1057 1057 1057 1057", " 1057 1057 1879 1057 1709 1057 1057 1057 1831 1336", " 607 1057 275 1640 1057 1057 406 704 1815 578 1057", " 1057 716 1057 1755 1057 1057 1368 1057 1189 1057", " 120 1143 1057 1057 1057 1057 260 1147 455 1057", " 428 1057 1057 1470 1971 1356 548 952 1057 1392", " 710 791 1057 1013 1057 1057 1627 130 898 1304", " 1057 1057 1563 1057 1057 1057 1057 380 1341 1701", " 590 1057 1057 1238 1057 1057 15 1057 166 315 1057"};
    vector<string> part4 = {" 1967 422 1057 1151 711 1609 857 266 1514 1618", " 1057 1057 1041 533 1456 1057 1993 779 952 1057", " 1057 183 1057 1057 127 1153 1855 564 1057 1057", " 926 1120 1606 471 366 811 494 1057 289 1057 1057", " 1057 450 1057 1057 1057 540 1057 1057 1057 1057", " 641 1057 1132 1057 1057 1057 1256 395 1057 692", " 1057 909 1057 1057 1773 1271 1057 176 1057 1209", " 277 881 1057 119 1181 2000 231 1057 1057 1366", " 1057 1057 1057 1057 1118 1057 191 412 1057 1079", " 1057 1057 1623 459 1057 1243 93 1057 1483 1367", " 1324 1667 1057 1057 807 1057 677 333 1250 1057", " 1489 1093 1265 1675 1057 874 1015 556 1057 1057", " 1057 1057 487 1057 1428 607 454 1057 1772 1057", " 27 1250 1057 1057 1057 1057 1057 529 255 6 1057", " 1057 1994 1057 1552 1057 1647 1837 1057 194 1894", " 1057 1057 1237 615 1057 1057 432 1057 1534 1057", " 1057 860 1057 647 1057 1731 1057 1057 1057 747", " 1903 395 1744 1057 1057 1057 689 517 1057 1057", " 252 1057 1338 826 1057 1057 370 1949 1057 1057", " 640 1443 989 1034 1837 1057 967 1057 701 1617", " 644 1057 1057 171 408 1057 1704 1057 1057 1574", " 1057 838 1349 1057 1057 1299 506 321 410 1057", " 1057 1057 1226 1046 1160 1057 1057 1057 1057 1442", " 1057 1057 1057 1057 1057 1057 1057 1057 1057 1519", " 1057 82 1057 1057 1882 881 1057 1057 1057 1057", " 1057 1057 1057 1057 1057 1123 1057 248 1057 1057", " 1057 996 1057 693 1057 1025 1057 1712 1057 1402", " 1057 1570 1057 1892 1057 646 1126 152 418 1071", " 1057 1036 1344 987 1057 1411 368 1057 1057 1057", " 202 547 1057 1585 1057 1057 675 1057 1057 1057", " 1057 995 1057 1881 506 1738 858 1057 170 485 1057", " 1057 808 1057 1193 1057 1983 1057 1057 1057 1057", " 1057 1530 1057 1976 955 1057 1057 1893 1057 1557", " 655 1950 1057 1806 1810 1057 1779 1057 267 1386", " 1057 1057 1057 1215 1394 1947 563 1057 103 1057", " 1999 1057 524 1036 951 1057 1057 1243 1700 1057", " 1057 1057 1302 1057 1358 399 1057 1709 1057 360", " 197 983 1057 1057 1057 69 1057 1057 1057 1199", " 1057 1057 1057 1057 1057 1057 1057 1057 82 1469", " 1057 1270 1057 248 1057 1652 1701 786 1057 1421", " 1549 1057 1057 1057 681 1027 1057 1057 1057 1042", " 1507 1057 292 1057 1057 266 1057 1057 1666 656", " 1057 1057 1057 1057 1057 1057 1057 1948 1057 1712", " 55 1057 1057 102 1452 1137 1057 1057 1889 1057", " 568 1057 1057 1057 1057 1667 1704 1057 1238 1057", " 1057 1057 1057 1057 1057 1057 1057 1057 1057 1057", " 1057 1057 1344 183 1057 642 326 1057 1057"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2017;
    if(result == expected) {
        cout << "Test Case 79: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 79: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test80() {
    int numSheep = 2000;
    int maxRuns = 1500;
    vector<string> part1 = {"1157 1157 1157 1157 1157 73 1157 779 1157 1157", " 1157 898 1462 1846 1157 1157 1157 1157 1740 1157", " 389 989 877 1393 1157 1157 37 1157 1665 1157 939", " 1157 1778 1157 1157 1157 1157 806 1157 1157 1623", " 1922 1760 1157 855 1157 1157 624 995 1157 1782", " 1157 1120 1717 1123 862 1626 1092 1157 1104 1157", " 1157 1157 891 244 1157 800 661 1639 1157 1157", " 1752 1157 1157 730 1157 1541 34 1157 797 478 1157", " 1400 1202 1084 1157 1157 1157 35 1157 1157 1157", " 1157 1157 658 1157 339 1157 306 1157 1157 1157", " 1157 776 1157 36 1157 1018 1157 1157 771 914 203", " 140 1157 1157 1157 1157 320 1211 140 1157 1124", " 354 907 1129 1157 1157 1157 1723 1157 1157 112", " 1157 1157 1157 441 1765 1157 1157 1830 1157 955", " 310 365 1157 1157 1157 984 1157 506 1157 767 815", " 1707 1157 1599 769 1157 1157 1157 240 1802 1157", " 1157 1157 962 801 580 1099 675 1654 170 79 704", " 1157 1157 365 333 1157 213 1157 1354 1157 1157", " 550 1499 1197 1157 1157 1157 1157 1157 711 566", " 1157 902 1989 980 1157 1157 135 666 1157 1265", " 1157 1157 1192 1157 1157 865 1157 1869 1676 1157", " 1157 1157 1157 855 1157 1157 255 949 1157 1985", " 1298 1160 1157 426 1157 1157 916 1157 1571 1881", " 1628 1157 1157 553 1157 1157 1352 1560 1157 1157", " 1157 1570 1151 1987 1321 1157 1800 1157 1963 1832", " 1157 1827 1157 1157 1157 1157 717 804 1157 1557", " 1157 1560 1352 1157 1157 1355 1157 1157 1157 1157", " 1157 676 1157 1910 1157 1812 1157 1157 1157 155", " 1157 1157 1157 1745 514 22 1275 1910 1157 1157", " 1282 1157 1978 1157 1509 1130 1157 1096 1157 1157", " 330 1866 1157 1157 1157 92 1157 1157 1957 1157", " 1214 1157 1157 1882 441 275 1157 1416 234 1526", " 1133 1157 1157 1229 540 314 725 1660 1157 1157", " 1157 1157 953 1157 1499 465 1914 1157 1157 609", " 1157 1157 1691 582 419 1157 1157 1157 1157 304", " 1157 1116 1157 1458 1157 1384 1080 1157 1764 1157", " 1157 823 1952 1157 1791 1157 1363 1327 1501 1031", " 1157 1157 1141 1157 1157 525 1157 1157 1157 1157", " 1157 37 1157 1157 1157 1157 1455 1157 1157 1157", " 1157 1157 1891 1157 183 1157 1090 1401 1506 1157", " 388 1157 1740 1157 574 949 1157 1157 1157 1157", " 1157 1157 1082 1157 1157 525 1173 1157 705 1334", " 1530 38 1270 1429 1100 742 1059 633 1157 1157", " 1157 1157 950 1157 1157 1761 1157 1151 733 1157", " 1157 821 61 1114 1157 1157 282 1157 1157 1813", " 1157 1157 1157 955 1157 1157 1382 830 583 1157", " 1157 1112 481 725 655 1966 16 1157 1157 1228 1157", " 1157 1271 1157 1807 1359 1157 1494 1157 898 1157", " 1157 1157 880 1645 111 62 1157 1169 1157 338 1157", " 1157 1416 1748 1157 1118 1637 1329 1157 1157 1157"};
    vector<string> part2 = {" 188 1157 1157 362 1157 858 1384 1157 1053 1157", " 1065 442 1157 1157 1157 1209 1157 1157 1157 346", " 1157 80 1452 445 1157 1863 1000 854 1540 933 1157", " 1108 164 1924 1562 1462 1552 1311 1111 355 1157", " 172 1157 1157 880 1772 1265 1157 1157 560 1659", " 1157 1157 1464 1157 1102 21 6 1157 480 960 1341", " 1157 1157 1157 1157 1826 386 1738 1157 1157 1157", " 1381 1157 211 1157 629 1157 1157 505 1519 1020", " 1157 567 1157 926 1157 1249 1517 794 440 1157", " 74 224 510 1157 1792 1157 815 111 190 1668 1033", " 1157 1157 1157 1157 1157 1157 1157 1157 1157 1157", " 139 1157 1607 363 480 1459 1157 736 519 1512 807", " 976 1157 1157 761 1157 1157 1578 3 1157 1157 505", " 1157 1157 181 785 628 1157 1157 1157 1157 1906", " 1157 1157 1908 1157 148 1408 1871 1157 138 730", " 1157 1157 394 481 1157 1157 1157 1157 1157 1157", " 1157 1157 1237 1157 1445 1157 1157 351 1936 1157", " 1157 1070 1157 1157 1340 1157 1157 468 1738 1157", " 1157 1531 1664 1241 1020 566 1157 1157 1157 1904", " 1157 1157 792 1728 1171 1157 595 1077 1157 1157", " 1192 1157 544 1942 673 1130 1953 1251 1157 104", " 1157 1161 1157 1157 1563 1157 1562 459 1157 1911", " 314 1157 1157 256 1157 1157 593 1840 491 514 1157", " 1612 1157 1157 1151 1157 927 1157 1216 585 1060", " 1157 629 1121 776 1157 877 1157 1157 1404 1157", " 1157 1157 1157 19 879 1157 223 1157 1163 1387", " 1157 592 1157 1157 1157 1549 1157 1157 1283 1858", " 757 1951 578 776 1185 387 1157 563 379 189 1157", " 1157 1157 1642 1304 1157 1157 1768 1157 535 1176", " 1157 1157 366 1157 1157 511 1157 1492 1157 1570", " 1157 1157 1157 1157 1811 874 1157 1157 1157 308", " 1007 1770 1152 1157 1157 1157 141 1157 1066 1063", " 398 1157 1157 1157 1157 32 1157 370 621 1046 1114", " 845 1157 1157 1651 1157 1157 687 1157 1757 1157", " 674 1157 1157 137 1157 1157 1157 1427 1157 1157", " 1157 1157 1157 1223 1157 1535 1157 1157 1157 1157", " 1157 1157 293 741 1790 1831 1839 120 1157 494", " 667 1157 1707 131 1157 1708 40 421 918 1157 1727", " 1157 1033 1157 1028 1157 1157 1714 1157 1927 1244", " 515 1157 12 1152 1157 1157 1157 1157 1157 190", " 643 1157 1874 1157 1157 1157 176 241 1157 1157", " 1720 1157 1157 1157 1157 1671 298 1814 1157 1084", " 1493 1157 1157 1157 1272 1157 1157 1851 855 1157", " 1157 5 1157 562 1157 571 1157 1157 1157 1157 7", " 1157 199 1157 1082 1157 1157 488 1788 1396 1157", " 1157 1131 1157 1157 770 147 1310 1953 1991 1157", " 1157 202 1718 1566 1157 1157 1001 342 1348 1157", " 1847 1157 1157 1157 1157 896 1649 1157 1157 1386", " 1157 1157 1157 1157 1157 589 1910 1157 1543 1383", " 658 60 1157 1489 1976 1157 1157 67 12 1157 1157"};
    vector<string> part3 = {" 380 1157 381 216 1304 1157 1157 1157 1790 1157", " 1157 1157 836 1157 1264 1909 1157 973 1348 988", " 1157 1157 1440 1157 1157 670 1157 1157 127 1157", " 1157 1157 1157 1157 1157 1157 1157 1157 1157 1901", " 1157 1157 772 1157 1726 1157 1157 1993 1157 432", " 1157 1135 1543 1157 1015 1157 1292 1054 1157 1157", " 225 1157 1943 1157 1157 1157 1157 1684 1157 1157", " 297 1950 1157 453 1157 350 1157 1430 1149 372", " 1116 1157 1157 1475 66 1157 1157 1157 33 175 1157", " 1157 1157 1157 1157 1157 224 1157 5 1157 1237", " 1157 592 1157 975 1357 1157 1555 1157 918 1157", " 748 1492 1097 64 1606 1644 964 1157 1157 1669", " 1157 179 1157 1708 533 1157 364 1894 1157 1157", " 1157 12 1157 1338 911 1157 1157 1696 1157 455", " 251 1157 1718 1535 1157 1157 1157 1157 1157 1383", " 1157 1549 1157 1157 1157 756 1157 1157 1157 1512", " 1157 1157 1157 890 1157 1393 1406 938 1259 1157", " 1157 1157 1157 1449 1486 1620 1157 1657 19 1157", " 1157 671 1865 1157 1512 1157 1157 85 1157 1611", " 1616 1157 1157 1157 1157 1157 1157 1678 1168 1157", " 1157 744 1747 1367 666 1157 1157 1157 1986 945", " 1157 1157 534 1157 180 1410 1157 1157 1841 1157", " 1157 1157 1157 1332 1157 891 1157 1157 291 270", " 844 1157 1171 1485 1157 1374 1157 204 455 1157", " 1728 1157 1157 1354 1926 548 512 1157 990 1157", " 1297 1157 1116 1590 1299 704 1157 27 1157 1335", " 1157 260 1157 1760 1984 58 1157 1157 1846 1032", " 1560 763 1210 1157 789 1157 1157 1736 1228 1157", " 845 1280 1157 1539 435 251 1488 175 668 1157 1157", " 1187 1157 463 748 1157 843 9 39 749 1157 1157", " 214 1157 1157 1157 1157 1157 585 132 595 670 1157", " 1157 1157 1157 182 1157 1244 519 290 1157 1157", " 1615 1157 1346 1157 1157 620 1157 1157 584 945", " 1201 186 1157 1208 1157 1157 1157 1621 1157 621", " 1157 1980 1157 1157 1157 454 1336 1157 272 1990", " 1157 1157 1157 562 1157 1157 771 1422 1157 1157", " 1189 783 1572 1157 1157 111 1157 16 1157 97 1566", " 427 1157 1157 464 1157 1157 316 1457 1157 1157", " 1157 1157 1157 1157 564 583 1157 911 1718 1157", " 115 1174 1157 385 1090 1157 98 42 501 623 1223", " 1157 1157 1157 1064 1157 1597 877 263 520 675", " 1157 1157 1157 1423 1157 199 1157 578 1157 1157", " 274 397 1157 179 1157 685 1947 1157 1993 966 1964", " 1157 1236 627 923 1757 1157 1157 1157 1157 1157", " 1157 1157 1157 1157 1157 266 1142 401 1157 1157", " 1157 1157 100 1157 1157 1157 937 1157 155 1157", " 84 1133 1157 1983 1157 1157 1157 1865 85 529 1157", " 1157 1157 1157 1157 335 1157 784 1157 1759 1494", " 1157 1157 1226 1157 279 628 1076 995 1157 710", " 242 285 670 1157 1157 1746 1157 143 1157 1157"};
    vector<string> part4 = {" 1157 1157 1157 1157 1157 1157 465 1157 1157 57", " 1157 1157 1157 1157 275 1157 1491 115 1157 402", " 1157 1157 1157 1157 648 223 669 516 345 1157 1157", " 422 1692 707 557 1157 29 1157 243 1460 1157 1063", " 145 1157 1157 721 170 1157 1157 693 1135 1291", " 216 1157 1009 1468 1708 1351 674 1782 1157 1157", " 468 1530 1273 1176 148 1157 72 950 1157 1550 1129", " 1157 1157 1697 1454 1093 1157 1800 215 1771 1157", " 1679 1157 1609 1551 662 1059 1157 1157 1157 1157", " 1562 707 1157 1157 1492 1652 1157 1242 834 1157", " 1157 1157 1157 1371 584 1313 1809 1157 1304 1157", " 1157 1157 1157 1157 1350 1157 678 1157 1157 1328", " 1157 1157 1157 1218 1157 454 1157 1157 1157 411", " 1162 1157 1070 1157 1951 1157 1157 342 1157 1721", " 1157 1157 386 1012 748 1157 304 1469 1157 1157", " 1206 1157 1157 610 1157 1297 1157 384 1066 129", " 866 1864 957 1157 1907 1194 1668 1157 1157 1157", " 1210 1562 580 1157 1157 1157 255 1732 1157 1157", " 1554 1157 1157 1157 1919 1442 1157 1157 1157 1157", " 1157 1157 1157 1003 1157 257 1157 1245 1157 1157", " 1119 654 76 1157 1157 1157 1157 570 1157 1157", " 1157 1739 1818 767 894 1324 183 1157 621 1157", " 234 178 1157 1157 1327 866 1157 1157 1157 1157", " 1157 41 1157 1165 1157 859 1652 1157 101 100 1766", " 616 1157 495 1157 1157 1183 1157 1157 764 738", " 1157 1157 1157 989 1157 1067 191 1076 1157 1870", " 1157 1157 160 965 47 284 1635 1157 1157 321 1558", " 697 1731 1199 1157 528 1213 1157 1817 1751 1260", " 1157 1157 1157 1969 1157 78 911 96 1162 1157 516", " 1157 1951 1157 910 1157 1001 1598 1856 1157 1157", " 1157 790 1157 1157 919 1157 1157 28 330 1157 1157", " 62 1470 1157 1793 1157 1956 756 233 1979 1114", " 610 342 1235 583 1839 1157 1157 741 1171 1157", " 930 1157 1718 1230 1957 1157 759 404 1157 1157", " 205 1157 429 1157 1157 1135 271 81 702 1157 1653", " 294 760 1157 215 1197 1381 1474 931 1157 1157", " 555 1500 342 1940 1972 1157 464 1157 1209 405", " 1157 645 54 139 1037 1157 1157 1157 907 311 1039", " 1306 1270 1622 1812 1157 1157 1995 1157 1157 1157", " 177 1604 1157 1157 1889 453 1157 1157 72 1079", " 1157 1157 1157 1157 1157 1157 974 1952 1426 212", " 886 1157 1065 1253 874 1157 1157 1157 1157 1157", " 514 1157 1664 1157 1475 1157 1157 1157 1157 1396", " 1528 957 1157 1087 1157 1313 1157 1157 1157 210", " 897 1990 1478 1157 1157 1157 868 1157 1157 1157", " 1157 1888 725 1157 1157 1142 1810 1157 595 1157", " 521 1262 1157 1157 1176"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1998;
    if(result == expected) {
        cout << "Test Case 80: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 80: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test81() {
    int numSheep = 2000;
    int maxRuns = 1500;
    vector<string> part1 = {"1337 1337 1337 1252 1337 612 1337 1391 1337 1940", " 1359 1871 1337 1531 1337 193 1337 713 463 1337", " 1337 1337 1337 1337 1337 421 478 1337 1404 1521", " 267 1337 1337 1337 1337 413 1337 1337 673 1337", " 771 1337 1337 1337 1337 1337 1337 1337 1337 1337", " 1337 1233 1337 1337 1337 1301 675 1337 1337 1337", " 1337 798 618 1337 1337 1337 1337 1337 1337 1337", " 1583 413 1172 1337 1493 1620 1337 1337 1337 1164", " 680 1337 1337 286 1337 1337 1337 1337 920 618", " 1496 1419 1407 1337 1337 1323 1337 1337 1242 1337", " 1337 1337 1337 1337 1337 1337 1880 1453 1337 1337", " 1337 1337 1337 40 1337 1955 1337 1337 1337 75", " 1337 1337 1337 1401 83 34 1629 1337 625 1337 924", " 1499 1208 1337 1863 1337 199 1975 245 1337 1337", " 1337 1337 343 553 1337 1123 1023 902 1337 1337", " 1337 12 1684 1337 1337 1105 1337 1337 1337 1337", " 1337 1337 1337 118 1337 1337 380 1832 48 110 1337", " 1337 645 642 1337 374 461 89 1337 1337 1438 989", " 1982 1337 1527 1337 1249 1280 716 1337 1337 1194", " 1337 1337 1337 1337 1159 1116 1337 1951 1337 996", " 656 1337 1263 865 1337 1337 1337 1189 1688 1337", " 906 1337 1337 1364 1337 1337 1337 1337 1337 1337", " 1323 973 1337 412 918 53 1777 183 1337 724 1337", " 818 1337 1337 1337 54 840 1337 1337 1337 1337", " 1337 753 1337 1722 331 1337 1337 416 1368 294", " 697 1337 1337 1274 1337 428 582 1337 1337 541", " 1337 1337 959 1947 153 1337 521 697 1337 1337", " 1075 46 148 181 221 1195 548 386 204 1879 1337", " 1433 1337 463 1337 1554 1992 911 1337 1337 1337", " 1337 1024 1337 1740 1337 1837 89 1337 1337 1337", " 1337 1337 1337 227 1892 1820 1337 1820 1337 1337", " 1337 644 1337 1337 1337 100 1365 1337 1337 1337", " 1400 1337 336 1337 1337 1187 929 1337 1337 849", " 1337 567 1046 1337 321 1707 392 1337 1011 1494", " 1337 1337 661 1337 1337 1337 952 478 1337 1903", " 1337 1337 1337 159 1337 426 1337 312 1337 58 1337", " 1027 34 1136 725 1337 123 1337 1337 77 1997 1256", " 1122 1747 1357 370 1778 1337 1337 353 1337 1337", " 1270 1937 910 1337 1337 955 1337 984 1331 1337", " 1337 1337 1854 1337 1513 1337 1337 1941 591 1399", " 1337 352 1977 1963 1337 1337 1337 800 1294 583", " 1759 1707 1295 1337 1337 843 1337 837 151 1337", " 794 1471 98 1337 1623 796 1337 1337 1337 1648", " 1337 574 1337 1293 1337 1337 1337 1337 1337 1337", " 1424 1337 1337 192 888 1337 1337 1337 1337 1177", " 1178 1337 96 291 1337 1337 1337 978 1337 1337", " 1337 1337 1337 1860 1337 1187 1337 1337 481 1337", " 1659 313 1337 1337 1556 1907 1337 662 200 1224", " 1337 1624 1908 1337 1337 1337 1337 1337 1337 1337", " 961 883 1455 345 1705 577 1337 1994 1337 1763"};
    vector<string> part2 = {" 421 1337 1356 1806 160 1337 808 430 833 1196 1337", " 1337 662 227 1109 1465 1782 738 1337 715 655 1337", " 1337 1337 1676 1337 1337 528 1337 445 1337 1337", " 1264 350 316 415 1337 1719 1244 873 1337 1767", " 1337 1337 1337 724 1337 1124 1337 1337 1337 1", " 833 1908 1337 1337 191 1337 1102 1337 1498 1337", " 862 1337 1337 771 1588 1337 363 1337 1337 1337", " 1337 1502 1990 1337 379 405 266 13 1810 1602 1337", " 1632 1337 769 1503 1337 1361 370 1337 269 120", " 1508 48 1587 264 1337 1337 1710 1337 1337 1337", " 1390 1337 1337 1337 1337 312 1826 81 1337 1337", " 1337 1337 1337 1337 1857 1337 1259 1948 1337 1337", " 1337 1337 1711 1337 1337 202 328 1347 1337 1589", " 1337 1337 568 621 1337 1337 1337 929 536 1337", " 1337 1337 1337 370 1257 1337 1337 1290 1337 1337", " 1963 1954 1683 1045 1329 1337 1557 1337 1337 1622", " 1146 702 1694 1337 1337 1337 1337 1337 1337 18", " 249 1199 1337 1801 523 106 1246 1337 1048 1337", " 1337 1337 1337 1175 308 696 1843 1337 1206 1337", " 1396 1413 750 354 1061 1337 1337 1456 1337 1635", " 1024 150 1337 1337 1337 95 1081 1337 1337 634", " 1337 1337 862 1337 1917 1337 809 1337 1337 1337", " 1337 1337 1725 1337 249 507 1337 1836 71 832 1337", " 314 1337 1543 1337 1891 37 1337 1337 1751 1337", " 1629 1337 1337 1337 1337 1337 1736 634 1567 1102", " 1906 7 1337 1337 1685 1294 1337 1337 1337 267", " 1337 1337 708 1800 1337 1337 1194 223 978 1337", " 156 133 1385 1337 681 1337 1337 1689 471 163 1337", " 269 1337 1337 1237 1319 1337 1337 179 1085 1554", " 1337 1337 1337 1426 1221 1337 1337 761 1447 1948", " 449 1023 1337 77 1816 1337 1337 1337 1337 1190", " 89 1337 1337 1337 225 456 1520 1512 713 1337 1337", " 1402 1337 1337 1337 1622 1271 1337 755 338 1337", " 232 512 1337 1337 1337 1337 1468 1337 1337 1337", " 86 1266 1337 1337 1337 1822 1337 118 1337 1337", " 1337 1337 1337 514 1206 1337 1281 1337 1759 403", " 1337 1561 1814 1337 1628 322 997 1337 1337 495", " 1337 1109 1337 1337 455 168 287 194 1486 1337", " 355 739 1142 1366 1371 974 1260 872 598 726 348", " 1412 1337 459 1460 1337 1337 1899 1337 1337 79", " 1333 1337 1337 1055 1337 1337 1337 1337 196 1337", " 358 1278 1337 748 1337 1394 917 1337 1337 1337", " 1716 1863 382 1337 1337 552 1337 1461 1337 1337", " 718 1337 1706 1337 226 1337 190 1611 1337 1219", " 1496 1133 1337 368 1637 514 1337 1337 1337 1337", " 1920 1337 47 1190 1560 1743 1972 1337 1116 417", " 1711 1337 1337 1337 1046 1337 1337 1337 960 1131", " 735 1337 1337 1304 558 1337 335 480 1861 608 1337", " 353 1337 696 1337 1337 1337 1337 785 187 1337", " 1337 1659 453 1868 1337 914 1337 1337 1337 1483"};
    vector<string> part3 = {" 1853 1337 284 757 1358 1337 1337 1337 1464 1337", " 1337 1277 1337 839 1337 672 1337 1337 49 1337", " 1337 1337 1337 1125 937 387 1162 1337 1337 1337", " 1829 1337 1756 1337 414 941 1900 1337 789 1337", " 369 1337 1337 543 1337 1919 1337 1337 135 1337", " 1337 1337 1337 1337 16 1337 538 1337 1337 1917", " 1337 752 1337 1337 1337 516 894 1337 1337 1337", " 1337 584 1979 1337 1337 120 643 1337 1978 1337", " 1337 86 1382 1337 1596 1393 1337 1337 1337 1337", " 1337 952 1337 977 1337 1337 1337 1868 1904 1337", " 824 1904 1957 1337 1222 200 9 40 1799 1337 1431", " 1337 1337 1257 1242 1337 1476 1337 1107 1072 1403", " 1337 1840 1337 1337 1805 1797 1793 1762 1126 1545", " 1337 1193 1337 1902 1337 617 472 1169 77 1337", " 1337 978 756 1337 1337 598 1097 1337 447 1176", " 1337 1337 989 1814 1337 653 1830 1795 1337 1977", " 1337 1238 1041 154 420 75 1106 1337 865 1337 1725", " 537 1337 1312 1337 1686 1424 1337 1737 1337 406", " 114 1337 1576 1337 1337 1337 1337 1337 1755 1348", " 1337 308 1337 1337 1337 1337 1130 1337 1337 290", " 368 488 1337 95 481 1208 1337 1337 1337 995 1337", " 1337 1934 620 1337 1337 1929 427 1337 996 1337", " 708 1337 712 1198 1337 1567 8 1337 1337 1337 505", " 1337 1337 1337 1975 1337 1337 1855 1337 1337 1337", " 1337 703 1951 1337 1337 1584 1337 1337 1698 975", " 1337 1337 1517 1110 1337 1337 444 1337 1337 1337", " 1337 860 1337 1072 1337 1175 1337 1157 1337 48", " 308 885 982 698 1576 1009 1337 1012 755 1337 1337", " 1337 350 137 1813 1205 1337 1337 911 207 1337", " 1817 1337 1813 1860 1337 1337 1337 1337 1214 1337", " 1337 1337 1337 1551 1375 1184 1337 1391 1337 1363", " 1321 1147 1674 1337 1337 690 1337 328 1337 1337", " 1405 835 1337 1337 1337 1337 1337 1337 1337 1337", " 1756 1337 1428 1467 1052 694 474 1337 614 150", " 1337 1187 1337 1337 1337 200 1369 1164 1027 1337", " 1337 1320 1865 278 1889 1337 1955 1337 1337 846", " 466 1967 1337 1170 1337 766 901 22 1337 800 1665", " 1937 833 1337 950 940 1445 807 1024 1337 1507", " 1337 1337 1337 1827 1337 1337 1481 1337 1337 928", " 1337 1193 1181 1337 1020 1337 1337 1514 1615 1313", " 1337 1337 1337 1337 236 1337 1337 1337 1972 1337", " 1337 1337 1337 1926 1242 1337 1006 987 571 1337", " 1257 1337 1901 1337 1337 1337 1337 748 1337 1337", " 1097 1337 1337 82 1306 1979 1337 1337 1337 1337", " 490 1337 1337 1129 1337 1262 1337 1246 1341 1550", " 636 710 1989 430 1005 1337 371 243 370 1337 1337", " 1337 1460 1337 1337 1337 1574 153 1439 1598 1337", " 1143 1337 284 976 899 1051 1337 1122 1337 1056", " 474 1337 1337 1337 1337 1337 1337 248 1337 1337", " 1337 1808 163 1759 499 1337 905 188 1337 773 877"};
    vector<string> part4 = {" 1937 1766 502 1337 1101 452 1337 1337 1486 150", " 1337 1337 724 1127 3 1005 1630 1337 1327 1337", " 1730 135 1337 1337 1903 1337 291 1337 471 1932", " 1337 1936 1337 1337 1357 1337 405 542 1337 1337", " 1667 1337 127 1171 1337 1337 234 83 69 1337 1337", " 1306 1337 1337 1337 1337 1337 1585 974 1230 1337", " 1337 47 338 1337 990 1337 1195 1337 646 1917 338", " 1337 339 105 1337 1337 453 1337 119 289 396 1337", " 1673 1402 965 1337 1337 1337 260 896 1337 1337", " 1337 1337 1337 1337 1337 1337 1297 859 1337 384", " 517 1951 1337 1337 1337 1337 1334 677 859 1035", " 952 951 1337 857 1337 793 369 969 1337 1337 1337", " 448 1337 1337 1337 548 1327 517 1337 1526 1337", " 1337 237 803 1337 1049 1337 1060 1337 1337 1337", " 1337 1337 1337 719 1337 1337 642 1309 1354 431", " 1800 1337 1470 1337 409 1337 1337 1337 1337 467", " 1582 453 258 1337 1337 1337 1082 1337 1337 1414", " 1337 1591 838 1337 1255 1337 147 540 257 1409", " 1914 1337 1337 1337 1337 97 1337 500 1337 1337", " 1337 1337 1337 1337 1337 984 943 964 1337 1337", " 974 849 230 1699 139 1337 1337 1337 863 1711 1337", " 1337 9 1730 1424 1337 1337 1337 389 64 1337 1337", " 1337 1337 474 1337 1337 1793 808 917 1054 750", " 1809 1553 1337 544 1246 185 1461 1337 1337 1337", " 222 1956 1165 1337 1337 1337 697 869 1337 1337", " 1337 263 1337 1337 1337 1292 1337 936 1337 1337", " 859 1736 139 1229 782 1678 1337 1693 881 1337", " 1337 911 1171 1337 1243 1942 1337 1276 1337 1337", " 419 390 1337 1337 1337 797 20 1337 1337 2 1337", " 1922 1337 1337 1316 1208 1993 1141 179 1337 450", " 88 1034 1337 385 1337 1337 1337 1418 1337 1337", " 667 1337 1503 1337 1337 1337 1285 1337 1867 1172", " 1337 1337 857 618 1337 658 1337 334 1337 1906", " 1337 1269 639 1337 1329 1337 1337 711 1337 1337", " 1337 1221 1337 1337 1337 1904 1337 1337 1175 1512", " 1337 907 755 1337 1557 543 1752 1337 348 695 1337", " 404 1337 747 1111 857 1337 1337 1337 1115 475", " 1174 1871 1337 1337 1950 1337 1337 1337 1399 1337", " 1337 1721 363 1093 1337 1231 1337 172 1971 1337", " 272 1337 1316 1337 653 1518 1337 1337 1337 1337", " 1337 1509 2 1337 1337 1951 1337 1395 1337 1337", " 990 122 13 1337 1337 1337 1337 1337 1337 1337", " 1337 1337 1337 1337 428 482 1337 196 1337 356", " 1677 260 1337 429 1337 1337 1689 1337 1337 1337", " 454 1337 1337 1337 1817 1737 1337 1337 1337 1337", " 1337 1337 721 1337 1337 1053 1457 1337 1337 1337", " 81 1337 696 1337 1337 1337 746 1337 1337"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2029;
    if(result == expected) {
        cout << "Test Case 81: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 81: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test82() {
    int numSheep = 2000;
    int maxRuns = 1500;
    vector<string> part1 = {"1053 1667 467 1667 1667 1667 1667 1667 1667 1414", " 67 1730 649 1667 91 1667 1667 1667 693 372 1667", " 694 1606 1667 1667 1667 1107 552 1804 1667 1667", " 1667 1667 342 1667 1667 1667 1667 334 1667 1952", " 1667 1667 1667 1139 1667 1667 353 571 1667 1667", " 1667 1863 1667 480 1667 1667 1575 641 297 1194", " 256 1808 1667 931 1667 334 1667 1667 418 717 1667", " 1667 1667 1667 1018 1271 1484 1667 884 1626 1667", " 1667 1616 1282 1667 1667 794 1667 807 1667 1667", " 1667 1667 1667 1667 1667 1667 1016 1588 1667 971", " 1634 1667 1667 1667 1667 1187 1667 1667 1667 1667", " 1667 1667 1072 1667 1947 646 634 1371 1667 1667", " 1667 1667 1346 1667 1548 1062 912 660 1483 1471", " 1667 1053 1667 1667 1667 1787 1667 772 1667 847", " 1667 1667 1092 1667 993 1667 137 1046 1242 1667", " 1850 1717 1667 1667 97 1667 1276 721 1667 96 1156", " 573 315 430 1285 444 1667 1667 1667 1667 1667", " 1667 1667 458 1667 1140 1667 1667 1667 491 1753", " 1309 1667 1667 1637 188 1667 813 1667 1462 580", " 497 837 688 1667 1658 1667 1667 918 1667 1667", " 1271 692 219 852 1667 1080 592 46 1667 785 1816", " 1667 1049 1667 1932 1667 1667 1344 1667 1661 322", " 1880 257 1687 179 1667 244 1371 941 1878 1889", " 1667 1667 208 661 413 1667 649 298 1667 1667 496", " 1245 1019 1726 1667 733 1667 1466 1102 1667 1667", " 457 1667 871 1667 1315 325 221 1667 1667 1667", " 1939 1667 1667 277 1667 1667 429 1667 488 1013", " 1667 1442 1120 1282 1667 1667 1339 769 413 1085", " 1643 1667 1667 1667 1667 914 1716 1667 1667 331", " 1667 406 1372 1667 1667 1688 1667 1992 1667 30", " 1080 1667 335 249 1667 142 1667 89 1667 1667 1622", " 170 1036 1084 741 1667 1909 1649 1667 1669 1169", " 744 237 479 493 1124 448 1793 1667 1667 1954 1667", " 1667 429 1667 1667 1667 1667 1667 1667 442 1667", " 1667 1373 1791 1266 1667 1513 1097 1667 1667 1667", " 1667 1198 1667 1667 1587 1667 1667 1667 1667 1667", " 1667 1311 1667 1667 1667 1667 1667 1785 242 648", " 1667 839 1667 3 1295 1667 741 1667 1667 1667 1667", " 1667 1667 1559 339 1667 787 1667 1667 1521 280", " 1667 1539 313 1497 1667 1667 1667 1798 373 811", " 226 234 1391 1667 512 698 1667 576 1643 1667 1667", " 1183 475 1667 1728 1667 1667 1916 1667 1667 1667", " 1642 1667 1667 1667 199 78 677 1667 29 1059 114", " 1667 1667 1667 1667 1667 1667 1667 1603 1667 1667", " 1667 1667 1667 517 1667 46 711 1946 1550 49 1667", " 1667 1236 1359 1823 896 1473 1243 1667 1957 1667", " 1667 1667 1667 1667 1667 152 1726 486 1667 1667", " 1829 1667 1667 1667 687 1667 1667 926 1667 1491", " 1380 1667 989 1667 1667 1667 1667 1382 316 1667", " 937 1667 1492 920 1059 215 1722 1667 203 644 1469"};
    vector<string> part2 = {" 555 1667 1667 1667 1489 783 1667 698 1147 513", " 1667 1667 1667 1667 1827 1667 403 1667 1667 1002", " 1473 1553 1634 1501 793 1601 1816 501 1667 1372", " 1384 1733 1667 146 1209 1704 1980 1667 1667 1667", " 973 1667 1667 1667 1667 1667 37 1768 1646 1667", " 1205 1127 1667 1846 1667 1667 1667 1667 1804 1667", " 1667 351 1667 158 1667 1667 1667 1667 622 880", " 1667 1667 1667 1335 1038 1667 1667 1122 1667 1667", " 940 806 1667 1667 1502 883 1667 237 1633 627 1842", " 169 1667 615 1667 1667 1667 1667 1667 1667 1433", " 1667 730 1745 1667 1671 705 1667 1667 1667 1667", " 728 1667 1667 1667 1667 881 1667 1879 331 774", " 1288 1829 86 474 1667 1107 1667 1314 1667 1667", " 1664 1667 1667 1292 1667 371 1667 1968 293 1667", " 1667 686 863 1667 1731 1667 1007 1667 1667 1667", " 1667 1667 930 1667 1667 1667 1667 1667 1667 1667", " 438 1667 1667 1667 1667 1246 749 1667 158 1667", " 826 79 1099 1667 1411 1937 1667 1667 1667 1667", " 1537 1667 1285 504 1253 1319 635 718 1667 1904", " 1667 689 1318 1423 1667 436 831 827 308 397 221", " 248 1667 1516 1393 1858 1667 1667 1590 684 570", " 1396 1667 1667 350 1667 1575 1667 220 1667 1667", " 1667 213 170 294 152 1618 1667 1316 1667 1902", " 1667 1667 466 214 1654 1148 495 1667 1667 425", " 1667 1667 1751 1378 1703 1266 1689 1264 1667 1667", " 1667 1667 1667 1667 1685 1667 1667 1667 1667 1543", " 1791 1667 1003 807 1916 1667 1222 1667 1667 285", " 1929 1456 1667 963 1410 1796 1592 1930 1667 1667", " 379 11 1667 1203 1331 1667 1188 1523 1667 1667", " 1667 1667 1667 1363 654 1667 1667 1667 1667 1667", " 548 1600 1667 1528 581 1122 935 1667 224 1667", " 1667 1570 1667 1667 1552 1667 502 1667 1667 859", " 1667 675 1377 70 423 1872 244 379 1955 1587 988", " 799 174 1667 382 1179 599 805 1667 406 1667 1667", " 676 1667 1667 1667 976 1667 1540 1567 1667 1667", " 1667 161 328 925 1263 1667 1667 1667 1667 1269", " 698 1667 1667 1682 1286 1909 1667 1755 1667 1794", " 1667 313 1667 482 1667 1667 686 1667 1667 1117", " 1667 1667 1109 1667 466 383 1667 1667 529 1667", " 468 1667 742 1667 1667 1667 1667 1667 1667 119", " 1667 1208 1530 1667 1975 1667 143 703 989 1110", " 1700 1667 1515 1293 1546 1667 1667 1667 1177 1667", " 1667 1719 729 1101 1597 1399 1154 1667 1667 1635", " 40 1667 763 316 1667 1900 908 1206 1430 1667 1667", " 560 1667 806 1667 1667 1667 1080 1667 140 1667", " 900 1750 1667 681 450 1036 1783 1667 1667 1667", " 1667 1667 1667 16 1667 782 779 1667 561 1719 1041", " 1667 1667 1667 1667 1667 1656 1841 1667 1667 1667", " 1667 1667 539 1961 918 834 1626 1332 143 1667", " 1667 572 299 1667 1331 431 1667 1556 357 1026"};
    vector<string> part3 = {" 590 1667 1667 1667 1667 1281 1667 1930 1149 1649", " 1667 1272 1667 1667 1667 1667 1215 1667 1232 1667", " 827 1501 1667 1667 1667 1667 1667 1177 1667 25", " 343 1502 1667 1667 1667 813 1667 1792 666 1667", " 1743 260 404 1742 1667 1667 1667 658 857 217 1667", " 1517 1667 1667 1667 718 1667 1667 1667 574 1667", " 947 629 1667 1667 1470 1667 1667 468 171 1667", " 1667 1667 1736 1149 168 798 260 1667 1667 141", " 1667 7 951 1169 1667 1378 1667 1667 1667 1667", " 1667 1055 1667 437 409 337 347 1597 1186 1667", " 887 1667 1484 1667 1507 1667 822 938 996 1667", " 1910 765 1667 1367 1667 1667 1345 1667 1667 1667", " 1667 1195 1974 1670 1667 1667 1667 1667 1667 1717", " 1667 1667 1793 177 1189 1667 1667 1021 74 1667", " 1667 1667 1759 1667 1023 1667 1667 1667 1667 832", " 785 778 1251 1501 1384 738 1062 1667 1539 1667", " 1667 1667 1667 1796 720 1667 169 574 1667 1667", " 1667 796 1357 1051 665 859 1482 742 1667 1667", " 1667 1292 1068 1389 996 1846 1667 718 1667 1667", " 1667 1667 199 351 1667 1667 1667 1667 1667 1101", " 1278 1667 503 1667 1545 207 1673 1917 1667 1667", " 1667 1667 1667 1345 1667 1667 1667 1667 1667 1667", " 1667 1667 1899 791 1667 1667 92 1741 356 1921", " 1667 1462 1667 1108 512 198 1667 1784 939 1667", " 1667 1667 1667 1667 1667 1667 1667 971 1667 329", " 1667 1667 1437 1667 1609 283 1667 655 1667 1667", " 529 1171 1621 902 1667 120 1667 1667 1336 1667", " 1667 1667 1853 1667 1667 1667 141 1791 601 197", " 425 600 872 1667 740 1667 1616 73 1667 1667 1667", " 1756 1667 1010 1667 1181 143 462 1051 1628 1830", " 1667 1973 1667 1667 1667 1667 1107 1517 1570 1667", " 1138 1667 1161 1667 1971 951 1667 1155 790 508", " 1667 1667 1667 198 795 1667 1667 66 1667 382 1667", " 1667 1046 1401 1667 1667 1667 179 1555 1667 428", " 1667 1667 1667 1667 1667 1667 1667 1043 1667 1667", " 1411 1784 400 1667 1667 1116 1409 1438 1667 1667", " 1667 1667 1667 1244 191 293 1667 1667 500 1303", " 1667 1910 439 1667 1667 1667 1667 1853 1667 1667", " 258 1667 287 1667 1667 1667 1208 1667 1667 1667", " 1667 621 1878 1752 1667 48 1525 1667 1667 394", " 1667 1667 900 221 1667 551 1667 1667 1667 1667", " 424 1133 1667 581 1667 1667 1667 1062 1667 231", " 1667 1667 1667 1667 815 267 446 627 1780 1667", " 1439 1667 1667 1667 1394 1974 1273 218 827 1667", " 1667 1667 1667 1839 1667 598 684 457 1667 1667", " 1403 1667 1667 1667 1110 458 1667 1215 370 1667", " 1255 1667 1279 222 49 1313 1667 1667 1276 1610", " 1773 1014 1106 1667 653 227 1667 1667 1667 1667", " 1377 301 1747 1667 1667 1437 1667 1983 1667 840", " 10 1667 715 1860 1684 1667 1667 1667 942 1667"};
    vector<string> part4 = {" 1667 866 1667 1667 1667 1667 1667 1667 1667 1016", " 1496 1667 207 1667 1667 1667 1667 1667 1763 1520", " 1667 1667 1935 1667 1667 1667 1667 1667 1889 1667", " 1328 1245 1667 1667 1667 414 1127 1356 554 1667", " 1667 1667 1667 1667 1667 695 1667 1667 1667 80", " 757 441 1116 1667 1667 1717 1667 370 1667 225", " 756 1044 1667 1667 1667 1667 314 1667 768 1667", " 983 1667 1642 1667 1667 550 1667 1667 1667 1667", " 1667 1667 967 121 1667 1667 1793 1667 1884 1559", " 1998 1667 632 619 1667 558 1667 1499 131 1667", " 1667 1847 1616 188 1667 731 1179 28 1667 1192", " 1665 928 1667 1667 569 1210 1488 1667 74 1667", " 1667 37 1505 1667 1667 1667 1360 1667 1667 1667", " 1845 334 1667 1667 1667 1667 1667 1720 1667 1667", " 1002 1072 1667 1667 1667 1667 1450 1667 1667 801", " 1565 1667 1667 1162 1667 1667 1930 1667 1667 697", " 828 230 1075 516 1047 977 1667 1667 1667 330 793", " 713 1156 249 1667 226 913 1667 1667 750 1667 922", " 1667 1667 1346 712 594 1667 1667 1248 875 1667", " 1667 1667 1637 1667 1248 546 1667 183 1667 425", " 1763 1683 1667 1667 1163 1667 480 1667 1667 1667", " 1667 810 1667 1667 166 1667 1063 1667 487 388", " 650 1667 1667 1667 1540 1667 1667 1667 98 1667", " 1667 1696 1667 1667 550 1667 1667 1667 939 485", " 1667 1473 1520 372 523 325 1436 1612 1667 46 279", " 1667 1089 1846 878 1667 1667 1667 1667 1667 1667", " 687 387 1467 1667 1667 1085 1667 612 1667 1667", " 1821 1667 1667 1667 1218 626 1667 1667 1541 734", " 1667 1667 1667 1357 1286 550 1667 1667 1667 620", " 1515 1316 1667 1667 1667 1667 1667 1667 1667 1504", " 1033 587 1667 626 744 1667 1901 1133 861 12 1667", " 1357 254 1919 1667 141 516 822 1667 362 213 1075", " 1491 1573 784 1667 1057 1667 1728 1667 1810 1667", " 1667 1667 1667 1667 1148 1148 1078 1760 117 1914", " 1506 1667 574 1667 1667 1629 1667 947 1667 1667", " 1667 1984 1667 649 674 1671 437 1667 1667 1667", " 228 1667 1667 1667 1667 1667 1726 1989 1667 1667", " 1667 932 1667 1667 1667 1667 1883 1667 1667 420", " 85 957 1667 1667 28 1418 1667 340 1667 491 175", " 1667 1667 1667 1504 1667 1257 1667 835 1667 1667", " 1667 1667 1667 1667 1667 1667 1667 1667 1667 712", " 1667 38 577 1948 1048 961 1667 1190 1667 1667", " 1525 1667 1644 1342 354 119 1667 1478 1667 1667", " 1667 1667 1667 867 1667 1667 1667 1665 420 1016", " 1667 1605 919 1667 400 133 1302 1667 1928 1667", " 1667 1667 904 1667 1114 1667 1779 1667 1667 175", " 1667 1667 1667 1667 1132 1667 1820 551 1271 1143", " 1667 1667 1667"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2043;
    if(result == expected) {
        cout << "Test Case 82: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 82: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test83() {
    int numSheep = 2000;
    int maxRuns = 1909;
    vector<string> part1 = {"1833 1 215 1166 1 1 1772 1 1055 1986 378 277 1979", " 1 1 686 1 1582 1 1 1 274 1 101 1 642 1 1929 1935", " 1 1050 1 1311 1 1 625 1 1 1 1 251 1 1 871 1095", " 1241 1 1 1 468 468 465 1860 1 1 1 1 1130 1331", " 1 1 1 84 1 1 1194 1 767 932 1 1 133 1 355 89 1344", " 1 1 1345 1083 1877 619 1 857 1 1604 1 1 1 550", " 1 1 1 1753 1255 1891 1343 1 1923 600 1 1 1 1 1", " 1 1 915 1 1717 1 640 1587 1 1 1 1 1915 1 1472", " 1 1405 1 470 597 58 591 1484 944 1 1 1960 1 1", " 307 1645 583 1 1 1746 785 1044 211 1 1 1 1 1 440", " 870 83 1 999 1104 1 821 1 1 213 1277 424 1678", " 1364 1 447 1 420 1 101 1123 1 1 1 1380 1 907 1", " 458 1 1 1 893 967 1 1656 1712 1961 1 1 1 635 1", " 1 1 1372 1609 1 1684 1 715 467 515 1 134 466 1625", " 810 958 702 1924 1 1 1468 917 1 868 1 1151 1436", " 1447 1985 1 1 187 1 1028 1 447 364 6 1 937 1 1872", " 1 683 1146 1814 1 1 1510 798 1 1 1 1353 917 1", " 1 1 541 1400 1 1759 1 1 260 653 1 593 1502 1 780", " 1 973 1 1 1 1 1552 1 1 1 1 1 1153 326 183 1 728", " 1 834 1045 1 1511 875 1 110 1 1 1153 428 1709", " 1 1058 1 1 1 835 1 1711 1115 1 1682 1 1 1 1 328", " 1219 512 1 1 927 992 429 1 444 1 1 1 1 1 1783", " 1154 676 1 1 1 1456 332 1 1 1 1980 1 1 1 1 1063", " 82 339 228 1 1 1 1 1842 1523 1229 1 1 312 1 669", " 1554 1 58 1 1 1306 233 1 1 489 464 1 1035 1 1", " 1 1076 1046 1 1 155 1 1 1 1 1411 734 1 957 1 500", " 1 1 1 1 1 1 1 1465 1745 88 1245 1 1179 1 1 1 1", " 1 1 1 626 1 1 1 1 1 1861 1947 1323 1 1 1 1449", " 695 1 1 715 1053 1 1 1 1 1 1 637 1 1299 1 472", " 442 1630 1 1899 1 569 454 1 1 1 1 1 1716 312 1", " 1 1 1 215 1 1 1 1788 1408 1 1 1944 1 1 1418 1", " 1887 1 1 1640 1259 1 224 1464 1 803 656 1 1492", " 1853 1347 167 1 1 1508 1619 1 1 1 1 14 1791 1974", " 1 1 858 1614 152 1 1 553 1497 1 711 1387 1 1 912", " 1 895 981 1987 863 1 159 1 1 549 1 1777 1 100", " 1369 1 1 1 354 1 1 1 1 1213 1605 1992 1 1758 1", " 1 766 1 1682 262 716 1 1 50 1 560 1 1 1993 405", " 839 674 682 1 1080 1 1663 1 1 112 1682 488 1 1", " 1 1 1497 351 1 404 1 1 1 1 247 1 261 1506 1 1", " 1 1 1 212 1 1 1 1 1 1 1039 1 117 1931 1893 1 1849", " 608 1787 1341 1 982 1912 356 1 1033 817 916 1", " 212 1 1 1 1744 439 1 1375 1612 1 1 1 1 557 328", " 1 1 1 534 1 969 1646 693 476 1445 767 22 1 1039", " 1 1 1100 1 1 1 1094 323 1236 1532 1947 367 1 800", " 1719 1924 1 1 1 1 1 1 1469 1919 1 1 1607 1 1992", " 1 1 1 1 1 20 1 1126 744 103 1 1 1 1611 787 1 1785", " 1686 1 1 1 1 1756 471 1259 1 1 890 1543 1355 1095", " 1 1 748 1 1122 1961 1 1 1 1 1687 1 566 1 508 1", " 1472 1236 1068 1 179 978 1 999 1 188 1 1 1 1 1566", " 1 1 1 1551 1 1723 590 1 1 485 1 1697 173 1 1 1"};
    vector<string> part2 = {" 193 1 1 708 1 1 1729 1 1 1117 556 617 1380 1 1", " 1 1061 1 1 1 1 555 266 1431 1 1 425 692 819 1601", " 1 616 1 693 1 1 694 1 1 941 1 1 1224 466 1 1631", " 206 1 1 1 406 1 1122 1937 592 1 361 147 1571 1555", " 542 1 173 994 1661 1 556 753 474 1 1 1588 1 1", " 1 1991 1338 1 1 1 1 928 1497 1 439 1 1085 1496", " 1 1 29 1733 1 1 1 459 1429 1 1990 754 1 1928 1", " 80 1 1156 566 1 286 290 1 1 1990 1064 1 1311 1", " 491 1433 1 1 1 1 99 1 1 644 1 477 880 210 1 1", " 1 1 1 1 1541 1261 1 217 1 554 1 1 596 1 707 1", " 347 1 1204 1 920 1191 1946 70 531 127 1 1 1 1", " 1 1 1 83 1 393 1319 1 1 1481 959 187 1 1 1 1 1", " 635 232 1 1970 631 729 1879 1 1 1408 1558 1 1806", " 1 1 30 1 1233 1 1 1 1 441 476 1 1 546 490 1 1", " 1 1905 1285 1698 1 1299 1470 1 1 1 1584 1995 1181", " 1 1 1678 1 1 1 1 816 1 462 892 498 1 1555 1 1", " 1 1566 1 1008 263 1 634 1509 1 1191 114 1 1 708", " 1340 402 1 1142 1 1 1 1 963 1 1 1 1 851 1 1 654", " 1528 1858 1 402 594 697 1 1 1 1 995 1 1 1 1 1", " 1 622 1570 1 1621 1834 1895 1 174 144 1 664 1937", " 1811 1864 1 1075 1 690 1 1 1 1425 967 1 1 280", " 1944 224 1149 1 289 1 1 1 875 1 910 1895 205 1784", " 1590 1 1 762 1 1 1 1 1 1 1200 1 1841 1 1 1 1681", " 934 1816 365 1 1 416 1046 1 1 1 1799 1710 425", " 1 1549 1 1 1660 1 1279 1 984 1 1 488 1 1 1 1 1", " 1 1 719 1 425 1 1 1 1812 1 977 1454 1642 713 1", " 1061 1491 1 1 1 1 102 1 1 1 1816 1 656 1 1 1 1431", " 1228 1 1 1438 1 660 408 1 1368 1 226 1228 1011", " 1 1172 1 1335 1 151 1 76 1516 1821 1968 1 1 1", " 253 1 1 1 1 990 1 1 1349 886 741 1 651 1 1 1 1", " 1 773 1 1860 1987 1 269 1 1 76 1141 1 1 1577 1848", " 1754 330 1286 1435 938 1 1706 1 1080 460 1 89", " 317 1 1 1 1170 1 1472 1 1 452 332 567 1734 1 1", " 328 1 1378 1760 1 1 1 256 1258 1 1 912 1 1 1 1", " 1 1 972 1791 684 1 1230 414 1 1347 1495 1740 1", " 1761 1 845 1 1400 1619 346 1521 1 1 964 1 987", " 441 1 1590 1 1 1 799 1 65 1 1 1 1050 1 1 703 1663", " 1 1044 509 1 1436 1628 1 1 1 1255 1 148 1264 1", " 1 1744 1168 1 1 431 854 1 831 1 163 1 1 1479 897", " 326 1 1357 1 1 1 791 1 1554 1 1 913 1 1 1503 1939", " 1 1 1126 1 1 1833 1212 1 965 1 434 973 1 567 1", " 1372 1 100 1 1131 567 429 1 1939 1843 1 717 1", " 1 1 1 1885 431 1980 1 1 336 1 1 1 1234 1 1 164", " 802 311 1 1 1 1 1972 845 1411 1 1182 1 1 393 1", " 1 1 1019 276 1475 1906 84 1 1 1 1 1 1 1 1248 1630", " 1 1538 1 1 1 1209 1922 1 1 161 468 1 1529 1 1", " 250 1 1638 1425 1 1 1 1 598 1 1 1022 1 1 576 647", " 1271 1 1 1 1423 1890 1 1 1458 1 1581 935 1 793", " 1 183 704 1289 253 745 1 99 1 174 1967 527 1 1", " 1426 896 367 1160 1 1 1 1 1071 1 1503 1 1 1 1136"};
    vector<string> part3 = {" 302 412 1 1 1 1416 1341 1252 1 1 1 448 1 1150", " 1618 1 1 1104 339 972 1 223 193 1339 1784 1 1", " 1 1 96 1 75 1 700 1 1888 1 1 1862 1 1126 1206", " 1 1 1927 1 1306 1 1 1 1 741 1065 1 1 1270 1 720", " 1991 1103 1325 1678 368 1 1508 1 1 1669 1 993", " 994 1 1 430 1906 1 154 1216 212 1973 858 1 1080", " 239 1 1 293 63 644 1 1 543 1 1 351 25 1 385 1", " 1 78 1 1098 1783 1 1 967 1104 1092 1 1 1 999 1", " 1006 1246 1 983 1 1171 1 77 1 1582 1 1183 361", " 1 1 1 1544 911 93 794 1 1 1 444 1 1 175 1 1 1466", " 1 1 1706 1 1047 1 1 520 1 1 456 1 202 1 681 1392", " 1 1 1 1 177 1238 164 524 62 260 1365 1 358 131", " 1 1826 1286 1 282 815 1568 1 603 1 158 1161 1", " 936 1 1287 1695 327 1 1 930 1 941 1872 1 167 55", " 1 674 1 1301 1193 1 1 269 1 1 572 541 1 1 67 194", " 1 1 1 757 1866 1 1 1501 1 1 1 1 1 1 1 957 1 1625", " 1 32 1603 1734 1 1843 1074 1 1 853 1 1623 1 164", " 1029 108 1728 1182 1 1221 1 1527 1248 243 1923", " 1428 1004 1811 1377 1715 1 1 1 1 999 1 1 766 968", " 1719 1 1 1340 1 1 394 1 1 1 1775 1 1 236 1054", " 381 1563 1 554 1 1888 1 1 344 910 1 1 1606 1653", " 1 1464 1612 1 1 1 1 1 11 884 776 1219 1 199 372", " 1 1841 391 1901 432 1 1404 1782 1 1 695 1 1518", " 292 29 1 1213 1 1 1 1 1 1 1358 1473 4 1 638 1", " 884 1164 1720 1592 1 1090 518 1 1042 1413 1 1910", " 1 1 148 1395 1979 1 1161 382 1 1586 600 1 349", " 1493 912 1 1157 129 1556 446 1 1 786 924 1 1665", " 1 82 442 1538 1 1231 1 1 1 1825 1650 1 1 1 1 1", " 1 1177 1236 1 875 1 1 1 110 1139 1 1 1880 1204", " 898 1 1 1 700 1 1 1507 1 1 1740 1 1 1539 1 281", " 1 1612 1 1 205 1 1 1 1 1 1 1 1 862 1 1935 1 1975", " 63 501 1 638 1553 317 1 442 1 1202 1643 1 1 653", " 1 1 1 865 1 1 1 1776 1 1 1 1515 334 1 159 1 959", " 236 1 1 96 693 1 840 1 1 1649 1 1 1404 308 214", " 1151 518 1 1 1 418 204 1 1549 1 534 1259 1"};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1995;
    if(result == expected) {
        cout << "Test Case 83: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 83: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test84() {
    int numSheep = 2000;
    int maxRuns = 1909;
    vector<string> part1 = {"1088 13 13 13 13 13 13 13 13 13 590 13 355 13 657", " 840 615 13 13 13 13 13 1889 13 693 688 13 13 13", " 13 13 1603 13 13 13 1886 13 209 13 684 13 13 13", " 13 1491 13 1407 1025 13 13 13 13 1051 572 231", " 13 1372 13 13 1201 1873 13 333 13 13 13 338 112", " 1634 1327 13 84 465 13 13 909 13 1928 13 13 13", " 54 707 13 1166 13 13 1822 13 13 13 285 870 333", " 13 1060 1817 1494 550 13 1070 13 13 1006 13 951", " 13 13 13 1003 206 13 744 1011 1786 1670 1147 13", " 575 1445 13 140 13 1290 1274 1786 13 13 1651 13", " 13 13 1928 13 1743 13 13 13 1342 13 836 1394 13", " 439 1421 1399 1514 1833 13 13 152 13 13 1889 13", " 13 643 1734 13 13 1894 13 13 225 13 13 13 13 1744", " 13 845 1546 13 271 1724 25 1935 1701 1126 13 457", " 13 1835 963 985 13 1956 678 879 13 615 1853 13", " 13 1624 13 13 1616 1540 740 458 1983 13 52 13", " 13 1316 13 13 13 13 815 867 13 13 13 13 13 756", " 556 1962 1615 872 13 13 13 13 378 943 231 1609", " 577 614 462 13 1712 1753 13 192 13 13 13 1706", " 1766 13 13 13 1553 13 807 1208 59 13 13 13 13", " 13 13 1615 1148 13 630 460 13 13 1110 13 526 13", " 13 1900 1050 982 13 13 13 13 13 1913 260 710 1879", " 13 13 520 1898 13 13 13 192 50 1299 13 1425 13", " 13 272 13 628 1468 1580 1203 13 13 1144 13 13", " 13 1861 1775 13 927 13 13 204 168 13 13 13 13", " 13 13 13 13 906 936 1489 13 13 13 1624 493 13", " 13 457 1280 13 13 466 66 13 13 1079 1037 13 13", " 498 938 1219 1960 13 13 1494 508 262 633 13 13", " 13 13 13 13 308 507 866 854 13 13 13 13 13 13", " 1505 381 1766 13 1251 13 13 1435 13 1063 13 13", " 13 1961 13 13 82 13 13 13 13 13 13 831 13 13 827", " 1141 11 13 13 13 13 13 13 13 13 1038 1578 13 13", " 1284 13 1268 375 1058 145 1354 13 1734 2 1992", " 434 1919 599 299 13 927 13 13 13 13 13 13 13 673", " 268 13 13 692 13 13 13 119 13 1617 13 1062 13", " 1958 13 1476 13 13 13 13 87 13 13 146 623 1646", " 13 13 30 1130 13 13 13 952 13 13 13 1875 13 1641", " 13 877 13 407 13 135 1021 350 958 279 1623 13", " 13 13 13 13 316 487 13 1770 13 1521 13 1242 13", " 13 13 13 1530 13 288 767 1227 216 13 13 13 13", " 13 13 13 13 13 13 13 1695 13 1904 1833 13 1973", " 13 13 341 13 13 1937 13 1911 13 1046 13 109 1903", " 13 786 13 13 858 13 13 922 13 13 1538 683 1047", " 499 13 1569 13 13 1846 13 13 13 184 196 1556 703", " 968 13 13 1077 685 13 172 13 311 13 495 1336 13", " 13 13 13 1873 13 1755 13 13 13 462 1545 1063 1716", " 894 13 710 13 13 13 442 1062 987 1162 13 13 1736", " 13 13 13 13 13 13 1941 969 973 446 13 18 13 13", " 1736 13 13 142 1853 13 442 1427 752 13 13 13 1741", " 1002 1444 13 1680 702 1297 13 13 13 13 1929 13"};
    vector<string> part2 = {" 583 454 13 13 13 13 13 1626 13 9 13 13 13 13 1730", " 548 395 13 117 177 733 13 823 45 13 1491 13 123", " 92 13 379 13 13 363 1033 1111 13 814 277 13 13", " 13 13 13 129 1921 13 13 13 805 13 1708 13 365", " 522 1704 1224 13 13 13 1040 890 13 699 1732 957", " 1188 13 1082 1156 13 13 13 13 13 41 198 508 395", " 530 779 1673 1756 13 1638 13 1705 66 13 1524 972", " 1383 900 13 13 13 1506 13 1232 1498 212 1931 599", " 13 1354 787 347 158 925 1450 1688 13 13 13 1173", " 872 1170 13 13 143 1598 1259 609 1638 916 13 13", " 13 13 1499 13 94 13 13 13 181 1131 13 13 1586", " 13 13 13 13 200 13 196 13 3 13 640 510 1767 13", " 13 13 13 13 13 13 13 13 1930 13 1797 712 13 453", " 915 13 13 13 13 13 1996 674 433 1492 348 11 13", " 13 13 13 980 13 1832 1874 348 13 13 1524 13 13", " 13 1374 35 1028 37 13 13 13 930 1202 13 1748 13", " 13 46 13 13 13 506 13 1381 1809 1999 13 13 13", " 13 13 13 1732 806 734 315 13 13 13 13 13 161 1765", " 1892 13 1594 13 13 1063 1086 13 905 658 261 517", " 1534 13 13 13 13 13 52 13 407 24 1994 96 1351", " 13 1304 13 1940 1603 13 13 1834 13 13 13 1959", " 875 568 1725 1206 738 13 13 13 1313 1051 13 13", " 13 13 1362 1977 13 293 813 723 13 344 522 1679", " 13 13 13 796 1783 13 13 1642 140 959 13 13 13", " 929 828 13 1218 13 1944 918 420 13 785 13 1734", " 957 590 13 1493 13 13 452 13 1908 13 13 407 356", " 13 605 652 13 13 1762 1443 13 13 13 360 13 13", " 13 13 76 74 13 44 13 262 13 484 1568 13 1322 13", " 13 13 259 57 13 13 13 13 1630 302 207 1252 13", " 13 563 79 13 13 13 13 13 13 13 487 200 1144 13", " 605 13 13 15 13 407 1790 13 201 13 1954 1901 1886", " 628 13 13 1502 1869 13 303 1580 13 13 13 1765", " 940 172 884 1894 13 1550 657 13 1103 13 13 13", " 13 632 13 13 1994 1734 13 975 1949 13 760 13 1726", " 27 13 489 1466 13 13 13 13 13 13 13 1405 13 1852", " 875 834 1870 13 13 13 13 13 13 1670 13 232 13", " 13 13 314 727 13 395 1010 13 13 13 13 1786 13", " 775 1674 13 401 1226 402 717 194 871 1910 13 312", " 1934 334 13 13 518 13 1015 1062 1122 13 1524 128", " 13 13 19 1457 13 13 563 335 13 438 13 149 13 1975", " 13 13 13 1618 13 13 225 13 13 13 13 13 1894 13", " 13 695 650 868 13 13 651 13 1856 1206 214 285", " 13 13 13 1586 13 13 1134 13 13 13 13 13 13 13", " 13 13 13 13 13 438 719 13 375 13 13 365 1277 13", " 13 13 13 333 13 1728 13 13 13 550 13 1315 355", " 1254 13 13 13 13 13 422 1115 376 13 13 13 13 13", " 13 1744 13 13 13 13 1001 760 1931 13 13 145 13", " 13 329 13 322 13 497 1419 13 1102 13 13 13 13", " 13 302 13 470 13 1140 13 451 13 13 13 13 664 13", " 93 1039 1683 13 516 1665 13 13 1669 13 115 13"};
    vector<string> part3 = {" 13 13 13 13 1504 13 13 205 13 13 13 13 13 122", " 1077 347 13 1788 434 678 1616 1408 13 13 13 1049", " 842 13 268 13 13 13 340 13 13 13 13 13 13 13 13", " 198 13 13 1061 13 13 859 13 1212 13 1022 1671", " 1407 13 1779 650 13 13 13 13 231 1932 13 13 13", " 13 86 13 13 14 1481 13 485 13 13 13 1200 13 1823", " 1327 13 13 13 1902 13 13 13 13 1600 13 13 13 13", " 259 292 13 1463 1865 722 834 13 13 13 13 13 13", " 213 331 1786 13 13 1125 1132 717 13 1365 306 13", " 13 26 13 1355 430 1352 380 13 13 1832 133 13 13", " 313 13 13 1302 369 1834 13 13 1481 1942 13 13", " 13 410 1216 13 13 181 654 1326 1245 717 1843 1411", " 1079 13 751 13 13 904 70 129 13 13 730 13 13 569", " 938 13 13 1814 322 693 443 88 1982 13 997 13 808", " 334 320 668 13 13 13 527 1111 744 13 865 427 1386", " 825 1135 13 13 13 13 13 1393 13 13 1210 582 615", " 573 1034 13 13 13 1281 13 1 13 624 203 13 13 13", " 13 13 13 13 13 137 1759 401 13 13 13 13 491 1472", " 13 13 13 13 1504 13 11 1764 343 13 162 13 13 13", " 1379 703 1 13 734 1784 13 13 13 13 13 13 41 13", " 1420 1087 1464 13 1718 1142 13 13 1178 13 13 1661", " 294 186 579 13 1524 838 1691 13 531 890 13 13", " 13 13 1060 1580 1702 70 1491 990 167 13 13 1627", " 13 13 892 13 13 13 1602 13 13 13 13 614 13 1405", " 493 13 13 13 13 13 978 13 13 1067 13 1024 1862", " 13 13 13 153 13 13 197 970 377 13 1557 13 13 84", " 13 13 13 417 13 1062 1616 1047 1207 13 13 447", " 13 81 13 13 13 13 1133 13 1754 13 13 1170 13 1631", " 13 1262 13 367 13 141 13 525 13 13 13 13 1013", " 1572 1997 453 825 13 13 13 1780 1099 13 13 1167", " 746 13 594 13 325 13 13 1213 13 167 964 13 1644", " 51 197 1030 1994 1527 13 13 573 67 596 1037 13", " 817 13 462 680 316 1492 1980 13 13 1476 13 13", " 13 13 691 13 13 1668 13 1533 1262 13 13 1381 13", " 13 1689 461 13 803 13 1804 94 13 13 1037 13 653", " 1988 13 1077 13 13 13 13 13 13 613 13 13 13 13", " 13 13 13 491 13 759 762 13 62 746 13 13 13 13", " 1227 13 1760 13 13 1067 13 13 454 13 1584 13 13", " 13 932 13 13 1787 13 13 1810 1984 13 498 1278", " 13 1693 13 13 1886 1293 1500 13 994 13 125 13", " 814 1999 13 13 1786 13 13 1707 13 372 13 13 13", " 13 13 520 13 602 13 13 13 1253 949 13 13 702 13", " 13 708 1748 1761 13 13 13 13 1742 13 36 553 191", " 92 372 1218 13 1839 375 1275 13 578 173 13 887", " 801 13 13 13 1461 13 1402 13 921 741 974 1565", " 1569 1573 13 916 258 1455 1658 13 294 13 13 1894", " 13 13 1700 13 13 13 1619 13 13 13 13 1909 696", " 889 957 487 717 539 13 13 690 297 13 1875 13 539", " 13 98 13 1416 122 13 1139 13 684 13 1658 13 13", " 856 13 1871 13 822 13 13 144 13 227 13 13 1053"};
    vector<string> part4 = {" 472 1645 312 1141 1474 1300 1096 210 13 13 1518", " 13 1474 1432 13 1862 516 13 549 888 13 1362 13", " 13 13 1288 1587 148 13 1866 13 13 1366 1016 1339", " 212 1446 522 13 777 13 13 1971 13 780 1386 455", " 459 200 1435 1816 228 1291 247 13 498 13"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1999;
    if(result == expected) {
        cout << "Test Case 84: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 84: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test85() {
    int numSheep = 2000;
    int maxRuns = 1909;
    vector<string> part1 = {"1294 938 42 42 42 1245 42 42 42 1391 42 42 1787", " 42 512 346 42 42 42 1381 17 42 42 42 1253 1887", " 550 42 42 953 1867 42 42 996 202 259 42 1370 1616", " 248 42 1788 42 1593 42 1286 42 403 42 196 483", " 1959 365 42 42 1488 42 42 467 42 1926 42 42 962", " 538 42 1723 42 42 661 325 282 1655 42 390 783", " 250 604 42 1789 779 79 42 42 968 1685 54 42 42", " 42 42 42 42 42 42 42 127 1581 1369 1819 42 788", " 42 1181 42 42 42 42 42 1246 42 1584 42 757 42", " 1873 93 42 42 1733 979 42 42 789 1947 1351 802", " 1411 1583 42 42 42 42 1437 1956 42 1662 1848 1213", " 150 1259 42 42 391 385 42 666 42 42 42 120 1189", " 42 1376 1080 42 1192 1173 445 668 42 1333 42 1778", " 42 42 42 235 42 479 42 42 723 1428 42 42 42 1478", " 42 1851 1021 1659 616 42 305 1515 42 42 1005 995", " 280 1673 375 1089 42 42 1475 628 1130 42 42 1155", " 1163 595 42 1561 42 42 1901 42 42 42 577 42 1322", " 42 1476 42 1963 288 666 42 42 343 650 42 878 42", " 42 291 42 871 34 42 42 767 246 42 42 1310 42 42", " 1671 42 42 42 1454 192 42 1767 408 42 81 1151", " 1469 1861 172 42 42 990 42 1801 1124 797 999 42", " 42 1182 42 42 42 511 216 42 42 42 42 575 45 42", " 1835 42 1100 438 42 42 11 717 1787 1299 42 201", " 42 42 42 250 707 42 983 1638 832 42 1023 1632", " 1034 42 42 42 42 299 1043 1578 1726 42 1451 1225", " 42 42 42 1976 42 42 42 1481 1241 42 42 572 653", " 1531 42 1702 1546 807 1481 42 330 892 42 42 1460", " 42 640 42 42 1538 1542 1573 1373 763 42 42 1815", " 42 217 1761 42 42 841 42 42 42 42 256 42 1398", " 42 42 1142 1341 42 42 1115 42 205 42 821 1447", " 25 42 42 42 42 1660 42 196 404 42 1899 1321 1144", " 42 1461 42 42 224 42 393 42 42 42 42 42 1703 1053", " 42 236 920 42 42 42 42 934 42 1653 42 1728 61", " 42 42 42 1576 42 42 437 42 42 1359 574 1301 1669", " 669 1184 1926 931 747 42 940 839 42 1799 1636", " 42 203 42 42 42 42 42 545 1200 42 555 1358 1704", " 42 1815 42 42 42 42 42 1917 42 42 1945 42 360", " 1944 42 170 1724 42 1206 42 1657 42 1770 909 1415", " 42 1322 1414 676 42 42 943 874 1524 42 409 959", " 960 738 1633 42 1969 1558 820 527 42 42 42 1197", " 174 1018 42 1884 42 42 895 42 42 172 42 42 42", " 353 42 490 1012 42 42 10 42 1804 1803 121 921", " 683 1776 1511 1350 42 42 1357 273 42 42 42 42", " 42 42 995 42 171 1626 1342 42 42 1086 1790 1444", " 26 42 42 1658 43 42 531 42 42 42 42 42 211 42", " 1077 397 42 42 79 42 1699 42 42 495 568 792 53", " 687 42 53 1516 42 1753 1624 42 1300 42 42 42 42", " 42 42 833 42 288 487 1655 1233 42 42 1383 42 1278", " 42 2000 42 394 42 297 42 575 1140 42 42 804 60", " 362 409 42 272 369 42 1235 42 42 42 42 882 42"};
    vector<string> part2 = {" 1348 1272 42 42 42 702 42 1322 197 42 1337 42", " 255 42 542 1861 42 1442 343 656 38 1810 36 1017", " 42 42 42 1964 1858 42 42 42 925 42 42 42 42 42", " 325 42 212 1729 42 42 239 584 42 42 42 42 42 1477", " 42 746 620 515 42 1252 42 493 42 575 1068 1361", " 1004 42 42 42 612 42 1782 42 1693 44 126 42 1870", " 42 42 1136 50 42 42 42 1359 42 1442 652 792 1190", " 42 42 42 1765 42 42 114 450 42 42 42 42 42 42", " 1761 1718 427 1647 42 1477 42 42 455 42 42 1333", " 185 42 42 42 1725 1549 42 42 1737 304 42 1869", " 150 42 576 42 42 42 1921 829 1153 42 702 257 42", " 1943 42 977 337 42 897 1956 1752 1982 42 42 42", " 1115 42 42 42 42 42 201 42 988 42 1455 44 42 1165", " 42 42 42 934 176 181 42 1572 1920 116 42 42 42", " 42 42 42 122 42 1523 1592 505 42 290 1278 871", " 42 1656 42 921 678 1050 303 1402 42 42 851 1358", " 1351 236 42 42 1076 792 42 1554 42 42 614 1470", " 42 42 95 42 748 370 702 42 1274 42 1453 42 42", " 1624 42 416 42 42 356 623 736 42 42 42 42 1291", " 1712 428 42 1224 42 819 42 1644 42 1540 42 42", " 42 747 42 1279 47 42 352 42 500 42 42 578 42 1948", " 414 42 1870 42 1219 1391 42 42 556 1429 1824 42", " 1405 42 263 162 1399 751 42 1310 42 888 1239 42", " 42 42 1136 780 1386 628 758 660 1175 961 42 42", " 42 42 1409 266 779 1744 42 290 1481 42 1181 911", " 1209 1613 236 1560 277 42 42 42 5 1250 42 42 42", " 1410 1895 548 42 42 42 1285 579 1263 42 1659 48", " 42 42 553 1546 1478 419 1430 42 114 1669 42 446", " 984 42 990 193 42 42 1712 1583 1187 42 42 42 42", " 1746 42 1862 42 388 42 928 1321 50 1785 42 42", " 42 1718 42 1235 42 1650 42 42 42 42 42 42 42 23", " 1137 128 1414 1944 42 1577 42 42 42 42 42 185", " 14 42 42 1325 986 42 42 42 42 817 899 42 1202", " 42 242 697 42 42 42 1547 42 999 42 171 42 1688", " 42 42 1156 42 945 1054 42 42 1065 284 1346 42", " 1154 1164 42 930 42 1679 44 1369 1588 1140 671", " 42 42 42 42 42 42 42 761 42 822 269 425 42 42", " 1916 42 1972 562 598 1565 520 42 42 42 42 907", " 42 1900 499 42 1083 1174 42 42 42 42 42 42 1524", " 42 42 1153 833 42 42 42 42 972 42 42 195 1463", " 1997 1364 1135 42 983 1920 867 819 42 206 42 42", " 1186 42 1384 365 42 1293 42 42 354 42 825 42 1565", " 42 62 42 42 42 42 426 141 42 1802 1128 42 301", " 1948 1347 1739 854 390 42 422 1916 42 42 1507", " 987 42 1652 42 1305 766 42 250 42 1078 1255 42", " 1837 42 794 500 1707 1498 42 1392 42 42 42 42", " 557 1082 42 1516 42 217 42 42 1624 42 42 173 42", " 42 42 371 42 652 727 211 15 42 1740 42 473 42", " 42 42 1779 42 1792 628 42 42 414 42 1786 1549", " 42 1054 1520 1987 42 42 42 42 42 42 42 42 42 795"};
    vector<string> part3 = {" 42 42 1663 42 42 42 42 1936 42 1016 1878 1422", " 42 408 40 811 42 1433 42 42 42 612 233 272 42", " 1935 42 364 42 42 658 1067 42 42 42 42 417 421", " 42 1075 42 384 42 42 1789 656 42 42 622 42 80", " 42 677 42 616 42 1569 42 1853 42 411 42 237 42", " 409 42 2000 1671 42 42 42 1981 519 40 1916 42", " 42 42 1814 433 42 78 293 42 327 42 42 42 42 831", " 1431 1777 1371 105 903 42 1241 19 636 846 1889", " 1528 25 42 428 852 1172 42 1539 42 781 42 66 1520", " 1598 583 42 506 42 1323 42 42 42 104 1940 42 1547", " 781 607 42 42 42 42 567 1002 42 42 285 1413 226", " 885 1665 42 42 1073 42 42 1961 42 1679 884 1968", " 1012 33 627 42 42 42 42 644 42 42 1667 42 187", " 1713 856 42 1990 42 962 42 498 56 42 42 266 42", " 42 42 42 42 42 42 1688 42 42 549 42 1271 803 595", " 1452 342 1801 1435 1701 42 537 554 1238 42 42", " 42 1651 727 648 417 42 1687 301 450 506 333 42", " 42 965 1865 42 1369 42 42 42 42 1561 42 958 1193", " 1010 1725 773 1014 689 149 1131 42 42 42 286 451", " 1277 654 1992 1358 42 622 1854 42 1307 42 525", " 388 1381 1244 1688 123 42 1462 42 42 42 856 42", " 42 42 42 1140 42 1192 1230 42 976 1146 42 613", " 1961 42 42 42 42 668 42 517 79 42 1765 42 42 1916", " 42 388 42 42 1957 460 637 42 210 42 1507 42 42", " 1936 42 303 749 42 42 42 659 42 302 42 1512 42", " 670 1474 1866 1497 861 488 42 1077 42 42 1027", " 42 42 713 42 42 42 182 540 42 1737 42 42 42 1131", " 42 42 42 42 1080 1832 42 42 42 1681 1731 42 42", " 966 42 145 839 1870 42 774 1925 760 42 42 1977", " 42 1796 42 1784 42 42 42 42 42 149 1235 42 42", " 42 42 42 42 146 42 42 42 1668 42 42 42 42 42 42", " 803 554 42 1975 1417 42 893 1805 42 42 1461 1126", " 633 42 42 42 324 42 1505 42 1379 42 1099 1735", " 1333 94 42 42 42 695 1147 42 42 42 42 42 71 1078", " 42 1925 260 246 42 42 535 156 42 111 42 1155 559", " 42 1506 42 908 1498 1346 42 687 42 42 1452 42", " 42 42 619 42 42 42 756 42 42 491 401 2 1518 697", " 42 42 42 362 42 42 42 42 568 506 1130 517 42 42", " 42 1016 42 42 272 1178 42 1868 1879 42 890 42", " 42 42 1962 42 1496 42 316 42 42 892 42 874 42", " 1533 118 194 275 42 42 339 100 894 693 1697 42", " 1723 702 1903 1263 1261 1135 1488 42 1748 1624", " 650 42 1113 42 178 1304 42 42 842 1064 1342 1790", " 42 1560 249 42 1119 42 42 1540 42 995 1114 42", " 42 823 291 1012 1417 1025 187 1018 453 908 42", " 42 42 42 42 42 1062 42 42 27 364 590 42 42 42", " 1200 1552 1165 1535 1390 1526 56 1679 42 1362", " 42 685 803 546 1043 203 409 1636 42 42 42 1207", " 42 42 42 42 42 587 42 42 42 42 42 1984 1886 42", " 1754 42 565 1277 42 42 1396 1458 42 896 767 1975"};
    vector<string> part4 = {" 42 42 42 42 717 42 42 701 1033 42 503 1285 42", " 42 42 42 1659 1041 42 1430 739 42 185 785 42 209", " 1342 513 42 42 42 592 42 42 42 42 42 1666 257", " 42 667 42 42 1308 1620 42 53 137 42 339 42 1007", " 42 42 870 1222 606 42 158 1999 42 998 42 42 965", " 457 42 42 42 1410 1568 42 126 42 42 42 42 883", " 552 428 42 1581 42 42 38 42 42 447 42 42 42 246", " 42 249 42 42 42 42 520 42 42 38 42 1706 1036 1631", " 42 1294 1121 1567"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2000;
    if(result == expected) {
        cout << "Test Case 85: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 85: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test86() {
    int numSheep = 2000;
    int maxRuns = 1909;
    vector<string> part1 = {"1755 576 1099 576 150 661 576 1410 576 576 1219", " 576 1505 576 79 576 576 1822 1273 525 510 999", " 660 1603 576 695 576 576 576 576 1032 1980 576", " 1839 1790 750 483 1667 576 576 576 1501 576 576", " 576 714 567 576 576 1640 1875 1632 1458 1621 559", " 231 576 576 719 1483 576 576 27 576 126 576 768", " 576 576 576 576 298 793 1452 576 576 1819 1794", " 576 576 789 576 1726 576 494 576 576 1652 238", " 576 1238 576 576 693 576 41 708 1434 1814 1145", " 1854 76 576 576 1207 576 576 743 576 576 1999", " 1531 576 576 1530 656 576 485 576 576 484 1049", " 1718 576 851 1005 576 301 576 576 543 576 576", " 576 147 576 576 312 19 1009 576 576 645 54 80", " 576 91 448 576 576 1937 1193 465 576 1853 576", " 576 1146 84 216 1066 73 576 609 576 576 576 979", " 576 1118 1914 576 438 576 576 576 576 576 1272", " 576 576 576 576 826 778 576 576 871 576 576 713", " 1315 1031 15 1589 576 576 576 1787 576 576 576", " 576 1773 576 576 576 1423 576 576 576 1851 576", " 533 1986 172 551 1783 576 576 576 576 576 1225", " 576 695 576 576 533 1881 1736 576 576 1045 576", " 576 576 576 576 1163 576 1889 846 719 438 1059", " 467 576 576 576 1494 576 576 107 576 7 160 576", " 1254 576 576 576 576 1943 576 576 576 397 576", " 304 576 576 712 357 1493 582 1745 235 576 840", " 1515 576 576 576 1410 1013 626 1715 1941 576 576", " 536 660 576 576 576 576 1847 1376 834 576 124", " 1515 256 576 1595 576 576 576 248 576 576 576", " 1947 576 1829 576 576 846 576 576 1894 576 576", " 576 944 378 576 576 983 1962 150 637 576 1969", " 138 576 225 576 576 298 1653 576 89 576 576 530", " 576 1541 576 785 1518 755 159 576 576 576 1243", " 576 664 576 576 956 576 1619 576 576 576 576 467", " 1296 1313 373 576 160 691 576 576 1111 576 576", " 459 1332 576 576 1042 576 576 1661 576 576 576", " 576 913 576 1440 576 576 1113 1179 576 576 576", " 1619 738 576 576 549 1325 576 1324 1986 576 576", " 576 1794 576 576 576 1828 576 1922 1384 321 576", " 688 21 576 576 576 576 465 576 1944 576 576 703", " 576 1833 576 696 576 139 576 576 576 301 195 576", " 576 108 576 338 576 558 576 576 576 1334 576 576", " 576 889 576 576 1288 576 576 576 576 576 576 576", " 576 1907 1824 576 1362 298 576 576 1804 576 576", " 576 576 576 45 576 576 576 1076 576 180 621 482", " 576 576 14 576 1629 1332 834 706 576 1695 576", " 361 75 576 576 576 735 576 1950 576 576 576 1490", " 576 742 576 576 576 1580 1634 576 576 1786 576", " 576 576 867 539 1300 680 576 539 576 576 908 576", " 576 576 150 1880 576 1532 576 576 333 576 576", " 8 576 576 176 1917 576 775 1448 576 576 576 576"};
    vector<string> part2 = {" 1226 576 1970 576 576 418 1309 576 576 1268 1504", " 534 552 944 576 764 1568 576 576 341 1838 576", " 254 1710 576 576 576 576 107 576 98 576 200 576", " 1170 1627 576 576 1963 576 576 1395 576 576 1207", " 177 1884 576 576 576 1878 863 576 576 576 1840", " 576 576 210 576 576 576 576 42 576 526 1346 576", " 576 535 576 576 1622 576 576 576 1989 576 576", " 576 576 576 576 1969 1691 576 1929 576 576 576", " 1482 904 576 954 576 576 1845 576 143 239 576", " 1343 1497 576 576 576 235 801 1261 1466 994 446", " 959 446 576 896 576 576 1699 576 576 576 941 1357", " 576 576 576 576 576 576 1853 576 576 576 771 1713", " 576 461 576 576 576 1908 1162 109 576 576 1991", " 1470 576 756 576 212 576 1627 144 1163 544 576", " 1373 345 1143 1419 1385 576 576 576 576 576 464", " 576 1352 1546 721 1274 1252 1799 1831 576 597", " 576 571 1452 170 880 576 576 706 1774 576 406", " 1266 1125 576 576 576 162 576 576 576 576 79 576", " 576 1349 1479 576 1968 576 576 576 576 576 576", " 1691 576 576 325 576 576 576 576 576 724 576 576", " 576 576 576 576 576 268 576 576 1482 576 1408", " 480 1642 1814 1679 576 576 1988 852 949 1719 1060", " 576 576 576 576 576 602 576 1584 1511 632 703", " 576 1185 597 576 551 576 576 576 576 576 1933", " 576 1258 1301 576 576 1819 576 576 576 183 576", " 576 576 1032 1487 576 480 576 576 576 576 576", " 1838 576 576 1733 576 576 546 800 162 576 1665", " 576 888 576 1521 576 576 576 1194 576 914 576", " 576 576 576 1618 1899 653 638 576 702 576 700", " 1047 576 576 576 576 1786 1051 576 576 476 1414", " 411 237 1873 725 764 838 1457 1055 1542 1570 288", " 576 576 1928 576 576 1107 1336 576 576 29 1319", " 1595 1530 309 1675 576 576 576 576 576 576 576", " 502 576 576 576 692 17 1214 1857 1019 518 312", " 1361 1459 926 910 709 1007 446 139 576 1523 576", " 576 576 1329 576 576 576 576 576 576 3 1417 576", " 1764 576 576 178 576 1895 576 1021 576 1948 576", " 576 576 1047 576 18 1470 576 74 576 1130 576 1498", " 75 707 376 677 576 576 576 636 1808 396 576 1888", " 576 1923 576 626 576 1900 1945 1699 2 576 576", " 1188 812 576 576 576 603 576 1233 371 1678 326", " 576 1650 576 630 576 576 734 576 40 576 576 56", " 218 576 576 213 576 576 576 39 576 576 878 1098", " 1022 962 535 576 1437 576 718 576 576 576 1330", " 576 874 576 576 236 1807 576 990 199 1820 1686", " 576 1081 1361 1089 1572 576 795 1095 1440 576", " 576 576 576 576 1988 1443 1566 576 576 576 576", " 576 1809 576 576 371 1173 576 576 576 789 576", " 576 502 1638 576 576 1740 88 742 576 576 576 503", " 576 576 1309 534 951 576 1543 576 576 933 576"};
    vector<string> part3 = {" 96 1403 576 576 576 576 576 576 1781 395 576 535", " 651 576 576 1139 438 1834 576 576 576 45 227 576", " 576 1308 1816 576 576 576 576 1799 576 576 576", " 576 576 892 1274 1702 270 576 839 1284 576 594", " 1061 576 195 1683 576 1381 1732 576 576 576 576", " 576 429 793 576 700 576 576 576 1555 893 1864", " 576 107 1039 1547 576 808 517 1261 576 1620 816", " 576 576 576 709 634 576 576 576 576 1524 849 58", " 576 317 576 493 45 776 874 2 576 634 483 675 576", " 430 1613 781 576 576 576 576 576 333 545 1920", " 228 192 1876 576 576 576 576 173 462 576 576 1959", " 576 576 576 943 510 576 576 576 576 576 1852 591", " 1395 576 1697 576 576 701 982 576 1243 438 576", " 576 607 576 1400 576 576 496 1584 180 1387 576", " 576 632 576 350 627 576 576 803 576 1218 576 1495", " 576 576 576 576 365 394 576 1425 576 576 355 314", " 1107 236 298 576 576 448 576 1587 576 576 576", " 576 576 1320 576 576 1320 576 576 576 1466 537", " 1114 576 576 576 576 576 576 576 576 543 1319", " 576 576 762 576 576 576 576 160 576 576 1813 576", " 156 1502 576 576 576 576 576 576 785 1255 372", " 1659 190 1568 807 576 474 576 1685 576 576 576", " 576 15 576 1617 576 55 862 576 576 576 576 576", " 819 576 576 576 576 801 576 576 189 1733 576 1294", " 576 576 576 576 1091 576 50 925 576 576 824 232", " 576 1895 576 283 54 576 576 1270 1034 1868 576", " 576 1707 576 576 576 1885 1830 576 576 576 576", " 79 1127 1203 557 576 586 576 576 576 576 1345", " 576 187 1292 168 576 859 576 576 576 590 576 1909", " 576 926 576 1634 576 576 576 576 576 576 863 464", " 737 576 576 992 1845 748 295 576 961 1960 576", " 906 576 1896 971 576 576 1001 576 576 1761 576", " 576 576 576 721 576 576 434 1012 576 1693 1579", " 1546 576 1117 576 594 1327 91 1407 1890 1893 576", " 1681 1870 576 1313 576 576 1592 1809 110 576 576", " 576 548 576 576 576 711 576 1427 576 576 723 1989", " 576 576 750 674 576 576 180 576 576 722 1119 576", " 576 576 949 733 576 115 576 576 1036 150 576 576", " 576 1225 576 576 1843 576 576 424 576 576 576", " 576 576 576 727 181 372 576 576 576 576 916 668", " 495 354 1124 576 576 733 576 198 576 576 576 576", " 576 1705 576 172 576 576 1187 34 576 576 576 576", " 576 576 576 1782 1982 576 576 576 1628 576 576", " 576 1812 576 576 576 576 576 576 1361 576 383", " 516 576 225 517 445 511 950 576 1434 1644 1964", " 576 1418 576 576 576 249 576 576 576 576 576 155", " 1162 576 576 576 782 576 576 576 1867 576 1740", " 576 1848 89 871 1785 576 1344 576 576 319 576", " 576 728 576 576 576 1277 715 576 576 576 576 707", " 576 576 1064 112 1479 576 148 576 608 20 576 576"};
    vector<string> part4 = {" 576 1303 1219 576 576 576 576 452 576 1485 1310", " 576 576 576 219 576 557 123 576 576 576 576 576", " 973 576 1334 1099 812 576 576 1816 1005 576 472", " 1906 576 1868 1823 576 576 401 576 576 576 1242", " 576 576 576 576 1582 576 576 576 1503 576 1954", " 576 576 1825 576 576 246 1884 499 860 576 1405", " 576 597 576 1596 576 57 744 576 1712 1382 576", " 1762 576 576 1524 654 576 576 786 443 224 576", " 1989 1546 175 88 576 1835 404 1458 1373 576 576", " 818 1287 874 1374 576 269 576 180 882 1705 576", " 1434 1059 1148 1629 385 1684 1707 576 576 576", " 576 576 576 1061 1740 1725 846 348 576 576 113", " 186 576 827 562 624 576 576 778 576 1149 1866", " 576 687 576 509 576 576 384 576 576 576 576 576", " 576 576 542 1263 576 1465 576 576 576 1457 971", " 826 871 608 757 1421 1783 679 1001 576 576 1302", " 1609 1148 1287 576 576 985 1865 576 576 185 287", " 576 576 1598 576 1773 576 904 576 1712 576 576", " 576 576 576 576 576 576 659 576 576 157 576 576", " 576 601 201 576 612 576 576 576 1495 576 576 576", " 576 1413 576 1883 576 1150 576 1582 1045 576 1591", " 576 576 576 1945 1193 576 576 125 576 576 576", " 576 644 576 576 576 576 576 1685 541 1739 576", " 1722 576 576 576 1414 1895 576 576 576 576 576", " 1389 576 202 1944 576 874 1275 1197 46 610 1937", " 576 1774 576 300 576 1014 1271 1332 576 1401 24", " 576 1131 1244 576 576 568 576 1382 195 579 576", " 576"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1999;
    if(result == expected) {
        cout << "Test Case 86: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 86: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test87() {
    int numSheep = 2000;
    int maxRuns = 1909;
    vector<string> part1 = {"766 897 1182 1179 897 1895 1091 1447 897 1026 1440", " 100 897 580 1054 897 1841 559 446 897 897 1192", " 897 1850 897 897 1955 975 245 897 1590 897 361", " 897 1739 897 1142 897 897 897 488 897 793 897", " 897 897 897 897 1157 897 897 1601 897 399 919", " 1149 897 730 647 348 897 897 1231 897 897 897", " 897 1981 897 1013 1383 1289 1978 496 883 897 897", " 897 897 897 1654 897 897 1596 1677 1612 858 897", " 897 320 588 897 897 743 897 897 897 1199 174 1887", " 1732 1631 897 691 897 1297 458 1016 897 1464 1889", " 830 897 897 150 1018 897 897 897 897 205 1336", " 1281 1348 826 897 897 851 592 31 1141 787 897", " 725 897 897 1736 897 897 897 897 897 897 1617", " 897 1015 897 897 1287 344 269 897 1765 1897 1719", " 780 897 931 30 897 897 1526 897 1349 1773 1282", " 897 897 938 897 1213 897 936 822 897 897 443 897", " 897 435 897 926 789 1859 897 897 897 897 897 897", " 897 897 897 1941 897 310 897 9 897 282 642 897", " 897 897 897 1927 897 897 1812 1057 897 897 1742", " 461 89 1946 897 897 703 897 1898 959 897 940 897", " 1459 1822 207 1632 897 897 897 86 1975 897 897", " 897 1421 897 897 897 863 897 897 897 897 1508", " 410 248 897 1745 897 897 1294 1324 897 1847 246", " 897 897 897 897 831 506 1100 897 897 918 811 255", " 1160 897 1262 897 897 1967 897 1206 518 15 598", " 455 1026 897 897 942 897 897 897 276 92 456 1976", " 897 1636 83 897 897 1808 897 465 897 897 1550", " 897 945 897 106 633 897 897 897 897 897 242 745", " 1779 1507 897 897 1405 897 897 1726 897 1502 897", " 897 897 897 1361 897 616 897 897 334 897 155 651", " 897 1801 1850 897 897 244 158 897 365 897 897", " 897 1105 1083 165 897 897 813 1249 802 742 702", " 897 1809 197 897 22 897 897 1494 1854 897 897", " 897 897 873 897 897 264 897 280 897 1962 1464", " 1491 897 897 897 1959 705 897 897 897 897 897", " 897 258 897 396 1389 897 24 897 897 1808 1885", " 1194 436 897 273 897 67 897 897 463 1937 961 1498", " 897 1370 897 537 897 897 1414 897 928 678 897", " 897 897 897 897 897 897 808 897 897 584 897 897", " 897 1759 897 897 897 897 486 897 1057 897 897", " 897 378 897 897 1539 584 866 315 897 897 897 1132", " 388 897 897 897 1230 766 343 897 897 1199 500", " 1169 1150 897 1222 897 897 1343 907 1320 897 897", " 414 971 737 897 897 897 897 897 1344 1180 897", " 1028 897 897 518 897 516 335 897 897 897 1568", " 725 897 1497 897 709 846 504 581 1495 897 1518", " 1554 973 897 897 1656 975 126 1099 1227 897 1204", " 897 1568 1168 892 1817 897 897 897 1901 1343 992", " 1327 897 106 1138 935 897 792 897 1870 123 897", " 897 897 58 1854 1895 897 1587 1917 897 1179 897"};
    vector<string> part2 = {" 1503 897 897 897 588 897 897 897 897 897 1903", " 897 897 897 897 1264 897 907 897 180 1574 1634", " 897 897 1366 801 438 897 893 897 938 897 1746", " 1622 406 23 897 897 897 1541 1263 897 897 897", " 1620 897 897 1119 897 1104 1776 762 225 1770 897", " 897 417 11 764 1438 1601 872 897 132 767 1275", " 897 385 897 897 897 822 897 1456 352 897 897 897", " 897 897 758 358 270 897 897 897 897 897 897 897", " 1048 897 897 156 897 1192 897 897 897 833 897", " 1136 897 22 616 1726 897 897 897 1587 1438 124", " 1540 897 728 897 1571 916 897 1896 785 990 748", " 897 1012 897 897 897 535 897 788 1840 1940 1287", " 897 897 897 897 568 46 897 1971 234 897 897 659", " 894 897 897 1986 1740 897 897 897 897 897 897", " 693 897 202 897 897 897 897 1239 472 897 897 1248", " 897 897 897 1298 897 897 897 897 897 107 897 897", " 897 1941 221 530 897 897 897 668 1160 992 897", " 897 976 1322 897 1304 897 897 897 897 682 921", " 529 1118 897 387 897 1683 897 1813 897 897 573", " 734 55 225 897 897 1711 897 1988 897 570 897 897", " 1281 186 707 897 1805 1387 897 1451 897 897 897", " 897 897 897 143 1879 1797 377 897 897 897 1076", " 397 1180 788 897 897 897 873 897 530 897 897 897", " 412 897 653 897 897 897 498 897 1327 897 1703", " 856 1738 897 1330 897 897 411 897 88 897 499 712", " 621 390 1389 1612 508 897 1606 958 1854 897 897", " 897 897 897 878 897 341 897 652 1818 897 1319", " 1010 1806 305 897 1861 897 1721 589 897 480 1741", " 876 1007 978 897 897 1970 897 182 897 897 1759", " 897 1113 232 373 72 897 897 1630 957 318 897 897", " 897 897 397 897 259 1766 210 897 897 149 897 897", " 897 1629 142 897 233 2000 897 897 897 897 1309", " 897 897 897 1938 512 330 1395 909 521 897 897", " 1431 1008 897 1244 897 897 897 628 897 897 468", " 609 296 140 897 692 897 702 897 897 1264 897 285", " 897 897 1021 897 897 897 813 897 897 897 897 684", " 1982 1794 52 897 1642 517 897 260 897 897 897", " 221 1332 897 897 897 555 897 1590 204 658 897", " 202 197 1011 221 897 1216 999 897 1112 1350 897", " 897 1874 1414 897 746 1177 897 1798 897 913 897", " 493 897 897 1006 908 897 440 1303 897 977 897", " 1156 1077 1278 897 897 897 1866 897 897 897 897", " 897 1700 897 897 275 19 897 897 1022 1522 897", " 463 1989 1839 722 1171 1596 939 1050 897 539 897", " 1464 908 897 897 897 897 897 897 897 300 897 897", " 137 897 1695 819 278 1418 1181 1918 489 774 897", " 897 175 1543 815 897 1672 1495 427 897 115 1627", " 897 897 897 1772 897 420 667 897 1602 897 975", " 897 1942 187 1310 897 1919 897 838 1091 897 128", " 1245 1187 897 128 1346 976 897 897 897 897 897"};
    vector<string> part3 = {" 897 1776 1032 1902 1256 897 1966 897 1213 897", " 609 134 1728 100 1305 897 1907 1120 897 1594 897", " 1789 1531 1395 1829 382 229 802 1927 897 897 67", " 897 471 897 897 897 897 897 897 897 897 798 1097", " 1601 937 594 469 897 897 375 897 897 897 897 897", " 897 897 897 1574 897 1925 1605 408 232 1295 248", " 897 897 897 897 897 1980 897 1459 897 897 897", " 897 848 897 897 386 1134 897 897 344 1214 1718", " 1091 897 897 164 637 475 25 1339 1528 766 434", " 1038 897 897 897 1060 897 287 657 430 897 897", " 897 897 843 1202 897 897 897 897 897 897 656 897", " 897 897 897 916 1220 897 805 1209 1534 1522 150", " 572 385 521 1385 889 542 1709 897 897 347 713", " 405 897 1682 897 1775 988 897 391 897 897 897", " 897 897 1879 1416 897 897 457 897 1563 960 1092", " 897 897 897 41 877 897 897 897 897 897 615 516", " 475 1883 897 897 1997 897 290 1727 897 897 1884", " 897 1298 897 897 897 559 897 867 897 601 1065", " 897 965 206 897 798 1006 1419 881 197 1184 897", " 36 897 1640 1023 897 897 266 897 897 673 897 616", " 897 897 897 1700 897 342 897 897 1453 897 897", " 1005 897 897 403 883 748 897 897 897 1664 897", " 1385 897 897 897 897 897 897 897 787 897 1889", " 897 897 897 153 850 241 897 1513 897 546 1239", " 550 966 897 897 1630 63 897 897 1057 897 897 897", " 897 897 897 897 863 897 76 1481 718 897 419 769", " 897 897 1043 1032 1546 615 1269 547 897 407 897", " 654 120 932 638 1586 897 129 1396 1629 897 897", " 412 897 897 897 897 840 897 369 897 947 897 897", " 1624 492 897 340 1389 456 897 1000 1876 749 897", " 328 897 1699 956 1003 897 663 897 391 897 120", " 897 1703 897 897 1958 897 1872 1640 897 1520 897", " 760 555 1353 897 897 1135 140 261 897 897 472", " 897 971 897 897 897 897 1581 847 699 897 897 897", " 1412 897 897 200 593 897 897 1979 985 897 897", " 172 868 897 48 614 897 171 268 1142 392 767 897", " 130 1232 361 588 683 897 897 1386 788 897 1959", " 897 740 851 897 1407 1327 897 401 1602 199 27", " 1838 819 1388 897 897 897 897 897 1708 1352 897", " 897 897 897 897 897 897 525 1652 1 897 897 897", " 897 897 897 558 1654 1429 588 603 1949 973 1960", " 897 897 897 1942 897 897 897 360 897 897 897 897", " 897 897 897 897 1192 897 897 1326 897 1854 897", " 496 275 897 897 897 678 645 897 1903 897 1131", " 390 10 897 922 90 1353 1418 1442 776 1754 897", " 897 456 897 897 897 823 1133 1416 1414 897 897", " 1578 1449 1294 897 897 897 912 285 276 897 897", " 418 897 897 897 1395 897 1360 35 839 897 1950", " 1540 545 1433 1902 1108 360 1547 261 1177 897", " 897 897 82 1780 978 897 643 897 1828 897 897 419"};
    vector<string> part4 = {" 897 897 412 897 897 897 897 886 1947 897 1525", " 1867 897 1815 1746 506 930 1144 1639 897 603 1397", " 1941 1762 897 897 608 897 1513 897 1511 897 897", " 891 1677 1214 1481 897 1610 1749 1980 1904 1073", " 897 684 897 897 897 897 210 979 1270 897 917 897", " 694 663 1942 1672 897 897 897 897 897 897 67 897", " 195 897 926 1982 952 1758 897 897 713 897 1380", " 1637 897 809 897 137 897 897 897 897 897 897 1646", " 1249 897 158 1020 897 1683 1995 897 229 1555 897", " 450 642 1041 897 340 955 108 897 1842 897 897", " 387 1067 897 912 1468 1484 1600 897 897 473 304", " 358 366 1353 897 748 1486 690 1445 8 897 897 897", " 897 897 897 1623 341 591 897 132 312 897 291 897", " 897 897 897 111 1103 1077 897 897 897 1265 869", " 897 897 1907 1156 1591 1780 897 1190 897 897 1279", " 1138 897 897 897 527 1582 1855 1709 897 897 897", " 1133 978 1705 897 897 1016 897 675 897 897 1692", " 897 897 897 897 521 1499 1907 1366 1156 764 897", " 1504 897 1988 897 747 897 82 1712 555 1102 1667", " 897 1013 897 391 1204 196 897 1097 1663 1629 897", " 897 1954 897 897 897 897 897 897 897 897 1742", " 678 897 897 1437 897 719 897 897 897 897 897 897", " 1188 897 1726 149 897 897 897 1541 1563 1202 897", " 897 1386 18 1569 897 897 897 1461 429 897 897", " 897 36 351 270 1604 897 897 844 897 897 767 1729", " 495 855 445 1110 1900 897 897 897 897 1688 897", " 686 1358 172 40 431 830 897 156 897 897 897 544", " 376 897 910 951 897 897 897 897 1203 897"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2000;
    if(result == expected) {
        cout << "Test Case 87: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 87: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test88() {
    int numSheep = 2000;
    int maxRuns = 1909;
    vector<string> part1 = {"612 963 578 1169 1057 1824 83 1057 955 1057 1057", " 116 1057 1057 1153 1057 1093 1487 707 1057 1812", " 1057 1057 1057 1057 1057 1057 273 1057 717 1057", " 1057 1057 1057 1057 882 514 155 1057 1057 1678", " 1057 1057 796 1057 1057 1057 1705 1182 1057 1057", " 302 1057 657 457 1057 1057 951 1057 1057 1057", " 1325 544 325 1927 1057 1426 836 1057 1085 1057", " 1057 1466 1757 1057 1924 1057 1579 1057 1549 1057", " 1684 1057 1407 483 1057 1577 1389 1057 333 1429", " 1057 1057 1964 1057 1478 1057 1632 1646 5 357", " 556 1057 1057 389 1057 62 1057 1057 408 1057 1057", " 1353 1858 42 1057 776 1777 1057 1057 1057 553", " 1057 1846 1057 1057 1057 561 1057 1878 1201 1057", " 1057 1057 1057 1057 1057 1485 1057 809 1057 121", " 1057 516 1057 546 1057 1211 1057 1963 1019 1057", " 548 877 1912 1121 1303 1057 1057 1057 1057 1057", " 1057 728 1654 1057 1057 1897 624 1057 977 1057", " 1057 1057 920 229 1057 1057 1057 1057 594 1057", " 1719 1057 1057 1057 48 1057 1856 1057 1057 726", " 1132 1607 1057 1057 838 1057 1383 1914 1491 296", " 1344 1057 1057 124 301 21 1057 1057 1057 1057", " 1057 1057 1915 1739 920 1057 1057 1057 120 1690", " 480 1426 1057 1823 376 1057 1347 1057 628 444", " 1431 1882 1057 1057 240 1228 264 1988 1057 1057", " 485 1057 1057 1057 866 421 945 1980 1057 1384", " 1288 577 705 1261 340 1057 1169 1057 1057 1057", " 1057 1057 1513 1057 1987 587 327 1057 1818 198", " 1057 1881 511 169 1057 1057 1057 543 1057 1057", " 5 1598 606 1057 212 846 1057 196 1617 79 1057", " 1057 37 1057 1057 1057 564 1932 1927 1057 1057", " 1057 1652 1057 269 1116 1057 2 1701 1057 1581", " 1057 244 1057 1057 871 1057 1164 619 219 1057", " 1057 729 1057 707 1317 736 230 789 1003 1936 1057", " 644 106 1057 1836 1538 1057 1057 71 1057 1937", " 1934 1854 1493 1057 1057 1057 73 1504 1057 1057", " 1057 1699 1611 1057 1057 1900 1057 256 1587 1456", " 1057 1057 1350 1297 352 268 268 1057 1057 987", " 1057 1057 1057 598 705 755 692 171 608 287 1057", " 37 1583 737 1057 1057 1057 1057 1134 1057 1057", " 1057 1057 1139 1057 1057 1057 500 119 1057 510", " 1477 1057 1057 455 846 1057 1762 1057 601 473", " 1648 1057 800 1057 329 1057 1057 1057 1057 1057", " 1057 1805 1057 1022 1057 1733 692 1057 1082 1057", " 1057 1057 1057 1057 1057 611 538 653 1601 1057", " 1057 1057 1057 1057 785 1057 1057 1057 1057 1558", " 1482 488 1057 1057 605 76 1057 1057 1057 1057", " 1057 877 1057 1780 1293 1057 1749 1057 1057 526", " 1057 1057 1907 1738 1308 615 1141 1516 1057 273", " 1057 878 1057 1970 1722 1057 1379 239 709 558", " 1057 1112 1359 327 1057 1376 1057 1057 1057 1718"};
    vector<string> part2 = {" 1057 1057 1057 227 1391 1770 1057 84 1164 1057", " 741 1057 1982 1387 1057 1057 1057 1057 1757 1057", " 609 1277 1684 800 1558 1057 349 1057 1057 1057", " 663 1057 1216 789 1057 1057 1057 1057 1057 397", " 1057 1057 1057 1918 504 751 1057 48 237 1057 1019", " 1057 1057 1057 1057 971 1972 1057 1057 1057 696", " 1057 1057 16 1057 1057 392 1057 432 730 790 1057", " 1057 1596 975 1057 1234 1057 882 1057 1057 1057", " 1570 1057 1057 1057 957 194 1057 1998 1057 1057", " 1057 1057 212 1057 1057 1057 1047 1057 548 1958", " 776 444 1057 981 1057 812 1057 1057 1870 1679", " 1057 898 1057 1057 1057 1057 1057 258 751 1013", " 603 1057 1057 1057 1992 1850 1644 1221 1057 146", " 185 1057 1320 1118 332 1057 1057 757 1369 1916", " 1119 1057 1057 1057 1057 1957 1057 448 1057 1057", " 1057 1057 1057 896 1057 1563 393 815 1313 1348", " 1057 217 1057 1057 98 1500 45 1625 1057 1057 1057", " 1856 1057 1057 1057 1057 778 1057 1057 1667 1057", " 1057 1057 1057 1024 1057 1057 462 501 1401 1318", " 1057 778 1908 1057 1920 1057 1057 1908 728 91", " 1057 1057 1057 1694 654 1057 1057 628 404 1057", " 1057 61 646 88 1884 1390 1057 1057 1057 842 1057", " 1057 472 1057 561 1462 1932 1057 384 608 702 269", " 1057 403 1057 128 1458 359 153 1057 1057 166 4", " 1057 305 491 873 1057 1057 1057 1057 58 1789 1057", " 1057 1057 698 1457 1343 1197 86 1057 1057 1057", " 1057 1818 1057 1058 588 358 1057 1057 1057 1057", " 1057 266 743 918 557 1057 1057 1057 1057 1499", " 1057 990 1131 1171 1057 1057 352 1057 1057 1057", " 1057 32 1057 1086 801 1057 1057 1057 1057 56 1057", " 1057 1057 1912 1664 1057 31 43 385 1057 1057 1057", " 1987 1057 471 1057 1057 1057 991 1057 1057 1096", " 1057 519 1855 1057 1057 1976 396 1057 1057 1637", " 1232 571 1057 1057 1102 87 829 1984 1670 1057", " 1057 1057 1057 1566 1971 952 1057 1057 1057 544", " 1055 1057 1160 1057 1057 1871 284 1057 1379 1057", " 1057 1057 582 82 1057 1057 1084 84 1057 1057 1057", " 344 1057 730 1057 666 1635 1057 577 1844 1057", " 1057 1057 1978 1390 553 1395 1057 1057 179 1057", " 609 1057 1057 1477 1057 1057 211 1278 1057 1818", " 1057 1057 1381 292 1057 289 1057 1057 1159 353", " 292 1057 1057 1731 1057 1057 163 1057 1057 1133", " 1309 918 1057 1057 1057 1395 1866 745 1057 153", " 1922 1057 96 1057 1038 1057 1057 1395 1277 949", " 1057 759 1057 1057 1057 273 1057 1057 1057 1076", " 1057 1057 1369 1057 689 22 137 1057 1057 260 561", " 751 1057 1057 1508 1057 1014 1057 1862 1439 1057", " 784 1248 1057 1057 1057 1965 1835 1328 941 1365", " 1057 1057 1929 1535 1057 1865 1057 553 1057 1057", " 595 1057 1501 1057 1057 688 263 1057 258 1057"};
    vector<string> part3 = {" 1057 1057 6 1057 728 1057 860 384 250 1055 1057", " 1057 1057 1057 1057 738 1057 465 1057 1096 1057", " 1685 301 1057 1057 1051 484 1057 1572 1550 1372", " 656 169 275 1057 518 1057 1057 600 1057 354 1057", " 337 365 1536 1849 913 1034 233 1432 1057 1585", " 448 1716 1057 1057 1085 1057 1057 1057 257 1057", " 1212 1908 1057 453 479 1821 1057 233 1057 1057", " 1132 1057 1861 1016 540 1057 1057 48 250 1826", " 1057 1057 874 1057 1057 1057 1057 1057 528 1057", " 1057 1693 1057 736 1057 1255 1057 1516 1344 1884", " 225 1057 1057 234 1966 1922 1057 1057 1057 1057", " 266 1057 1057 303 1847 1112 1271 415 1817 1057", " 413 119 1057 419 1057 1057 1057 1057 1941 1057", " 1057 94 1719 1057 1490 1057 756 1686 1057 1057", " 889 1870 1477 874 1822 1057 827 1057 1920 1251", " 1870 1057 957 1131 1297 1057 161 1057 1257 1057", " 1057 1057 1057 1144 1057 1635 1057 1057 1523 260", " 1835 515 1293 829 1057 121 1057 1057 315 1117", " 1057 194 1057 1057 1057 897 1057 1057 1057 882", " 1057 1645 1057 1057 1910 1011 1057 1057 1057 1357", " 184 1057 742 251 1885 1057 1057 1057 1962 1057", " 1057 399 1057 1964 1057 1057 1210 905 1057 1057", " 1547 103 1057 302 508 1801 1323 1057 1032 1485", " 1057 1057 1057 987 1057 1057 926 1057 507 1486", " 1057 1057 313 710 41 875 1611 1492 635 1336 1057", " 663 205 834 1057 1057 1057 163 1057 1759 826 1637", " 1057 1714 1539 1057 541 1744 1057 1057 1057 1218", " 1057 1086 1057 1125 1057 130 1374 1057 1057 1057", " 1825 1821 81 1057 947 1057 399 1718 1188 158 1057", " 1057 1620 1183 1057 103 1057 1635 1057 1899 1057", " 1742 1228 1931 1339 1057 1460 1057 1057 1849 1597", " 1057 1786 1222 135 1057 1057 1558 532 1057 694", " 118 1057 1057 1057 1907 1057 734 1057 1832 1057", " 1057 1433 761 112 1504 1057 33 1392 1057 674 1622", " 252 1057 1690 1057 1057 94 827 1057 242 1711 1033", " 1057 1057 756 9 758 1057 626 1057 1057 1057 640", " 1480 652 1057 1057 1057 908 1057 1135 935 1057", " 1057 1057 1057 1057 1057 405 1057 1057 1769 1057", " 1057 1625 833 1057 185 1050 1057 537 1057 1057", " 1057 1057 283 1057 570 1057 123 1057 1515 1057", " 1457 1346 1057 1158 1205 1057 1057 1829 47 1057", " 1060 1674 737 257 1057 1621 600 545 290 1057 1195", " 71 475 908 1030 1057 1057 1618 1288 1057 1766", " 1057 1057 1057 453 1057 589 1057 1854 1057 1057", " 1057 1057 1481 628 1057 1057 587 1194 1270 317", " 1057 1752 1405 335 1057 1178 1057 978 16 1623", " 771 1571 1057 768 279 1383 1057 1394 1671 1057", " 276 1057 1156 1524 1057 1572 1206 10 1057 1823", " 1057 86 1262 1057 34 1145 1096 1057 1057 234 1599", " 1057 1057 1057 1057 1057 773 1057 69 1163 94 1057"};
    vector<string> part4 = {" 1057 1237 1057 1057 1566 1057 1244 1057 852 1057", " 610 297 1856 1542 979 1057 21 1057 527 1057 1057", " 861 1057 1057 1057 1057 1748 717 1057 310 1400", " 718 1930 1900 207 1057 1219 443 1057 213 1057", " 1065 1057 846 1057 1332 1057 1654 1057 249 1290", " 578 1057 1400 1057 1862 1806 1649 800 1256 1962", " 1057 1057 1112 1057 395 1492 1057 1521 1057 12", " 1271 777 480 459 1057 333 1227 1057 711 1057 1057", " 137 496 1902 1057 1057 1057 929 1057 1057 1057", " 620 70 637 1057 1057 273 1057 1299 409 1057 1057", " 1057 1057 313 602 1057 1057 1057 1057 1057 72", " 344 1057 1328 1337 1057 1057 1057 1057 1057 1942", " 1057 1057 516 1057 1057 1057 1057 727 1057 1057", " 586 1057 1450 1057 1057 324 1057 1057 1541 1057", " 301 1057 1057 1126 1057 1057 508 1930 185 223", " 1057 1420 1992 339 566 1057 1057 1307 1057 1661", " 1366 590 372 452 1440 1057 1057 1093 1057 1311", " 1057 1057 1777 453 424 301 1057 1057 1596 786", " 628 1898 1051 1057 1057 271 1057 498 1533 102", " 460 1057 1057 42 1057 764 1317 1399 1057 237 1057", " 1665 1057 1057 1057 1057 1057 688 1495 1057 1028", " 1057 1057 1057 31 1256 1057 1057 919 1057 1565", " 1057 1675 1057 1057 1057 770 1057 1696 1057 1057", " 1057 916 1820 1057 1057 1464 1003 1201 117 1057", " 1057 1057 1467 1057 1057 1057 1057 1598 1584 1057", " 1057 445 1057 1136 1068 681 9 1057 1057 1407 1057", " 725 1986 449 1057 1088 553 105 701 1057 23 442", " 1057 717 1730 1057 1851 1581 1057 1057 1423 504", " 849 1293 724 1057 1057 304 1057 882 1057 1057", " 1739 1057 1057 1057 1057 1079 1853 1387 1057 1057", " 1057 826 1057 1898 82 1057 1057 1057 1057 454", " 803 1057 1193 1008 1057 1657 1057 893 1057 1057", " 1057 1057 1057 1057 1105 554 455 1057 550 1393", " 1521 1057 135 1057 1983 902 1464 1057 126 1057", " 1251 1141 1057 1057 246 1988 1057 1788 986 1057", " 1057 1057 196 1080 1057 1057 43 1057 489 1033", " 1728 475 1057 342 548 1057 1057 894 299 1580 1057", " 49 1108 1057 1057 1057 1057 1057 1057 686 199", " 119 1057 1481 1223 1057 1057 353 1885 1057 1536", " 623 1057 1057 1591 1057 1057 1057 1057 1057 1057", " 1117 1057 1057 1057 1057 91 1057 1724 1057 1057", " 1057 1057 169 392 1057 651 1057 1057 1057 1057", " 1057 1059 845 1057 750 1755 1057 372 1057 659", " 386 505 498 604 1280 1057 453 1057 925 1057 1057", " 329 245 1057 1057 1057 1057 757 265 1933 476 1057", " 1108 97 1057 1057 1057 557 1057 892 1057 1057", " 1057 1057 694 608"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1998;
    if(result == expected) {
        cout << "Test Case 88: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 88: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test89() {
    int numSheep = 2000;
    int maxRuns = 1909;
    vector<string> part1 = {"1131 947 1157 611 435 1157 307 1157 1157 1502 550", " 1157 1157 1157 1859 1157 1827 1157 1157 855 1157", " 1157 1157 907 1418 1157 968 1718 22 1157 1339", " 1157 1157 1713 1131 1157 1408 1157 1157 1067 1157", " 1809 296 1157 72 1186 1157 1157 1238 356 218 1010", " 1157 175 1998 1157 1157 1157 213 1157 1893 1157", " 963 1414 1471 596 597 1482 1157 1157 1089 1157", " 253 1227 293 1979 1100 1157 1157 1157 1157 1157", " 1157 1681 1157 862 1157 536 1157 682 1023 1157", " 1157 1827 1083 1157 486 619 944 1187 1157 357", " 1157 1157 1157 1157 1157 296 1157 1157 1157 1157", " 363 1157 1157 1157 1001 1157 431 1157 1493 1157", " 1259 826 563 1157 1157 1157 1157 1520 829 1157", " 1157 132 982 53 469 1157 1157 1157 339 1761 1157", " 1157 1157 1458 98 502 1157 1897 1157 1313 1157", " 1296 848 476 1435 1157 1157 100 1638 1011 1157", " 1157 1157 1122 1157 712 75 274 1157 748 1286 1157", " 1839 1157 1157 1169 1758 1805 1157 1595 1157 1157", " 1157 887 370 1157 1157 1157 1987 1918 1157 974", " 1157 432 1157 1157 1157 476 1157 801 1157 1157", " 876 1621 377 1053 1157 1157 1157 1157 1181 1157", " 1157 1704 1157 1157 1157 1157 1157 1254 1157 1852", " 483 8 1592 1157 1157 1013 1671 367 1157 1157 1157", " 313 1157 153 24 1157 67 1157 1729 518 1157 651", " 190 1503 1157 1912 1157 1844 764 1157 1157 1929", " 1330 1157 1613 1464 796 1157 747 189 476 1157", " 1953 1157 1157 1157 1157 268 1492 1109 1079 1157", " 1157 1157 1160 1157 1157 1475 229 778 1157 1933", " 1157 1157 1157 1157 589 1157 1157 1157 1157 1157", " 1157 1305 1157 520 1157 1157 249 1157 1157 577", " 1157 1269 92 55 1157 1157 1639 1157 1157 868 1508", " 1157 1157 1157 1090 886 1497 445 1157 1748 1157", " 987 1157 1756 1535 1157 1387 1157 207 1157 1157", " 169 1157 1157 1157 986 606 1157 1157 60 841 1584", " 1665 1157 1157 481 1157 1157 1157 1064 169 1157", " 1157 1157 1157 1157 1084 1157 1157 1157 404 456", " 1157 1157 1974 518 1354 1157 1157 586 158 354", " 1679 1157 1157 1157 1157 1970 1731 1157 1157 1157", " 1157 274 1906 1157 1157 1157 1804 1157 21 1157", " 1157 1157 918 1157 1157 1157 820 1157 748 1387", " 28 1157 1157 1974 1531 1157 1337 989 507 1157", " 204 1793 1157 1902 1157 1197 1157 1157 1157 358", " 1157 320 1295 1963 1541 1157 1157 1157 1157 1265", " 55 1531 1792 1157 1157 1157 1925 1157 663 1157", " 1859 1157 188 1712 1855 1157 1157 1691 1820 1157", " 865 1157 1157 1157 1157 560 1157 1157 1157 677", " 389 1157 1998 1157 1157 1157 1157 1157 220 1157", " 1157 1157 1157 1417 1157 1401 311 787 1157 812", " 1428 1157 101 1157 1157 1214 1157 138 167 1157", " 950 1704 1246 1778 1450 1157 1533 1600 1157 1157"};
    vector<string> part2 = {" 1157 1157 1157 1157 1157 1828 1157 1160 1436 1157", " 1054 1157 1157 1157 1157 1157 1157 70 1157 1157", " 1157 233 1157 1157 1157 1705 1157 1157 607 1157", " 1157 28 187 1416 78 1157 739 1941 741 1601 1157", " 1157 769 1506 369 662 1157 1499 1152 1157 282", " 1157 1157 1815 146 1157 1157 1157 1157 1216 1334", " 1157 1794 1157 1157 1157 1157 808 1157 1157 1157", " 1157 1763 1695 1527 1157 1157 1487 1157 284 1681", " 720 62 1157 1157 251 1157 1157 1157 1157 1157", " 1229 1705 1643 1157 1157 461 1608 87 1157 963", " 1157 1157 486 1157 1157 1157 1485 1157 992 1157", " 589 1157 945 251 295 265 1376 1993 1157 1157 1157", " 1157 72 1157 1157 1157 1157 1007 1157 444 1728", " 1157 1157 10 1157 1391 1157 1157 1157 393 785", " 1157 1936 814 1157 1157 138 161 1157 1157 1157", " 1157 772 1883 1157 1932 421 716 1157 1218 1157", " 1157 1157 1157 222 1157 1157 1157 1157 582 1157", " 1157 335 1157 340 1157 1143 1157 1157 1157 1157", " 1043 1157 550 1523 1157 1157 1157 1427 1157 820", " 1157 1157 847 161 1157 1467 419 1157 1157 1157", " 833 1260 357 1157 1585 1157 1431 1949 1035 1286", " 1157 1157 1100 800 1157 1157 1157 1244 1157 1554", " 1157 1157 1157 744 1945 1157 906 1157 692 1362", " 1157 1157 584 1157 1940 1157 115 427 1157 843", " 1157 1157 1157 1157 562 359 1157 950 1157 1157", " 486 1157 1157 1929 1157 1157 1157 1157 1157 1157", " 1157 1157 1157 490 1783 1997 1157 549 671 335", " 1157 1518 965 1157 525 1157 1157 317 1157 291", " 1673 611 1157 1157 1157 1157 1157 1157 1355 1157", " 1157 1157 1157 1157 513 1315 1081 461 1157 1157", " 1305 1585 1157 1003 162 1157 753 1157 1315 1157", " 647 1157 1517 79 1157 1463 891 1316 328 1157 37", " 1157 29 1157 1781 1157 1835 227 1157 912 92 486", " 1157 1091 1157 1157 1157 341 1157 337 1214 1157", " 1950 62 1923 1868 1157 1157 1157 1157 442 1157", " 1157 293 1157 1157 1157 100 1157 1157 520 1157", " 1157 518 780 1157 1157 1157 1157 1119 611 1157", " 399 1157 1157 1157 1157 1157 75 1157 1404 1157", " 1839 1157 1157 218 1157 712 1157 1157 916 1157", " 1157 1048 1157 1157 1157 884 1965 1157 1157 1051", " 875 1530 1157 109 71 1157 220 1157 1718 1157 1157", " 1157 1157 575 1157 1157 1157 1157 1157 539 1157", " 1157 1157 1157 1157 590 1157 1157 64 1157 1157", " 1157 1992 336 1491 996 1157 236 386 585 1145 1173", " 1157 1026 1597 1157 1157 746 1157 952 380 1445", " 1157 1157 1157 1157 1004 870 1157 869 1515 1157", " 1157 1157 122 1194 1157 1157 1157 254 1157 1157", " 423 478 981 203 496 1649 904 1157 620 1157 1157", " 1157 1239 1853 1157 1157 1157 1157 292 1157 1157", " 1157 1157 1157 9 1157 1948 1157 1157 1157 21 1157"};
    vector<string> part3 = {" 1157 392 1031 1157 1157 1635 1157 1157 1157 1164", " 517 235 1157 384 1157 1157 813 1913 1157 839 1157", " 104 1157 1546 1157 1157 1157 1157 1421 1157 1157", " 1157 1157 1224 1157 1157 257 1157 412 1389 1232", " 1157 1000 1157 596 1157 1157 1157 1157 1157 1939", " 184 1157 1621 1157 886 997 1358 1157 1157 372", " 1157 1157 1563 1157 1157 1157 1252 1157 1949 1157", " 1157 339 1157 1157 1157 1157 1683 1157 1157 1157", " 1902 1157 115 1157 764 1157 1157 763 1157 113", " 1382 1157 1723 1881 1157 1998 1157 764 611 886", " 1157 1246 864 895 1157 1426 177 530 1650 1157", " 1157 1221 1337 365 1157 513 322 1157 1157 1157", " 1157 1157 1157 1209 1157 101 812 298 1771 1157", " 340 1157 1157 1157 760 1158 1157 1157 1157 404", " 1526 63 1773 1157 842 1157 118 302 12 1157 65", " 1157 1157 1157 1221 1157 278 549 198 220 473 1157", " 471 512 209 400 139 1897 1157 1157 1157 1980 1619", " 1157 699 1157 1157 1157 1157 1352 1157 1157 1935", " 1338 1157 1157 1916 756 762 1157 441 577 149 1157", " 1157 1157 1157 25 1928 1157 648 1157 1157 1157", " 729 1157 1527 370 1157 1157 1442 356 1871 373", " 1079 849 1331 1157 1559 1157 1157 1572 1157 1157", " 1157 421 1157 1515 791 1815 387 1455 1186 1436", " 1593 1196 693 1157 757 1157 1157 1157 632 1976", " 1157 1982 1157 406 1157 1157 1157 1157 1157 1443", " 824 1157 464 1157 1157 1157 1157 1157 1724 1157", " 1950 1157 1157 1157 1157 1157 1157 1157 1157 1752", " 90 568 236 1157 186 1157 1157 501 1157 1157 1157", " 425 1157 80 1157 1157 1133 991 1157 1157 1082", " 1157 1157 1041 1157 1157 1157 1157 455 605 556", " 1157 1157 1157 1867 1157 1157 1327 386 1233 1157", " 1157 1157 1157 1157 1157 1157 433 1787 1713 1512", " 815 1157 1157 1157 1157 192 1157 1157 1157 1157", " 1157 1157 1223 1293 525 561 1096 1930 1157 1157", " 1157 9 1796 770 1770 1157 1157 882 399 1383 1892", " 1397 1157 1723 1552 1157 1157 1157 44 909 622", " 1268 156 1157 1157 1489 1157 1157 1157 1465 1157", " 502 1157 1819 1077 1157 523 862 1157 900 1595", " 394 1157 1157 1079 838 1157 1157 1157 1157 532", " 1157 1157 1268 1888 563 1157 1971 791 1157 1652", " 1157 1157 1157 119 40 1802 722 1157 1157 1157", " 1157 1233 1157 1105 6 302 1157 1508 1157 639 1417", " 1157 1157 1157 1157 1157 1818 1157 1224 1157 1157", " 571 1157 957 62 1982 1099 1157 1157 1157 1390", " 1105 1157 682 1157 1157 1126 1321 540 1157 1157", " 1157 484 1157 1157 1570 1312 911 1157 1157 1157", " 1927 702 594 1157 1157 334 1157 1157 1157 1652", " 1805 1218 331 214 915 1858 1444 1157 1157 1287", " 1157 155 1157 1157 1157 1157 1157 1831 1475 1716", " 1368 1157 1157 1511 203 1157 1157 1157 1762 89"};
    vector<string> part4 = {" 493 579 1157 893 1707 1584 1157 400 1157 1157", " 769 1157 1667 1376 763 1157 92 740 518 196 1157", " 1157 1157 1029 39 586 1298 1157 1157 1157 1157", " 40 1157 1157 1157 1157 1157 1501 1393 1056 1108", " 1157 840 1157 1157 1157 1157 1157 866 1091 1275", " 1188 1157 173 1157 1636 1157 1157 732 789 1872", " 1157 678 1157 1157 1157 1157 152 505 1179 1157", " 1157 1410 1234 1355 761 1167 182 846 326 1157", " 1157 1157 1648 166 1157 292 1157 1798 1583 1157", " 1157 647 1569 1759 1157 1157 894 1157 1157 1072", " 1319 758 1157 1314 1188 1157 1157 435 1157 39", " 451 1537 1004 66 1157 196 1512 1157 1157 999 436", " 1418 1988 1157 1157 1157 1788 833 1100 467 1504", " 1655 1157 765 1157 1346 1157 1223 337 1957 649", " 570 80 1157 1157 1157 1899 1157 1259 1157 396", " 858 1157 1157 1157 1157 1157 931 1471 1157 767", " 1939 1157 333 1140 1157 1157 1667 875 1157 656", " 1157 1473 342 1157 237 1157 947 802 1157 1157", " 1021 1123 1157 815 1132 1157 1157 1921 1157 1157", " 1157 532 1157 791 860 366 1790 185 399 106 1157", " 366 1157 1481 1821 1157 1157 1165 218 1157 1157", " 1157 1157 1026 1157 1844 1531 1905 1157 1942 1157", " 1157 1189 941 1157 1157 1157 1733 1157 1157 1157", " 949 1157 1157 1157 1157 52 1157 223 1157 1395", " 1157 1157 1574 1157 322 1157 1157 1157 1709 1157", " 1069 1157 1157 1406 1942 617 1157 38 230 1157", " 1157 1157 1157 1157 1206 1157 1604 1157 1157 611", " 1222 1757 1157 1157 179 1510 1157 722 1209 1157", " 1157 1157 157 1157 611 1157 1157 1157 1634 354", " 1828 537 113 1498 1317 1998 1157 1157 1157 1157", " 857 975 1250 517 1199 1157 1157 1157 1002 1042", " 1157 1157 460 1157 744 1157 1157 1961 1157 1157", " 1157 130 1816 1739 1804 1157 1157 1756 335 375", " 1157 329 303 1157 1157 346 1157 762 455 1157 1157", " 1410 1157 1157 1775 1157 1691 1157 1157 1208 1157", " 1157 1827 1373 433 603 1157 1157 1425 1917 1607", " 1186 1749 1157 1157 1157 1157 177 920 1618 1157", " 1157 518 1157 190 1157 1157 1157 1157 1157 1157", " 135 1157 1157 36 1347 1157 1157 662 397 1157 1157", " 1157 395 1157 1157 1171 1157 219 1331 1013 1157", " 1931 1157 151 1157 1157 36 1646 1157 1539 1157", " 1661 1157 1157 814 1446 1157 1157 1157 231 488", " 1157 1094 271 1157 1157 803 1157 1157 789 1157", " 1878 927 1157 1157 1157 1157 1157 648 291 1157", " 386 1702 302 653 121 1157 1157 1245 135 1369 1157", " 704 1157 1155 298 1157 1157 1157 1439 1966 1157", " 1157 1157 284 1157 1157 1891 1157 1090 1157 1157"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1998;
    if(result == expected) {
        cout << "Test Case 89: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 89: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test90() {
    int numSheep = 2000;
    int maxRuns = 1909;
    vector<string> part1 = {"1337 560 1337 1708 1337 1337 1337 1337 556 1337", " 1337 415 1337 880 96 437 597 1337 1358 6 1337", " 975 1596 1170 1398 1636 1065 1337 1337 180 389", " 659 1337 1337 1329 1337 1337 1980 972 1337 1337", " 1337 1079 1043 1337 1337 1294 1737 1337 1337 78", " 1337 1400 1337 1337 1337 1337 1529 853 443 1190", " 1337 1337 503 1337 1337 1337 1337 200 267 1144", " 1225 1337 599 1337 1799 1337 1337 1337 1337 1337", " 1337 1878 1294 21 1337 1337 1895 630 1231 1222", " 1337 1337 156 1337 1337 1112 169 1337 1337 1337", " 1337 1337 1337 1333 621 748 733 1337 1766 1337", " 1302 1337 1337 249 1337 1337 1337 1337 1910 1829", " 414 1337 1337 665 1337 206 178 604 1337 1921 1255", " 1337 1415 1337 1550 1337 1337 558 344 1337 191", " 1337 489 1337 870 1931 1337 1697 227 267 1337", " 923 1337 1248 939 246 33 1878 1931 1337 1337 1777", " 1337 431 1347 1337 143 810 1337 1337 1132 1337", " 1225 1337 1337 1337 1188 1933 1337 1337 806 810", " 1337 978 1337 1337 1337 462 1337 1232 1337 1859", " 55 1337 1337 1337 1337 1337 1337 1337 135 1337", " 1337 1181 1052 1314 1337 1332 1337 1337 1992 1337", " 1337 1830 1472 1475 1337 418 738 1337 1337 244", " 733 1337 1337 1474 1337 542 1837 1788 1337 1337", " 1337 1337 1917 628 920 1186 1337 981 1337 1337", " 465 1753 1188 1337 1529 1337 1337 132 1337 1728", " 530 1337 1337 1337 1337 84 1337 1337 1337 1068", " 1337 398 1337 1337 1337 1337 1337 1337 1337 1337", " 1337 1337 1477 1445 422 1201 182 1337 430 1337", " 962 1337 1743 1337 1337 1337 185 1046 1337 599", " 312 1161 1337 1337 1689 1337 1988 1208 1337 100", " 1581 1337 1149 1852 1804 1337 265 1905 1337 358", " 944 1337 1337 1284 1337 1869 1337 1337 643 1337", " 103 683 1049 1337 31 1337 1888 1337 1337 1016", " 1337 667 1771 1337 289 494 1252 491 1337 220 1337", " 1337 1337 1337 226 719 1337 1337 684 1949 1337", " 1337 1337 1337 1337 1321 1337 222 968 1096 1333", " 798 1337 1337 965 28 1415 1337 1477 1337 969 1607", " 1337 1657 265 1337 1053 1512 1337 351 1337 45", " 1907 411 1337 1337 576 12 5 1337 1839 266 1471", " 1337 1705 1337 864 1337 1356 550 1337 82 465 366", " 1337 1201 1833 1337 1337 1316 709 1337 1337 1337", " 1337 1823 1337 1453 1337 810 459 936 587 1337", " 1468 1337 1337 1337 665 484 1337 288 1337 1754", " 1331 1337 1374 492 1337 1430 311 1666 1456 697", " 1337 1917 1337 899 577 1337 1337 637 279 1337", " 1337 1337 1337 1337 1337 1337 1178 1337 1811 1337", " 1199 1337 1277 298 1337 1294 433 1743 1299 1337", " 1337 1337 1337 1337 1337 1766 148 1189 1337 1479", " 1499 1337 927 1337 1719 904 1337 185 140 1337", " 1341 1337 1337 1337 953 1337 828 1182 120 1337"};
    vector<string> part2 = {" 1337 1337 1337 1365 1337 426 1337 1946 1337 1337", " 1337 1337 407 1337 1121 1251 1337 1337 1768 1337", " 1337 1229 254 1337 508 1337 328 787 1592 230 1337", " 1634 449 1623 1337 980 1337 1337 494 1337 1164", " 1759 1337 493 1160 908 1893 1137 1337 35 126 1337", " 1247 1337 30 1337 1331 1337 1337 1337 617 1337", " 1337 36 631 1337 438 1722 333 1363 1337 1931 1337", " 1066 1337 1711 1337 1337 1337 1337 1337 1966 832", " 101 1773 1337 1337 1337 1337 1929 1337 839 1149", " 1337 299 729 177 1337 1337 1722 1337 1337 1621", " 1337 1337 1208 1337 491 647 769 1337 668 205 1337", " 953 384 39 1177 975 1888 775 1337 228 1337 92", " 1337 945 1337 1337 949 1823 1829 1337 1337 1337", " 126 428 433 1043 1337 27 1337 1337 1337 1220 62", " 1337 1400 1367 1337 1337 357 1337 1249 1337 1337", " 1337 1138 1337 246 1337 871 529 1337 1337 1414", " 1337 1337 482 180 1781 57 1337 1369 1442 1337", " 1337 1337 1337 1599 1727 542 1337 1337 1337 1337", " 1337 461 1337 1162 1337 317 1337 1337 1337 1337", " 1705 1337 1167 1813 1337 657 39 1337 789 1337", " 1186 1337 1508 110 1337 1337 1337 1337 1337 1337", " 383 1550 1337 1337 1150 1337 1386 1337 1337 1337", " 1217 1337 1337 942 487 1127 1337 1337 934 1615", " 343 1337 1337 1337 1238 1337 1337 1337 1337 1337", " 1337 1337 1443 1337 778 1432 1337 1337 1337 1610", " 1871 1337 896 1337 1936 1337 1337 1337 1329 1337", " 1337 44 698 1337 159 1337 1337 1337 1337 1257", " 1942 755 1337 1337 1088 232 1506 1337 1211 1337", " 1337 1337 1421 1493 1337 1337 133 1567 1337 677", " 1345 1470 1618 1970 1594 1337 133 1337 438 1337", " 1337 655 1094 394 1337 1337 1697 1337 366 1337", " 1013 621 1337 1337 1337 1337 1337 1337 1337 97", " 1805 1337 1337 1604 1337 263 713 1337 1535 1337", " 844 602 1103 1337 1624 1337 617 727 155 1337 12", " 1930 1337 1337 1337 1775 1337 358 164 1337 1340", " 1337 1605 6 1020 1337 428 214 1337 1907 618 943", " 556 168 1739 1501 1219 1110 1337 1527 1337 189", " 176 1122 1337 278 1204 1337 384 1623 1337 1337", " 221 1337 1337 1337 1337 1337 924 1337 364 1270", " 696 1337 1337 650 1340 1337 1416 942 478 1337", " 1337 1337 798 398 1337 592 1337 838 1337 1693", " 732 1337 1337 1247 1337 1851 679 1337 287 670", " 1347 827 635 797 1337 1337 1337 649 1270 1337", " 1337 1337 1337 1826 1337 346 1960 582 261 1337", " 1337 1337 1198 1823 1061 1337 1337 1783 1082 1684", " 1337 90 1337 1337 293 1118 26 1009 1849 1372 1106", " 717 1337 731 1337 630 999 414 1337 1337 1202 1337", " 1337 1337 1488 1337 1337 608 45 1337 1274 161", " 1213 1337 1337 13 1100 1337 1728 1337 320 1337", " 1337 1202 1113 1973 1808 7 1337 1211 1337 1337"};
    vector<string> part3 = {" 1337 1291 912 432 1654 1337 1337 70 1276 1337", " 1798 1126 1337 1337 1232 1337 1041 1337 1337 1337", " 1337 1337 1337 481 1337 1973 497 991 1050 1150", " 1632 1337 1337 1728 1657 1463 1337 1337 1337 480", " 1337 1337 1337 1960 1337 1337 1337 1337 1337 585", " 1044 1337 741 98 669 1337 1337 1337 1337 117 1259", " 1337 1664 71 1337 1337 1337 1337 1337 1337 193", " 1337 1537 1337 198 565 1337 1337 1337 480 1337", " 1337 1124 1337 526 1101 1337 549 1337 1337 1337", " 1823 308 350 1337 1969 1700 1159 1337 1337 1337", " 1337 681 762 1337 1337 1337 1337 1337 1337 1057", " 1337 1870 1337 986 894 317 280 1337 1540 1337", " 1777 875 1220 1337 1337 801 1337 1296 694 1337", " 1925 1966 122 1337 1797 1337 1337 1540 508 1337", " 1337 1337 1337 1303 1337 1337 1337 1337 1337 1337", " 198 1337 1337 405 407 1337 796 652 513 1337 1337", " 1337 1337 1882 1337 737 1337 1337 1337 1337 1437", " 1337 1337 1802 1337 878 1310 1973 1337 425 622", " 871 1029 7 842 1337 1337 132 1337 1337 854 1448", " 1337 17 688 1154 405 611 1337 665 7 1224 858 1337", " 1494 259 277 278 1337 1337 1337 1433 1337 1337", " 1134 1978 1337 1385 1337 441 1337 1337 524 1337", " 290 1337 1939 558 1337 1363 1337 1337 1689 1337", " 1337 1043 1337 1006 279 1337 1317 1337 1337 909", " 1337 529 1337 1337 1658 1469 1337 1337 1337 1855", " 38 807 1337 1988 82 1337 1337 1337 877 650 1337", " 1322 1430 1337 980 1337 1159 1337 1337 1212 1337", " 1337 1337 1239 1821 9 1337 1557 1337 1337 1337", " 1831 26 522 1606 1337 1689 645 1337 1769 684 1337", " 1337 1337 1651 4 934 908 1282 1337 1415 1337 1337", " 1337 1337 1337 1337 1337 1761 430 1337 1337 1770", " 1337 881 1337 1337 1337 1337 1337 1337 1337 1337", " 1337 1810 1366 1337 347 1337 1337 19 1337 1300", " 1579 1337 226 50 770 1337 764 1599 742 1871 166", " 1337 877 1337 1337 1337 534 1337 835 1337 179", " 239 123 1337 1337 1908 1591 1348 1337 1066 1750", " 677 1427 1375 600 391 1337 523 575 1337 1337 1369", " 68 1337 1128 1337 1337 1337 98 1841 1337 1164", " 1337 1337 468 1337 1337 1174 1337 1337 617 124", " 405 1337 1337 1337 1375 1337 742 1337 1103 214", " 201 1337 1456 1337 1337 1337 1298 596 703 1337", " 1337 1150 1337 1289 1337 1337 1337 1337 1337 803", " 747 1337 1337 1337 884 1941 1337 1214 1863 1797", " 1337 825 1251 1337 996 1555 481 1432 162 1337", " 1337 941 1337 1337 1337 1189 1337 1812 1715 1337", " 1766 1227 1379 422 1339 1337 1337 1477 1096 1337", " 1280 1337 1337 1337 1337 1337 1337 1442 1883 1337", " 1337 1337 1818 1684 1616 1337 1019 809 1466 1925", " 1337 1337 1337 739 1626 1337 1337 276 1337 1337", " 1337 1337 1337 1337 1337 1337 1739 1337 99 1337"};
    vector<string> part4 = {" 1337 1337 1337 1337 1337 1337 1337 927 1905 1885", " 1337 1337 1337 82 1337 1337 1337 1337 713 271", " 746 418 1662 1289 1337 1337 1337 1337 1337 1769", " 128 1337 1337 1337 1285 283 1951 1337 1693 765", " 1337 951 1337 1806 1337 1546 1337 1337 1337 1337", " 1337 1337 419 1378 1337 1337 442 1337 613 1287", " 399 1337 1337 1472 1428 1337 1339 818 1337 557", " 855 1337 1337 1337 1337 1897 1337 1337 284 1441", " 1358 582 1337 1337 344 1337 1521 1940 1337 1337", " 1075 1337 1353 1765 1337 1337 1337 56 1337 1337", " 1337 1349 999 1660 138 1337 1304 1337 1337 534", " 660 22 1337 1197 1337 611 1337 1337 1854 192 951", " 1337 1145 1337 1337 1430 1193 1285 900 1337 558", " 1337 1598 1337 362 1167 1337 1144 1337 1337 200", " 1337 650 851 1337 1337 645 1337 1337 1337 1337", " 1337 544 684 1337 1337 1337 925 1337 1337 1337", " 1640 1337 1337 1472 1400 1337 1337 1337 1337 1337", " 1337 1337 1337 1337 1045 1337 1337 174 755 1471", " 401 1337 1337 1337 1337 1337 1337 1465 1337 1337", " 630 1116 1337 1346 1581 1551 1270 1123 1337 937", " 642 1391 1337 600 1364 1337 1337 1109 1627 1137", " 1337 1337 472 1337 535 1337 1724 1337 1544 783", " 668 1455 1337 575 50 1905 1427 526 1337 1282 1402", " 1050 1337 1337 1337 1337 1337 1337 1337 1337 479", " 197 665 1337 1337 390 1778 1337 1337 734 389 1337", " 1337 612 1582 875 1337 1337 1337 359 1337 1337", " 1337 1337 1337 1337 1051 1482 1337 1337 695 124", " 1337 1337 1155 1337 1476 919 1337 1337 1337 1310", " 511 907 163 1337 1337 1337 1337 61 105 568 1337", " 1981 1337 1218 1970 451 1671 971 1337 1337 456", " 1337 1337 469 1337 641 117 1337 1337 749 1313", " 164 703 1337 1372 1337 1337 1337 1337 1066 1337", " 1337 57 1875 1337 788 898 1337 219 1616 943 1337", " 54 49 1337 1337 901 1337 1337 1413 380 1337 1337", " 1337 1434 1747 1337 1337 620 1972 1337 1337 1337", " 1337 388 476 1337 229 428 1337 996 1066 1337 1852", " 1827 1958 1337 1337 1337 1337 1456 1337 1337 1337", " 1337 785 1751 412 1337 1337 1337 1337 1897 715", " 1337 1337 1147 249 1667 164 912 1337 1123 1337", " 372 1571 1240 1337 594 1337 171 1747 220 1298", " 1337 1337 1093 1337 1669 1337 1337 1337 263 1972", " 1337 956 1218 966 1337 1337 1337 291 394 1337", " 1337 1337 1337 1337 518 1337 1888 1139 1337 1142", " 1337 14 1337 1090 421 1337 1337 1337 1337 1337", " 1337 607 162 646 1337 40 1378 1337 1337 1337 1337", " 886 1774 1988 539 1337 1337 375 1337 511 1311", " 692 1337 1721 1337 1337"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1992;
    if(result == expected) {
        cout << "Test Case 90: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 90: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test91() {
    int numSheep = 2000;
    int maxRuns = 1909;
    vector<string> part1 = {"1062 1667 994 1667 1904 1667 1667 1667 887 1667", " 1152 290 577 1667 1452 1667 1667 1667 1667 275", " 529 1667 1667 1667 151 698 1809 1436 1667 873", " 1667 470 1279 1667 1314 1667 1667 1667 238 1667", " 520 1667 1667 1667 1939 1667 781 1667 1625 1667", " 1176 1667 404 646 1712 1947 1667 1667 1667 842", " 1595 96 1667 1667 1836 1667 1667 1179 1967 1163", " 1667 1233 1667 1667 1667 1667 1101 556 1720 459", " 1142 1667 1667 1123 1667 1667 862 526 1355 1667", " 1667 1141 1891 1192 1601 1614 1667 1667 1667 750", " 1666 376 1667 123 1667 1667 1667 1667 1597 1667", " 1791 748 1667 221 1667 1667 252 1466 1836 1107", " 1898 1667 653 411 31 1329 26 785 1511 1667 4 1667", " 1448 1639 1473 1667 1051 884 191 1122 1667 1071", " 903 360 1667 62 1667 1989 1957 1493 1667 434 1847", " 566 229 1667 1667 1667 1667 1052 1729 107 1667", " 1855 1036 1667 1667 1667 1667 1667 1667 1473 1667", " 1313 1667 1667 1382 1667 1124 1667 1913 1667 1667", " 1667 1217 1667 1667 1667 1667 1667 1667 1196 1667", " 129 1401 1667 1667 1667 1667 1667 1291 1667 616", " 1795 1667 1667 1306 1667 1279 1575 1838 1953 1061", " 1667 180 1833 371 1667 1667 1667 994 1667 1792", " 424 1667 333 1667 1667 1359 1667 1667 1667 1897", " 1667 1667 1667 1667 1667 975 68 1431 774 1124", " 661 1667 1667 1667 1667 1667 1232 1667 1667 1087", " 1667 332 1528 709 1667 1392 1667 1667 1667 168", " 169 347 1667 1667 1007 1667 1667 1667 1667 1956", " 1667 1667 1710 1667 1667 1667 1667 205 60 1920", " 1459 207 1420 1613 1032 1948 23 1667 1667 1667", " 557 1667 1667 1667 475 897 730 1217 1667 1667", " 1667 1667 1667 1459 1047 1667 1667 1667 1298 1667", " 873 1667 564 1233 1667 1130 361 1667 1140 1667", " 985 1667 1244 819 1201 1718 1667 871 1667 1667", " 1947 1667 1667 969 1713 1667 555 1276 1667 1863", " 608 1667 1667 1454 1338 1667 701 1866 1667 1667", " 1579 1730 1667 1962 1667 1667 1667 1667 1667 1667", " 1006 1678 1846 1667 1667 1667 1667 1354 1884 1667", " 132 876 26 196 403 1667 1667 1667 1667 1706 1034", " 1667 1667 1548 1667 1667 573 1667 1468 1667 1319", " 194 1667 869 86 1667 756 1667 177 1667 706 1667", " 1667 702 1772 1667 1667 1277 1667 1594 1667 1625", " 1789 1667 1667 1237 618 829 1623 989 218 922 1921", " 1667 1667 1667 1667 184 856 1667 1667 1667 1667", " 365 711 161 1667 1667 980 174 1667 1228 1667 1851", " 1185 1726 1667 1667 357 1667 1667 595 1891 1667", " 298 1922 478 743 101 247 1592 1667 1667 1667 1943", " 1667 803 1988 1045 691 1667 1667 1667 1146 1667", " 1667 1667 1667 1777 1667 279 1667 567 1138 1667", " 1667 1667 493 1667 179 1667 1292 1036 107 1667", " 1667 397 1667 1667 1667 1667 1767 1667 1667 1403"};
    vector<string> part2 = {" 1667 1667 1667 1667 459 1425 574 117 1667 1667", " 1667 1663 1667 1995 1342 746 1667 1667 1667 241", " 42 1667 1788 1667 1667 1667 1667 542 1055 1667", " 1667 1956 1667 140 1667 1667 1667 1962 294 1667", " 1582 1017 1667 1993 1150 1709 1348 780 1667 146", " 69 1145 209 1679 1402 1667 1667 1193 1667 176", " 1020 1667 1265 1667 1799 86 1667 1667 878 691", " 1667 1667 826 1667 1859 73 1667 1667 1664 1667", " 1667 1628 1667 531 672 864 1667 1667 1897 1667", " 1354 1667 359 1667 1474 1898 1421 1667 1667 1667", " 765 1667 1927 1667 814 1667 1667 1667 1990 1258", " 1732 1667 1667 1667 296 483 1667 1667 1667 1726", " 1922 1531 1667 1429 592 1667 1667 1667 1667 1667", " 1667 721 1667 1667 1667 1667 962 1242 1667 241", " 1667 217 998 1276 1667 1667 1667 10 1232 629 1667", " 1963 1667 67 1667 644 1667 1667 1667 1667 1667", " 1667 1667 1667 304 1671 1667 1963 493 401 1177", " 1667 1667 1667 1667 521 1667 1743 1667 1667 1056", " 126 1667 1667 787 1708 1915 1043 1667 1722 1063", " 1667 1103 1667 1667 1667 112 1667 1667 1667 1667", " 1236 587 1484 137 820 1454 854 1602 685 1667 1822", " 1667 1667 1667 1667 884 628 1667 1667 1667 1667", " 229 1667 1667 1667 1355 1667 1667 1667 1577 573", " 1667 1667 1667 1598 1667 1667 1667 1921 1667 1667", " 1657 739 1667 1667 1667 1667 1263 1119 1667 1072", " 1689 1667 1667 1167 5 1667 1254 203 672 1059 1667", " 1829 1905 1769 367 660 1667 1788 1667 1667 1667", " 548 964 1667 1667 1743 99 524 1667 1667 452 1667", " 7 1667 869 1285 181 1667 1409 1667 1667 584 1297", " 1010 1667 1667 592 1645 1667 531 1667 1004 1695", " 1667 186 1667 1299 191 1120 1667 1667 1953 555", " 1040 462 1667 1667 164 1667 1644 962 1313 232", " 1667 1712 607 1667 748 1667 1667 1667 1253 1667", " 876 1667 1667 726 543 1667 1667 1605 1667 1077", " 144 1446 815 316 1667 1667 1065 1667 1667 1667", " 278 1667 1667 348 992 1123 1550 1667 591 792 266", " 1667 1667 1667 71 79 874 1667 950 92 313 1667", " 447 1057 1939 844 1667 1667 1667 1667 1667 1941", " 1209 1667 1667 1667 251 760 1667 1648 63 23 1131", " 210 1667 1667 1667 1667 1562 1556 1807 456 677", " 948 1667 1390 1667 1667 1667 949 1900 1667 1667", " 1667 1667 846 1667 1555 1457 731 1497 1950 1667", " 1667 621 1992 1969 1667 364 1667 1667 1667 104", " 1780 1667 1667 906 1667 1667 873 1667 1667 951", " 1667 1770 1667 1667 1705 857 1667 1667 1667 1667", " 1667 68 1352 1667 1057 1667 1605 1667 1667 1667", " 85 1667 1667 1667 1667 1667 802 1667 282 1667", " 1667 1667 1667 1667 1667 1708 1667 336 731 1667", " 1667 1667 1902 228 1667 1667 1612 746 1667 1667", " 1407 1541 1667 1426 1667 1667 1667 1667 1667 775"};
    vector<string> part3 = {" 1667 817 1667 1667 1667 1972 1024 1196 146 1337", " 1494 1776 1489 1667 1667 1667 780 1667 1667 396", " 1667 1667 1667 1918 1667 510 1667 1667 1667 1640", " 815 1667 1667 550 1667 1667 792 934 1667 1667", " 41 1101 1667 1248 1667 1667 582 675 606 1667 825", " 1667 1667 1217 1667 981 1667 1232 270 477 1667", " 1667 1667 1416 1667 1667 1469 856 1667 336 303", " 1667 590 1137 1667 1667 1704 1499 1667 254 1667", " 1460 1667 969 584 1667 1667 24 1667 1667 1160", " 1927 1899 1667 1667 130 1667 1667 1667 1157 1667", " 110 1471 1667 1728 935 1667 652 157 1667 1667", " 1667 857 1114 1667 1667 1667 1667 1667 1667 1667", " 346 804 1667 1235 1667 1323 1668 230 767 1189", " 441 1667 749 1330 1667 1667 1025 1667 164 1327", " 1588 1667 580 1667 1667 1374 647 1667 263 1667", " 845 1592 1667 1667 1958 646 669 232 185 1776 1243", " 1667 1667 1667 1667 1667 926 797 1084 1667 109", " 1667 1667 1667 170 1102 1667 1818 1667 1119 1667", " 1667 1667 1667 1652 52 1667 1884 634 1667 1667", " 1647 188 95 1228 1667 1667 1667 691 567 1667 1667", " 1667 1159 1163 1667 1268 1667 385 1667 238 1851", " 1667 336 1667 7 781 1667 1925 1667 1667 1699 1667", " 555 1876 1241 1667 1199 1667 383 1667 1667 1667", " 1667 1667 723 1153 1667 924 1667 1667 1170 1667", " 700 1667 1667 1667 1667 325 1442 982 1667 1667", " 401 1667 1667 1667 1667 1963 1472 1667 171 550", " 1667 1761 922 1667 1445 903 350 182 1667 1667", " 1667 439 1667 331 1882 1667 1667 1667 769 1667", " 1667 1667 1667 1667 1667 1667 1322 189 1572 1667", " 1667 1667 1667 1667 1247 1290 1773 595 1231 1667", " 1667 782 1667 1026 1739 1667 1717 723 1667 1667", " 1667 966 1632 381 31 12 883 1667 570 1667 1667", " 1667 1667 1411 1667 1310 120 936 1667 1021 425", " 1667 505 1667 94 1667 183 910 1667 1667 1706 1889", " 344 1523 1667 1667 1667 1011 1451 1667 1667 1061", " 1667 1509 918 1667 1667 197 718 1667 362 1925", " 1751 1206 1667 1082 1365 1667 1667 1667 1667 775", " 1195 396 1552 1667 1314 57 914 1667 915 652 1667", " 1667 1050 1667 469 1351 1667 1667 1667 1667 1667", " 1175 1653 1667 552 1667 1767 1916 1667 1667 1667", " 1667 1667 1820 1667 1667 836 1528 1667 1667 1061", " 1667 1323 1667 1938 1667 1667 1667 813 764 1667", " 1092 1667 963 921 1875 1667 1667 872 1960 1667", " 1982 592 1667 1667 1667 1667 1318 1667 418 1667", " 942 1667 1667 1667 1667 1667 442 1667 1667 1899", " 1667 1667 1900 72 515 1667 676 1667 1667 1153", " 1667 738 1700 1667 1667 1321 666 1667 83 504 1221", " 1460 794 569 1253 967 1667 1667 1667 847 1110", " 1667 488 157 1563 1045 1667 202 655 1667 1667", " 1749 1395 1878 1667 1667 1667 715 1667 1667 1038"};
    vector<string> part4 = {" 1667 1029 228 1757 1667 498 1667 410 1325 1667", " 14 1370 1667 1667 418 1667 1667 1667 1258 860", " 1667 1667 1093 1355 1667 1667 1667 15 1667 1297", " 1720 1318 1667 753 1667 870 1476 235 1667 1667", " 1667 510 1667 1168 1667 1667 1667 1667 1151 6", " 1175 1667 1667 1667 1483 1667 1667 2 1655 1667", " 1667 1667 1667 1667 1667 920 1667 893 1667 1667", " 36 599 1177 1667 779 1667 1667 50 1667 1636 1667", " 1667 1667 1667 738 1667 1718 1667 61 1684 1667", " 263 590 1082 1667 1135 1667 1769 1667 1667 1667", " 1667 1632 452 1173 1667 1667 1667 903 96 1667", " 674 1754 1094 1667 875 1667 452 1180 1667 1667", " 962 1667 958 1667 1667 1667 501 548 1680 1392", " 419 151 116 1774 1667 1667 1667 1855 1667 1947", " 1427 1667 1667 1667 1667 1225 560 1667 1667 1667", " 1667 1667 1667 1694 1670 1667 1667 1667 1134 1674", " 1458 1667 84 1665 1667 1667 1667 1246 1540 1866", " 1667 1377 1667 663 671 1667 1667 1667 1388 1667", " 1696 1066 863 1667 1667 1667 1667 1667 1079 360", " 1667 627 1667 1852 1790 1667 1667 1667 115 1667", " 1308 1528 1667 1667 1667 1494 493 1667 1667 907", " 933 1667 121 1387 1667 1667 1852 1283 1883 1667", " 1667 1667 628 1667 1667 587 1165 1667 1667 298", " 1667 1667 1528 1667 448 1667 1007 771 1667 1667", " 1667 1667 1432 1667 1667 809 365 963 444 1667", " 1099 1667 13 1667 1667 1667 1667 1903 1401 1667", " 1165 1667 1667 318 1667 1667 1667 1667 1667 1279", " 1667 1591 668 658 1667 1813 1667 1667 774 1667", " 1667 924 419 1900 1667 174 1486 1667 1667 1667", " 391 1667 1387 353 919 1667 845 1667 1667 1667", " 1470 1787 1667 1667 1667 530 1667 1667 1101 1667", " 1667 1667 1667 1151 1276 248 1667 560 1667 1667", " 194 960 1667 1300 350 353 1339 1422 1667 1667", " 217 1667 1667 1667 612 603 1667 1667 1667 1667", " 1667 1993 1367 1667 1667 65 1667 1128 1667 1949", " 797 219 1124 1755 298 380 756 1667 1330 1667 47", " 1980 996 1667 370 1667 959 1667 1096 1667 823", " 1667 1667 1667 1667 1667 1667 1667 1667 1706 1667", " 1667 1667 1667 1667 1667 690 1667 1667 1268 1771", " 1667 882 1667 1069 1667 1667 586 145 619 1535", " 961 1667 1667 1667 143 1667 1667 1667 1667 1864", " 1139 1667 1334 1667 1302 1667 199 1108 983 1667", " 740 1667 1841 1667 1867 1667 27 1667 1977 768", " 1575 1993 128 1128 1951 236 1297 1171 1667 1667", " 1667 1667 1667 1667 1667 1667 1667 1015 132 1667", " 1667 70 217 321 1667 1054 1544 1667 1667 1667", " 1035 1667 1217 287 1211 1530 1667 694 842 1051", " 1667 1667 1667 1667"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1995;
    if(result == expected) {
        cout << "Test Case 91: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 91: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test92() {
    int numSheep = 2000;
    int maxRuns = 1989;
    vector<string> part1 = {"1142 521 1 20 714 1 1 1 1 1 1 1828 1444 1583 1", " 1 273 1 278 141 1 1 479 1 1 1 380 1 1 711 1 1", " 1 1 1 488 1392 1947 1498 1021 1912 1 1 1 1 1 215", " 1471 1 1 1232 1 1 312 1 1898 459 1 1 752 1583", " 1738 1 1 1 1 1 912 1887 1 1414 1 1 1 789 1778", " 1548 49 1 1 370 16 1 1 1 1 499 1 471 1462 157", " 1 88 1373 1 228 1 1 1 1 1 1 1 1595 743 820 1099", " 1 1 1 1 394 1749 1996 1 550 1 1 98 1 1 1009 1", " 1935 1 1 1 1 1 242 1 1925 249 1333 612 324 1 593", " 792 1 138 1 1 1 1324 1 733 1 1911 1 1386 1414", " 1 327 1 1 39 1153 714 1 1 1 1 1 1 1443 1530 284", " 1 1 1 1 1 1 1 1586 1 559 1 1184 1 1907 1 1869", " 1 815 501 168 1 574 1 682 1 1 936 1 1105 1 1 44", " 1 1 1 1 915 1655 729 640 1 1557 1231 1 1 1 1 1819", " 848 1354 1532 1 1206 789 22 1960 1 1 576 1834", " 1 722 1 672 1 800 1616 1 1 1796 1719 1487 1 96", " 1814 1 1787 1 1740 1147 1 1 1853 1686 1 1367 552", " 1 1 1173 1 942 142 612 1 637 1 426 1 1051 1669", " 1 1 1 1 434 1307 1 1 1989 1 344 1 1 1 1 1515 1", " 327 1641 1 337 1 290 1 1 1 1414 1 1717 1 231 1584", " 237 751 1 653 1 1828 864 1 911 1 1046 1 679 1819", " 175 253 1 1985 386 421 402 1762 1 1947 1 1 1742", " 1 1672 1 910 1949 1933 1 1418 1 1 148 1436 1 1", " 1238 507 1 1615 1 864 1 1 1 1976 1 1 738 1 1 1", " 668 223 1 1371 1613 1240 1070 1 1 907 1 1 988", " 628 75 937 1 1 1 689 1303 1484 1 1 234 1 376 1", " 1 1 1303 1312 1 591 840 1753 1 1 1 1 1 1971 1", " 1 385 1 1 1389 1920 1146 109 1 1 119 1321 112", " 24 1 1330 1 749 1 1 1 806 1966 1462 1948 1 1 1340", " 912 215 1979 1 922 1 1 1 944 921 1 1347 860 705", " 1 1177 1317 613 1 1041 1 1 3 578 1 1004 1 827", " 1 167 223 1 1 1 1 1 1 128 1476 1 714 9 280 1737", " 1 1884 1530 799 1 1350 1024 572 1289 1 1 813 1", " 1 328 663 1 363 1 1 292 1 1 1975 1901 975 747", " 1 1 1 432 1 627 371 1513 1422 1063 1 1198 1 1", " 980 1 1 1 213 1 1605 145 1007 1945 264 547 1560", " 1 1483 1924 1091 21 1 1 453 1 1 560 1299 239 1899", " 1525 1 1 1 1968 1517 1 1 1 1 1 1 1086 670 214", " 731 214 1018 1 1 1761 1466 1 1 1 1344 924 757", " 1244 1147 1566 778 1 1164 1926 1 1584 1 1412 529", " 1734 759 1 1 1 1 1 327 1 748 1 1 1894 1 1 869", " 1 1546 1 1284 179 1 1 1 701 1 1 1 963 1 1 1 1834", " 1089 1788 1 1509 1 1 1 1 1 1 1880 1632 1 1 1 1481", " 1659 1280 1 1 1056 1157 1 769 1656 145 482 730", " 596 762 434 1 1235 139 1 1142 1 1 1 1 768 223", " 1 1067 1 1 1 1445 1 1675 1 835 1 1549 1 1 1 1", " 1 1 1 1487 781 1 1865 1 1 1282 933 755 1 1325", " 148 1 1644 1 1917 1 1006 1141 1674 763 1331 419", " 287 1869 1 1 1613 1 1779 87 1 1 1464 1 1 1950", " 1073 1607 477 1 312 668 1 1440 1464 1 1456 1670"};
    vector<string> part2 = {" 1158 1 872 1 1873 1 1 1 1705 1 462 1 1 715 524", " 1159 1 521 1 1 339 1152 1 1 524 1 1 824 1667 1", " 1154 1 1538 1 1 1 1388 1 1 666 1921 339 1026 1", " 1 1 1 627 1 1 1535 1 1 1916 1674 494 79 452 1982", " 1 291 1 675 1 725 1294 1 1109 861 38 1 536 1 655", " 1 1272 1 699 1 1 769 1 381 1 295 1 1 1 1762 849", " 1 1 483 1908 1442 1 391 1 1 1370 1 1 1 1 1841", " 1 439 1 626 50 1 1899 880 58 1 1 1720 370 291", " 497 1 1 1 1 1036 1 1 1544 1871 36 928 1 1 1 429", " 1539 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1521 1940 1", " 1 1 727 1 1 1417 1 1 252 1 803 1 1907 1 253 1915", " 1 1 1302 1 1665 1 1 1 667 1850 1145 1 1296 235", " 1221 1311 327 1429 1 98 1 1 506 1 1746 1819 1", " 897 549 1 1 1 1 1 1046 1486 777 1646 1 1 29 1601", " 1 1192 201 1965 36 1 1503 1 1 1 1729 596 1995", " 1 1 1 815 1 265 573 1498 697 1 425 1004 1 1 1", " 1 297 1 1 1040 485 1168 1 1 658 1044 1 1408 1149", " 740 1310 1572 1 1 1757 318 1925 1 1 1 1 751 1", " 1 1 1 1 1 1 1 1 920 1 1 1 123 1 1 1 542 1 1 1", " 489 150 1 1 1066 1331 1577 1822 1606 523 1 440", " 474 1 184 1 1 1144 1 43 5 69 92 1 1 751 1 1 666", " 1 1682 1662 1 1209 618 1 1625 1 1 69 1 1 1 1602", " 1 1 1944 1901 90 1 400 1787 1 1 696 1 518 1213", " 1 1 1 816 470 1 688 1 993 1 837 1 1 148 1449 1642", " 1634 1 210 1 1 1921 1004 1 613 1 1 1 1067 159", " 1 1 1936 1587 533 1 1 249 1 42 1 327 1733 1 618", " 1077 1171 398 1 1 1 1445 1111 121 1 563 1012 266", " 1965 1 1 1155 526 1 1688 1 1859 1 1 1 1 1 1498", " 1895 935 1733 1562 1425 1104 258 1 1826 1230 1", " 1758 1756 645 1 1363 1711 1 313 1 764 651 1 1", " 757 1 918 1 1326 669 1031 378 171 1159 620 1 1153", " 1 1651 1 1 1 1 1 1848 1466 1335 1291 1 307 1073", " 1 1 1779 1 1 1 179 1 1 1 1 500 662 412 1 33 594", " 1014 992 1 1962 24 1 323 1 1 1 1 1 406 1 1 131", " 615 1247 942 206 1 495 55 1 1 1 330 1832 382 1", " 1955 1 704 499 1 582 1 891 1 944 1931 1961 971", " 907 1987 1832 1 1 1 725 1 561 1 1750 1019 1 1", " 1609 1284 506 555 437 1 1 1 281 1 1 1524 795 1", " 853 1976 1 875 1853 1 1 1 1609 1 1 1 1 1 1390", " 1 1198 726 1 1 1 1791 1 1 1478 1 1 680 1 1462", " 121 1 649 1 1322 597 1177 1 1 946 440 500 1 1236", " 1 1742 714 1861 1476 1546 1165 1587 1 674 1066", " 1185 1 1333 1569 829 393 1 1 1748 1 1 1327 1790", " 77 1165 1 240 1 1427 1 1867 1746 1017 1 1 1 486", " 1 1703 1973 1 440 1 1 1 1 1745 1342 1 647 1661", " 1284 1 1 1 1564 1 966 1453 1362 1 822 1 1 1457", " 1927 1 1 1464 1 1 1 1 1 979 1785 1 861 1607 1579", " 152 1042 1 1 1885 1 166 1 1 1 1331 1 1 441 417", " 1 621 1 1 1 1 1 1 1306 729 71 1913 793 1 1 1 1", " 158 1812 1683 660 1 1640 1 295 1 664 1 1988 709"};
    vector<string> part3 = {" 284 808 1 1 1 1 1 1894 1394 1 1 1792 1145 134", " 1 716 393 1 69 1 1 1721 1 1 582 250 1179 933 1028", " 1 1 1 1 1 1 417 1 1 1 218 1758 1 1 1 1 1 1503", " 1 265 1147 309 1 1 1114 1 1060 1 105 1 1 1 251", " 1967 1 1169 507 856 1443 1586 1 1 545 1 1256 566", " 1 1677 1 427 1308 1 1 1 1 1 1 536 194 18 1777", " 1538 1 1233 1 1 1 904 1 1214 1 1 1 1 641 957 1805", " 1 896 729 582 86 1 1 388 1 1 1798 1 1 1583 1 216", " 1 1225 119 452 1354 1577 1 1 1 525 678 570 1038", " 1 1860 1 1296 1 1535 1 1 1 1 1632 1 589 1 1627", " 949 1 1445 1 572 664 1 1 1372 430 285 447 1922", " 1090 1 1 674 1 27 1 1 1 1550 1 656 1 260 1 1 439", " 548 1568 1 666 1774 1103 1 272 108 1401 1 1943", " 1 1 1931 1445 151 573 1 1 1971 1632 1 1 1 1 1", " 1 884 444 368 1 1018 1 1 1 421 418 1 694 1 1 878", " 89 1 1604 764 1 1 1213 1219 210 1752 812 1712", " 1 1 1743 1 1 1396 230 1344 177 1751 1 1 1336 759", " 1898 105 1495 106 1 1 1 303 1393 1 1 1 1830 1", " 1 1 1446 1408 251 750 232 951 1 539 1754 765 1486", " 1623 1 1232 1304 1 1 1 1 1264 606 1263 468 1 1", " 1693 1951 178 1 1816 1301 1 704 1 84 1 1 1202", " 1 1873 1 1006 776 1 1 978 1 1 725 1 1 1 956 1", " 1 1 638 1896 766 1435 1 111 1856 1 282 910 1 1333", " 1904 1 1 1 1 1 1 1088 1 431 176 867 1 1 1 1940", " 1571 1718 535 1 844 463 1 1 1 1 1 1 1 1392 1179", " 1 501 1 1 1514 1 438 386 1 1 1 1 1 1 1334 1 1725", " 1 1 1 765 1474 1 525 479 1 1145 1 1942 1 1 1 1645", " 843 478 1 246 10 1 1 1 1 1 415 1 1594 1 870 1124", " 1 1674 267 1 1442 1545 1 1269 1654 1989 467 1", " 1 24 919 1115 1455 256 1 1262 1 257 1 1998 1 88", " 665 1 1 1 1 131 1016 1896 919 1 1 1 78 1 27 581", " 1 1 1495 64 1 1 1917 1988 1 1168 1 1 563 823 1582", " 1549 1 1789 1 871 1527 800 411 1 1 1 1354 1 1", " 745 1754 1401 621 1927 1 1592 254 1056 1972 1", " 1 1073 1692 951 1 1 1 1 1 1578 1153 1 423 1 1", " 1 1560 1368 1 1 1 1 1106 1755 233 1059 1 1502", " 1 230 801 1 795 1762 1 1 314 417 1432 1 37 19", " 898 1200 1 1 1 601 312 1 1686 1772 588"};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1998;
    if(result == expected) {
        cout << "Test Case 92: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 92: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test93() {
    int numSheep = 2000;
    int maxRuns = 1989;
    vector<string> part1 = {"874 795 1031 1615 35 13 13 13 13 13 527 615 1713", " 13 13 13 13 379 13 13 826 13 13 13 49 13 13 1962", " 444 13 13 646 13 1522 13 998 13 13 1812 1031 13", " 13 13 1024 13 13 1427 13 1462 857 13 1440 513", " 1420 13 278 13 13 13 1546 868 13 709 13 13 13", " 704 13 13 784 13 13 216 13 1912 13 13 13 1356", " 535 13 205 13 13 13 13 13 13 13 753 28 1736 1809", " 1710 317 1083 1550 1057 915 1904 1028 13 199 13", " 1915 13 1464 17 604 1124 803 1938 1368 13 726", " 13 629 1008 1036 451 905 13 1777 13 13 1338 870", " 409 1503 404 288 649 1033 1326 13 132 1586 374", " 1620 13 13 13 13 13 13 1252 1214 954 13 781 1596", " 13 13 13 13 13 645 13 13 13 13 1161 13 93 13 13", " 163 13 13 13 1362 13 1266 106 13 1860 995 97 13", " 1516 13 34 1812 13 1304 13 1946 1345 1330 1229", " 13 13 355 13 1076 1011 13 13 885 13 1059 13 830", " 735 257 13 13 13 1104 13 717 1979 890 1582 13", " 13 1024 13 1258 1151 1604 1488 946 13 13 1081", " 13 13 13 13 13 13 13 1059 396 598 1046 13 729", " 195 100 13 425 13 13 881 13 1068 13 1704 496 13", " 13 173 13 13 1986 1390 13 13 1658 95 13 13 13", " 13 13 13 13 13 13 1307 1852 13 13 13 13 383 212", " 1331 13 1921 1203 1036 13 1027 663 13 1616 851", " 278 13 13 1023 13 13 1609 555 1291 13 13 1973", " 595 13 13 13 140 196 13 13 13 587 13 34 1815 188", " 13 41 13 13 13 13 13 1925 13 13 13 202 13 1564", " 13 13 13 433 13 13 774 13 13 13 127 1371 1230", " 1540 1398 13 13 13 13 13 1047 1162 173 13 13 9", " 13 13 13 13 13 280 13 1156 13 1105 13 13 965 1408", " 13 13 13 13 13 1611 13 92 468 1769 13 1120 619", " 13 13 1271 330 13 1673 13 13 13 13 13 13 13 13", " 1823 13 769 833 1394 907 13 13 116 1839 628 235", " 454 269 13 13 13 13 804 13 505 1133 873 1914 13", " 1731 13 13 13 723 13 771 1244 13 604 1305 1398", " 692 1472 1457 13 13 13 13 586 13 13 13 1497 13", " 1132 13 1596 13 13 18 714 13 1820 13 13 13 998", " 826 174 13 558 13 13 536 13 387 814 118 13 13", " 13 1118 13 13 1334 1624 1544 13 1000 939 148 13", " 1820 13 202 479 13 1523 13 13 13 13 13 13 13 1121", " 1008 13 13 13 1293 13 965 13 13 1464 13 1072 13", " 731 13 1015 13 1941 13 1310 220 1833 13 493 13", " 13 1510 13 507 13 395 13 268 13 1633 1878 672", " 13 13 13 13 1956 720 643 13 13 13 13 13 13 13", " 1353 13 1619 13 13 13 13 13 1847 270 293 581 13", " 13 13 13 1357 237 27 13 13 1916 1259 13 1929 13", " 13 13 385 1561 480 1692 13 1916 497 13 13 13 13", " 1858 632 13 58 13 265 13 1824 13 13 13 13 1562", " 13 13 13 1186 13 13 1233 503 13 1118 1414 13 776", " 13 775 13 1260 13 291 79 13 779 192 13 13 13 13", " 912 13 1603 13 13 708 1615 112 592 1977 1843 1451"};
    vector<string> part2 = {" 13 243 1843 13 13 1447 1427 13 293 13 13 13 1319", " 13 13 1822 13 1153 644 297 505 572 13 13 13 13", " 1920 1675 13 13 1289 448 13 1082 13 390 13 13", " 13 13 580 1550 13 405 243 915 1578 1491 13 13", " 13 13 1417 925 1422 73 13 13 13 681 13 1870 887", " 522 847 889 1176 13 955 13 1046 1734 13 1591 13", " 13 13 13 13 13 13 51 13 13 13 1384 1208 682 13", " 1456 13 13 13 13 1385 455 1051 1787 13 1496 13", " 1012 1053 13 317 13 13 13 13 13 1837 1723 13 7", " 1945 1328 13 13 1460 245 13 13 13 13 871 13 1796", " 1247 566 13 338 13 688 13 13 1257 13 1400 1480", " 822 436 1842 72 1769 13 1504 13 13 1343 13 13", " 13 1642 13 1455 13 1872 13 774 13 1957 261 13", " 1189 13 13 849 573 13 13 1245 13 13 13 13 13 1306", " 13 285 13 13 13 1742 441 1667 1266 13 13 13 1721", " 802 13 1291 1053 1878 643 13 325 13 13 1936 361", " 13 13 1561 728 1242 13 13 13 643 785 13 13 502", " 13 306 13 345 313 1517 13 13 1885 510 95 1626", " 13 1648 173 628 1830 22 505 522 13 1320 13 1603", " 13 13 13 33 13 13 13 13 359 13 13 1460 13 13 1864", " 13 905 863 1963 1518 1476 13 569 13 13 13 13 13", " 1728 13 13 13 187 13 366 614 1915 13 13 1883 13", " 13 1982 311 13 1173 13 726 13 939 13 13 1978 1739", " 1753 194 1694 1124 13 13 13 300 13 1450 314 13", " 460 13 1864 1475 911 32 15 13 13 13 473 131 446", " 13 1802 952 13 610 960 1629 13 837 13 13 987 13", " 13 13 139 13 13 13 13 13 47 1346 13 117 267 1482", " 13 13 13 1140 13 166 13 13 1272 13 292 13 13 1714", " 1094 658 13 13 13 736 404 13 1672 13 1313 1181", " 680 828 13 13 273 1476 1109 577 1374 1297 13 13", " 134 1673 13 8 302 13 13 13 13 13 585 13 818 634", " 13 13 121 13 1577 39 695 13 13 13 1667 1123 13", " 13 13 1708 13 318 13 13 862 13 13 13 1441 1036", " 324 1490 634 13 13 961 13 640 79 176 13 13 13", " 1097 1339 1566 13 582 13 13 1774 1069 13 13 13", " 13 13 13 13 1756 13 1814 13 1900 13 389 1547 397", " 13 13 1471 1360 1296 504 171 13 1889 163 13 1043", " 13 896 1576 742 13 13 13 1442 13 13 13 13 1367", " 1545 13 13 1640 1951 633 13 13 13 1493 577 800", " 13 656 13 225 13 13 934 675 13 13 13 1640 13 44", " 13 13 1695 41 13 13 406 204 702 13 13 175 1109", " 13 514 13 1320 1770 1164 1643 840 13 112 1733", " 13 1095 1061 439 13 93 195 13 13 13 265 13 13", " 13 1953 338 1999 13 822 13 1371 13 13 13 1282", " 13 13 13 1117 895 1535 1168 13 828 13 587 1697", " 665 13 385 1317 13 985 396 15 13 16 13 472 13", " 1237 13 13 618 847 959 13 13 184 1495 13 13 13", " 13 178 507 75 837 628 13 13 13 1914 13 192 1735", " 13 443 1881 630 196 13 1094 13 1711 13 13 675", " 13 13 13 1543 13 121 945 13 655 565 767 251 978"};
    vector<string> part3 = {" 13 1872 13 13 13 726 1152 484 13 1400 13 393 192", " 1125 1472 13 440 1975 13 13 13 13 1533 13 13 1152", " 87 13 478 43 1900 1429 674 1891 13 13 13 1547", " 1061 13 456 13 13 13 1397 627 1595 162 672 13", " 13 13 13 735 13 1721 13 13 13 13 13 13 1491 13", " 13 1996 13 13 224 945 1963 13 13 13 13 13 414", " 13 1042 13 13 327 13 1269 13 1786 13 60 13 1678", " 1797 83 1287 292 273 36 13 13 13 1169 13 13 13", " 1236 1822 1506 839 13 13 13 13 13 1873 13 13 1988", " 13 1450 36 1782 13 1182 1201 13 1792 13 13 13", " 1279 987 836 1878 19 177 13 13 13 1473 147 13", " 13 955 1139 13 13 1081 13 1521 13 1246 772 13", " 13 13 13 788 13 1894 1745 13 840 1017 1611 26", " 13 1178 866 13 1865 13 13 13 130 1703 13 13 1586", " 13 13 329 770 13 13 419 13 1001 605 13 13 13 1972", " 13 13 340 13 13 285 13 1898 13 1258 13 1962 13", " 13 13 13 13 1621 13 579 13 13 13 12 1337 13 500", " 13 1773 176 1756 200 924 967 1536 1232 13 13 13", " 1506 1839 280 13 13 13 431 13 1418 13 1805 1453", " 354 1750 13 13 13 1236 1150 1429 13 791 1005 13", " 1801 189 13 13 13 1496 222 448 769 13 13 83 13", " 13 13 1959 276 13 1638 1705 13 13 1944 1482 476", " 1603 410 589 13 268 1658 13 13 1595 1940 13 993", " 932 1575 13 13 13 224 13 541 1592 474 13 13 13", " 13 13 13 13 13 13 13 13 509 13 13 13 13 1879 1422", " 1883 305 534 13 13 13 13 694 13 604 13 1311 13", " 1494 905 1296 13 1540 637 13 13 443 1629 13 13", " 295 13 13 13 1746 1230 1940 112 836 13 13 1351", " 1184 13 13 116 501 13 1739 1877 13 13 13 13 13", " 121 13 13 13 156 13 13 13 1021 1396 13 360 13", " 101 1928 13 820 13 364 13 13 13 13 13 13 13 13", " 13 13 13 13 957 13 13 317 1793 13 319 13 1162", " 1151 13 13 13 1332 13 1869 1733 1443 13 817 13", " 407 13 1838 13 1214 897 13 13 499 1402 13 13 13", " 1591 13 236 13 13 1864 1986 619 13 1883 692 1054", " 13 13 13 443 13 13 1391 1332 13 13 13 13 13 296", " 13 1371 13 767 13 850 13 13 13 13 13 13 642 13", " 171 843 13 13 126 644 13 13 13 13 13 978 1892", " 699 13 13 1500 233 13 1550 13 13 13 492 13 920", " 13 27 13 13 497 13 13 1670 838 740 13 13 463 13", " 13 1245 13 967 13 1011 13 13 13 13 13 13 13 13", " 13 1850 1495 1468 13 1059 399 13 13 13 253 13", " 248 1952 13 1730 251 1451 13 308 13 68 13 229", " 13 1107 598 13 13 13 13 13 995 13 340 197 1534", " 617 1534 13 488 295 13 867 13 113 1169 13 900", " 1099 13 350 624 1639 13 924 1769 1624 13 13 13", " 13 349 1919 727 13 1 13 13 13 1282 13 13 1730", " 13 13 13 13 13 791 212 352 365 1359 13 900 1075", " 733 807 13 722 203 13 914 13 13 904 1023 161 560", " 609 13 13 13 1755 13 13 13 1255 85 13 981 1047"};
    vector<string> part4 = {" 558 13 13 1052 54 1984 13 13 1177 13 1045 137", " 233 13 1186 13 13 1532 1856 13 13 24 13 1982 640", " 13 13 13 90 738 13 1496 758 13 13 224 254 13 363", " 1337 13 605 13 13 13 275 13 874 744 362 508 1087", " 24 1889 13 13 523 789 13 1081 203 996 177 13 13", " 13 13 1964 1202 13 13 13 1059 13 171 13 13 13", " 13 148 13"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1999;
    if(result == expected) {
        cout << "Test Case 93: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 93: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test94() {
    int numSheep = 2000;
    int maxRuns = 1989;
    vector<string> part1 = {"1417 1591 269 143 371 42 42 42 489 498 1949 1020", " 42 489 511 315 734 42 497 717 1851 42 603 890", " 42 465 42 1350 948 660 42 361 1665 1311 42 996", " 1471 616 730 1566 42 42 310 445 42 42 42 484 1959", " 42 42 453 75 42 42 42 42 55 1477 42 42 1249 1145", " 1558 1100 42 42 1946 42 317 60 40 1678 42 1697", " 42 68 1405 42 42 42 42 1935 42 139 1628 611 42", " 42 1527 765 1909 42 323 1590 42 42 1725 1773 42", " 42 122 1400 1297 42 358 1335 764 42 1987 42 42", " 692 1876 42 42 1021 42 42 772 42 1623 42 128 96", " 7 336 920 42 763 42 42 90 684 1100 42 732 42 42", " 282 533 1881 561 42 42 1349 42 42 42 965 446 1595", " 618 355 346 42 42 42 42 1356 42 1628 42 42 818", " 42 42 1239 42 42 1848 1069 377 600 42 206 330", " 42 78 1821 465 1431 42 42 42 84 1602 42 1876 407", " 42 1020 693 42 42 981 1509 284 330 42 403 1884", " 1894 756 1538 42 42 939 42 42 1274 42 1043 42", " 195 42 1954 149 42 42 1915 42 42 42 1394 1989", " 1820 42 1210 356 477 42 42 42 779 42 1558 42 1031", " 740 1684 42 613 1515 588 42 42 42 1570 1362 42", " 1424 608 42 1947 63 42 42 42 1798 42 1870 446", " 766 42 42 42 1554 1795 1313 1315 42 42 42 42 907", " 42 723 566 42 42 366 509 154 42 1417 42 42 42", " 61 910 42 1625 395 42 923 42 289 320 572 42 42", " 1978 42 1652 42 42 1684 1561 1977 1043 42 42 701", " 35 42 42 840 1551 42 42 413 574 42 42 1652 1347", " 625 42 42 42 978 42 66 42 42 382 42 42 1110 1576", " 42 42 42 385 42 42 42 1044 1126 42 42 884 42 296", " 426 42 42 42 42 994 1902 357 42 477 1815 42 42", " 1911 42 42 42 42 1255 42 1971 42 42 42 364 42", " 42 42 42 42 1698 1699 42 42 42 42 1564 735 1796", " 42 1477 271 975 1471 1836 42 1423 42 1902 42 688", " 42 457 1939 42 42 42 42 585 1113 816 42 42 42", " 42 1821 843 42 42 645 42 413 1266 42 1074 42 42", " 42 489 533 1560 1267 818 42 1930 42 1507 416 42", " 829 1323 42 42 42 42 534 76 42 42 1507 42 42 42", " 361 46 42 42 42 42 1170 42 42 42 767 42 42 393", " 937 1135 988 1721 42 1865 42 609 1574 42 1927", " 1175 1415 42 42 42 42 1428 99 695 1984 42 391", " 42 42 42 42 42 42 42 858 42 42 42 42 788 1802", " 1209 587 1260 42 259 1591 1020 152 889 575 42", " 42 42 42 1082 546 42 521 42 1833 833 42 31 42", " 143 1921 209 309 1447 42 484 1760 1965 42 1755", " 42 62 1659 42 42 176 1762 540 42 1667 42 42 6", " 1261 42 728 560 42 1529 42 459 218 1737 1938 317", " 42 42 42 75 42 42 1807 42 42 1829 192 42 1997", " 1489 1601 42 1279 1961 1000 42 42 42 42 42 42", " 42 42 42 550 42 1479 42 42 297 42 209 1293 965", " 1044 1979 712 42 435 42 42 774 20 246 42 42 1350", " 42 42 42 42 42 42 42 42 42 1144 42 803 465 1110"};
    vector<string> part2 = {" 265 42 1412 593 1674 42 42 1637 42 42 175 42 42", " 42 99 845 42 851 667 42 42 42 42 1116 1849 1163", " 970 1498 42 42 42 655 42 42 42 1150 492 42 1580", " 136 42 42 42 42 42 1854 42 42 1958 42 1757 117", " 1823 228 1501 42 649 1690 1099 42 1522 42 42 42", " 1952 42 1501 1905 42 635 141 561 1401 42 42 42", " 42 42 308 1616 643 796 1945 42 42 42 104 1571", " 42 42 42 42 42 1204 1239 890 1025 42 1072 498", " 42 42 42 767 42 42 217 42 1600 42 42 42 168 42", " 1350 42 1081 42 42 405 42 42 42 956 658 497 1075", " 42 42 183 1135 190 42 450 42 1284 1711 1997 1309", " 42 42 42 42 42 1950 553 1340 42 42 214 42 42 42", " 42 42 1879 42 1962 42 1969 42 42 42 42 727 1662", " 1942 502 563 1928 1924 42 1973 42 1999 42 1042", " 342 1011 42 1558 1992 42 42 42 137 42 71 42 953", " 1315 42 700 665 42 286 42 42 42 42 872 545 42", " 42 708 42 1559 1202 550 1385 42 557 42 1131 453", " 1528 917 42 42 42 42 42 42 696 42 42 42 1440 42", " 42 42 332 1004 1967 42 76 975 1948 82 42 42 42", " 927 42 465 18 1781 74 199 42 42 95 1954 42 578", " 777 42 42 920 42 534 1236 42 42 42 1636 42 42", " 42 1217 42 1711 42 42 1387 1450 1829 42 42 1671", " 42 1200 1433 1790 120 42 42 1235 42 852 42 1025", " 42 42 1246 42 42 699 42 42 963 42 704 1596 1390", " 42 42 42 42 42 181 1071 42 191 42 220 42 1150", " 837 42 42 42 42 681 1510 42 42 42 42 42 42 42", " 1110 42 42 42 42 42 317 42 31 42 860 42 42 42", " 42 42 1988 42 42 42 42 1180 42 835 42 42 1575", " 42 7 1770 898 518 983 1202 42 42 42 42 42 745", " 42 42 42 42 1918 1432 986 42 161 42 42 1920 1429", " 1848 918 42 791 42 1714 92 42 708 168 926 550", " 1342 42 42 1376 42 259 630 42 42 865 848 602 42", " 42 692 1135 42 1695 42 1875 42 1501 437 42 152", " 42 1841 42 620 127 42 42 42 107 1157 1428 369", " 167 42 42 42 42 42 42 42 42 1151 42 42 1116 42", " 42 47 1561 1280 42 42 1740 42 1544 42 42 42 42", " 673 42 42 1871 42 42 1129 42 325 432 976 318 776", " 42 42 1508 517 42 629 42 42 42 42 42 482 42 42", " 42 1399 366 42 291 536 42 94 1980 517 75 666 42", " 817 42 270 42 42 1788 42 42 735 816 863 42 990", " 1865 42 1318 616 42 532 42 211 554 42 238 42 222", " 650 42 1662 42 42 42 42 42 42 943 42 42 42 42", " 42 42 990 42 42 42 42 42 488 1341 1003 42 42 76", " 70 42 841 856 1914 581 42 1694 42 42 1108 42 42", " 42 42 42 246 42 1230 1230 42 963 42 42 958 42", " 1257 42 884 1366 42 42 42 42 42 42 42 86 1 42", " 593 929 42 1407 420 42 975 42 1684 42 915 1400", " 532 1016 42 42 42 1827 42 931 42 1280 327 42 1430", " 1608 42 1091 330 61 632 42 114 42 42 806 42 42", " 537 42 1377 42 42 1249 1065 42 112 42 1242 1972"};
    vector<string> part3 = {" 225 42 42 85 42 1903 1775 1513 1563 1317 42 69", " 42 42 42 42 215 1910 42 1243 42 42 126 42 315", " 42 42 307 410 1267 1054 42 463 42 1016 536 42", " 42 1932 42 1544 1675 652 42 42 42 42 546 42 42", " 497 42 48 1438 1212 42 347 42 42 42 42 1847 1292", " 42 1566 42 1920 977 727 42 142 1708 1089 1077", " 42 42 467 1694 1457 285 418 1408 42 42 889 29", " 42 42 1423 42 42 1884 42 42 42 973 1925 42 42", " 1788 765 1490 1416 42 94 697 711 281 42 530 214", " 42 42 478 42 1753 1970 42 42 42 42 42 42 42 42", " 1244 667 42 42 183 42 42 42 42 240 1975 1299 42", " 1753 911 1480 1267 696 42 42 42 42 577 151 772", " 42 42 42 42 1845 89 1846 1275 1717 952 42 42 1520", " 1486 42 1659 42 1259 42 42 1213 42 462 42 42 246", " 42 1071 3 85 1747 308 42 4 42 42 42 179 42 1728", " 1919 42 1375 660 42 1640 42 1666 1341 42 1300", " 1774 709 1335 42 1937 742 384 1301 42 42 1725", " 42 42 739 42 627 42 42 42 42 42 192 675 42 1960", " 42 1242 42 687 642 42 42 90 1988 1532 42 42 491", " 254 42 42 1301 42 42 42 42 1023 1175 42 522 1755", " 190 42 42 42 1932 42 1120 42 42 1212 42 589 42", " 854 1430 42 42 42 1078 42 1482 42 42 42 1000 1134", " 42 1793 445 42 811 1456 1429 1573 42 42 705 1174", " 417 42 520 1792 884 1691 42 221 42 42 1655 524", " 42 42 772 1494 42 1298 42 1244 1435 42 42 843", " 617 42 42 1562 42 1661 1631 276 42 42 42 798 42", " 1103 1717 168 890 1728 1659 42 42 42 42 971 42", " 42 1286 1316 952 454 1669 42 42 1442 42 1022 1132", " 766 42 42 482 1080 1145 42 42 42 42 42 1099 42", " 1745 105 42 326 1783 42 42 42 1412 42 42 216 90", " 339 1929 1071 1514 466 1017 61 42 42 42 42 753", " 448 42 1722 42 642 42 1929 906 127 376 1664 42", " 1726 42 42 42 42 549 42 42 42 1573 430 18 42 1914", " 42 283 799 42 996 1435 5 42 42 11 42 1025 462", " 42 42 42 1103 1448 1600 598 42 792 1260 42 42", " 51 671 1364 162 709 42 1798 1365 1149 42 42 42", " 915 83 1940 1224 42 42 146 42 219 42 1281 1582", " 1836 1116 531 42 42 1304 42 42 42 581 1949 257", " 42 42 975 1112 828 42 42 1856 1017 1006 381 42", " 91 42 1331 1931 42 42 42 42 188 42 42 1329 21", " 42 42 42 42 1701 42 42 1875 346 42 42 42 42 42", " 42 456 42 1719 42 42 1087 707 42 570 42 463 39", " 42 42 777 309 1537 172 1989 42 1912 42 540 42", " 42 42 42 1360 42 156 1828 660 1877 1658 1478 561", " 42 1088 284 1943 42 42 42 42 907 1592 1606 1379", " 1035 880 42 1647 42 42 212 42 42 42 1903 42 517", " 42 1384 1671 42 316 42 42 42 42 1052 42 42 916", " 443 1394 1253 1373 513 42 42 42 275 654 431 1046", " 1999 42 42 534 42 42 42 42 1771 42 1750 976 65", " 42 1477 806 1955 42 42 1758 42 42 42 42 42 1384"};
    vector<string> part4 = {" 42 1999 812 521 42 42 1740 42 654 1093 42 865", " 837 1861 1243 42 1623 138 1320 743 42 42 386 1787", " 1416 42 684 42 42 42 42 1564 42 447 562 42 42", " 42 1537 195 147 42 347 1387 42 541 1542 1705 42", " 1367 1394 1584 42 1827 42 42 42 1921 476 42 787", " 42 42 42 1043 42 42 1995 42 42 1661 42 1782 871", " 42 42 72 1529 1912 42 42 1584 579 391 42 42 42", " 763 42 42 228 32 1721"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1999;
    if(result == expected) {
        cout << "Test Case 94: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 94: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test95() {
    int numSheep = 2000;
    int maxRuns = 1989;
    vector<string> part1 = {"576 576 576 576 1863 576 576 576 576 1574 83 576", " 620 1778 580 1007 576 815 1928 1731 352 576 1942", " 576 576 371 1470 1430 309 576 576 576 576 576", " 916 1831 576 429 305 1224 972 699 927 482 1081", " 576 576 61 576 159 240 576 576 576 1396 576 576", " 576 576 576 1649 351 289 825 576 687 118 576 1353", " 576 576 576 1641 1867 992 576 1305 1914 523 576", " 576 903 1355 594 1980 1536 576 1614 1830 576 592", " 576 576 576 1166 576 373 576 117 576 576 1847", " 576 576 289 576 857 375 945 576 576 1546 576 1734", " 1074 576 576 1743 576 576 887 576 576 576 576", " 576 576 1645 559 576 576 496 973 576 1032 576", " 1797 576 576 547 1144 877 1660 576 576 809 576", " 576 1636 909 1378 576 827 576 576 576 576 576", " 576 1058 991 1804 1220 576 576 186 576 954 576", " 602 1002 1247 576 1144 576 287 576 576 179 576", " 329 1852 476 576 526 683 576 576 576 1099 345", " 576 207 576 576 204 576 89 744 1953 839 1092 214", " 576 576 474 576 576 1713 576 1800 341 901 576", " 576 576 233 761 576 420 576 1422 282 576 1774", " 826 709 998 289 1933 349 576 878 576 1044 576", " 1108 576 641 474 220 576 576 576 901 1971 360", " 119 1425 576 1528 703 576 576 576 6 576 576 576", " 576 576 576 576 339 1178 843 576 576 1793 1767", " 576 1579 576 576 634 989 626 576 576 300 576 346", " 1205 312 1712 441 255 1571 224 576 576 338 576", " 1792 723 433 576 1279 576 576 576 576 576 1614", " 576 286 342 576 1151 1058 401 576 871 576 1047", " 787 1734 576 672 576 576 576 576 1232 576 576", " 1213 576 598 147 576 576 576 576 337 576 107 1147", " 576 576 576 576 1126 576 524 674 576 576 576 773", " 942 1675 523 1755 1586 914 576 1112 1374 576 744", " 576 1872 576 1163 841 576 732 576 576 611 42 419", " 79 576 576 576 576 576 576 1579 576 356 927 576", " 1982 1353 807 576 1663 576 1897 1950 492 576 439", " 576 1541 429 576 735 990 178 576 576 212 576 576", " 1173 576 1396 1464 576 576 501 576 576 576 576", " 576 576 754 1224 1252 1361 1459 576 1592 576 576", " 1263 576 576 1430 576 541 212 841 576 951 90 96", " 1619 576 576 576 1845 528 576 1882 576 273 576", " 576 576 576 576 576 576 576 576 697 576 576 212", " 207 576 576 576 482 1722 1214 999 714 419 1586", " 576 576 198 1208 576 1970 576 1228 1765 840 576", " 576 576 576 1018 576 576 1783 1624 1770 82 348", " 576 576 576 576 855 576 503 703 972 585 576 1917", " 1565 523 1006 576 576 576 576 311 774 377 576", " 576 976 112 1859 576 1802 1346 576 1752 576 751", " 686 576 773 247 576 576 576 576 847 576 576 576", " 576 576 576 826 576 576 1429 576 576 178 828 576", " 576 576 576 576 1965 712 1117 576 455 576 576"};
    vector<string> part2 = {" 625 576 1601 481 1692 576 576 576 450 1832 576", " 1308 576 1189 576 576 1161 1328 857 501 840 104", " 884 106 576 576 576 576 161 576 313 1562 576 576", " 576 576 576 1509 1218 1886 1165 576 576 611 576", " 576 776 841 255 311 1618 576 576 576 576 576 576", " 78 1454 207 576 576 724 576 115 576 689 576 871", " 576 576 54 1455 999 1584 576 576 576 576 576 576", " 361 758 1168 173 502 576 1622 775 576 557 1350", " 374 576 576 631 576 576 576 136 576 1939 511 688", " 576 576 1747 1715 576 576 576 1099 1866 1118 1331", " 576 1899 576 576 750 576 1675 320 576 504 1727", " 1344 576 576 576 1082 351 576 576 576 576 576", " 576 576 576 576 1834 882 576 1931 1268 599 726", " 576 576 1735 1473 1909 576 576 1101 576 576 387", " 576 576 1047 1863 500 1248 1643 467 1456 576 576", " 576 1817 1281 612 97 576 1217 1128 576 487 1324", " 576 576 576 898 204 576 226 986 977 576 1765 576", " 576 835 576 576 117 576 576 964 576 576 521 576", " 1453 576 158 576 576 576 1572 580 576 93 576 1510", " 430 739 1440 837 63 576 576 143 454 576 576 956", " 966 896 576 253 122 1724 1609 576 576 1479 1385", " 576 667 527 610 576 1020 1322 576 696 8 1486 593", " 576 557 576 576 371 1782 576 576 576 1388 576", " 708 576 576 576 576 1027 576 762 1921 1845 1332", " 576 576 576 576 576 576 576 1716 576 576 576 576", " 210 576 576 576 1333 136 576 677 865 576 1774", " 576 445 576 1765 210 646 576 925 829 75 576 576", " 576 593 1218 1295 832 1134 351 576 576 1619 576", " 576 576 780 576 300 517 1904 576 576 1486 576", " 576 576 576 576 576 576 1216 576 576 576 576 617", " 1513 18 331 292 576 576 576 614 367 576 796 576", " 576 571 784 576 1526 862 576 576 506 1026 303", " 576 1708 1020 576 458 576 1944 576 576 132 576", " 1172 576 576 576 576 668 576 576 576 294 576 858", " 576 576 688 576 576 576 191 576 576 340 576 576", " 236 576 558 576 1169 1916 952 1230 237 1549 104", " 246 576 1466 576 576 1583 274 576 1403 1634 97", " 576 1019 576 774 823 576 682 576 75 1696 576 1910", " 509 576 688 1348 149 1336 576 1447 576 576 576", " 1753 1449 66 250 1422 844 576 1279 576 581 1677", " 1855 1504 1841 1348 576 576 1781 576 576 316 576", " 504 771 576 1396 576 576 68 576 102 576 576 1870", " 576 100 576 576 576 299 1336 576 576 576 576 187", " 873 576 576 576 437 1893 576 576 640 1909 576", " 934 488 153 576 576 421 61 1185 1394 492 85 576", " 576 1786 1463 576 576 1880 733 1876 1550 576 688", " 98 576 576 139 990 576 576 576 576 576 1796 576", " 576 576 170 576 576 1154 576 651 576 1471 348", " 1150 931 1907 1185 576 576 923 49 1005 576 576", " 961 576 739 347 1796 875 773 392 1348 1595 1430"};
    vector<string> part3 = {" 576 114 576 576 744 1836 971 576 1952 209 860", " 1735 1154 1017 1195 576 188 52 484 602 628 576", " 576 576 755 302 998 576 39 1098 576 576 576 208", " 576 1996 339 576 72 576 1792 715 576 1641 327", " 1363 803 576 1630 1334 576 576 955 576 676 1597", " 1365 1631 65 576 576 576 1855 639 576 576 576", " 576 576 1826 429 1050 576 711 576 576 634 1344", " 576 796 576 576 576 576 576 576 576 576 1686 576", " 372 576 1252 576 1909 514 576 1110 576 576 1769", " 233 1029 576 1702 576 1431 576 576 576 964 576", " 576 576 871 576 576 1825 666 576 576 576 576 576", " 1982 52 898 576 576 576 955 555 576 576 576 145", " 576 403 576 1259 576 576 1608 403 576 1828 576", " 576 1774 1774 576 1263 318 576 576 576 576 1869", " 576 576 31 576 862 576 576 1413 576 576 576 576", " 494 576 576 576 523 5 576 12 576 576 576 768 1351", " 576 576 576 576 980 576 848 1343 1199 576 1190", " 349 576 940 576 576 576 277 620 997 576 576 576", " 576 52 576 976 576 189 576 576 576 576 576 1276", " 1074 576 1309 1381 1872 1351 1650 263 1890 576", " 416 576 576 576 1764 1729 576 576 576 1867 1759", " 576 576 262 576 576 576 576 859 576 762 84 576", " 686 576 576 1920 830 1111 223 526 576 576 907", " 1004 1538 576 1427 576 576 1979 1371 1632 1519", " 1991 576 576 1728 1841 1961 576 164 283 576 576", " 576 576 576 742 93 1585 559 576 1681 576 576 576", " 1272 576 1695 486 576 576 1403 576 576 820 576", " 1343 576 576 576 576 852 1178 576 1654 576 1973", " 1630 1215 185 472 576 1686 102 1511 337 1337 1751", " 576 576 1568 1729 576 576 576 1174 1020 576 711", " 576 576 576 576 1708 576 576 576 576 1940 576", " 509 576 576 1616 576 1655 684 173 576 576 1095", " 576 1092 1484 666 529 576 1649 576 1151 576 576", " 576 681 576 576 576 1026 70 576 576 576 1336 576", " 576 576 712 339 600 914 576 576 576 1315 1247", " 571 797 576 576 1641 576 576 576 449 576 576 833", " 676 576 913 657 156 1525 576 1222 1425 1774 576", " 576 54 576 83 576 1549 576 1652 1457 576 137 576", " 576 576 308 403 576 576 576 1452 455 1180 1615", " 128 576 395 576 461 833 1649 576 576 193 969 1092", " 576 576 576 644 950 1842 1654 576 576 286 576", " 576 137 1498 892 576 773 1360 576 257 740 576", " 576 576 576 705 576 371 576 601 576 576 1540 337", " 1554 576 576 605 1106 1337 1286 576 576 269 1159", " 251 772 576 576 1230 576 576 1345 1953 1311 576", " 1755 576 1378 513 576 576 576 357 576 576 1788", " 576 576 1314 344 576 576 560 1713 576 759 576", " 1878 576 470 576 184 576 576 366 576 576 576 1752", " 1802 1259 576 576 576 224 1266 848 267 362 576", " 576 826 576 576 942 576 1447 906 576 336 1782"};
    vector<string> part4 = {" 1697 576 576 855 258 576 576 576 576 576 1725", " 1623 1597 1990 576 576 687 576 1974 1717 576 576", " 576 258 1078 609 576 576 576 576 576 576 701 261", " 1149 576 576 1176 576 113 1317 576 576 576 576", " 576 576 576 470 576 576 576 735 21 576 410 870", " 576 176 1948 576 576 576 1068 559 478 576 576", " 576 1415 576 1882 986 1080 576 1765 576 576 576", " 576 576 576 295 576 576 576 576 576 1149 1085", " 491 576 576 814 576 576 576 576 576 1551 1262", " 576 129 576 195 576 607 576 576 576 576 576 314", " 626 571 576 695 576 38 962 576 1537 1390 576 576", " 576 576 934 576 491 160 984 1056 576 576 1213", " 576 1752 576 576 576 576 1745 576 852 576 576", " 152 1041 576 576 1632 1011 1002 576 1903 576 1577", " 345 446 842 576 576 261 576 291 576 576 576 576", " 576 1329 96 767 576 576 576 1218 576 576 936 576", " 990 576 113 576 1403 46 1421 958 576 1859 1783", " 576 576 681 1256 576 349 367 576 1229 1351 576", " 533 342 576 107 576 586 576 1329 576 576 1330", " 880 1651 576 281 576 1798 576 1490 576 576 1028", " 1885 576 576 576 576 576 576 576 1338 576 576", " 576 738 1991 249 947 576 576 576 576 576 525 576", " 1399 1176 1469 808 1324 576 576 576 576 576 1114", " 576 576 576 1254 1219 1220 576 1645 1860 891 576", " 576 576 576 764 1621 576 576 434 576 576 818 576", " 576 1467 937 576 576 576 609 576 576 576 576 1113", " 576 884"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1996;
    if(result == expected) {
        cout << "Test Case 95: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 95: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test96() {
    int numSheep = 2000;
    int maxRuns = 1989;
    vector<string> part1 = {"897 897 1547 1263 144 658 888 26 1808 1625 694", " 1401 1627 897 897 897 897 897 86 886 897 899 483", " 897 920 1894 947 897 897 1369 1155 1347 897 897", " 385 897 897 897 840 897 897 392 807 1660 1146", " 355 1003 142 1436 1186 1744 1197 897 345 897 897", " 897 1900 897 897 1568 863 897 959 514 897 1272", " 1116 612 123 132 897 897 897 897 897 833 1166", " 1229 1136 1704 149 129 1872 1487 1488 1333 897", " 897 897 897 1157 897 897 1950 1378 897 201 146", " 897 1035 1383 897 897 584 897 1363 897 897 897", " 897 833 1250 253 897 897 1780 897 1121 1721 897", " 897 1184 584 897 897 468 602 897 1859 465 897", " 1065 897 897 723 1024 178 897 897 565 276 1422", " 1263 1472 1707 1960 1069 897 1393 897 897 1501", " 811 605 242 319 897 1286 897 1665 237 897 1884", " 897 762 897 1154 843 1119 897 897 897 897 774", " 1501 1008 897 145 897 924 897 897 897 897 897", " 539 897 400 897 897 1702 897 1414 1670 1105 897", " 1751 1703 119 897 897 345 897 1023 246 1533 897", " 897 1851 1910 897 897 897 897 173 897 897 897", " 897 1300 647 1323 899 897 965 1942 1609 1621 982", " 897 897 897 897 897 897 897 619 1662 897 599 795", " 779 897 1087 897 1771 897 897 944 587 1359 897", " 886 1829 527 1417 897 219 897 897 897 897 897", " 869 1350 897 714 897 368 1611 897 897 690 897", " 1720 1870 1338 897 1394 86 897 509 897 1164 223", " 897 897 842 897 897 1646 773 897 897 133 897 897", " 1019 1571 897 445 897 897 321 1007 897 897 897", " 250 897 95 1164 1296 897 103 897 897 897 897 1263", " 382 897 330 897 897 897 384 1557 897 1369 1106", " 485 897 1696 897 1652 897 596 1109 747 457 838", " 798 1212 897 897 983 897 214 1223 1104 897 897", " 897 897 94 638 626 1681 897 897 897 897 897 1703", " 352 578 749 761 897 1758 897 724 897 897 897 897", " 897 363 1338 897 350 1517 897 897 897 897 897", " 897 897 855 897 897 897 1698 710 760 180 897 897", " 321 897 897 1064 1300 897 897 1306 202 897 897", " 897 620 897 897 1315 1489 897 1186 897 1083 897", " 897 782 897 897 1197 897 897 1783 1136 1618 530", " 897 897 1885 897 897 413 1114 1108 897 897 897", " 294 289 897 230 897 1390 1019 897 897 897 897", " 613 897 897 897 94 747 684 1765 321 897 712 299", " 897 897 1501 897 1349 897 1488 969 897 1073 459", " 1514 897 897 212 897 897 1481 1943 897 897 1371", " 897 897 883 1046 1020 202 897 897 897 897 897", " 1271 897 1290 897 451 1463 897 897 897 260 897", " 422 897 897 897 1034 897 897 897 1374 897 1926", " 892 1700 188 897 1330 1785 897 1456 1817 897 929", " 797 902 897 1438 1615 356 619 1047 897 897 897", " 897 1103 897 897 1203 897 631 689 898 1738 1410"};
    vector<string> part2 = {" 897 351 1297 675 897 897 223 1266 897 1872 1497", " 1154 379 1203 1706 897 244 1990 770 1611 1410", " 897 856 897 1820 897 897 897 897 897 817 1097", " 897 897 897 897 1899 897 897 61 897 897 897 897", " 509 1995 897 897 201 1226 897 897 897 897 897", " 1695 832 897 269 956 897 897 897 897 1042 897", " 897 897 176 897 521 897 1234 897 890 897 484 1700", " 897 897 897 897 897 453 20 897 1138 897 273 1438", " 897 1563 897 1436 897 897 1065 897 556 897 897", " 897 897 897 897 897 1549 897 897 1748 1820 829", " 36 982 897 897 897 897 1066 897 1847 897 897 897", " 897 1705 897 316 829 897 1988 1862 1171 897 145", " 453 897 1853 1174 1862 661 1487 731 1528 967 897", " 1693 1432 1623 708 897 897 897 1074 1248 483 897", " 897 897 627 1085 1132 897 897 1773 1522 661 897", " 716 897 1643 897 371 796 1628 580 897 897 897", " 581 1166 897 255 897 897 897 897 897 897 122 1108", " 897 897 1725 1619 897 1202 1548 147 1532 897 897", " 897 408 897 897 1798 486 1996 897 897 104 897", " 1238 1130 897 897 1932 897 897 1057 1322 897 897", " 1515 329 1411 897 1927 98 622 146 202 897 897", " 897 105 897 988 897 897 995 897 105 897 897 897", " 408 897 897 276 897 1922 897 897 493 897 897 1345", " 1985 224 897 914 1233 976 897 897 377 1304 897", " 265 1629 553 897 1285 897 897 897 897 1389 897", " 897 1271 791 1204 897 1113 158 1993 1455 751 1095", " 897 897 897 897 897 897 324 1583 897 897 897 897", " 897 521 468 411 897 897 897 897 1084 897 897 337", " 897 246 691 897 644 897 897 897 1257 897 897 1966", " 562 897 1451 897 52 1254 1474 897 1468 897 381", " 169 1070 897 673 897 145 75 580 897 9 1883 897", " 1920 897 897 897 249 1051 897 897 315 423 897", " 897 897 897 672 897 897 897 897 897 897 897 45", " 146 631 1003 897 897 911 996 385 216 897 690 505", " 897 108 545 1141 897 1281 897 897 897 897 897", " 46 897 897 897 947 897 897 897 768 897 855 256", " 200 493 897 897 718 897 1729 897 897 1623 897", " 1136 1563 1741 897 340 159 1963 897 1817 897 1223", " 1602 666 897 897 897 897 897 897 897 897 1550", " 897 897 897 897 897 1334 169 410 1498 1500 1259", " 409 498 1046 1970 70 897 897 1072 897 1873 897", " 211 897 1495 897 1819 1720 897 897 445 897 897", " 897 897 1640 950 1061 897 796 897 897 1739 897", " 1279 1540 897 1571 897 897 108 1027 1463 897 261", " 1230 1119 1837 897 1679 885 537 897 897 486 1944", " 1243 1206 897 897 801 306 454 897 1441 897 897", " 897 897 897 998 258 897 784 1634 1587 1632 897", " 897 707 1886 480 119 897 897 897 658 897 1337", " 897 897 1626 897 1250 884 77 897 131 897 897 897", " 45 897 652 1561 1985 1241 421 897 897 849 897"};
    vector<string> part3 = {" 897 897 1069 897 548 897 897 897 1802 897 897", " 897 1316 897 897 249 1109 897 897 897 897 1128", " 897 1885 897 827 897 1370 897 897 266 1355 897", " 897 897 897 571 897 897 897 897 854 897 1655 1429", " 874 897 964 897 709 897 1194 254 897 323 1220", " 897 1571 897 897 1855 897 1769 897 1565 897 897", " 897 581 1964 1010 897 897 808 326 1661 897 479", " 467 755 897 668 897 625 897 1059 897 897 531 897", " 897 42 1505 496 1916 897 897 897 1894 38 897 401", " 897 415 897 1929 897 897 686 1455 1127 897 230", " 750 897 897 897 1496 897 897 897 947 1766 897", " 897 897 1269 99 149 77 897 1427 897 923 897 1205", " 1963 1610 1929 1418 209 897 897 9 703 897 546", " 897 897 897 897 897 245 897 897 897 977 897 342", " 1193 1097 897 707 1588 432 897 53 465 1698 897", " 312 1127 500 616 1672 1903 1865 1066 897 897 1675", " 335 1097 897 1348 897 1388 897 897 84 897 897", " 1963 976 897 897 897 564 897 1067 897 1102 897", " 60 897 33 897 233 897 897 897 897 897 897 897", " 897 520 1234 656 897 1142 1725 897 897 1785 897", " 897 897 696 1013 1136 897 1808 148 701 897 897", " 897 679 897 897 897 1824 534 897 954 1488 897", " 897 1278 897 897 897 687 897 1349 1410 897 656", " 1504 897 263 897 10 897 570 862 897 1677 911 1491", " 897 897 897 897 897 1262 897 897 897 749 897 731", " 424 897 897 897 442 1666 897 307 897 159 954 1316", " 196 897 897 897 897 1438 897 897 897 897 897 877", " 897 897 897 198 897 897 1837 897 285 122 589 469", " 1673 897 411 532 897 897 897 897 897 284 952 339", " 897 1270 897 897 897 897 1640 897 1521 488 441", " 897 897 1140 897 663 966 897 32 1969 897 1720", " 126 1411 772 897 1517 1598 847 365 897 668 897", " 680 1022 897 897 897 816 561 1711 350 545 897", " 897 897 897 897 889 897 1741 1473 1404 897 897", " 897 897 897 163 897 897 370 897 500 1823 166 1322", " 897 897 339 540 1129 897 897 528 704 438 896 1141", " 897 897 897 377 524 897 897 1373 897 830 897 1760", " 897 897 1396 411 1407 1866 1240 986 498 897 851", " 897 897 897 153 897 897 897 1112 1797 897 1030", " 897 897 1260 349 897 407 897 897 897 815 897 897", " 897 897 897 646 897 897 657 43 897 420 122 29", " 831 897 991 897 897 897 897 544 897 897 1572 897", " 897 474 897 897 897 1705 897 305 897 449 897 27", " 1297 1648 1312 446 1532 897 1613 897 897 634 1085", " 897 897 897 897 1020 1847 897 629 897 897 518", " 1701 897 1398 588 876 897 897 897 897 897 1013", " 897 1143 1510 1222 144 897 400 1411 1215 1413", " 897 897 897 1221 1592 897 355 897 1184 897 87", " 897 897 897 407 1096 1297 897 897 897 897 1814", " 897 1776 1114 897 1095 792 897 897 897 897 1819"};
    vector<string> part4 = {" 1479 897 1629 897 897 897 897 801 897 897 897", " 897 897 897 897 1746 897 897 801 273 897 492 897", " 1563 897 1993 897 897 1841 897 897 1527 897 1189", " 1952 897 897 445 128 1920 315 1268 897 897 897", " 897 897 897 1566 897 10 1992 897 225 897 1908", " 853 1189 141 897 897 590 897 400 897 897 897 290", " 897 862 897 897 133 897 897 897 897 897 897 863", " 1325 1112 897 897 503 605 897 347 897 1452 369", " 265 1549 1555 897 897 897 897 1214 1878 1006 679", " 897 722 897 897 897 594 897 897 897 897 1281 897", " 1103 897 897 1612 613 897 897 886 897 897 897", " 897 1871 897 380 1952 1816 1767 886 442 897 1437", " 897 897 897 897 382 897 1634 897 1002 897 897", " 897 897 1051 897 897 809 897 897 446 130 897 394", " 603 897 650 897 1907 1473 897 897 897 967 382", " 1042 897 259 85 897 156 897 897 897 897 458 897", " 897 897 897 897 897 1651 1683 1633 1340 897 897", " 897 897 764 897 897 748 1314 897 897 897 87 1043", " 897 897 897 1729 897 1699 897 685 431 897 897", " 897 1778 1046 897 715 897 897 897 454 897 184", " 897 423 897 897 1675 897 1365 897 897 1191 1977", " 1328 897 897 897 517 897 897 897 1735 897 897", " 897 897 349 897 897 897 1031 1929 897 897 291", " 897 897 63 897 897 218 897 897 254 897 897 897", " 897 446 897 897 1141 897 629 897 897 897 1008", " 1237 897 897 897 897 839 1604 192 897 897 59 1992", " 912 897 1169 1798 897 804 897 1658 1423 1956 897", " 897 897 560 61 897 897"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1996;
    if(result == expected) {
        cout << "Test Case 96: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 96: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test97() {
    int numSheep = 2000;
    int maxRuns = 1989;
    vector<string> part1 = {"1057 1200 723 1057 957 1634 705 1829 406 1057 1057", " 1057 1011 1460 174 1057 1057 1898 483 290 180", " 1233 1057 1057 1057 1057 1057 1057 1057 1057 1057", " 1057 1057 1057 1057 1666 400 817 1057 1057 1725", " 1057 735 1057 1917 1057 1057 261 1057 1339 1304", " 1246 76 1111 1883 751 1057 319 1057 1057 513 1788", " 876 1361 1057 201 517 1057 1057 347 835 1057 902", " 117 1057 1057 1057 54 251 1057 248 1057 1057 1977", " 1057 612 1061 129 1246 1057 1057 1057 1153 1057", " 1057 176 1986 1057 1741 8 1057 1057 1730 1057", " 622 1057 1578 1519 1057 1057 1057 1057 1057 1057", " 1457 584 1057 1057 1057 1057 1057 109 1057 1057", " 206 1281 1057 1057 547 1421 1057 865 1836 1057", " 1167 1057 1057 1057 1057 1615 1057 1691 94 1057", " 553 1714 579 1057 834 1057 197 1672 19 349 1057", " 1969 772 97 1057 1057 931 1057 329 1057 553 1015", " 612 773 1057 675 1057 1057 270 734 1767 1057 1592", " 455 1057 1057 1057 1650 1423 1057 263 1057 1057", " 1057 1057 1057 1057 1057 1057 1057 1057 1057 1883", " 1057 1057 1057 1982 845 1057 1737 599 310 1036", " 1057 1185 1328 1057 1057 1057 1072 654 358 1057", " 74 1057 1057 1057 1057 1057 1502 16 1057 1057", " 1212 1431 1057 176 699 1057 1057 590 1057 1057", " 1677 1057 1802 1057 356 453 1355 177 1057 1057", " 1122 1266 1057 1057 475 1057 1057 1057 1057 1072", " 558 1937 1057 605 1404 1057 1057 804 1057 198", " 1057 1774 1057 1135 935 1057 1624 1810 1057 1057", " 427 220 1057 1276 1057 1706 1921 1057 1057 1057", " 1975 1375 783 1057 492 1130 993 1057 1057 1057", " 1445 1440 1057 525 1057 692 370 1057 1057 1057", " 1057 1436 1057 240 353 1057 1380 1351 554 1387", " 1057 423 1057 1732 1057 1057 1057 1390 1955 1057", " 1862 1789 1057 1057 31 1464 1057 187 1925 1493", " 1057 1913 1675 1451 1057 990 1057 557 605 1057", " 941 1057 1269 1602 1057 1057 1832 1924 347 1057", " 1057 1057 1057 1057 1057 1964 1057 1057 879 90", " 1057 524 1057 1426 1057 1057 1057 1057 1057 93", " 1797 1364 83 507 35 467 1453 802 1057 1057 787", " 1057 1057 1741 638 1057 1239 1057 1057 1057 1996", " 1057 502 1057 1030 1816 1992 1057 1057 1057 738", " 1057 812 1057 807 1847 1057 1057 1057 908 1385", " 666 1057 1057 1057 1057 961 1057 477 1731 1057", " 271 1057 1366 1057 1464 253 659 1057 1057 1241", " 1057 1638 1057 1057 189 1057 1057 1057 1057 1833", " 1057 995 1972 1057 1057 819 1057 767 858 1057", " 1057 1057 1057 1057 1918 1057 1712 1057 1212 1111", " 826 1057 1915 211 1057 1057 1877 1057 1057 1581", " 1057 1057 1057 180 1057 1057 1057 1057 490 1341", " 1057 1057 1057 768 1477 601 842 1057 1057 1057", " 1057 1231 1933 1057 1508 1057 1823 1057 316 306"};
    vector<string> part2 = {" 1057 251 1223 1057 1057 132 1111 1751 173 612", " 1885 1057 798 1057 63 345 1127 576 1057 1599 175", " 1057 1057 1057 1418 974 1057 1057 1159 1125 1057", " 127 197 447 1180 1434 817 101 189 1057 493 1056", " 1057 1068 1057 393 1842 1558 401 563 1057 1057", " 297 587 34 808 1929 1057 1057 1057 1057 799 1057", " 1057 1057 213 1057 1878 1057 946 1883 1862 604", " 1057 1057 1553 1057 1525 153 1057 1057 1145 1057", " 1902 1057 856 151 349 616 1376 1381 1235 1628", " 528 1690 408 861 1978 1694 1057 1057 1057 1693", " 1170 779 1057 1057 1057 1057 1057 1057 1057 1057", " 251 604 1057 1057 1057 296 766 1254 1721 1057", " 211 1057 1057 1057 1891 992 1772 1418 1197 1057", " 669 1899 1057 207 382 1057 112 734 192 1057 1056", " 1057 1057 1057 1581 1057 1862 1116 1079 1553 1057", " 1057 1636 594 1746 821 1531 1615 1057 1275 1084", " 1336 137 1057 1057 1057 448 1057 1057 1057 288", " 1057 1057 1057 81 588 1057 1057 1057 1536 1057", " 1057 1057 1057 80 1057 1057 567 1057 275 1727", " 1057 619 1057 1057 1057 1 1057 154 1057 1356 1057", " 634 1057 1057 1057 1072 323 370 1057 823 1057", " 1057 801 1057 1057 1057 205 1057 1125 1057 1057", " 313 228 2000 768 1057 348 1057 1057 1057 1057", " 1057 1029 1057 1057 1387 1057 1327 1057 1057 1057", " 1322 408 560 168 1057 1450 1057 1057 1057 507", " 1057 1057 1646 1057 1057 1057 1981 340 400 1057", " 1793 848 745 1057 1564 1057 1057 1057 1057 1057", " 1057 1305 1057 982 1057 115 1057 1057 695 750", " 1057 1057 1057 1057 885 1057 1057 1789 1184 1057", " 1526 1057 912 1057 1057 20 1057 1057 1092 1057", " 1057 1057 1057 1057 1643 37 1057 1057 1057 1815", " 1057 1057 567 1057 1057 1057 1057 1325 1790 1057", " 1315 1992 328 1418 1057 1861 1049 1057 1057 1564", " 1057 575 1057 1057 825 1377 1057 186 131 1057", " 1057 756 715 672 1057 625 1214 1696 2000 312 1057", " 1964 67 1057 1057 1057 1057 1057 1355 1096 1057", " 1057 1057 609 870 1057 1809 1057 1057 37 1986", " 1057 1057 1814 433 1057 940 426 1057 1057 1462", " 1057 359 1612 241 1767 1288 1057 709 1057 1057", " 1057 1057 1057 227 262 349 669 1057 1057 1621", " 257 567 1467 1057 1258 1057 1876 561 1057 1057", " 1057 1057 1118 1057 1057 1030 1057 1057 656 1057", " 138 1037 724 780 1298 1057 1630 1057 581 1057", " 1057 1760 1754 1057 1608 176 1057 452 1057 1057", " 1057 1057 1502 1374 1057 1564 334 1057 1660 1052", " 469 182 1057 1057 1057 1057 27 645 1057 554 1318", " 1057 1028 1526 1524 1057 1057 1547 1297 1057 1057", " 1057 1057 1057 1057 1057 1057 83 1258 131 1057", " 1057 1558 1057 1057 1880 1057 1057 1047 1977 1546", " 839 960 1224 1057 1704 812 1057 1057 1926 1431"};
    vector<string> part3 = {" 1057 1057 1038 1057 1057 1057 1057 320 1057 1057", " 1636 1057 1057 1056 1057 1057 71 1057 1540 1031", " 1123 985 1057 794 1057 25 149 1057 556 1057 475", " 1057 1758 1057 1460 1057 1057 1057 575 1057 1047", " 653 1057 1057 912 477 1057 1057 1057 696 1057", " 1057 1707 1057 1057 1149 1057 1057 1057 76 1057", " 1694 1057 1316 1057 1057 1627 1057 673 1057 1057", " 194 1676 1057 72 1057 197 1057 1287 1057 1057", " 406 1057 1057 1057 1057 1511 1057 1057 160 1057", " 857 1179 1057 1057 273 909 1057 1057 1510 1057", " 1586 292 1957 1057 1057 1057 224 1462 1057 1209", " 991 1057 1057 1766 1057 1535 1057 1301 1057 735", " 219 636 334 1057 1057 872 1057 1057 1057 1057", " 1567 1057 992 1874 1057 1485 1057 414 1057 440", " 1057 1057 1765 1316 1004 1057 233 1057 1057 1057", " 1057 1057 1057 1057 1133 480 971 1057 1057 1157", " 1057 1057 1057 1326 1057 1057 1057 1057 1057 1749", " 1057 1057 1057 1057 1057 337 1350 1557 1950 1181", " 570 40 1632 1057 1057 1514 1057 1057 650 1057", " 1057 1057 1602 940 1029 121 1170 767 1057 1057", " 1057 1500 950 1057 1767 1057 1057 311 1476 4 1057", " 1275 1784 1730 1057 908 1057 441 1057 247 1057", " 335 505 1057 1057 530 722 190 803 1057 1992 1503", " 1057 1057 1059 37 121 1057 1057 212 1362 1057", " 1721 632 1057 1136 1057 1057 649 1424 1265 1057", " 1057 1057 1057 387 572 339 1057 1057 1382 396", " 1057 286 22 35 1748 1057 1057 1057 1057 1057 1057", " 223 1057 1057 793 223 1057 1057 1057 644 1057", " 1057 1037 1582 1057 282 1057 923 819 1178 1057", " 433 1759 176 526 1057 1699 957 1754 1467 1057", " 1057 1057 231 1057 839 1880 687 1057 48 1057 1057", " 67 33 309 1057 1091 252 1057 1125 460 942 75 1057", " 1458 1057 1057 387 1057 1057 1057 1057 377 1057", " 1057 1057 1173 1465 81 481 1474 1994 1057 1057", " 1057 1057 1557 1057 1057 1057 1608 1057 484 1572", " 266 1057 1207 926 1861 1057 1390 122 1057 1057", " 1955 1057 1057 1057 805 1057 187 106 1057 1057", " 477 1057 1057 1057 1246 1057 1057 758 1057 1222", " 1383 1057 1057 394 566 1494 1057 1057 1512 1057", " 1145 1057 1850 1057 1859 1057 1057 1057 1057 1057", " 1057 1057 802 1518 1428 1770 1057 1057 1057 1110", " 952 184 992 644 927 1057 1057 1057 1057 1057 1057", " 1057 380 1057 1057 1057 1096 1057 539 1964 1057", " 1057 1117 1057 1057 150 1057 1847 1057 1057 1057", " 883 1057 1057 1057 1390 113 1057 1057 1057 1057", " 49 1057 1057 1057 989 1057 1057 481 1057 1057", " 1057 1057 665 1057 1057 1057 842 1057 1057 1543", " 862 1057 1611 735 1277 1057 1057 859 1057 1057", " 1257 1057 1093 1057 1057 299 1028 1057 1331 1057", " 1057 1057 1057 1057 1057 1057 1166 1240 1057 1027"};
    vector<string> part4 = {" 462 1501 1057 1057 193 48 1057 1057 1088 1057", " 1057 1104 1057 1057 560 1057 1463 1057 1057 1057", " 594 1057 1057 1057 1180 1991 808 1724 62 107 1057", " 650 1057 108 581 1057 1057 1057 1057 1648 1057", " 1057 1057 1057 1374 1000 1057 1088 1415 692 1463", " 1393 1038 1671 1057 1057 378 791 1057 1057 1057", " 1389 871 1373 1035 105 1591 1057 1057 1057 84", " 748 1057 726 1057 1057 331 1057 1057 1014 1057", " 1057 1716 1057 1057 1057 98 1057 1057 600 297", " 1047 254 1748 1057 1057 1395 116 1645 42 1057", " 1057 1398 1057 744 1057 1057 1160 498 215 1057", " 247 1057 1057 1057 1057 1217 568 1057 1656 1780", " 1057 1057 1442 1577 1057 1057 367 657 1057 1057", " 1960 1974 1832 1057 121 586 1686 1057 1057 1057", " 612 44 1057 1057 1191 1506 1217 1185 1235 665", " 867 1519 600 1057 1057 703 1057 247 1868 1057", " 1334 1057 434 133 1057 1057 1057 1921 1057 1057", " 1057 1057 636 1057 1057 973 1057 1057 1057 495", " 4 1057 777 1598 1057 1057 1779 437 1057 1057 1057", " 1057 1691 1057 1057 775 394 1478 1049 1057 1578", " 975 1481 1859 1057 1057 1057 1057 1057 1057 1057", " 1057 1471 1057 1057 1057 1057 1057 1057 227 1057", " 1402 1057 1057 477 558 1057 1057 1057 1057 1057", " 813 703 1437 492 1057 460 1057 1217 1057 1057", " 1057 1931 851 1057 1057 885 1370 1057 1057 820", " 1170 1057 350 902 133 1057 825 1029 1057 1057", " 810 1385 1047 1057 1057 1057 4 1057 191 1157 1057", " 1057 1057 638 1057 471 1057 40 1057 1025 1057", " 1143 1057 1057 1057 1057 119 1057 1057 1057 421", " 663 1067 1297 1057 1057 948 1511 1057 1009 1782", " 1317 1057 1057 552 1846 1057 1057 1057 1101 1057", " 1538 1929 1057 1057 613 1057 1057 324 1057 1057", " 1057 1057 1057 1057 1366 1057 1057 1772 1092 1057", " 1057 607 828 1626 1057 692 1707 1057 1057 1366", " 1867 1057 4 1887 1337 1057 1284 1057 1057 1597", " 1057 1057 1057 1057 1057 1057 1058 311 1290 1057", " 1755 1057 1550 36 1368 1492 1057 1057 1014 1451", " 628 548 1057 1082 1057 1809 1310 33 1057 1250", " 1057 568 1057 1644 993 1057 1057 1057 611 1057", " 952 1159 1284 1057 766 382 1057 1057 726 1057", " 1594 1057 1057 1057 667 129 1057 1091 1883 1057", " 1424 1057 1057 1270 1057 605 69 1894 1057 1057", " 1875 1057 1349 1470 303 1057 1626 1057 138 1057", " 1057 1865 465 1057 1057 373 1615 1570 1057 1057", " 1057 1057 1057 1057 41 378 1057 315 1057 1057", " 1057 1057 21 356 111 1025 1402 1057 1348 1057", " 784 1057 93 1057 1057 260 1057 1858 513 1057 1057", " 1509 736 1005"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2000;
    if(result == expected) {
        cout << "Test Case 97: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 97: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test98() {
    int numSheep = 2000;
    int maxRuns = 1989;
    vector<string> part1 = {"1157 1157 323 1157 1157 1157 1157 921 940 1995", " 1157 1157 1273 477 1157 1842 1157 464 1418 1563", " 1157 1157 1257 713 1254 1495 609 693 1157 1317", " 1157 1945 1157 774 26 1157 1157 1157 706 1565", " 430 1172 1004 1157 1157 1157 457 1183 1157 1157", " 634 1803 1157 989 1157 1203 620 257 880 1305 1157", " 1157 1655 1157 1157 1626 780 509 900 1157 357", " 128 1157 1157 1157 789 1157 1157 989 1157 1829", " 1157 696 1157 1157 1157 405 1947 1157 857 1157", " 1157 1157 1157 1054 1157 1157 1506 1157 1560 1157", " 555 1157 1157 1157 1157 1157 1157 1886 73 737", " 1157 862 1157 1157 1157 1157 301 1769 1157 1251", " 514 1157 1157 1157 1157 1157 1930 1067 1528 998", " 1157 1908 1157 1157 1157 1157 1755 1157 1157 1157", " 1157 1742 1157 1157 1157 1157 886 1157 921 615", " 1157 1546 1604 1157 676 1564 1157 1157 1426 1157", " 1157 1157 1034 1608 1255 1075 1534 1157 1157 1157", " 651 774 163 1157 1157 1222 672 771 1157 1157 202", " 1157 307 1890 1157 138 1732 1157 131 750 1157", " 1157 1631 1157 1089 1157 1157 1157 1157 1157 688", " 820 1157 234 1157 31 1641 1881 1157 1157 1157", " 734 50 1157 205 1880 1157 1157 1157 1157 1157", " 1157 821 1157 958 246 1157 1157 397 695 1157 1157", " 1157 1157 1157 1157 1157 1092 1453 948 771 1093", " 599 1144 689 298 1394 497 1054 1124 1157 92 1157", " 706 1157 1157 1157 1157 1805 1157 1073 377 1157", " 1157 1157 1939 1268 1157 1638 1157 1157 1157 1157", " 1157 1157 1157 1157 1157 1153 1157 1157 1157 1157", " 1834 681 666 1595 1157 898 1308 1482 1157 357", " 6 773 1157 158 85 1157 1157 758 193 1157 1157", " 1990 1573 1013 1157 922 1157 1157 268 44 1054", " 1157 1157 1157 1157 1157 1157 637 1157 1100 644", " 1157 1157 1588 1157 1174 696 1182 1157 1157 1157", " 1088 1845 1271 1157 1653 304 1157 1157 1157 1525", " 1763 396 255 1157 337 1157 1157 205 1458 1157", " 1157 1157 1157 366 232 1157 1157 847 1030 1157", " 182 1942 1157 1157 1566 1157 1157 146 945 1157", " 1655 991 1157 1157 1093 1157 1157 1905 1157 1157", " 1157 1157 1157 1157 1451 856 1157 1157 1667 746", " 1720 285 1157 870 1157 1157 1157 1157 606 688", " 1157 684 922 1157 693 184 1435 1157 1157 1157", " 1157 1330 1157 1157 976 1157 761 1839 1082 1854", " 1045 1157 1157 1907 1157 1955 630 1157 274 1157", " 1973 1157 1157 1157 1272 1157 1157 418 1906 569", " 1157 1157 979 1157 1820 1439 1658 137 1157 1157", " 1157 111 1157 409 500 488 1157 1683 1157 1752", " 1157 1157 1157 1157 1157 430 1157 1157 1157 1157", " 1157 695 1157 1157 716 1157 1811 1263 1157 1157", " 1157 1413 1157 1928 1157 893 718 1877 1157 1032", " 101 1891 1145 1157 1393 1157 1157 1157 1841 1157"};
    vector<string> part2 = {" 795 1157 1157 796 1157 98 1080 1157 1125 1157", " 1157 1128 1157 1157 998 1157 1576 1157 1157 1796", " 1514 1157 1157 1157 1157 1157 1157 1157 479 1058", " 1937 1157 1647 1157 534 1157 1157 1157 1157 1157", " 836 1157 518 1133 189 681 616 1157 1438 1157 1157", " 1791 852 1157 837 1157 352 1388 412 1157 1157", " 342 429 1157 778 466 537 463 1157 281 1157 1157", " 1766 1157 1675 1157 1053 1157 1157 1157 438 1157", " 1648 1157 874 443 1157 1157 375 1525 1157 859", " 1884 681 1464 1157 1157 1818 1157 1475 888 1911", " 1557 657 1157 737 3 1372 889 1202 426 1157 112", " 393 1157 894 1609 1157 828 1157 983 1157 1157", " 1157 1157 1157 1157 914 1157 1157 1157 1157 630", " 1157 687 1683 592 799 1157 1157 1157 828 1157", " 1415 1658 1157 1640 154 1157 754 70 1157 1157", " 1827 680 1256 679 1157 1157 1157 1157 1249 1771", " 1157 1157 74 1157 1807 655 1059 1157 59 940 1179", " 1157 1157 1494 1157 1283 1157 571 1157 407 1157", " 1065 1157 1162 1157 1157 1157 145 1471 1712 1157", " 1157 1157 1229 1157 1415 1157 1157 1157 1157 1157", " 1157 1157 1839 1564 1157 27 1157 1157 1157 419", " 1157 1157 341 1228 88 920 1867 1758 1332 1157", " 1157 1157 889 1157 114 285 1157 830 1157 1157", " 1074 1345 170 1157 1701 784 1709 1378 1031 1157", " 1157 722 814 1157 1157 1157 1641 1302 512 1157", " 240 641 1577 864 925 1157 1157 1157 1157 1157", " 1157 593 1055 1157 1157 1984 1651 1511 1157 1264", " 1157 1157 1157 1157 1267 1157 719 937 1984 1157", " 1785 1739 1157 320 1157 79 1416 1157 1157 1703", " 1877 1157 1116 1325 200 1157 807 1157 1328 272", " 1769 1157 1157 1157 1455 1157 1157 949 931 1157", " 1157 165 1157 1157 1284 907 407 1805 1157 1157", " 879 1157 1928 1210 415 1157 1157 1942 1157 989", " 1157 1840 1157 1157 1590 1157 975 1157 1157 315", " 1157 679 1157 1157 1342 1157 1157 1157 1157 1157", " 1157 1194 432 1157 1756 1157 1157 1157 1157 1157", " 516 1079 1157 1275 243 1157 1157 1157 131 753", " 701 951 1157 1400 1157 1647 1250 1178 1157 1157", " 1157 1157 1157 1960 1157 1157 1157 1157 1157 1627", " 1157 1157 864 1157 1025 1157 1349 1157 975 1157", " 1157 291 1046 620 1157 36 1157 1821 301 686 1157", " 779 1846 1100 1870 1597 1157 710 710 825 515 1157", " 115 1157 1157 808 1923 1726 1157 1867 521 1157", " 1157 1157 1737 1157 1694 769 1157 1157 1212 863", " 1992 655 1081 1157 1157 660 792 1157 1157 1119", " 1079 727 1157 870 1157 1157 630 1157 1843 2 1758", " 1157 1157 1157 645 1157 1157 1157 1157 1157 1157", " 1157 1760 1157 1157 1905 1157 1157 1879 1157 1157", " 556 1157 1157 1157 1157 329 1652 786 154 104 1157", " 1954 1086 1157 575 1157 1157 1157 1157 1157 420"};
    vector<string> part3 = {" 1157 1157 1157 1157 768 1157 1157 1157 407 1157", " 1157 1157 1157 1157 69 1624 1485 1103 1157 1157", " 1825 1157 1012 1157 1157 869 1157 881 1031 1157", " 1157 41 1157 1157 1157 1157 1157 434 1157 1157", " 1477 1157 1834 1157 1157 1157 398 1157 814 1157", " 745 1157 1358 1995 1379 667 853 1157 1157 1099", " 1157 577 1157 1157 1157 1680 1597 1157 1157 1157", " 1157 620 1157 1246 1157 478 1646 1178 1157 1157", " 265 1157 1179 1696 1157 1157 1157 1157 766 47", " 392 1194 1157 823 1157 1289 318 1157 1157 717", " 307 1157 1801 190 139 1157 1157 1157 1157 1534", " 1103 4 1623 1157 1157 1157 1157 1157 1157 1157", " 724 758 117 298 1157 792 1829 282 1270 1157 1157", " 1157 1069 1477 1157 213 555 695 292 1011 107 1157", " 744 1222 1471 1157 1288 1142 1157 1838 1649 300", " 1211 1157 1267 570 1157 1553 972 1758 1157 1157", " 245 1882 1622 1157 267 1157 220 1157 1157 1157", " 1157 1157 479 1157 326 1683 278 200 1382 1157", " 1157 1157 1157 1157 400 1625 1157 1157 380 1585", " 1157 1157 1157 1157 312 1157 1157 1157 1411 1157", " 1157 1076 1157 1391 1157 1027 1157 600 811 1157", " 1157 1157 1157 65 1157 1489 1157 1157 823 1076", " 1157 1157 1345 1354 1157 1353 1157 1157 515 1157", " 1157 1157 1389 1157 1801 1157 17 943 1157 1157", " 234 1157 1752 1157 57 1157 1157 1157 301 1554", " 1455 1157 257 1157 1157 1736 1142 1157 851 1157", " 1157 1157 1157 1157 1157 1923 1157 806 1157 1243", " 1157 1157 503 227 1157 1157 1578 1791 1157 420", " 781 1157 455 13 735 175 1157 1157 1157 1157 172", " 1157 1157 1157 1157 1157 1284 1157 1157 1770 946", " 1096 1157 908 1157 1157 1334 753 1157 1157 639", " 1157 1157 1157 1157 1157 1157 1848 1263 1157 1157", " 427 1068 1157 152 1157 1157 1157 277 1738 677", " 1157 1157 1249 1823 1990 208 725 1157 1459 1157", " 1822 1221 1133 339 1326 1157 176 113 1157 1157", " 1157 1157 1157 1157 1140 1707 1157 1157 1157 1157", " 639 760 257 1610 95 220 1157 1157 1157 580 1738", " 1053 279 212 1590 1157 1157 1157 202 29 1545 1157", " 1445 961 11 1157 1157 1157 1157 1157 1632 945", " 1656 1580 483 1357 1157 1157 1580 7 1157 1157", " 1041 1157 1209 50 1157 1157 1157 655 106 1157", " 1157 719 358 1157 1157 493 1157 1157 1157 576", " 1753 1157 1157 616 1210 1082 1157 238 1157 1452", " 1771 1217 1157 1157 1157 1157 1757 1157 1544 1258", " 906 306 352 1157 1692 1157 1904 1294 631 1418", " 1729 92 1028 1157 1157 1157 811 1157 101 1157", " 1157 1157 1157 1157 1157 1413 832 1157 1157 1268", " 469 1157 1157 1157 1793 1157 1241 1157 1853 1933", " 1395 1496 1157 1157 1443 1910 1157 150 1647 1157", " 1314 1157 1157 620 1157 456 1157 1157 395 967"};
    vector<string> part4 = {" 1157 1157 1157 1157 752 1157 1157 1157 1157 1157", " 1912 1157 1859 1157 1157 1103 1157 1720 1157 1157", " 1157 293 1157 1157 755 1157 519 1073 1157 1157", " 1717 1157 1157 830 1157 1498 215 858 60 1815 1157", " 1157 1157 1140 1415 609 1157 1093 1157 335 1157", " 1349 303 1127 1157 1157 212 1018 1157 1925 1157", " 1157 1948 806 1157 1157 1851 102 1157 119 41 1157", " 248 765 1085 1157 1157 1157 1157 1157 494 1157", " 1157 1998 1751 1157 918 1984 1985 36 1157 1157", " 1157 1345 1157 1894 1157 1908 990 1526 1893 287", " 59 1157 1157 271 1157 1447 367 1157 1157 1157", " 1157 1403 1493 1157 91 1592 141 259 1157 1966", " 1157 1157 1157 1157 1165 1157 1157 1157 1157 1911", " 1157 1157 1157 1158 1157 214 916 239 1157 1157", " 624 1253 1157 1157 1157 1157 35 1157 1157 1157", " 1157 506 1922 1157 1157 494 814 612 1157 1157", " 168 509 1157 1873 1157 38 393 1022 1808 1157 1157", " 1063 343 1157 1157 244 1157 1157 1157 1157 1157", " 1157 226 1157 1157 1157 1157 1157 1157 1157 1834", " 1157 1157 19 1192 160 1157 991 976 1157 1902 1157", " 1109 1157 313 1852 1295 1920 1157 444 1157 1157", " 1157 1085 1256 1598 1530 1157 1157 1157 1157 1157", " 1157 914 1157 1157 1157 1068 1218 19 1157 1157", " 1092 679 1157 1157 1157 1157 272 1157 1157 183", " 1846 1157 859 1301 1157 949 1196 277 1157 592", " 1958 1157 1084 1157 332 1157 1732 1056 1157 1157", " 12 602 665 1157 1040 498 533 435 659 1571 1157", " 1145 1189 1983 284 1157 603 1395 697 1157 169", " 1157 1157 457 1157 404 1157 591 1157 1248 6 1157", " 380 1314 1443 1400 469 1221 1157 1157 1837 627", " 1157 411 1007 306 1157 1157 1859 1157 1387 1157", " 399 1149 1157 1157 1157 1157 1947 1157 1157 1157", " 1157 1319 1157 1157 1157 1305 1157 1282 1157 1552", " 1412 113 714 1334 1157 1157 41 1157 1668 1157", " 1157 489 1157 252 1157 1157 1456 1688 1157 1157", " 225 1157 1157 1157 1157 1157 1157 775 1157 480", " 1616 709 790 1168 1157 1157 1157 79 1361 1157", " 1157 1157 1306 1398 1088 516 1793 1157 1923 1778", " 1157 1157 1691 1157 1157 1157 1157 1157 1157 1157", " 1157 371 1733 1157 1157 1157 132 1157 1157 1157", " 316 1157 1157 1157 338 1157 1964 122 1631 599", " 684 241 1157 1444 429 1157 1477 1157 1157 1942", " 222 1157 1157 1157 1553 1527 1157 520 1157 1868", " 1050 1978 681 1157 1157 1157 1352 1157 1157 1157", " 1015 1731 1157 1968 490 1157 914 1021 1157 513", " 1157 1157 1307 1157 1157 1157 1204 1157 1157 438", " 1157 540 1697 515 635 1229 1157 559 1157 1157", " 1157 1157 1157 736 1157 1624"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1998;
    if(result == expected) {
        cout << "Test Case 98: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 98: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test99() {
    int numSheep = 2000;
    int maxRuns = 1989;
    vector<string> part1 = {"1679 1337 1448 1941 1337 1337 1087 1337 1337 1337", " 1337 275 1337 1372 1654 1337 750 370 1337 1185", " 1337 1337 1337 238 820 1337 14 1337 1686 1337", " 1337 1337 1337 1337 1337 1337 1129 1743 1337 1337", " 1337 1337 1124 1253 335 1304 1337 1598 1337 1337", " 1337 683 1337 1337 1337 1623 986 1337 1337 63", " 923 1337 1337 720 1766 1743 1337 1337 1337 475", " 1337 557 1768 686 328 1337 1337 1337 457 1289", " 1606 1630 1337 1337 799 1449 255 868 1337 1337", " 1337 925 1337 542 1337 477 586 837 526 709 1337", " 618 1337 1773 252 484 1585 1337 1337 1728 1683", " 1337 498 1020 884 1337 1174 1337 1337 1291 1337", " 535 520 1233 861 1337 35 1337 1337 1337 1337 728", " 1337 1337 1337 1657 1501 1165 1269 1337 483 296", " 7 1352 274 1337 1337 1063 1859 1337 865 1182 1398", " 555 149 1337 72 1337 896 1337 1438 435 429 199", " 1337 1337 996 1720 1569 1337 1337 1337 1337 1337", " 1739 1337 1702 1337 1423 1337 1337 1337 1337 574", " 75 1337 1337 1337 1606 1337 1337 1337 1178 525", " 1337 984 108 1337 1337 1343 478 1650 120 1337", " 716 1337 1870 1337 1250 503 541 1736 1337 1337", " 1316 1337 731 1337 1337 592 1337 1676 1337 1337", " 1063 66 1337 393 1337 1520 1337 593 1521 1960", " 707 807 1337 57 1337 417 1337 1337 1337 1337 1337", " 169 649 1337 1337 1337 1092 883 210 1337 1337", " 1337 1208 882 1337 107 1337 516 1870 588 649 1337", " 1337 1031 1337 1337 42 145 1337 1461 1337 598", " 1337 306 1337 534 728 259 1337 1337 377 606 37", " 1863 1167 1129 259 1337 896 1975 878 876 1503", " 858 979 1337 1025 1568 1337 320 1246 1337 1302", " 186 1337 769 1337 1337 1337 1616 1487 1337 1432", " 1691 1337 1337 1037 1337 1270 237 1337 1273 1337", " 385 1349 1337 740 1282 1945 1337 1337 746 1337", " 1337 1863 1337 128 1337 1090 1337 839 1115 310", " 1926 1337 1337 193 1337 1337 1337 1337 1337 1595", " 1423 1610 390 1647 1337 684 1337 526 1414 589", " 1337 174 1337 473 1337 1337 1337 1337 1337 1487", " 1337 1043 1157 82 1337 1337 1260 1337 976 1337", " 1337 736 895 417 1337 219 1449 1337 1337 295 1943", " 1337 1599 1337 1697 1869 146 1337 394 1337 1026", " 411 1337 374 1337 593 1337 1337 1337 1337 1337", " 1282 1337 1510 1490 91 1812 929 216 1196 1935", " 1698 1022 613 1337 1117 1337 1580 1552 1067 1337", " 1107 1262 1767 1207 1337 1337 673 1770 1785 1337", " 1337 906 1337 1337 1342 722 1337 1337 450 1337", " 275 1337 661 1513 1337 1337 1337 1210 1337 120", " 1337 1337 1337 1337 1337 1337 1337 1323 1337 1337", " 1509 1337 1420 1337 1337 1337 1021 1337 1337 1337", " 178 1638 1337 1252 1337 857 1535 1337 1456 1337", " 1499 1679 1315 1568 894 1654 1145 1337 528 1985"};
    vector<string> part2 = {" 1337 1337 114 1256 1448 775 1854 1337 295 1337", " 1337 1337 1337 1480 1337 1764 1337 405 1566 1964", " 1724 1337 1337 111 1337 228 1337 1475 1084 631", " 1337 954 1598 808 1133 1337 1688 1337 1337 1337", " 109 1337 1337 1337 1337 1209 1507 966 1337 1565", " 1506 1337 675 1337 801 1303 472 74 1337 1337 1621", " 1337 1234 1388 1337 829 1337 1337 1337 867 1170", " 1337 1337 1337 1446 1555 250 1255 1842 316 1490", " 1912 1337 1337 1337 1337 407 1806 1183 1042 1337", " 1828 424 1331 1337 1868 1337 1337 1545 1467 1337", " 1337 419 1869 1337 1337 1337 1337 1426 1337 1490", " 1146 1337 1164 1341 1337 1337 1337 1407 332 1337", " 919 1337 1337 900 2000 19 1337 1337 1337 1817", " 1337 701 1207 1932 1337 443 1612 1337 1337 358", " 1417 243 1337 1337 1337 1337 1337 1337 1752 505", " 671 1136 1337 566 94 1337 1337 1337 1337 1337", " 1807 1337 504 1337 1337 145 650 1936 1337 1337", " 1337 1337 1104 1815 685 1337 332 1337 1337 1337", " 1337 1337 1337 1337 665 1099 748 1337 147 1552", " 1337 1337 910 1337 1430 396 1767 207 265 1337", " 768 1337 1337 426 470 1337 1246 1337 1337 1337", " 1337 1337 1337 1337 1280 514 701 1337 1337 1337", " 1337 227 1337 1337 863 1984 1741 1337 1337 1475", " 1337 1337 385 110 1017 1900 528 543 245 1337 1337", " 97 1021 1337 1337 224 1775 1989 1337 1337 1450", " 1337 1474 1337 1817 1337 1337 272 1337 1964 108", " 209 1337 472 1994 1337 1337 1337 1337 1337 1481", " 1922 1337 1329 1337 1292 318 1337 171 1337 1337", " 1337 43 1337 44 1565 1190 298 1982 1337 1337 1337", " 1337 562 1337 1337 1337 1094 129 1337 1288 1890", " 156 1337 696 1337 1331 1337 703 771 1337 1337", " 354 1337 1762 1337 1639 592 1337 1337 1337 96", " 1337 1337 1411 1337 1337 1337 1337 1337 1337 1337", " 697 445 1337 600 1337 1337 74 1337 1087 211 886", " 136 1337 1337 1337 1337 1057 1103 1337 1337 1337", " 691 987 1337 357 1109 1501 1337 1337 1046 647", " 1337 1767 1567 1337 1033 1317 556 978 1784 1389", " 1337 636 1337 1337 1390 1337 1337 1337 420 1796", " 1160 1337 1337 1337 1337 1808 1003 1337 1337 1337", " 21 81 234 1337 424 644 1337 1955 1337 1337 109", " 1337 192 1337 1768 1337 1433 1337 1337 737 1083", " 1337 1337 1337 347 490 1148 1554 1337 1087 1337", " 1939 1337 1337 69 1337 949 1709 810 985 1337 668", " 21 1762 1447 1577 1430 1337 136 1425 1808 1894", " 1337 1337 1337 1337 1337 1337 564 1337 1980 1369", " 1337 1337 1337 1337 1337 1337 841 597 1124 1692", " 1337 1337 1337 1780 1337 1337 1337 1337 1337 1815", " 446 1101 1337 1337 1337 1337 1041 1337 1337 1337", " 1337 1337 790 1337 1337 1337 1190 831 1325 1337", " 1337 406 1337 1337 1285 514 1503 1337 1483 1337"};
    vector<string> part3 = {" 1337 789 1337 1861 1337 1443 728 1210 1337 1337", " 1337 1337 459 1337 77 1833 1780 40 1888 1337 127", " 1337 1337 1299 387 1337 1337 1337 1337 1573 1433", " 1716 1337 1337 1337 1976 1337 1337 1337 1337 1337", " 1265 1893 1337 1009 1191 1844 998 1337 49 1337", " 1337 117 1337 1337 1337 1337 1337 1090 1337 1337", " 77 1337 1337 1337 762 852 1337 190 1337 565 1484", " 1023 1337 1693 1109 437 1706 1380 1337 1337 1337", " 1337 1337 379 1436 1337 1337 1337 1608 1337 1337", " 1392 1337 1337 1337 329 1017 1337 1337 1337 1337", " 514 781 1337 1416 1492 1337 1337 1337 545 1337", " 1337 1925 1337 1145 1337 1431 743 1337 1337 1045", " 178 1337 1838 1208 1337 1348 1337 1961 1337 1337", " 1337 1337 1337 1303 361 1337 843 1337 750 298", " 1286 1337 1337 1063 1337 1337 1337 1337 1337 225", " 216 1489 1337 1337 1337 1159 1337 1337 1467 407", " 885 1706 1337 1337 1337 1337 1810 1337 852 783", " 273 1337 1337 1963 373 831 1015 1348 1337 1337", " 478 1337 553 853 1337 1062 645 1736 1158 145 1633", " 138 65 1681 69 1337 937 1337 935 674 1337 227", " 1337 1337 1337 1337 1337 1472 1280 1452 1337 1337", " 1337 1337 491 165 1337 957 1337 1337 1337 1420", " 1337 1989 1337 1018 681 1523 149 1337 1337 167", " 1249 1337 449 1337 453 476 1337 1337 1337 964", " 203 1337 1337 1337 245 1337 1865 1182 144 1337", " 1337 245 172 655 1647 1952 1096 1309 1337 415", " 748 1447 1337 1692 1337 1337 1347 1013 1337 656", " 1337 283 1337 1337 804 1857 1337 1938 1888 1337", " 195 130 1022 1034 1950 1337 1337 1337 1337 1758", " 1337 1337 981 1337 1337 910 1337 1354 1796 798", " 1337 736 1337 477 1749 1337 1337 185 1337 1337", " 1971 1337 1337 1337 1337 454 1648 1426 1337 1337", " 278 1677 36 1337 1071 1662 215 1337 1337 1867", " 108 1124 1337 1337 1337 1337 1337 1337 1337 161", " 1337 44 789 1337 1337 1337 1500 1674 179 1337", " 1337 1337 38 33 1337 1679 1337 1337 1337 1337", " 586 1771 839 1337 346 1337 1337 1308 1530 1337", " 1337 293 1337 5 724 1691 850 94 766 1561 1337", " 1337 1337 1337 411 1421 223 1337 1642 1337 1337", " 1337 176 1944 1625 1767 1337 1982 586 1337 1337", " 1337 1168 1337 1337 1337 1337 1337 1337 1337 1337", " 1337 1337 654 1673 676 786 386 1911 914 306 1337", " 1337 1337 1337 1337 329 1237 1337 1480 1337 1337", " 1337 1337 1337 1639 37 1337 1133 1415 1396 640", " 1337 1337 1337 1337 1337 1337 1345 1462 1337 1337", " 1337 1337 616 1337 982 347 1337 1337 1793 1337", " 1337 1337 1670 567 124 1234 1337 1971 1337 1337", " 1817 1337 501 1002 1337 1337 1337 953 47 454 1337", " 1365 1337 1337 494 1337 1337 1646 1337 1337 719", " 835 244 120 1337 106 1337 1337 488 1352 1337 1337"};
    vector<string> part4 = {" 885 1337 1337 1337 1337 261 1114 57 1337 1606", " 1337 1337 1118 740 1337 1337 1337 1337 1337 1337", " 1357 1222 177 1337 1359 1337 657 1337 993 1530", " 432 229 1337 216 816 1071 1337 616 1337 1172 1965", " 1337 120 1337 1337 1628 1337 1337 1337 168 1930", " 366 464 1483 677 342 1769 1337 450 1337 1275 1297", " 1337 552 1337 344 1337 1880 1337 1337 1337 1337", " 1015 1821 1799 1624 1700 1337 1337 1385 1337 1337", " 1337 1337 1337 123 1503 1374 1633 1919 1164 1337", " 1337 265 1337 618 1636 1337 1 1337 1337 120 1372", " 1337 1115 1337 1920 1156 1081 887 1337 382 389", " 1337 1337 1337 1064 1080 1337 1337 1337 1337 1337", " 310 1400 1727 1991 1337 1337 1545 1337 1337 1337", " 1337 508 1194 735 1337 1337 1935 272 1337 1337", " 88 1777 372 52 153 1870 1619 1337 1337 1652 1126", " 1337 1337 1337 1337 115 1534 1337 1552 1208 1337", " 1405 1938 1337 1337 1337 2000 45 733 1337 1337", " 1337 629 1337 1892 1337 182 1337 1503 1477 1337", " 366 1337 1987 101 1337 1337 1988 23 1337 1337", " 1337 710 1337 59 1000 1772 1753 529 536 1337 1337", " 1337 1337 739 594 344 1337 1337 1337 908 1306", " 1337 1337 1337 1337 19 33 1763 1337 1792 1888", " 473 1990 1337 1150 1337 622 1761 1337 1785 1402", " 751 1337 1337 1337 1337 1337 673 1788 1028 182", " 1337 1337 1337 1337 687 1337 1817 1020 1337 653", " 1283 910 1337 28 1337 1337 1337 1337 1337 783", " 1734 1337 1337 1529 1337 852 1337 1337 1337 1337", " 1613 1337 1916 680 695 1502 1337 1181 1337 1367", " 1826 1337 1337 1337 1098 1337 1337 1690 868 1500", " 1698 1382 1036 1309 1337 1337 1337 847 1800 1354", " 1337 1337 447 1337 1337 113 1767 1337 1337 1337", " 1337 189 1337 1337 604 1337 1337 1337 359 150", " 195 1252 1524 1337 1337 1337 1337 1337 489 1337", " 1337 1337 1337 1337 756 1863 635 1337 418 1095", " 1616 1337 1988 1337 1337 1337 1983 1337 298 1337", " 1337 1337 1337 812 586 1374 807 1337 1489 1389", " 1337 1337 1337 309 1877 1337 1337 1337 1337 1750", " 757 880 1337 1337 1011 589 1337 1337 1337 322", " 653 1339 904 1337 1271 971 1337 919 1539 1337", " 1913 1337 1337 696 626 1337 1337 582 1337 1337", " 1337 1322 1337 1712 1932 1337 1593 1601 1337 1337", " 642 1564 559 1611 1337 66 1337 1337 324 1337 1337", " 1337 1337 1337 1337 1337 1025 445 1337 1230 1337", " 821 1337 334 651 941 1337 1337 1337 1337 1029", " 1337 1337 285 1337 1400 1451 1337 1337 1445 1309", " 843 1337 808 1869 1337 828 1096 1064 1337 1337", " 1414 185 1337 529 1337 831 274 1337 1337 1337", " 1337 181"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2000;
    if(result == expected) {
        cout << "Test Case 99: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 99: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test100() {
    int numSheep = 2000;
    int maxRuns = 1989;
    vector<string> part1 = {"804 1667 83 1667 1667 1667 534 1285 1667 363 1718", " 1667 1119 1667 202 1667 1667 1667 25 1667 1667", " 1667 1667 1667 1667 1667 1667 33 1667 1667 1667", " 94 1667 73 747 1667 1667 1667 714 1667 1146 1548", " 1667 1667 1667 164 1183 1624 641 745 255 531 1667", " 1667 765 158 1889 1667 303 1234 1533 1334 1667", " 250 1667 1667 455 1545 1667 1667 1482 297 1667", " 571 1667 1667 1667 483 653 170 1667 1661 1667", " 610 1667 1667 1667 1475 1667 1667 1667 1667 636", " 1667 1290 887 1114 1804 1667 827 1667 724 442", " 172 1667 1380 1667 1667 1667 85 773 1136 1158", " 1292 985 1667 1667 1667 1667 1699 490 1667 1667", " 1667 1667 1667 100 1667 1207 1667 1667 1667 1667", " 1667 1497 1667 1667 483 1667 1651 1442 1667 1667", " 1667 1244 87 1667 381 1667 1504 1667 1993 1854", " 1667 723 1667 1667 146 160 1667 1667 1667 1667", " 1667 1667 463 160 1040 1667 1667 1667 1667 1667", " 703 1667 1667 1865 1667 1667 1667 1667 1667 1667", " 230 1667 1667 1360 1667 1843 1667 1667 1667 1667", " 554 172 1667 1667 1667 1025 425 1289 1667 1667", " 105 1667 111 6 1667 948 1527 1667 1667 418 1667", " 1667 621 155 662 1544 1667 1221 1667 1294 22 1667", " 1667 1667 1856 209 1877 1667 1299 1667 262 641", " 1436 1667 961 1771 1940 1667 1311 1667 1153 1667", " 1667 1667 1667 1904 1667 1054 923 1923 1667 1222", " 1667 578 1667 1330 1762 1667 1667 297 930 1667", " 1667 1667 688 891 565 1166 1788 1979 1667 1667", " 332 1 1678 1972 483 508 759 1667 1667 1814 1667", " 1817 1667 1667 388 922 1667 1667 1667 533 819", " 1667 1554 294 588 1667 1007 580 1464 1041 444", " 1667 1723 1667 1667 50 1667 1667 1529 1667 155", " 1667 1667 1667 1544 1667 1667 973 1593 1667 1667", " 956 1667 1667 1975 1655 109 1667 1279 1667 809", " 1667 1667 237 1667 1494 1167 733 1667 1667 1140", " 978 1667 1680 1049 1667 13 597 1566 1360 629 1667", " 1728 1667 1667 471 1069 1667 1667 73 1596 1667", " 1951 353 1667 1701 1321 1667 390 956 734 442 1047", " 1667 1667 1434 1667 1667 1187 1574 1839 1667 1667", " 1176 1667 1667 1936 690 1667 891 945 1667 519", " 1667 505 1667 1667 1835 274 639 1667 1667 1667", " 1667 1667 1667 1338 1003 1157 1667 1667 1262 64", " 1667 1667 1667 1667 495 348 1667 11 1546 359 1667", " 400 1017 1667 1258 1853 1667 1667 1161 1667 907", " 836 798 473 1667 1667 1130 1667 1667 1065 1667", " 1667 1282 1649 1667 1667 856 1667 1667 1667 1567", " 1667 1402 1667 946 1667 1918 733 101 1667 1667", " 358 1290 1667 1667 1667 1667 1782 1667 1605 1667", " 487 1667 1667 1525 1667 1619 1667 1399 1054 379", " 1029 1049 1667 1667 385 1667 1667 1667 1803 1667", " 1667 1440 1667 1863 676 360 431 1667 566 1703"};
    vector<string> part2 = {" 1667 1667 1667 457 249 446 1667 1667 1503 1667", " 1415 1973 1667 832 606 1667 1112 1667 1667 1667", " 569 1389 207 1667 1667 1667 1007 1476 1667 323", " 1667 363 793 1 507 1627 1756 1667 1667 1667 1667", " 1667 1667 1667 10 1667 1667 712 1667 1660 1667", " 1478 360 1586 1667 1925 323 582 881 1667 1667", " 1667 1667 1667 1667 1667 884 1336 1667 1198 504", " 925 1667 1667 1667 1667 782 896 223 228 95 1667", " 1547 1722 1667 1667 405 605 1542 1667 34 547 1667", " 1667 1667 1804 1905 1667 759 1667 1667 1374 1667", " 1667 1135 1667 932 1653 1667 1667 1667 1667 454", " 1667 1667 1667 445 1667 1667 1919 444 1236 1667", " 1667 1667 1667 1667 1667 1716 1667 1667 4 83 258", " 216 1084 1634 1649 1818 1719 1667 1667 1404 524", " 1423 336 1667 1667 714 1667 257 12 1725 330 383", " 1667 575 310 797 1667 1751 1667 1667 243 502 1744", " 1667 354 1786 655 1109 660 1667 1667 1667 1690", " 1667 1667 1667 1667 1667 1667 1667 833 555 1667", " 967 1667 1667 1667 1667 80 1667 1667 886 1667", " 1143 1667 402 1667 1667 1667 542 1667 1667 113", " 141 1667 97 444 142 457 30 362 1667 1064 626 1667", " 397 1667 1667 1667 1667 1649 1667 1667 1815 1667", " 348 1439 1667 1343 1840 808 330 1126 948 1667", " 1667 1667 784 1667 1667 784 220 1112 883 1455", " 1667 1109 1667 1667 1548 1667 700 1667 1733 517", " 311 1667 1779 754 649 1667 1667 1667 521 1667", " 943 1667 9 1667 1333 1695 1667 1667 1667 970 806", " 1667 1667 898 1667 1667 1667 1667 1667 1667 385", " 1667 920 211 1667 1810 1667 1275 343 1591 1114", " 1667 1151 1932 1667 1667 133 1667 1667 1667 1854", " 1667 1667 1217 996 47 487 1016 501 1667 1521 884", " 1240 1667 1667 959 1815 1667 1667 581 587 1667", " 1667 1667 746 218 217 498 1298 1667 723 1667 291", " 1035 1667 1559 936 1300 1667 1667 452 27 108 1667", " 1667 1667 1667 1667 578 1733 1667 309 1667 1209", " 1970 1667 1667 896 1393 1812 1704 1667 1667 1667", " 1667 1667 1667 1667 1667 1667 589 1667 1667 1640", " 1667 1156 1667 1793 1667 51 1667 889 1397 1667", " 1956 1667 572 1967 625 1667 1400 1877 1328 1289", " 1667 1335 1977 1667 1667 1667 1667 1657 1667 1667", " 1019 2000 1374 282 224 1466 1667 887 1667 870", " 1667 1667 1667 939 1835 907 1495 1308 349 97 1667", " 1667 1667 1667 1667 1667 1667 1667 1667 1667 384", " 373 135 1008 162 5 346 1957 559 1667 1223 1667", " 1059 1025 43 121 277 1766 1667 117 1010 1667 1856", " 1667 1259 877 1667 1139 1667 1086 1667 1022 1915", " 1472 1203 1618 1955 36 1905 1264 846 1418 985", " 1667 1667 578 532 881 1667 1667 1928 330 1667", " 1667 1667 1667 782 549 1287 1667 1183 1078 1165", " 1667 222 83 620 1667 1667 866 1667 1667 593 618"};
    vector<string> part3 = {" 504 63 637 1667 1667 1667 1587 1077 1008 1667", " 1667 1667 1667 1667 654 1667 1476 16 1675 1667", " 1667 1667 1667 1667 1597 436 428 1746 1434 1667", " 1667 652 1148 1899 403 1667 817 1667 1667 81 1211", " 1667 1509 1667 1667 1649 1667 418 61 147 977 1667", " 1667 1667 1937 579 805 1637 854 1667 1667 206", " 1913 261 1693 29 253 1903 1080 182 175 1667 1667", " 1667 949 1667 1667 1311 1667 1993 678 1667 1667", " 1998 1667 473 1667 1667 955 1667 502 1022 329", " 1667 1667 1489 1667 425 1079 1667 1667 1667 328", " 1207 1667 401 1667 1626 1667 1667 1667 485 685", " 1726 1667 1667 1139 1667 122 1667 1667 440 432", " 603 1667 698 1667 1667 558 237 1667 196 1604 1667", " 794 1667 770 1667 1667 1802 1139 1667 1667 1667", " 1514 1715 1667 1667 1667 285 1667 1667 1667 473", " 152 1667 420 488 1667 806 1667 496 1889 1696 1667", " 1667 1667 951 1667 735 1667 1667 1821 579 1667", " 1667 1667 1667 881 1667 959 1667 13 614 1667 450", " 1667 153 1513 1667 1667 1598 1667 841 1200 852", " 1307 1734 1667 1667 1667 1667 1667 390 1667 1040", " 1667 1667 1667 1685 784 550 1668 134 1667 484", " 166 1667 1667 96 641 1667 691 842 1667 454 1671", " 1667 998 1472 1667 880 1771 1667 1667 1391 1397", " 1277 1873 1667 299 1667 979 1667 1667 1667 1190", " 1667 226 1667 1667 503 1667 1667 1601 995 1465", " 970 1737 1663 626 399 1667 1553 1364 1667 1667", " 1667 170 1667 1667 595 1667 1667 1667 1667 1667", " 1498 106 1374 1667 1844 1667 1949 1667 1667 53", " 910 126 1667 157 1667 727 1667 1667 790 1667 1667", " 1667 1113 1667 1667 1026 1667 677 1667 139 1667", " 1667 625 1667 1667 1698 1667 1667 133 106 1789", " 1667 1753 1667 1667 10 245 1667 1585 401 1667", " 1667 1918 1667 245 276 1667 1667 279 448 1667", " 1667 307 1667 1667 1910 1667 1667 1667 1667 1667", " 1667 154 803 1667 717 1962 1667 1667 1667 1667", " 238 39 1475 928 293 623 959 247 1667 1667 1719", " 1667 389 1667 1062 1959 466 1667 1667 161 1323", " 1667 1667 170 1686 355 1770 1667 1667 1667 1319", " 1667 1175 1659 960 884 1295 1667 1667 1667 865", " 1667 400 1824 1133 1667 1667 1667 166 1027 1667", " 1667 1667 757 1667 419 736 1667 247 389 1769 1363", " 1667 1667 1667 1667 241 320 1667 1667 1667 1667", " 759 423 1667 1667 319 427 1667 1667 1667 1667", " 1667 1667 1667 697 1667 961 1820 972 986 1699", " 952 1290 1667 550 1667 1667 61 1054 1667 1671", " 1667 1667 1857 1667 1667 464 980 868 1967 1640", " 1667 1667 1021 1445 1461 1667 93 528 1030 1044", " 1934 195 867 1667 647 1667 1432 1753 491 1251", " 1667 65 1667 1016 703 1110 1667 1667 507 1667", " 1464 1667 1667 1221 1667 1260 606 1459 1561 1691"};
    vector<string> part4 = {" 1667 1659 489 1822 1667 965 1525 1667 1667 1336", " 1667 1667 1667 1667 971 1667 1667 642 288 355", " 1667 484 44 1988 1667 1667 1667 1667 1667 1667", " 1193 1667 1667 319 1041 1667 1667 1667 1539 1667", " 1667 1667 1140 1667 1883 1667 347 368 1667 243", " 1429 1667 1667 1102 962 1667 170 1653 1667 1175", " 1062 1540 1667 1881 1667 1667 1667 1667 1061 1667", " 1667 1258 1667 1667 1667 388 1917 1667 1667 1667", " 458 1667 1667 1667 1667 1778 1987 1058 1667 1667", " 1667 1667 1467 1667 1667 1667 334 1991 1667 486", " 361 1667 1742 903 810 1972 1667 1440 1705 1667", " 294 1667 1667 1843 1848 1667 284 680 1667 1667", " 1667 1640 1667 1667 1094 1129 1288 1667 1916 1667", " 1485 1667 342 233 7 1950 1667 762 1346 1667 1581", " 1667 1667 1667 1446 1667 1667 1667 1667 1667 320", " 1759 646 1667 1170 1934 1324 1667 1667 1667 1040", " 1667 915 1613 1270 2000 536 1667 1667 1667 1667", " 1667 1667 1550 1667 1667 680 1667 91 1667 1984", " 1667 1667 993 1266 1642 1667 1671 1667 1705 1667", " 1667 1002 1667 1667 206 429 427 1667 1703 1162", " 1186 548 1667 1486 1411 582 1667 1696 1667 1667", " 1667 1667 1154 1667 1667 448 1667 1667 318 1667", " 464 1667 1667 1667 1667 1667 68 1667 1667 1667", " 1071 1667 1667 1667 1517 1374 544 809 1667 1667", " 606 1667 150 1667 1156 1667 1299 673 1667 1667", " 1309 682 1480 1667 1667 799 1667 1667 1667 1667", " 880 1667 164 1667 1667 1667 1792 1242 1667 1667", " 1667 1667 697 1667 1667 30 1667 1667 553 1667", " 1667 1667 1667 1667 126 336 1667 1667 779 1667", " 1667 964 1667 113 148 1667 677 1667 1667 1667", " 181 1667 1667 476 1667 1268 837 1667 1667 427", " 1667 1667 4 1491 1761 738 1667 1667 1304 1667", " 1667 1667 1667 1667 1686 1667 1359 1667 1667 1667", " 139 1063 1667 1263 1892 1667 1667 813 818 1722", " 1318 1667 1667 52 1667 1667 462 1667 1667 1158", " 1730 1667 393 1667 830 1667 1667 214 1667 435", " 1149 801 1159 1591 848 1738 895 407 1667 1667", " 1667 1326 1667 1577 834 1129 90 1842 1667 1667", " 1549 693 1200 1667 1667 722 1315 1569 1667 1667", " 1667 1757 1667 809 1667 1329 1667 1247 1667 1667", " 243 1667 1667 632 322 661 1667 1963 549 393 1667", " 1296 1667 1667 1667 433 1667 1725 920 1173 1667", " 1667 1242 1667 1667 1667 1932 1667 1667 1787 1667", " 597 1667 843 1306 1667 1667 1892 1667 1667 1891", " 957 508 1667 810 1667 843 1106 1667 1667 1667", " 101 1667 1667 160 938 6 1721 1667 1667 1667 830", " 1667 1667"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2000;
    if(result == expected) {
        cout << "Test Case 100: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 100: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test101() {
    int numSheep = 2000;
    int maxRuns = 1999;
    vector<string> part1 = {"1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001"};
    vector<string> part2 = {" 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001"};
    vector<string> part3 = {" 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001"};
    vector<string> part4 = {" 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001", " 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2002;
    if(result == expected) {
        cout << "Test Case 101: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 101: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test102() {
    int numSheep = 2000;
    int maxRuns = 2000;
    vector<string> part1 = {"2000 2000 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"};
    vector<string> part2 = {" 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", " 1"};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2000;
    if(result == expected) {
        cout << "Test Case 102: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 102: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test103() {
    int numSheep = 2000;
    int maxRuns = 1999;
    vector<string> part1 = {"2000 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1", " 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000"};
    vector<string> part2 = {" 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000"};
    vector<string> part3 = {" 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000"};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2000;
    if(result == expected) {
        cout << "Test Case 103: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 103: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test104() {
    int numSheep = 2000;
    int maxRuns = 1999;
    vector<string> part1 = {"1500 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1", " 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000"};
    vector<string> part2 = {" 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000"};
    vector<string> part3 = {" 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000", " 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000 1 1000"};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1500;
    if(result == expected) {
        cout << "Test Case 104: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 104: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test105() {
    int numSheep = 10;
    int maxRuns = 3;
    vector<string> part1 = {"17 16 10 10 9 8 8 7 6 5"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 32;
    if(result == expected) {
        cout << "Test Case 105: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 105: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test106() {
    int numSheep = 10;
    int maxRuns = 3;
    vector<string> part1 = {"170 161 100 100 90 80 80 80 60 59"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 330;
    if(result == expected) {
        cout << "Test Case 106: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 106: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test107() {
    int numSheep = 757;
    int maxRuns = 663;
    vector<string> part1 = {"1767 1989 92 832 542 325 1288 1896 972 36 1219", " 1951 1365 560 229 1768 1468 1943 595 1797 1998", " 1900 1444 836 1484 1516 673 745 1791 1601 747", " 1373 1079 1191 673 199 1957 829 1633 75 297 1822", " 255 1264 782 1616 1781 1655 677 1741 1594 1128", " 944 465 709 1247 528 595 483 535 1376 1352 616", " 37 932 1971 1059 985 316 129 1156 784 1213 357", " 322 1630 754 495 1864 1178 207 723 913 1274 1510", " 1975 36 785 238 908 1969 390 113 385 268 1830", " 420 628 553 541 1756 1243 1769 1873 367 1122 100", " 1824 681 725 88 939 144 1745 176 1090 1786 198", " 1848 994 1870 1343 48 973 1432 1829 208 201 1393", " 1345 795 1995 782 385 247 1349 1623 717 748 1934", " 27 570 618 1233 1330 1550 1648 281 1155 101 666", " 1115 664 980 1515 260 1599 316 428 1061 1681 1889", " 1139 92 1192 812 1783 917 61 861 1762 1056 624", " 1029 1577 1285 1516 467 697 789 601 158 962 83", " 4 178 872 1540 1708 750 1015 178 494 685 1575", " 1815 1924 212 1664 744 441 396 816 1903 64 607", " 410 478 742 713 402 945 1476 1111 535 227 1562", " 1491 1727 644 457 3 1241 553 95 1742 431 228 1672", " 80 203 854 275 1280 219 1426 1379 1312 824 660", " 1655 1621 947 1314 1661 137 673 1570 1922 1053", " 329 1948 1372 914 1707 1345 1660 953 516 476 1806", " 1113 431 503 755 594 462 194 1361 1120 777 304", " 1961 1650 694 546 170 987 457 600 1652 121 1870", " 1140 47 132 37 178 813 569 1741 710 221 1512 709", " 644 1825 538 1135 1781 1939 1511 789 648 275 839", " 1872 1368 548 311 759 429 1768 1071 645 1989 441", " 1969 879 68 1930 724 1428 1930 1645 211 885 84", " 1574 128 774 613 799 1468 1638 23 1661 651 124", " 748 1012 1331 1170 1402 503 630 1127 39 578 545", " 367 960 1067 1140 1534 144 1942 1650 598 400 1608", " 1339 252 122 1070 1177 1585 1986 704 599 496 39", " 768 1705 611 486 1303 184 1659 144 82 412 1200", " 493 264 191 1429 977 272 1775 1744 1022 1216 1428", " 921 1818 1641 628 224 259 1362 1619 1444 64 929", " 1359 1490 649 65 1931 762 474 1409 697 328 4 1241", " 1838 1889 1524 1395 961 780 616 1671 1076 468", " 1759 998 1014 171 257 652 999 529 31 672 958 1237", " 1948 1902 1496 1596 972 1847 1426 1728 220 1703", " 1928 1562 34 903 159 882 1238 691 544 1990 81", " 1999 1494 1994 1556 966 379 255 157 4 1437 1847", " 1974 1908 551 728 430 1516 1661 1167 1565 1800", " 1431 502 226 452 754 1321 1406 446 1987 1526 1462", " 27 1038 1124 197 217 1286 1765 1201 1764 1398", " 798 639 93 959 1830 1417 136 739 669 159 1669", " 897 1712 1436 1602 402 554 1034 1087 1908 685", " 360 369 1044 1713 843 1995 833 76 771 1626 15", " 595 1392 1984 1402 1519 1044 1491 427 516 283"};
    vector<string> part2 = {" 1895 1536 1758 1240 905 726 365 1729 1213 1466", " 1554 1311 1611 1185 938 622 1109 789 1611 252", " 1629 1665 1533 768 1253 446 1051 40 966 767 313", " 1144 740 1673 153 831 818 1624 329 1564 1874 1102", " 558 1393 400 1869 1767 359 352 1271 1739 339 1109", " 1460 165 1303 1091 244 321 603 1543 1301 1623", " 1646 1990 455 1816 1176 627 190 742 1234 1637", " 984 1065 536 1288 1008 191 1037 195 754 163 1040", " 1770 784 834 926 1140 372 634 551 272 775 100", " 854 1107 449 1539 555 917 561 461 1899 446 560", " 314 139 587 1250 459 1800 1557 365 764 1371 1380", " 988 909 491 719 1990 1933 1476 1031 1739 120 294", " 1237 1038 292 1793 641 841 1366 880 1765 1934", " 954 1987 513 442 1842 1025 1648 47 62 733 1307", " 1698 1245 1785 1900 1377 1571 280 70 1177 620", " 121 1043 1799 913 1025 1582 1870 824 1959 1506", " 1561 272 870 578 1009 173 943 283 401 752 1533", " 983 968 1259 1053 435 1934 4 413 931 347 1256", " 948 869 1589 882 931 1587 1992 764 1547 1261 554", " 197 1662 358 1039 771 1786 1566 1147 635 724 208"};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1999;
    if(result == expected) {
        cout << "Test Case 107: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 107: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test108() {
    int numSheep = 663;
    int maxRuns = 623;
    vector<string> part1 = {"705 1292 1414 167 1403 1528 1239 1011 1857 275", " 1917 624 1040 1642 286 1369 1281 142 73 368 1011", " 1333 1660 1213 1179 1281 821 454 568 846 1847", " 32 1308 655 1455 1333 552 1836 1815 1894 1783", " 1269 954 434 1119 1258 1337 616 195 941 702 1226", " 1644 1512 736 403 440 428 150 58 179 361 1855", " 743 1126 693 49 181 14 1431 1841 632 127 1075", " 914 482 1784 1547 1697 737 552 131 145 922 833", " 1269 1330 732 1052 1223 1912 238 909 282 1225", " 731 1352 484 1846 1568 1412 720 750 1282 752 901", " 671 645 963 756 190 219 472 934 153 249 1930 1046", " 1548 1617 956 330 1537 123 957 1735 299 997 873", " 1861 1540 221 291 945 1013 156 146 1635 1447 1141", " 825 1663 1608 878 1308 1791 1440 639 528 113 228", " 1497 722 1629 1578 1321 299 1450 1854 636 738", " 1105 1252 1509 130 177 1072 1821 1261 917 355", " 1594 689 643 1014 1251 571 55 1532 163 602 880", " 947 605 917 216 939 1775 1759 1449 170 1161 921", " 942 687 975 1561 88 1637 637 1210 531 858 1340", " 1348 1672 1905 434 237 596 310 1838 368 281 1248", " 1428 1965 1635 1643 1605 1169 894 566 948 1096", " 854 202 1572 1456 1183 1389 1222 800 550 310 1281", " 441 791 354 1010 139 1968 309 247 891 854 949", " 1479 291 183 68 1573 442 240 1260 1860 1094 463", " 1744 588 768 28 512 749 1767 1188 877 500 152", " 406 94 1356 108 1938 419 455 1010 733 600 1293", " 942 298 1244 308 34 310 1810 785 1676 915 1607", " 1022 1760 328 1926 1885 8 1414 1385 1483 441 222", " 1904 1640 136 721 1878 1862 413 888 258 431 1430", " 1942 1788 157 943 1226 977 868 833 1033 1513 515", " 1241 315 518 1083 1114 645 1775 126 1653 311 1295", " 285 1144 519 1816 811 1028 1118 1179 245 1428", " 753 1436 566 1019 243 1489 1813 1645 1625 764", " 1810 1329 590 986 1058 373 1511 1114 967 835 1578", " 514 1971 1443 1979 1710 1518 1632 55 891 342 1071", " 1589 1812 1623 1885 1145 346 1580 1961 1179 249", " 596 1922 583 1688 312 466 1094 49 1643 1419 989", " 1778 1939 1345 197 1699 1608 312 1931 1194 587", " 351 520 891 361 942 852 1283 383 1020 167 279", " 1200 532 560 25 1605 1768 457 1883 277 1846 1882", " 1575 917 1786 1021 1966 1345 165 1810 319 1403", " 29 836 1770 147 437 348 774 233 1454 277 1520", " 1823 141 383 901 1490 351 1112 1505 1322 635 887", " 1897 1424 167 1211 118 1168 1902 820 1539 703", " 720 272 666 1295 1930 1449 793 928 663 877 218", " 1609 119 1214 1651 1543 448 1018 1692 645 82 1774", " 703 1773 1279 279 117 622 475 457 1326 959 1040", " 1780 144 754 1221 339 821 1756 1904 87 46 805", " 841 116 1421 827 1986 121 337 284 100 1606 691", " 995 379 1417 273 1426 1220 1514 424 130 1462 760"};
    vector<string> part2 = {" 663 119 495 1730 770 1799 1360 1707 1492 1067", " 1996 1912 1321 967 1053 44 1691 151 72 278 59", " 683 1649 1033 786 1941 178 685 1081 736 1688 1364", " 1030 1155 175 703 1127 390 1216 1521 164 997 1351", " 564 1664 610 1433 1163 1888 1567 998 56 512 221", " 1436 288 978 703 540 1659 744 786 353 656 1172", " 1969 301 704 46 660 278 225 1094 760 914 863 1338", " 661 1071 1534 650 1260 1654 35 1722 480 1009 1716", " 1752 1351 506 1565 1902 80 710 1684 906 375 1154", " 1711 1485 1526 1516 804 1361 1007 1846 897 1663", " 1048 374 429 1583 1829 129 1375 1632 124 106 910", " 1899 1701 821 1753 1475"};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1996;
    if(result == expected) {
        cout << "Test Case 108: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 108: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test109() {
    int numSheep = 1441;
    int maxRuns = 785;
    vector<string> part1 = {"1480 1632 61 629 66 605 631 1130 384 702 720 10", " 658 694 722 1143 1105 184 1283 1822 68 1388 75", " 1854 375 1332 210 1540 1017 191 1950 457 1220", " 638 124 1630 1715 70 941 246 847 1205 1059 1654", " 1898 1528 427 872 496 1532 573 1446 474 1172 1042", " 1077 1061 1851 1974 1567 675 1978 1246 1302 369", " 332 1532 374 1128 1280 144 618 1751 78 593 34", " 273 462 1164 755 1523 1829 220 720 1017 369 764", " 296 1906 72 1033 1279 1649 1036 458 129 69 705", " 1428 1156 683 1906 1257 462 642 417 530 487 735", " 1293 957 1376 787 1161 456 980 954 1403 1230 654", " 292 1266 993 1435 1690 1996 1738 833 377 1174", " 1597 48 51 53 784 456 279 901 1949 124 1069 96", " 1621 1782 1638 1970 1384 570 1139 362 1459 63", " 357 1827 1945 571 613 67 1029 1310 406 1972 1230", " 1971 503 401 252 1906 1101 99 106 905 1425 1374", " 1693 1181 1110 1045 1748 683 29 677 1025 755 380", " 1729 311 1000 140 1657 67 385 642 1984 1392 84", " 145 1294 982 1811 1534 932 1667 1799 1252 670", " 573 477 1449 605 470 750 609 1446 224 499 1393", " 837 1459 1881 1750 1142 1310 1505 1095 917 90", " 395 1912 1348 1317 1636 1217 205 1166 1853 1135", " 265 76 1502 889 913 1107 587 1765 35 1913 1686", " 1644 135 630 918 59 1169 1771 118 1452 1898 1669", " 1456 1572 683 1090 1468 1470 1081 547 1427 184", " 1175 882 1481 572 888 1094 251 915 1781 1204 1637", " 1829 1726 1704 823 1747 1892 1493 297 616 1638", " 1417 1900 1261 154 1460 1859 1133 1839 1163 658", " 1881 384 1160 870 1932 1803 804 645 1377 1827", " 1000 599 1092 68 1504 1461 326 1429 2 577 1941", " 738 29 1366 1643 1354 308 1521 422 1878 1773 529", " 72 1916 1334 283 1776 819 1720 449 233 215 462", " 1284 561 1503 1959 631 908 1405 154 886 1530 1382", " 538 1575 1287 611 74 399 1841 951 1474 1032 367", " 994 387 1266 432 1445 728 1656 1698 327 541 564", " 1812 728 1636 54 670 1412 294 1152 399 1642 455", " 1558 1287 525 221 292 1574 1466 1842 240 1509", " 347 792 1522 1908 1548 892 1569 51 445 1678 1472", " 1637 791 816 152 1922 1314 1790 392 1548 1477", " 1629 891 1108 895 934 1465 254 647 324 768 1842", " 975 812 1220 196 1647 1149 36 1174 655 873 735", " 1276 1395 115 1735 1505 478 1801 389 1961 433", " 83 1694 278 1027 492 1877 1263 373 1473 544 237", " 1078 1736 1919 968 1077 611 986 1778 1013 1381", " 778 722 1830 324 619 628 1473 1743 784 1534 1940", " 482 168 1462 1263 664 1648 130 1646 784 1577 1472", " 1128 1875 1179 648 1367 1493 121 639 313 250 183", " 109 1270 108 1930 561 371 58 1680 915 1783 898", " 288 1082 1612 241 1826 672 280 394 113 850 796", " 566 880 1340 557 188 460 1669 1617 18 1696 1863"};
    vector<string> part2 = {" 1244 1074 110 946 1516 207 1645 1200 866 42 110", " 700 1890 1040 388 847 1516 1847 18 44 1564 1401", " 1207 365 415 495 1560 1308 1191 1010 61 1782 400", " 702 911 717 1220 217 335 1934 1212 1266 1003 707", " 1113 669 1005 1369 946 1326 932 1556 1342 1763", " 663 1489 756 87 1831 1132 337 1349 1108 724 1274", " 1114 1395 1180 531 62 943 1875 1967 1332 1342", " 326 568 1455 277 164 1745 887 574 723 1083 1293", " 984 1 517 1580 688 13 1560 640 671 919 1985 1836", " 868 1238 2000 1046 1748 1000 1393 1173 351 1615", " 744 1822 964 74 515 763 904 1713 939 958 1603", " 1334 1291 1925 1627 1192 99 1822 1974 1353 1311", " 1804 1785 1554 916 730 1030 1270 875 64 1798 1461", " 1938 916 755 1458 670 594 266 294 565 911 111", " 134 1484 250 1921 1971 1004 1781 1935 1457 842", " 1827 75 234 71 466 1694 1555 149 986 1996 1584", " 875 1670 1802 356 283 1891 13 1531 1890 1399 1492", " 571 928 1861 1689 487 1753 1965 404 647 827 889", " 1281 373 225 1093 1875 1481 71 30 568 71 558 815", " 415 23 1010 343 1576 390 43 159 731 955 273 1931", " 827 477 1331 1616 924 787 634 613 1955 971 1177", " 12 1101 351 616 1458 451 1540 722 1797 1068 165", " 395 742 931 1137 422 719 203 352 821 1511 1776", " 1275 1458 227 1664 189 1214 31 1498 324 1161 110", " 1829 220 1649 1406 356 511 1838 160 696 469 333", " 1591 1831 98 1163 94 444 1505 1462 1358 1055 1515", " 126 784 23 381 177 49 1548 328 1447 836 978 58", " 1851 956 611 798 1883 1401 396 303 1378 1730 875", " 1971 372 1397 455 1910 970 1339 496 964 63 367", " 329 107 713 976 131 1711 508 357 860 816 91 753", " 1784 1050 1569 344 958 556 896 1712 439 283 424", " 1691 162 1975 1241 724 1708 1917 428 776 1070", " 1327 1903 535 1511 802 1856 1706 1483 1430 1292", " 696 524 283 344 68 569 258 144 1657 1748 1393", " 430 1833 1656 860 525 657 1610 1808 1726 833 1663", " 1217 1947 1084 799 759 1434 331 552 516 261 1014", " 22 41 392 1141 1874 426 1498 1396 265 495 1007", " 470 718 173 189 763 434 132 1357 1925 1219 633", " 1397 1159 1651 39 1764 1775 1930 1138 1693 582", " 319 1773 168 229 1683 60 1221 170 302 1612 1203", " 507 1294 1970 1488 1466 957 1217 529 922 1010", " 416 1924 401 1499 235 260 607 1642 1880 637 446", " 1693 1453 865 1946 1267 1841 395 786 1483 1136", " 641 639 1791 1523 1263 133 33 991 418 489 5 1388", " 1553 626 1856 1769 915 1346 943 702 1261 1830", " 1274 963 875 1468 58 431 754 1301 441 755 147", " 1819 10 88 242 309 1065 1446 935 1545 867 519", " 1733 289 313 363 921 145 1713 621 85 1527 734", " 1173 1630 1764 881 944 387 1338 655 1757 511 1255", " 1445 601 273 1873 1226 942 729 802 884 1063 725"};
    vector<string> part3 = {" 487 702 871 1438 1571 1064 27 1517 809 1055 1629", " 530 1753 1791 1706 1270 234 150 262 1566 1482", " 522 1215 323 1650 1774 1903 720 1998 577 1190", " 1916 491 1704 215 1433 289 733 1601 1084 51 999", " 1169 478 1220 1772 1495 1730 1661 261 758 1112", " 1757 1361 64 945 1872 1276 1585 564 1123 625 282", " 577 214 1310 1378 1076 1218 455 1400 1899 270", " 1405 235 1884 1901 433 1069 449 234 1332 262 453", " 1895 240 1733 1348 1106 844 844 1117 1961 636", " 1709 1563 671 56 1711 501 1536 1822 1766 1731", " 1425 1194 1330 354 859 1381 870 1993 1978 91 156", " 861 1201 1137 487 1090 1632 135 1369 1043 553", " 1915 518 1155 591 1022 632 1653 208 891 1957 697", " 581 757 558 1001 1879 1616 89 1283 1252 739 193", " 1879 306 1420 876 83 372 884 1678 1437 731 1925", " 1741 449 574 1833 1924 1676 460 1413 1211 504", " 209 1638 855 744 1304 1066 830 1895 1361 1859", " 654 1020 1795 919 62 897 1347 1371 1893 1668 1814", " 290 1626 1661 1091 960 667 449 1308 1300 1218", " 1815 958 390 1525 1401 1735 1356 717 1453 1784", " 1507 1417 532 1580 396 260 1682 760 1653 1428", " 608 1218 634 101 1663 1559 652 1541 126 23 625", " 1649 1037 116 1339 400 1826 1564 269 1518 1772", " 338 124 1500 471 1828 1539 598 1712 1752 633 69", " 329 1544 1206 1078 910 33 1700 1594 825 1670 691", " 1855 307 1306 1663 1680 1148 206 1286 1289 1485", " 1015 1157 1677 1788 964 962 651 145 270 1759 1198", " 1942 720 413 917 979 1674 208 1634 1403 1569 1426", " 406 1041 1401 1082 1165 159 1797 814 1462 345", " 1982 598 1862 1245 739 1443 749 493 1504 256 265", " 529 930 664 730 1334 585 1128 1910 1756 831 1990", " 621 79 1608 627 1951 227 1338 189 989 758 1744", " 1288 30 1568 857 221 899 622 214 1427 1549 1904", " 917 990 541 255 1511 885 1660 1443 1592 168 732"};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2000;
    if(result == expected) {
        cout << "Test Case 109: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 109: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test110() {
    int numSheep = 1380;
    int maxRuns = 750;
    vector<string> part1 = {"384 1013 1675 502 716 516 1841 525 990 352 697", " 1093 283 873 656 930 156 1377 119 822 214 1835", " 286 1261 602 709 207 955 954 696 175 1651 1469", " 1101 1697 1386 1333 1619 188 987 479 1742 1197", " 1003 347 1057 1568 1120 1805 335 475 334 498 350", " 1147 1154 1799 1902 52 1186 1767 1033 1267 1988", " 291 603 1142 703 1607 1780 1566 656 1739 1339", " 980 1053 39 517 634 895 1178 839 1875 1211 285", " 488 1365 1377 1875 74 270 841 836 859 357 1707", " 394 311 1826 1966 1356 672 993 372 1209 480 227", " 1348 1239 878 1638 1399 1341 1424 598 1110 333", " 1088 611 1572 1638 226 1429 249 1833 117 733 1134", " 58 807 958 1904 1818 1534 1564 1039 371 1525 1588", " 1206 1875 707 140 608 1788 1187 1084 1368 827", " 95 637 673 168 77 721 952 781 927 532 1895 299", " 934 977 764 585 1319 1688 1161 367 1089 1102 1932", " 1298 909 1781 1330 1056 1479 702 1304 1998 700", " 1740 1218 512 676 267 1247 58 50 129 1981 1940", " 554 947 1401 1603 1619 315 74 150 349 505 975", " 445 1332 1976 1669 1185 1909 51 1149 272 128 1527", " 110 1224 1023 186 1575 1926 1654 748 1911 703", " 556 397 1729 702 1129 175 1946 639 1200 1694 837", " 909 1695 221 1633 1415 644 819 1425 119 82 1382", " 316 358 1445 1686 1894 538 547 158 111 114 83", " 550 571 1300 1490 1612 545 1492 99 260 168 1096", " 662 1325 1759 25 109 694 795 1437 1371 306 102", " 1939 526 1208 1846 862 175 1901 300 1670 840 1254", " 1966 1467 981 1977 472 1867 525 723 1598 838 1235", " 1103 1717 496 984 1525 1907 936 979 1538 1635", " 726 1876 119 1053 1754 629 1140 1798 370 786 358", " 404 860 1755 1934 389 1661 983 1300 977 785 123", " 220 1244 1813 1276 1320 1392 752 1297 1166 1147", " 1753 892 715 53 1957 1707 1272 1989 1952 906 1564", " 1892 1790 1675 1459 562 274 233 1598 1831 239", " 1609 1882 1373 462 177 549 796 1839 1054 286 166", " 786 465 1453 901 568 9 547 625 118 1207 1811 1814", " 1387 1406 1073 853 306 826 1689 1674 1322 450", " 611 1039 1667 1745 614 1182 1035 1457 379 588", " 1563 41 1716 1333 1804 617 1756 1522 1613 1186", " 192 1842 201 860 1375 1192 165 802 1806 1 344", " 513 702 473 1390 753 1538 1759 1070 51 1628 677", " 90 1788 120 300 230 1712 235 96 1149 435 1501", " 560 833 284 741 1106 690 1531 1107 1988 433 1068", " 1300 1509 1861 1772 1345 21 1486 555 602 1226", " 1112 1971 1137 1972 1537 1656 633 1828 174 33", " 1921 1769 843 102 859 1722 1763 1866 1219 27 1071", " 795 556 42 1745 392 1452 841 484 1330 411 1393", " 1340 1574 472 964 1300 681 141 564 872 1781 868", " 19 1071 1380 1498 698 462 1690 1155 958 1161 247", " 1470 335 1514 1229 202 1379 1383 144 409 1171"};
    vector<string> part2 = {" 992 604 756 1876 214 1195 32 1449 1698 1110 1151", " 7 1013 1051 201 361 139 1905 861 1605 422 152", " 819 1486 72 388 404 940 1857 172 332 617 554 1629", " 1246 988 560 1477 120 764 310 1869 1273 1181 516", " 1766 1057 31 884 1975 1976 8 463 1877 690 1118", " 131 69 256 1114 1928 462 1690 153 1715 1475 1965", " 565 506 1983 767 83 170 1 1899 974 85 506 1001", " 1700 288 1317 1836 655 780 1431 1715 295 834 423", " 888 870 277 703 541 1037 1667 1219 25 85 1340", " 274 877 1816 1638 1707 1387 1728 1808 434 745", " 1888 374 1443 402 1715 1685 229 606 1073 1599", " 163 1892 1465 1936 1527 253 587 1874 1736 1306", " 1941 1470 854 1432 1505 420 1443 1027 1773 125", " 116 777 1483 1743 584 401 874 913 328 620 1877", " 576 1024 250 298 1521 1437 736 1725 999 920 1545", " 814 887 866 1498 1224 651 688 1802 1884 900 1225", " 1970 1437 195 300 882 1501 1017 1192 1556 1497", " 654 999 1412 288 1071 1578 1984 202 1979 923 941", " 294 241 1327 1611 1412 1970 1482 89 1588 1276", " 1912 1435 303 1498 105 427 1413 1206 1692 527", " 22 992 1871 986 501 212 502 532 1369 1719 1690", " 622 422 1298 1428 689 573 754 586 727 559 1358", " 1897 1597 695 1227 837 1478 1176 270 572 723 372", " 1952 1681 274 288 918 1400 693 644 625 1421 1413", " 759 642 1770 662 1578 115 88 716 1988 67 1078", " 958 366 1392 1592 939 272 425 1986 1578 604 164", " 261 1974 1912 1822 1640 394 1042 1377 875 761", " 240 283 1288 305 1365 205 796 753 747 672 756", " 1800 1597 1503 491 1872 163 1169 1491 140 532", " 229 466 1245 855 1140 463 1803 1643 321 301 1346", " 856 580 1399 635 1701 375 76 925 1692 1872 1646", " 483 266 1345 1445 1039 1531 956 1290 1231 1878", " 1787 1872 1408 1812 1743 517 1937 663 1143 202", " 777 745 244 623 282 1954 714 1555 552 591 1178", " 1562 1909 1391 670 1856 1359 1039 292 988 989", " 424 142 921 246 695 1321 321 354 1614 429 411", " 821 1258 1108 119 1657 325 815 647 346 1500 757", " 1264 1528 515 733 913 985 1495 1567 68 862 20", " 406 2 935 632 216 1340 392 72 569 1015 1406 499", " 892 456 1245 1844 540 1024 1484 619 362 153 868", " 781 760 834 1924 459 1061 184 840 881 426 1302", " 347 432 1125 1677 235 1518 691 1591 1692 1484", " 900 377 1776 376 185 1384 1765 132 865 1501 1231", " 167 1477 859 648 243 640 400 229 518 483 795 283", " 885 1864 541 1842 1958 357 275 232 1981 323 499", " 361 1385 1088 212 222 1439 1026 755 1235 1016", " 1885 1252 1326 1767 823 885 1644 349 201 1481", " 1470 768 1368 852 1253 1769 1702 1458 41 1438", " 1475 77 1888 400 1319 255 813 389 1956 4 343 968", " 952 531 1052 1775 945 1983 710 1549 100 1081 1564"};
    vector<string> part3 = {" 1769 1695 1865 1052 624 525 1325 1992 1287 1786", " 544 1022 1315 920 1278 124 812 657 1975 1492 1263", " 1614 547 1548 387 1767 213 666 430 1740 1411 1150", " 329 1251 1780 1600 97 1203 315 491 640 273 1204", " 506 1323 1433 1308 1507 989 479 805 1233 741 1078", " 330 1302 475 865 432 1760 600 1416 1006 1739 566", " 1565 671 1336 1526 1776 1125 1037 1361 1376 768", " 396 753 675 463 1400 1649 359 38 1430 1074 1289", " 1008 1889 1359 471 439 1856 1571 161 1731 1307", " 586 53 783 12 1381 1324 546 1587 994 1582 1356", " 525 460 893 1279 1477 1502 657 321 187 1998 1695", " 735 1653 1576 1168 1443 291 1847 511 1401 455", " 1707 483 239 693 968 1662 555 1799 1068 1573 1729", " 1572 1667 145 1157 1106 942 85 782 1993 81 480", " 1612 794 876 1893 988 16 1837 1738 393 246 163", " 1743 565 1450 886 1807 1688 1488 789 75 1287 1993", " 1200 917 217 277 1880 938 1350 343 1795 1796 610", " 1977 692 239 1097 1760 779 1850 1642 672 1705", " 1072 697 1971 1639 584 1040 1398 1351 1241 837", " 789 1946 738 1138 1448 1603 169 433 1277 605 1299", " 646 1561 745 612 1362 329 1210 1590 37 654 1765", " 1599 1444 184 1490 14 1659 1970 1160 807 1364", " 1039 393 1104 89 2 921 314 310 1684 1877 916 1971", " 1298 1361 844 1857 309 803 1208 562 1271 990 1572", " 1789 402 609 1628 690 571 306 1629 188 367 325", " 1015 1029 1020 1857 1333 366 227 276 544 319 637", " 390 817 219 364 524 454 1384 1299 14 1591 1358", " 1640 1691 921 1997 1961 1627 1682 1572 941 662", " 1438 1711 205 115"};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1998;
    if(result == expected) {
        cout << "Test Case 110: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 110: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test111() {
    int numSheep = 466;
    int maxRuns = 465;
    vector<string> part1 = {"115 835 47 450 721 895 601 571 932 943 1817 304", " 1210 380 607 412 67 568 1196 467 133 413 63 1188", " 1778 1156 1615 1374 1261 615 1912 38 634 648 329", " 149 86 388 1854 1830 535 1458 1753 305 1637 1616", " 998 1393 858 368 1422 317 469 863 989 1045 1365", " 855 752 1051 516 1493 1921 997 386 1645 262 528", " 500 828 1814 167 1469 1839 221 932 139 2 1186", " 1077 1733 588 839 483 52 233 1794 1631 1343 1175", " 1562 798 763 869 1395 55 978 1353 1453 1882 356", " 161 377 84 1644 380 1455 752 437 1963 252 720", " 492 786 959 1692 1655 1155 1398 1001 822 364 261", " 926 953 543 823 1940 867 900 1015 1836 509 778", " 1329 261 446 1747 885 126 250 673 1164 1913 1480", " 1355 1262 1696 216 245 915 1692 532 1503 1800", " 308 1735 764 1349 1411 1052 709 796 269 744 287", " 1269 19 1642 203 216 1365 1154 1757 1706 424 1584", " 1055 1195 1272 830 871 735 1344 977 502 1101 1303", " 1916 1298 468 941 1845 1574 148 1622 1004 1976", " 684 1318 473 76 352 1646 1189 55 1549 662 540", " 1943 1248 1452 290 545 675 1468 1204 874 1354", " 1296 2000 826 1262 409 1335 350 391 287 1697 1421", " 1951 1525 562 1294 4 865 556 856 1486 443 1557", " 1673 339 1059 1850 299 135 520 1573 196 1720 230", " 651 1245 233 1568 1688 261 348 751 623 807 262", " 649 541 1849 1086 709 1918 198 198 222 994 271", " 1965 710 161 845 403 829 524 1642 863 1538 998", " 433 702 1577 387 1827 1117 990 1279 1372 233 873", " 1122 101 244 1123 1331 267 715 1096 1451 1055", " 1285 1740 796 112 655 1667 1041 1990 1718 444", " 1560 1952 1413 237 1917 1936 992 5 856 501 831", " 1486 26 1706 399 1842 1316 1997 885 336 1609 179", " 1733 814 1029 474 114 641 1885 79 1655 427 1321", " 576 1157 1988 384 1541 1774 1820 1938 331 609", " 1952 588 688 1671 859 1784 1542 1518 1855 691", " 162 243 84 1059 1060 198 768 1896 812 312 1991", " 1425 1835 152 1445 899 1192 1998 1482 1574 1444", " 8 1142 1153 1904 1220 1957 1111 269 1468 668 465", " 356 1720 725 1246 1911 1905 775 456 999 1602 202", " 1945 168 964 633 1422 274 474 1064 1739 874 122", " 1800 911 272 173 1177 1834 457 248 736 1548 1408", " 572 1242 415 1049 587 959 1031 1975 637 1609 1113", " 767 1746 1911 922 1003 1208 430 1801 867 95 847", " 64 1849 1627 351 1415 1908 954 195 794 1104"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2000;
    if(result == expected) {
        cout << "Test Case 111: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 111: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test112() {
    int numSheep = 1479;
    int maxRuns = 1322;
    vector<string> part1 = {"1549 484 254 1327 92 676 1265 1791 1159 968 74", " 584 446 1196 1250 1699 1593 1657 1729 307 892", " 452 487 1566 1017 101 570 1980 678 523 1553 1981", " 1024 367 1729 224 1728 1638 373 1346 173 394 340", " 1363 1586 731 846 1247 642 1154 1942 1915 985", " 1799 1318 703 1957 1732 1200 1043 213 1113 945", " 29 1985 1905 1259 1706 266 1461 51 666 1938 351", " 823 1601 15 1090 516 1243 1100 1256 8 512 1713", " 1676 499 1897 1253 713 1299 1906 657 386 1776", " 992 1430 916 677 164 882 345 1889 1168 703 1822", " 461 522 412 584 1982 1647 1584 306 317 346 1292", " 1162 1605 309 848 1404 1212 494 417 1455 902 1726", " 826 271 167 471 1296 90 984 1756 874 80 1468 1525", " 1073 356 770 1906 1173 1096 1149 1536 944 8 483", " 890 1615 1381 867 1682 141 262 219 1040 1026 218", " 569 298 1773 1793 1168 1893 254 1003 253 1882", " 1303 1152 842 29 35 1170 1138 682 1975 960 182", " 849 1352 205 1616 676 1790 1584 55 606 888 1293", " 1074 1798 656 916 1008 1299 640 1528 807 1811", " 1717 1779 428 1511 1874 984 499 1185 232 665 790", " 417 21 346 859 1628 1403 1029 1009 1279 355 176", " 1996 226 1297 1756 1042 1488 1226 1503 1012 1397", " 243 1413 1729 1641 251 1746 1639 1389 1644 1067", " 363 851 1278 1797 651 1331 797 1806 1187 11 140", " 299 1229 247 665 1442 1612 1458 595 1225 330 603", " 121 1294 1984 731 421 1112 1015 1813 1914 478", " 461 1199 1242 1463 170 1217 1866 1185 1891 1244", " 1577 310 1326 1933 735 700 1495 769 99 508 883", " 1563 368 726 867 1348 569 418 971 82 58 1274 611", " 764 657 230 942 1357 284 40 1466 439 1700 537", " 1959 1995 1563 788 1739 470 179 1314 373 589 847", " 149 1856 620 1342 521 1739 1995 1172 663 1847", " 1107 731 204 1616 2000 571 1609 223 87 1701 525", " 1151 1785 982 1632 127 936 42 353 392 330 1967", " 1299 96 1164 780 1187 1134 457 593 1453 703 347", " 832 1935 727 497 253 894 1212 1698 3 568 1280", " 1600 1671 922 1181 1264 1984 787 1654 378 375", " 280 1307 1388 1851 169 1629 84 40 1284 1219 861", " 25 1193 1165 1913 172 798 1751 576 422 1107 608", " 1304 1318 249 155 1574 302 990 453 964 639 492", " 873 1955 1988 900 1281 595 1474 1396 1869 49 302", " 193 168 1647 15 1521 361 282 934 103 520 472 1692", " 964 578 1313 1451 556 1743 193 1263 1704 1985", " 1322 14 330 32 1118 1701 326 1700 333 1813 1134", " 98 44 1247 1630 1834 632 1980 1962 752 1321 640", " 1093 1946 650 47 756 1594 1880 1904 514 1037 969", " 449 325 178 958 75 976 1423 396 408 666 1969 1320", " 1107 1759 930 769 1695 6 928 1939 250 419 491", " 776 1170 846 895 1410 457 1587 1155 631 1510 731", " 1137 1755 492 1084 791 244 862 652 1613 330 915"};
    vector<string> part2 = {" 139 1449 1790 71 1842 255 589 1458 1094 1949 212", " 1293 66 1957 1878 898 1956 1276 1836 803 1078", " 1443 1628 1391 1216 292 1838 880 1404 1520 875", " 71 298 390 118 1868 1221 598 175 513 870 791 1430", " 583 568 678 1485 516 1484 1232 1601 1635 877 1522", " 266 59 1542 382 465 1861 1218 1760 1858 1752 900", " 1490 1202 471 1417 174 242 1438 1563 1762 229", " 905 1256 72 606 1142 562 1430 1038 1771 392 612", " 1069 795 1524 556 902 1365 70 1063 1592 445 1442", " 757 1209 192 1845 781 974 338 1822 806 1897 282", " 1482 1812 1027 1152 1024 712 1210 373 495 1377", " 540 1972 1764 1976 1716 1880 688 1739 1796 415", " 714 167 1636 1805 1441 1643 1498 1860 1893 139", " 283 1666 278 1618 1633 1003 925 956 974 760 1882", " 1299 1359 1280 157 1144 500 823 713 1221 831 773", " 645 1968 235 248 1589 1570 1279 1196 1625 1944", " 1955 1705 196 634 1490 1694 992 11 977 1485 1393", " 1281 847 1414 967 1461 1870 1305 535 828 464 1175", " 1691 375 1013 152 1353 488 1493 1618 930 1911", " 808 1976 1469 1588 1838 1 1251 461 124 1259 316", " 1042 964 1455 522 135 697 599 995 1002 1873 1821", " 213 341 1771 774 549 1446 882 175 1785 462 995", " 1446 775 1863 252 316 1325 394 1110 954 227 959", " 1845 1954 1981 1573 1645 1207 1382 1765 1335 224", " 1097 323 100 136 673 612 1441 1226 1300 294 156", " 1083 12 1660 21 1272 902 633 120 1138 1310 224", " 731 311 875 457 403 723 198 262 76 439 833 1046", " 1081 1352 438 1274 728 1211 653 1303 1257 1712", " 1058 1835 1537 348 38 739 666 76 805 1453 1805", " 1239 25 201 1683 739 701 1061 1960 1834 275 905", " 817 302 1770 1072 480 347 1851 889 757 1388 243", " 364 599 1569 853 545 211 655 865 845 1124 1992", " 1856 958 1684 1773 1521 778 722 1090 345 867 1973", " 721 582 1533 608 929 1733 723 902 327 1573 39", " 1183 733 300 1849 1084 531 88 1721 1384 1604 392", " 1616 1167 1739 1580 1916 275 1429 1258 1099 1933", " 809 1699 539 1361 261 1973 446 965 1674 578 1075", " 371 1259 929 1187 796 449 1827 1290 688 1955 489", " 567 684 244 1477 1637 1171 1390 1902 506 176 1694", " 695 1088 698 495 610 1666 1705 1500 465 42 1416", " 1568 893 601 1420 1152 1115 1110 84 1468 1836", " 170 1506 593 1027 1147 1369 50 924 1496 1366 1433", " 364 532 1684 1096 980 1031 443 805 889 1858 985", " 630 873 865 819 8 966 1093 1421 1111 183 595 1465", " 249 496 1847 701 1803 110 749 1032 1009 1640 1649", " 1558 1303 787 1157 290 1054 724 563 843 1028 219", " 260 1882 850 78 1809 563 396 1651 904 650 1604", " 131 1953 408 352 1771 1376 654 334 517 1262 1433", " 901 1799 1396 311 333 1593 87 473 818 1276 1802", " 217 1205 1130 640 1405 916 1193 1970 941 1515"};
    vector<string> part3 = {" 1860 800 674 1946 123 1531 1503 1016 1130 82 1365", " 521 1384 603 1665 1197 1264 709 457 1673 1061", " 475 759 1225 18 1628 1092 806 1823 168 473 1460", " 363 1614 1250 144 678 1332 1412 56 830 1478 1745", " 1803 974 371 1001 355 1025 1060 19 1808 1117 1071", " 1933 295 1085 1163 336 1514 159 1540 1175 154", " 768 1969 1601 1050 549 1636 1701 918 1723 1634", " 678 1235 1137 1028 1991 1753 1076 429 1328 1983", " 587 45 1490 1190 1893 1525 328 264 416 1468 462", " 466 1115 1330 1830 80 142 339 713 1992 1592 622", " 603 1850 201 1174 1330 422 370 1688 1656 1502", " 985 126 1135 1150 449 1348 1060 1129 106 1002", " 311 662 964 745 1146 1195 538 537 584 1832 669", " 401 1673 455 1630 1377 275 930 305 829 1682 1750", " 350 314 1899 1575 1977 847 1773 1957 1876 692", " 1722 1005 324 1149 1701 434 1809 1293 939 685", " 1170 1749 375 1171 489 172 33 166 1962 963 1031", " 655 1090 1577 303 794 453 1661 43 1138 1672 130", " 414 1151 1649 600 1518 381 1164 1480 730 959 527", " 96 142 964 1136 1904 1141 553 1942 1860 1662 687", " 1981 851 658 62 1997 1783 853 1914 1805 110 971", " 917 612 272 797 165 1409 1170 396 1527 620 763", " 1045 1812 301 581 1158 371 1755 1334 944 1632", " 1559 112 301 332 1482 21 596 1300 651 159 1162", " 1350 102 1694 380 1457 650 1939 634 1420 1778", " 1118 1798 1003 6 787 1133 829 898 1858 1189 1353", " 264 535 1592 714 226 143 1071 857 1418 76 83 122", " 221 1514 976 777 589 1331 700 1831 1079 1952 1750", " 1903 1413 2 674 1134 84 1792 580 723 1832 1569", " 1914 1250 766 1196 1951 1455 147 398 1085 1370", " 755 1500 1476 1654 1764 1930 872 414 516 411 1663", " 1658 976 1049 876 350 936 1080 405 1460 367 630", " 140 1212 1623 885 1084 48 12 1629 545 1389 239", " 540 173 1695 1078 1519 921 220 66 757 1705 723", " 1521 417 627 774 1365 17 433 1062 37 1406 469", " 1727 1459 803 189 1364 718 1776 1863 939 888 641", " 1702 1052 1499 155 1173 1526 1687 1607 683 1635", " 1167 867"};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2000;
    if(result == expected) {
        cout << "Test Case 112: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 112: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test113() {
    int numSheep = 1376;
    int maxRuns = 1325;
    vector<string> part1 = {"1429 324 768 1569 1843 1552 1358 387 460 1356 1162", " 210 1569 353 1462 173 136 164 1173 1958 1291 1862", " 1445 6 253 697 46 1937 1170 661 523 1387 1935", " 537 457 635 1615 1462 1518 1712 24 1608 1772 402", " 1470 374 790 938 166 1357 802 1651 621 1400 112", " 258 154 419 650 21 1314 31 28 809 139 312 885", " 1390 323 1798 686 1150 465 977 1963 604 923 56", " 320 1242 1306 1588 214 990 955 568 1807 1813 1160", " 1212 758 56 519 715 409 526 1745 729 1915 578", " 693 425 390 1846 77 1997 782 793 962 1119 780", " 325 636 1808 1673 1068 1356 368 1417 1428 862", " 1709 506 1520 1769 1951 1373 1010 441 915 980", " 717 1359 1015 1181 1104 1910 1094 990 1952 1753", " 323 1457 52 1684 859 850 1063 953 534 1159 953", " 692 591 1439 1975 880 180 718 1821 1131 656 1992", " 409 1479 903 1099 1154 1155 1506 1683 681 1066", " 860 1896 1982 1962 699 58 998 1240 1075 1200 1003", " 1905 1960 45 1989 1268 1650 1268 520 1631 1318", " 1662 30 1351 1235 1514 1158 988 1129 900 1053", " 428 1425 1896 1372 662 409 1017 369 546 735 1037", " 1587 367 1504 379 977 1181 273 569 1290 509 1694", " 1951 34 566 353 1279 739 1337 1749 553 1522 38", " 1755 1050 404 960 1421 85 1057 495 225 1654 872", " 997 33 1442 131 932 537 1490 1548 317 624 1154", " 1887 1083 106 277 146 274 1197 1963 323 626 18", " 1206 657 1713 1055 1801 1181 1848 531 594 722", " 859 241 1642 723 1967 1361 394 1332 1752 1139", " 976 668 928 1846 178 90 1391 1496 1858 229 55", " 1886 1539 168 1759 214 1035 478 1427 603 121 697", " 233 1177 25 1034 263 1170 1430 1148 260 1553 528", " 1234 1724 892 910 979 1192 1487 837 562 1949 71", " 409 675 1155 1228 372 922 889 1666 597 1286 152", " 1473 1514 1727 165 1892 1009 428 506 1136 1099", " 984 1159 838 658 1381 165 1898 1677 257 604 948", " 274 537 1174 471 267 107 723 144 1100 368 1326", " 1953 1203 170 847 191 97 298 1603 441 312 630", " 57 1242 934 1257 783 1809 1793 491 844 1470 1075", " 1346 766 976 584 633 1016 1501 1734 288 1684 257", " 829 116 319 1467 1150 512 1877 212 1968 964 1002", " 1169 737 566 428 187 474 1750 1093 1021 1319 1623", " 869 1662 1061 1178 687 1168 396 1084 371 1144", " 767 1860 188 1391 1649 822 874 8 811 1787 483", " 419 1324 1892 1237 1121 720 1373 1376 489 227", " 511 1634 267 1608 968 1490 547 5 1422 977 496", " 338 706 126 837 866 1602 1817 47 1152 1746 282", " 1064 1278 284 1795 284 1098 1701 547 266 1586", " 386 892 1181 9 538 776 76 506 1198 311 1311 429", " 1575 1404 947 328 926 681 591 1016 34 552 840", " 1136 1717 1132 2 1888 392 1527 248 1434 552 1229", " 381 1761 969 1961 1396 99 1698 1166 477 409 1625"};
    vector<string> part2 = {" 1360 834 1356 561 1124 1633 298 1617 1974 826", " 1529 1559 266 187 1243 1949 1605 1530 371 1706", " 908 499 1928 1420 60 419 7 1908 13 468 1981 1635", " 465 1881 293 436 1553 909 303 1545 1898 1767 1042", " 1643 1891 1409 723 1884 131 249 1718 1775 1409", " 519 1749 59 923 1792 15 508 539 1643 1794 154", " 1719 674 972 1406 520 1883 206 178 1438 679 355", " 1496 689 1050 1759 1022 1290 1741 1355 80 196", " 1777 640 670 461 901 626 1104 418 713 1600 280", " 490 1603 552 791 865 66 1360 418 840 82 867 1270", " 555 1152 1960 266 867 1614 1417 868 1181 1496", " 1891 1278 1723 1096 905 1930 1001 279 94 1188", " 1746 725 147 1303 1572 92 1757 1715 882 464 538", " 350 1833 105 1574 1528 1477 979 1065 851 1188", " 485 195 1522 1819 1538 1707 1217 1624 525 1077", " 598 983 1904 1730 1351 377 1247 1564 829 1010", " 1816 50 1511 83 189 1024 337 1335 1382 1250 133", " 97 976 123 51 1158 1819 1841 1822 71 291 60 7", " 1602 204 1231 270 1464 404 1285 1830 1666 867", " 1408 1993 1312 1270 1070 459 723 173 1949 1747", " 1932 1249 1953 1592 52 1802 1443 600 1341 768", " 124 526 1529 193 370 1557 234 322 370 104 1193", " 1849 1647 428 1515 1099 1417 1281 1984 1905 1858", " 1956 1934 1776 1533 649 1342 553 440 263 1653", " 1502 1292 1508 597 1942 1890 1170 1301 1347 904", " 810 1999 498 517 681 1129 1779 409 1192 134 634", " 1768 417 1325 1076 424 574 234 942 713 1987 436", " 1155 997 1151 399 260 1096 1232 962 477 1154 1189", " 1324 982 330 1239 1043 71 1797 666 413 687 1959", " 176 1778 1095 58 496 769 1810 237 1877 35 1048", " 1310 969 893 691 1243 1556 1498 1066 950 1792", " 1240 44 1191 287 129 1551 1974 1950 733 826 1737", " 1051 182 591 506 854 1820 429 477 196 1082 1317", " 176 714 1177 1515 916 1352 1171 1584 1372 179", " 1419 862 692 471 1707 451 1203 141 302 1617 659", " 1946 1871 213 1249 1400 322 1415 1152 441 353", " 753 1715 520 569 1284 955 291 1159 1623 1069 758", " 1597 1346 1448 1833 1081 586 693 878 696 61 1616", " 531 1399 1265 1174 1663 346 1815 1311 1498 145", " 1734 686 1533 599 1749 1991 973 620 361 1633 482", " 1878 1217 635 1341 468 429 756 809 1251 198 213", " 336 533 1866 578 1249 1262 647 722 1649 896 522", " 490 977 554 1704 1377 158 700 1629 527 1614 430", " 626 919 1657 1602 1269 1415 198 744 36 1085 584", " 1024 1257 92 313 1269 733 944 1174 1336 1734 702", " 1082 554 371 560 303 222 378 159 194 254 1231", " 754 1143 1133 1816 262 318 477 318 190 1732 1538", " 567 1597 1084 1703 866 1329 511 1567 642 771 1698", " 1854 783 1708 792 1226 1145 1275 1111 716 958", " 852 1551 1691 366 1834 520 1819 62 208 91 1490"};
    vector<string> part3 = {" 1274 1773 1572 427 1038 718 1494 1983 1334 1553", " 1680 1008 1172 1551 1167 968 354 1561 260 1714", " 168 1718 327 358 337 75 1468 1275 1482 1613 1205", " 1976 1514 1011 1096 907 280 511 1187 1118 1785", " 543 733 167 1273 1535 206 1920 1548 577 385 278", " 1029 879 617 197 263 800 371 1411 1067 1898 779", " 76 1473 808 1521 975 1130 364 44 1798 1860 645", " 799 1083 791 436 540 1001 1393 60 7 274 1677 1353", " 1725 720 1802 2 980 1629 808 817 1443 1318 1525", " 371 790 1757 554 187 1451 990 1776 172 209 1573", " 1239 1287 802 350 135 849 189 860 216 1481 1113", " 1886 1728 777 359 927 1899 682 1992 446 96 1245", " 1391 750 561 455 23 1646 1331 540 296 1515 559", " 1376 246 84 1447 1497 1611 334 253 329 1479 1641", " 1169 1932 117 371 1802 1293 1215 1420 1032 1149", " 1124 746 1127 1126 233 1934 981 1644 942 694 1431", " 550 595 1236 1817 892 426 1055 438 1521 1678 376", " 1143 611 709 624 1487 1008 994 648 998 444 798", " 1673 499 720 1784 470 1072 181 106 1422 345 146", " 1726 1590 1621 97 401 1447 1081 1704 1959 1699", " 1017 135 831 1950 352 910 1208 522 81 897 1604", " 1524 895 1246 540 1854 1994 1326 292 380 1451", " 1291 1217 1378 355 353 1848 1069 1535 1783 1032", " 1666 1278 464 795 1909 1141 1405 1129 347 1955", " 917 974 1585 1265 504 61 366 332 592 1317 1542", " 1943 1370 1571 49 1866 1235 88 779 655 454 1308", " 1549 303 501 690 1197 728 390 958 1713 1874 320", " 1653 1817 834 1317 1300 270 718 1203 1540 22 1747", " 326 1452"};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1999;
    if(result == expected) {
        cout << "Test Case 113: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 113: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test114() {
    int numSheep = 1497;
    int maxRuns = 379;
    vector<string> part1 = {"1032 1731 1132 584 1373 516 1487 379 1038 559 1552", " 126 358 55 1561 1232 1173 794 766 440 1046 440", " 1486 1401 226 1527 824 1989 836 1286 1136 1232", " 348 625 1329 358 536 69 69 1343 560 1284 835 1921", " 2000 1226 1737 1079 508 1073 491 290 1854 674", " 1178 349 164 685 855 933 392 491 346 872 384 866", " 815 1053 727 1625 1840 69 1419 1053 1977 96 809", " 307 1351 1107 741 1870 851 888 1839 179 654 1447", " 210 892 1132 36 1711 602 870 1545 1322 1022 75", " 789 1315 41 728 1125 1639 1523 504 866 1703 569", " 1084 539 858 587 302 1668 1359 69 1699 1999 1270", " 251 463 443 784 298 557 1130 483 1629 1696 1847", " 114 990 372 855 76 1085 1896 303 516 102 1952", " 1911 978 430 485 1758 1992 110 1504 158 615 675", " 839 1457 818 1381 1431 819 483 726 211 1434 1694", " 798 748 452 883 101 1730 1712 1831 1184 681 304", " 1749 1504 1904 444 224 423 1902 619 1117 1276", " 1581 846 1471 1073 619 349 307 1091 1023 454 1533", " 1377 1545 115 114 1201 302 1324 1144 1680 1106", " 876 955 1256 1014 248 1297 1479 1364 1390 944", " 670 1800 538 1150 1879 1426 767 1001 1770 714", " 1972 1865 529 787 124 1123 1754 3 1531 1471 1806", " 1233 566 444 800 832 314 434 408 1771 255 632", " 976 1329 158 1943 1726 1796 433 447 244 428 747", " 600 1172 209 72 92 1864 409 421 740 897 943 1619", " 128 1054 1397 248 1770 1152 411 1079 781 1052", " 560 257 1618 896 1080 1484 891 1801 1102 467 1636", " 580 1116 94 807 371 1194 243 863 947 1059 1597", " 287 604 238 1052 659 1080 443 1037 359 488 1372", " 1548 231 787 502 1367 647 160 1928 981 1316 375", " 1292 870 650 387 747 940 968 762 742 603 33 608", " 978 189 1204 1608 436 1082 398 845 973 1206 1982", " 1920 231 378 90 83 353 599 432 373 392 393 1535", " 223 23 617 1863 575 95 821 1310 1890 426 1284", " 1189 344 1133 1012 1994 1490 60 1031 1055 1167", " 1539 1054 1963 296 1618 1028 528 904 1176 734", " 1277 1696 228 609 1108 666 1095 1444 894 1084", " 718 424 846 943 383 869 612 225 1585 55 851 1288", " 1105 778 1844 264 754 1201 828 487 1349 973 1756", " 894 362 108 1943 1970 662 1279 394 789 1013 1089", " 1159 1255 977 309 1314 352 1827 1471 1984 1395", " 554 246 140 1723 1514 1912 1004 1993 23 1038 915", " 1873 914 306 1593 1313 51 1375 248 1572 728 1687", " 24 406 812 1995 1693 1449 1787 166 1519 1719 1077", " 1162 91 377 1746 1184 248 647 181 634 300 193", " 932 1020 960 1101 694 394 1266 274 302 323 89", " 1717 1959 207 1246 1058 1025 1652 1737 1613 1579", " 1311 537 665 1249 1969 1128 793 1448 1544 286", " 613 1719 1761 1702 863 200 1242 1550 471 1968", " 796 450 92 1131 1465 763 1460 588 210 596 1549"};
    vector<string> part2 = {" 1603 556 1614 1300 383 148 1733 663 1623 561 850", " 1702 836 1737 1153 15 49 439 1574 475 1445 1067", " 652 786 448 369 1102 1206 1316 1975 346 351 1798", " 538 594 194 1301 992 1365 72 1147 92 1566 1228", " 1170 1085 1867 1557 1592 1511 1872 101 1782 1254", " 221 481 1901 64 1022 1282 610 1547 609 1499 524", " 208 813 299 875 1006 241 725 1868 1553 539 463", " 1098 100 1610 377 1126 836 1814 366 1978 711 366", " 1903 427 542 1810 1246 1822 455 531 1288 12 294", " 440 535 1304 84 98 215 737 440 241 1415 483 6", " 136 1250 1587 1797 1135 863 1130 646 280 437 65", " 801 356 323 1631 386 1703 1903 1599 1140 473 558", " 277 1820 1582 948 882 794 280 827 518 491 1340", " 1769 1782 627 867 78 1054 265 369 1819 1032 1923", " 1915 1545 974 724 629 1416 1100 99 281 759 506", " 1502 559 1220 376 1198 1257 485 1419 1404 638", " 950 695 1333 1178 1075 1357 938 1491 441 1416", " 1995 271 1144 1810 1782 100 1483 1900 1834 529", " 1803 1262 1040 411 1985 859 1084 906 1835 889", " 753 662 625 1183 1235 1996 1352 1440 1425 1717", " 742 1480 1490 1576 87 356 798 1822 416 1862 321", " 711 322 537 1116 1900 241 1682 125 1333 134 1656", " 240 956 1282 1046 197 1921 675 958 1716 1566 588", " 128 1119 350 1616 1387 1943 1482 1343 419 849", " 229 452 1652 1497 1305 1182 70 1608 400 1838 1778", " 1267 584 1760 419 932 81 782 1824 1197 776 193", " 905 1674 873 937 1168 310 448 47 715 481 1473", " 1065 647 1184 1354 46 1119 1829 1877 1674 1260", " 1393 754 1252 1151 1159 436 447 1742 1715 1066", " 126 763 491 1329 299 1755 1461 73 665 997 1129", " 741 536 121 1336 455 1497 1636 1933 1595 1108", " 673 1874 194 838 193 1911 850 878 1439 511 604", " 842 1293 219 1967 1614 227 811 1691 1221 458 1714", " 392 1210 1699 1577 1767 1017 765 71 682 1570 375", " 1359 544 718 1138 1530 179 325 1435 520 6 1151", " 1496 1585 1097 601 689 1776 1551 1323 625 1234", " 1618 935 1260 156 901 741 595 475 169 765 1446", " 959 964 1444 1290 443 1952 234 1739 374 336 1747", " 1011 1557 1400 182 1500 1165 1885 1234 739 772", " 443 295 1709 551 1910 1156 318 689 1618 365 295", " 715 1527 687 1520 1311 1455 1095 151 97 178 911", " 887 1488 1621 1547 1581 1481 1374 36 1143 1645", " 1258 914 974 404 835 639 837 34 956 313 1586 1593", " 287 1241 1180 1184 1882 1362 726 946 260 811 44", " 201 102 625 571 156 216 1463 1590 791 985 79 774", " 747 164 382 1393 677 1711 523 238 723 982 1016", " 1192 1349 951 228 81 1568 63 735 1113 904 21 80", " 1439 783 1221 1604 775 153 448 120 1853 1843 65", " 233 633 563 1939 1641 196 929 98 1045 1417 1942", " 1520 1620 319 1539 1513 1091 1527 1046 1384 1311"};
    vector<string> part3 = {" 1873 1417 1019 435 963 524 997 867 1676 884 994", " 1159 918 947 832 588 1195 729 573 1479 1130 875", " 1739 1740 1337 132 1755 638 1965 922 1033 456", " 888 1506 852 283 1362 470 1585 1353 1803 1222", " 784 1249 1408 861 1183 252 1996 37 1789 56 1473", " 141 1362 1986 1287 778 382 1258 1443 1372 1407", " 689 988 195 1478 598 1355 1873 300 882 1281 370", " 785 176 1742 953 1542 257 1614 1229 348 1166 230", " 1508 1740 799 112 1374 968 717 387 1781 1777 851", " 471 1091 875 410 663 1925 222 725 1415 1071 31", " 1498 664 112 1134 1266 858 839 65 322 130 54 1057", " 587 1548 1206 771 1600 1395 76 1481 358 1886 426", " 698 176 1181 1593 1872 1195 69 693 1536 663 327", " 73 1712 376 792 333 1972 1852 1772 941 1561 494", " 1285 28 1797 682 939 1033 222 1058 812 129 1819", " 1936 1750 693 760 1037 1361 1069 1998 1937 291", " 348 1394 956 1503 870 1549 276 1630 336 1100 1168", " 1872 1751 200 789 900 436 536 302 1382 591 1094", " 850 9 817 1072 1265 438 1726 96 1006 755 1298", " 366 1108 1639 1771 1491 162 349 792 354 1992 1048", " 448 1187 1399 1798 150 255 1716 1687 828 1059", " 1965 847 102 750 399 1466 816 493 1144 1328 290", " 410 440 570 51 945 1965 1988 1564 1603 1087 1410", " 1422 1341 1113 1560 1350 347 122 1909 1088 1002", " 1147 1488 1531 108 929 870 1723 1999 741 258 4", " 144 530 1454 1654 1804 1566 1240 292 1959 77 1513", " 601 1232 115 754 989 613 1385 1720 1780 1123 450", " 1331 1864 1825 1613 401 1224 941 77 1664 1201", " 1015 1224 11 1452 1645 1357 1444 1624 598 1322", " 467 378 179 1245 1358 98 1379 1801 586 703 374", " 1979 416 405 1108 413 1764 558 95 250 1378 1184", " 70 339 682 478 492 690 1342 289 296 1918 1640", " 1304 414 1694 1986 1485 878 705 1456 1658 155", " 493 656 539 1535 1559 1222 358 1917 547 337 1801", " 423 1195 1698 227 353 501 1550 326 198 2000 1426", " 395 153 240 1430 806 638 171 1077 1067 1547 1106", " 1675 1425 1513 20 832 487 1615 1535 117 213 785", " 1848 1084 1587 1685 1309 1629 783 1206 602 6 827", " 60 1081 819 1494 556"};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 3805;
    if(result == expected) {
        cout << "Test Case 114: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 114: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test115() {
    int numSheep = 237;
    int maxRuns = 26;
    vector<string> part1 = {"48 1433 304 282 267 137 665 845 743 469 122 700", " 1858 1120 679 158 1060 1011 1557 898 98 1822 1169", " 15 2 992 292 590 448 1734 197 935 1441 832 1727", " 1914 1974 474 1380 1712 1747 1786 1315 544 752", " 1109 246 1429 1280 999 1087 608 1297 1106 1220", " 1883 1907 662 1720 766 620 1379 940 709 987 1883", " 22 849 619 203 977 1534 779 1099 1349 1061 332", " 612 728 835 618 610 1125 1578 510 1578 940 438", " 1587 1181 1915 1011 1769 1757 1723 1645 1510 1536", " 829 823 115 707 1495 1616 1654 849 1866 1523 1132", " 1284 1030 927 842 731 1968 342 787 1517 1218 1977", " 1420 76 1252 244 1646 733 378 902 492 616 1869", " 404 646 859 1439 175 77 883 1049 338 889 1198", " 1447 704 839 587 455 1502 1446 1459 637 941 900", " 748 1723 827 1812 1963 431 858 228 1354 1869 1297", " 1132 858 1471 177 873 155 1626 1211 1146 1289", " 1203 688 1386 1417 1506 1561 1008 197 1174 56", " 180 4 1560 111 1491 590 1572 336 1669 1854 406", " 1732 1996 393 1649 1807 1216 1326 1638 980 649", " 446 1219 774 1308 494 586 1551 1033 619 35 1428", " 996 1293 1844 584 947 1551 1952 143 1352 1166", " 1598 1078 1632 1711 28 162 170 1398 436 1014 1644"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 9255;
    if(result == expected) {
        cout << "Test Case 115: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 115: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test116() {
    int numSheep = 421;
    int maxRuns = 110;
    vector<string> part1 = {"378 387 338 933 872 281 28 1054 1447 972 1471 966", " 334 1180 1573 1116 1537 469 1439 1343 2000 702", " 1781 1289 625 1153 1083 684 1818 1116 1381 1116", " 1363 455 1036 1406 220 1016 1825 1294 1419 547", " 801 1095 1977 1158 873 303 221 564 1772 385 760", " 1071 131 575 1955 699 1428 823 1958 1553 1591", " 1477 811 1234 1620 1866 195 1005 433 1212 631", " 355 1419 942 33 120 1459 449 1883 764 363 10 1224", " 875 1312 422 434 466 426 604 836 179 1570 1058", " 1481 330 1764 1491 389 1985 533 191 819 610 406", " 835 1550 43 362 1882 659 1622 1588 1284 1318 1753", " 1365 1831 21 460 1941 627 683 953 863 186 886", " 169 1778 768 1834 732 292 847 1702 1113 410 574", " 1944 871 1638 1395 1133 506 1696 583 572 1315", " 1657 729 660 1345 1243 1733 1330 573 1269 1350", " 216 1365 1382 729 1322 1222 1975 1653 1914 319", " 1326 344 231 52 1600 707 1874 672 647 1129 1345", " 671 1045 1204 1511 603 1783 841 1443 773 1149", " 733 1416 583 937 487 13 167 1798 311 838 1806", " 1387 1336 1955 1305 1120 931 664 1264 1200 1156", " 829 902 1408 1040 646 369 1343 1719 517 954 350", " 1911 574 374 1442 929 1132 550 72 688 1842 732", " 1464 55 1797 320 1789 409 1736 1778 1364 207 1048", " 128 419 182 889 1130 652 1608 1648 1092 1745 1692", " 530 1180 842 256 269 93 1062 341 1670 1682 606", " 1547 1267 751 528 879 1770 1293 714 1907 394 1669", " 1237 269 280 495 1077 130 1996 827 766 1045 109", " 559 185 746 314 482 359 224 123 1288 37 942 1943", " 527 512 1773 663 314 539 887 555 1116 351 638", " 539 1192 1395 1920 321 838 332 329 1813 120 1158", " 1689 1289 446 1044 1752 1911 1606 548 680 999", " 1080 1174 682 293 161 463 163 819 1263 969 1248", " 138 301 253 151 215 542 388 1904 1364 1199 394", " 1220 1284 376 1988 37 195 1508 1411 207 1213 1810", " 970 430 990 810 1821 1455 74 1940 858 827 462", " 789 476 1617 102 859 1437 1987 160 1644 860 20", " 1681 10 320 48 120 1289 236 1053 1424 1620 147", " 1697 1529 589 1053 868 1272 948 1275 423 413 1977", " 759 1349 1238 1141 704 793 1891 1494 5 544 1002"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 3656;
    if(result == expected) {
        cout << "Test Case 116: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 116: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test117() {
    int numSheep = 1978;
    int maxRuns = 1727;
    vector<string> part1 = {"1520 44 831 340 825 535 1383 1978 1627 669 177", " 8 1513 197 822 803 621 1041 306 1976 459 1248", " 1316 740 1162 388 375 1612 1328 598 721 1386 813", " 776 364 614 908 1356 244 1990 1829 852 912 1942", " 1351 1001 372 1979 1092 144 102 868 140 282 975", " 1586 399 699 261 874 1453 1117 647 265 1216 341", " 777 424 1997 1222 80 1503 1303 1269 944 750 1348", " 1901 1604 666 276 740 1277 1589 1823 397 288 306", " 1966 623 553 391 846 1111 900 1587 1248 1210 1309", " 1474 564 1069 1510 95 1207 24 1850 1737 554 1943", " 799 1753 1702 291 865 467 1324 946 317 987 1026", " 1642 699 170 1675 892 128 1601 53 606 786 413", " 698 1433 653 364 1935 1973 21 1615 1329 545 973", " 1616 1664 711 1320 933 700 111 1471 278 128 1683", " 802 92 188 1908 1714 1114 472 667 1454 1761 1493", " 914 1596 702 1270 1188 507 1431 1807 881 1878", " 422 317 1127 380 1828 86 910 1054 1546 1826 1426", " 1320 212 1946 439 1779 1655 1040 744 1146 677", " 1359 1712 1932 526 693 1885 1938 1481 206 1569", " 770 131 1042 1419 1203 935 1698 725 177 720 527", " 1231 1363 1227 1820 829 1947 80 453 1709 814 1265", " 784 1627 1989 740 1842 1336 835 1630 53 984 1640", " 1425 617 1611 1301 375 1993 1774 1921 1215 1104", " 1443 860 472 1227 1022 578 1964 336 1042 530 1967", " 1263 1755 1135 39 56 189 70 1150 1885 1101 1217", " 1077 281 1246 76 444 1810 1568 103 544 1355 1316", " 1627 1924 1357 1794 1536 1443 7 46 1485 164 372", " 1561 402 1680 364 612 1171 1024 1853 1498 1734", " 1818 1435 1550 1743 1613 229 1987 809 634 778", " 395 1832 1735 1020 754 1420 910 485 1404 1225", " 1883 1767 107 629 406 1960 453 482 1805 1117 1350", " 1388 1702 406 963 1173 691 411 1743 1328 1046", " 1029 1600 1066 1928 32 1108 799 549 639 1777 1948", " 1018 881 986 1089 450 195 1545 1002 988 918 1129", " 654 1041 1682 371 1127 1429 827 380 451 524 1922", " 140 970 703 1520 898 1281 799 879 582 671 409", " 1689 927 862 907 885 630 1316 710 270 907 739", " 1636 1751 647 1181 220 1261 274 12 1907 1739 133", " 1072 901 1924 994 906 1125 1932 1379 298 769 1015", " 721 228 58 775 742 1896 1746 1808 1124 818 1383", " 958 1879 799 863 505 1401 273 756 920 917 1556", " 466 996 1102 754 782 62 1248 1620 1450 1924 1527", " 971 1510 768 1055 334 281 1633 1516 340 897 1342", " 1067 564 1031 200 569 1003 422 367 1810 654 1821", " 1032 1756 641 515 622 182 1783 443 327 1035 842", " 360 1928 731 574 1139 1467 1419 1489 1819 175", " 1500 182 1803 529 650 242 1282 1610 582 22 959", " 873 1094 1118 1628 1427 155 281 1453 216 68 1403", " 1032 1320 913 1215 1319 1573 1002 1185 348 1818", " 608 1243 436 220 884 1998 1504 641 1448 899 1584"};
    vector<string> part2 = {" 1439 1315 706 1680 1525 1129 499 1751 1824 281", " 1108 669 631 1656 906 158 1991 31 1083 637 1398", " 1809 1388 1290 850 576 1014 742 1146 608 1182", " 503 192 1755 197 1255 285 742 173 1554 997 628", " 1758 208 477 538 1719 1471 842 1107 1577 469 1899", " 501 448 900 234 628 1539 447 1439 1941 1583 1932", " 1142 1510 1887 1963 610 1852 1695 1718 1826 1196", " 816 1608 1938 1278 1310 1411 1557 127 1329 45", " 1074 230 1841 1211 269 9 1325 1089 1063 849 1470", " 1032 376 1580 1271 433 28 1761 736 506 780 1369", " 20 1086 1487 348 759 1537 1344 1657 1740 893 994", " 1595 101 1270 929 56 92 933 1723 107 1331 531", " 1759 1029 119 324 1764 527 698 54 1805 899 608", " 1418 59 204 426 354 1492 1259 178 332 499 1339", " 886 1070 1968 1400 1064 1730 818 779 469 868 1697", " 985 933 314 433 1117 259 1907 460 1602 1789 1635", " 751 214 862 1934 1832 1628 746 402 590 1424 202", " 1242 1217 1808 201 257 372 1609 1613 356 217 176", " 186 107 651 1251 1524 1785 81 126 275 1025 1586", " 1730 1436 828 740 1059 590 936 1658 1793 714 291", " 1517 346 1734 1849 1177 1021 1075 714 348 930", " 158 1200 427 1097 1412 511 1317 720 1514 669 1516", " 552 172 692 673 378 820 326 1791 838 1901 897", " 1323 1677 328 1331 1114 960 1823 303 1668 407", " 1561 1808 1159 503 1501 1086 1359 1230 1226 671", " 1957 465 1446 592 630 312 517 1684 309 1399 1901", " 379 1331 1297 455 87 830 1048 1641 891 1832 1064", " 1842 1477 1018 837 1717 685 248 801 330 1390 950", " 1699 1985 997 155 885 1033 680 389 1836 432 1466", " 1854 1533 555 220 61 126 200 885 1808 1259 1490", " 4 1257 379 1877 53 262 1714 19 1747 1766 1703", " 407 1486 1336 953 1687 13 1670 1117 639 757 979", " 315 268 1162 1312 715 1062 1333 1109 650 961 680", " 366 625 1381 1646 531 775 1453 150 301 1606 446", " 1345 1878 972 841 1097 1489 35 1714 261 570 402", " 273 1834 1710 853 1369 1461 1022 1723 679 886", " 1760 1055 1517 1327 727 1930 1296 30 452 1286", " 191 966 1724 998 1285 213 572 1988 1505 161 875", " 1386 755 948 1311 262 922 1130 915 1800 876 729", " 1015 365 1925 1296 1064 417 1716 1379 738 1841", " 82 1686 131 383 84 824 1345 665 1747 514 847 1692", " 1099 1471 1404 340 336 79 1005 568 1448 1335 172", " 164 132 1467 1840 614 848 910 607 509 1982 409", " 1202 1615 1038 490 1160 203 226 783 1821 574 958", " 1396 1132 9 885 1449 979 1010 1330 392 1126 810", " 20 853 1127 1424 1102 1895 740 1588 1805 1286", " 1281 1710 219 1493 1832 1648 148 305 910 889 1959", " 43 871 1868 959 1331 1373 1248 195 309 1309 1881", " 587 1417 1075 119 852 629 440 1517 885 38 1096", " 821 131 1903 1033 801 1842 1360 536 1093 1997"};
    vector<string> part3 = {" 1915 1926 964 1303 1379 35 697 1683 822 474 1399", " 1954 1453 1614 338 1211 433 1475 1952 143 560", " 848 1162 317 1584 435 679 1219 1331 133 171 167", " 844 1760 1099 245 1729 1358 837 474 1154 1908", " 1838 1360 969 751 715 1562 114 1773 532 1619 925", " 1120 550 1058 1889 1870 1977 81 547 285 1009 1374", " 455 765 984 305 1623 278 1820 1679 1554 1987 885", " 1167 310 1807 1321 1259 1041 959 1347 1241 1076", " 1968 866 1370 729 563 142 578 439 278 1793 186", " 324 262 83 819 170 1809 790 220 61 1552 211 1317", " 300 1108 756 1924 1605 817 468 520 830 1065 820", " 237 1505 1738 304 752 1384 1018 305 211 122 33", " 1540 242 964 745 27 1447 1740 1906 1170 1179 1330", " 601 453 1614 1687 825 879 1626 1714 1394 1494", " 1683 177 1705 806 993 93 1185 1163 1792 242 24", " 483 919 1165 1957 643 985 1910 977 1097 1705 1968", " 467 210 193 495 625 1085 309 1594 179 799 931", " 192 314 440 814 991 1537 1046 779 403 1571 488", " 1547 877 93 1814 1194 916 1157 544 1431 960 508", " 1124 725 1956 1088 1732 210 1275 1493 1943 710", " 1559 1732 750 846 374 612 1769 218 1814 9 348", " 1171 842 650 1085 705 894 1767 1743 1084 919 299", " 195 546 559 942 1757 88 1439 1487 1269 20 1773", " 1664 960 843 1177 1025 446 198 1939 1298 69 266", " 1679 131 830 1816 1003 1054 142 210 1104 1960", " 1416 959 279 148 1472 289 174 553 419 1061 123", " 901 1510 907 1745 1937 1788 775 33 1094 108 583", " 946 1120 722 165 1124 659 1941 239 177 924 1449", " 773 421 825 246 1043 975 699 632 305 921 235 1288", " 1031 1061 1051 571 740 1912 1982 1370 833 76 1514", " 802 289 2000 1453 252 188 978 702 256 301 1008", " 21 821 472 443 1710 1516 1423 734 1850 1934 1559", " 1518 1383 707 391 113 241 1509 1009 372 984 708", " 1300 1560 468 939 497 1452 1814 1859 1052 1857", " 1713 695 1046 1658 1145 439 1897 690 91 1232 1955", " 915 1261 1404 758 964 1079 631 63 851 514 1378", " 1974 1827 432 779 1653 1719 1629 652 813 576 340", " 578 821 1267 949 1441 1637 1407 1301 23 1570 1693", " 326 702 378 584 1097 518 1459 1632 1937 115 1662", " 1546 698 66 338 1770 58 625 871 260 1734 864 1279", " 862 1768 1091 1596 522 912 985 574 163 1993 242", " 523 582 1358 1708 388 1476 1324 1054 1382 20 617", " 1241 1278 542 1557 1068 1249 565 1888 695 1483", " 1909 1405 323 1925 1006 1893 1392 1325 1582 527", " 30 1969 1126 1854 1648 555 86 363 397 420 43 165", " 1033 626 842 1127 1636 1940 637 793 897 1616 45", " 1897 1370 282 1008 1531 354 1464 310 430 1835", " 1923 1871 274 73 625 271 983 1943 337 964 551", " 312 1350 1351 1847 49 1208 177 297 277 983 785", " 1366 1600 593 779 1882 41 822 882 1824 562 939"};
    vector<string> part4 = {" 265 160 97 540 1015 1959 1860 661 1161 1606 1936", " 1842 1692 1341 1627 517 380 1481 555 776 1814", " 1707 446 1988 53 1627 763 817 1243 605 713 463", " 781 595 1583 436 1173 1379 76 119 1730 394 1976", " 1309 594 545 522 1138 995 1584 971 235 695 432", " 1402 1865 1590 1141 1586 1983 1208 1979 858 984", " 1683 1744 1611 35 1777 1107 1191 17 1094 1372", " 1719 849 497 172 950 776 1265 774 1213 1559 394", " 1294 334 1592 711 496 21 1978 770 468 1627 493", " 722 1009 477 175 501 1088 1565 1321 1934 691 1671", " 676 176 1781 263 176 220 147 649 1765 55 892 1937", " 811 224 1925 796 40 1024 368 22 952 1443 1949", " 157 50 1654 273 1462 808 1954 663 1247 1359 584", " 709 1109 512 1916 496 631 222 1159 834 202 1128", " 1960 1355 319 370 1243 53 642 1055 1645 1821 1843", " 738 959 1999 1674 454 1881 64 151 121 80 1602", " 968 2000 667 4 1727 1719 130 1112 1795 1657 776", " 106 517 911 875 1213 614 1772 1689 1271 1480 440", " 774 1072 1362 970 1467 1831 231 1004 129 422 1689", " 362 1342 88 185 1099 799 423 1603 244 1319 1498", " 1464 569 471 1311 204 1269 1423 181 690 1707 867", " 1918 516 110 721 1827 87 702 1906 905 1182 1748", " 1072 786 542 625 871 1847 1954 242 1262 1940 1984", " 1830 760 1892 1739 1986 486 1823 778 981 879 1969", " 1961 56 211 1613 1999 265 924 866 960 120 470", " 1372 1172 144 689 238 168 970 997 607 883 303", " 341 1043 1915 1869 1542 1164 1337 1516 1394 735", " 122 33 1224 140 999 1091 407 201 600 636 715 510", " 277 625 774 998 1005 1254 1779 68 346 1948 1991", " 164 1956 828 745 100 101 761 867 1810 1949 465", " 1145 824 1032 1236 1914 1046 508 1961 773 1326", " 967 1692 286 1606 217 1420 816 281 381 1381 1125", " 1199 1454 281 340 687 792"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2000;
    if(result == expected) {
        cout << "Test Case 117: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 117: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test118() {
    int numSheep = 212;
    int maxRuns = 63;
    vector<string> part1 = {"1584 1309 9 24 1574 1949 385 230 262 1100 342 36", " 1785 1792 1319 1924 533 1109 1208 1604 33 1800", " 637 369 842 530 1446 344 789 1249 1829 398 1285", " 381 968 1888 399 890 515 605 1677 1177 1774 1794", " 1232 964 1471 614 393 1450 1433 1384 762 711 1045", " 1189 1704 72 287 143 227 1806 1445 922 506 513", " 364 217 825 518 1508 536 1844 1508 764 1003 1480", " 1187 1944 71 1536 118 2 1839 470 1499 1536 771", " 490 1985 357 1555 1688 1385 1642 1994 1685 880", " 861 1817 1850 28 746 65 1908 1924 154 1334 1099", " 181 1162 1680 769 1186 125 1235 254 140 532 33", " 1562 1843 653 1630 1146 1179 266 261 1695 450", " 1748 714 1131 1250 1695 63 981 674 943 746 1007", " 1377 859 1655 870 1286 706 586 25 321 1003 1032", " 1550 1942 177 167 466 1788 479 275 448 1985 1240", " 1378 1603 1888 1594 1930 447 405 1828 577 1245", " 1312 1622 1813 581 1769 807 590 817 1299 1229", " 1121 591 371 1320 1110 632 1219 1680 1884 591", " 962 785 1035 1164 1359 996 202 889 1414 896 1218", " 508 1161 736 35 455 1011 1958 694"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 3389;
    if(result == expected) {
        cout << "Test Case 118: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 118: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test119() {
    int numSheep = 316;
    int maxRuns = 13;
    vector<string> part1 = {"1253 1778 1403 691 979 1353 1654 232 1509 1424", " 456 1820 1756 1415 996 1015 701 1629 1467 1669", " 774 1045 1410 1800 1476 1949 1543 1257 1028 1228", " 1550 1365 680 298 209 54 1501 245 1959 367 91", " 1665 20 1852 1212 1983 1538 1801 1937 1697 253", " 1986 1745 188 325 1419 899 1775 480 1393 879 499", " 1231 1921 912 324 914 327 1004 592 702 1401 423", " 1773 1709 1701 20 1631 806 1592 462 522 1663 369", " 406 757 241 38 718 704 779 1429 1846 1047 1065", " 1597 564 1575 390 318 185 961 528 510 1170 93", " 379 1918 716 1105 601 253 108 801 1032 1771 397", " 25 1996 400 1659 1977 911 605 96 400 358 1443", " 1453 492 1670 355 1628 865 167 471 1891 761 1351", " 1503 1259 250 1730 1246 1906 558 625 54 478 671", " 1440 80 1955 1089 1045 145 1847 1029 189 1802", " 899 75 249 143 1501 919 1658 1658 1188 1400 872", " 1904 1195 1093 1081 868 1466 232 1632 1371 993", " 1552 1268 720 1806 97 1507 25 1969 1279 1255 922", " 958 1579 552 1672 1859 684 1585 512 1163 962 1351", " 553 1954 296 855 1480 58 1896 175 1251 941 1395", " 1185 327 452 1777 324 365 455 1365 491 811 1190", " 1284 1625 615 1879 1592 1541 1842 657 1889 1659", " 562 89 1931 1027 576 1995 805 70 740 1675 1569", " 510 205 1564 1000 141 806 1649 1680 1681 613 1122", " 496 518 1861 1089 946 1501 982 478 1642 828 564", " 1736 711 1653 1414 325 1544 524 567 1667 385 1571", " 794 1855 590 1144 1898 1783 23 1153 304 555 1540", " 1671 744 137 1763 1217 406 170 1944 50 1333 1686", " 756 566 1152 63 953 1976 213 1741 492 8 598 6", " 700 1836 178"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 24876;
    if(result == expected) {
        cout << "Test Case 119: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 119: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test120() {
    int numSheep = 1904;
    int maxRuns = 835;
    vector<string> part1 = {"1012 1924 489 539 450 1818 791 162 1450 1417 1084", " 1841 214 398 317 57 445 1016 1731 895 1493 1301", " 1841 250 774 186 198 970 1953 1399 1254 1195 209", " 1113 1732 1867 689 850 1939 904 575 150 237 1101", " 671 968 1891 783 978 1061 119 1027 136 974 566", " 1122 132 492 586 831 928 1759 1119 824 241 1111", " 292 156 843 823 356 1693 744 39 1686 53 629 233", " 1793 1741 702 174 1220 1724 59 826 565 1981 123", " 1749 361 1972 1584 675 1444 1618 378 1223 145", " 599 601 1171 1635 1336 1421 1651 1453 1281 65", " 1371 527 1148 1160 77 1298 1458 1414 1360 678", " 338 1633 94 1914 1872 441 1548 1292 112 1974 351", " 306 1875 1042 1309 1256 49 1383 386 1834 1624", " 42 1700 181 1091 1512 857 1817 1423 1279 136 1329", " 650 560 1421 374 1036 948 1457 1313 715 925 697", " 1760 458 942 333 1355 225 1181 1708 327 483 392", " 62 730 1835 390 1898 1280 1833 1360 1322 526 476", " 1648 1995 1909 224 248 1929 1577 778 1205 363", " 995 609 774 1323 1652 128 1448 1913 698 1513 36", " 1744 40 284 1579 184 161 232 1360 1374 933 17", " 1415 449 1887 1219 1645 1246 206 758 568 751 1235", " 82 400 1807 218 1429 127 1665 1453 1395 1429 1714", " 325 1213 334 299 1202 117 1608 428 333 1649 1695", " 710 1948 1598 604 135 1974 1286 1310 91 439 1653", " 919 529 1014 441 938 1692 598 1832 1347 1691 1386", " 1111 760 892 1580 312 894 1068 863 1155 1632 1537", " 163 1960 587 1004 778 1635 573 1449 1305 1426", " 1280 681 352 115 1681 1554 1341 785 1334 1077", " 1214 33 736 209 1511 1128 1404 1862 547 191 912", " 1292 1949 1162 149 1781 1633 1717 1279 256 799", " 1455 1205 207 1968 1580 701 412 1932 6 1559 23", " 1083 1748 990 1331 1946 670 1322 594 225 1055", " 537 1934 1618 315 1071 538 1909 1619 1659 8 626", " 359 1501 1964 110 1372 1653 1488 586 1806 653", " 1593 1687 1895 26 938 575 1297 1919 729 160 984", " 50 1487 522 628 1603 867 1324 534 490 1801 922", " 544 976 22 753 362 1969 375 1022 1682 1409 67", " 76 1523 125 1775 1820 698 467 1713 970 325 1076", " 807 1981 492 1080 40 255 597 627 27 1166 1139", " 599 1974 1923 366 1930 1962 1697 1225 778 1246", " 1184 1552 1950 1416 842 1744 398 1443 853 828", " 246 1886 355 396 1606 1777 662 585 1934 1446 504", " 1831 265 1557 762 609 823 271 1035 284 1712 304", " 763 1845 1637 1039 1841 1404 1305 1800 1434 421", " 1808 1708 435 780 1910 550 393 377 1891 1186 1582", " 1332 1262 1721 1071 955 1552 624 1268 1730 251", " 706 1223 1370 171 1419 1448 133 1243 342 1153", " 137 1018 697 54 947 415 1744 1183 798 219 135", " 1321 1380 879 172 233 371 30 1940 291 692 1204", " 60 90 505 1847 1395 569 948 1660 1383 337 1952"};
    vector<string> part2 = {" 445 1037 244 1386 1242 1493 818 79 253 317 1377", " 1965 1027 1061 1522 306 712 1202 1041 1322 1234", " 1495 1246 567 1969 1409 842 817 469 146 1204 1713", " 1968 48 309 1912 1901 383 504 1557 1106 588 1374", " 103 82 1451 1792 1776 902 1300 1959 331 237 1049", " 1689 1983 1457 1196 1412 1571 1740 1838 784 1908", " 1547 1579 288 598 1138 212 1802 1976 1665 637", " 1671 1371 581 696 1324 740 1681 113 1914 687 1502", " 1516 1540 1046 240 396 1391 995 476 1653 1534", " 435 1383 1380 1727 539 321 462 1391 1023 434 982", " 1669 65 1987 291 446 566 1440 1425 821 847 12", " 135 38 535 325 1177 1395 1432 602 1694 726 1364", " 59 501 1368 624 48 595 1073 1491 925 1744 737", " 1040 1460 1252 142 1727 1115 316 95 1827 1215", " 1057 777 792 265 843 1544 1483 512 817 1056 1871", " 399 52 228 1229 1545 61 1766 811 731 340 209 1408", " 320 1507 1284 871 490 1002 1583 1666 1648 1492", " 1235 1105 1155 458 693 1540 1221 1558 1267 1309", " 76 1051 1595 521 1267 1987 1976 1360 1219 553", " 1693 75 1584 968 327 53 1590 227 942 661 1382", " 23 1245 1404 939 1758 1667 250 978 1205 1529 1669", " 1769 1808 1188 1693 1831 717 93 617 1837 1766", " 767 1430 1195 1995 80 1202 1286 1103 1028 900", " 1113 1986 1759 254 1801 1775 330 1285 1422 1958", " 360 352 1774 1933 1001 960 12 1811 1166 1007 1345", " 1429 1277 1964 26 164 776 1189 227 1574 969 1958", " 465 1164 849 866 774 1605 978 110 1889 1537 633", " 630 628 1705 528 1563 1050 44 290 1290 1512 1821", " 1808 579 1107 1803 1460 455 675 417 1861 1507", " 1991 559 474 1389 201 1480 1714 1677 1411 1039", " 1108 718 1714 1163 2 533 346 1874 755 1937 1722", " 821 912 1811 1169 617 1071 688 1600 6 1535 404", " 1938 1155 180 1082 1435 929 1844 265 413 614 128", " 1169 1728 1485 1623 855 1458 1277 1127 1293 1133", " 1143 645 149 1401 596 896 1143 1122 14 97 833", " 251 78 629 607 1442 1078 1406 875 1014 559 1462", " 246 375 1910 1094 1144 1180 371 167 1573 683 1562", " 567 1105 853 645 878 1253 367 1250 1617 1 1497", " 1513 1606 1268 200 1889 713 299 1030 387 927 1318", " 205 510 393 1201 928 29 219 1938 923 1222 973", " 286 1804 421 546 1857 1009 584 440 605 1476 252", " 1551 546 997 152 45 352 438 1128 1761 1161 317", " 957 694 618 581 1571 747 1419 646 99 129 1717", " 230 490 1780 1203 1568 954 1341 1900 916 1375", " 951 1793 1199 1029 1954 1410 141 1960 1557 726", " 1580 987 678 314 1715 301 334 457 258 234 1337", " 285 1964 942 1884 645 802 431 1674 167 1170 411", " 488 1768 720 975 1423 1802 1507 41 258 69 1716", " 1937 1297 1162 530 1204 686 131 1177 1265 1870", " 367 837 8 209 477 1857 1614 453 406 1589 566 888"};
    vector<string> part3 = {" 1408 479 45 13 1184 1297 1749 930 191 220 1509", " 703 593 1691 478 625 930 131 433 967 1362 841", " 1439 1533 1635 117 1009 1735 1712 917 266 1536", " 1984 1781 1897 1716 699 430 1907 1755 1964 668", " 1168 1320 1064 789 1541 1328 1982 1927 274 910", " 159 128 1437 214 160 276 879 1544 670 59 685 936", " 1713 937 1482 28 52 594 1323 806 899 413 1051", " 307 1286 344 1791 1090 1054 1917 461 1177 510", " 547 1113 501 1804 648 624 176 119 1918 1913 1944", " 1450 1571 1656 1181 1202 1797 1253 1739 685 1350", " 1052 25 1764 573 1542 97 859 1997 1960 753 1350", " 873 1867 225 190 1016 476 1127 1459 1254 788 535", " 1460 1084 267 447 1134 816 168 98 114 1759 205", " 1410 26 1083 1857 883 444 608 1341 126 175 811", " 1243 644 814 13 731 164 348 524 1064 1807 1879", " 1258 603 761 319 1050 222 1778 1689 1857 1604", " 1830 1087 1946 247 338 1034 269 770 520 275 1760", " 1537 1829 118 1581 1285 560 696 1414 12 1974 1018", " 583 944 868 94 364 319 1332 250 1779 715 1389", " 1291 1394 1442 1236 28 812 481 663 423 512 725", " 971 411 211 866 19 207 239 1816 1605 1062 1931", " 1474 1480 211 13 1809 129 350 1133 760 462 1704", " 588 1849 242 1931 1845 1537 482 422 1091 1535", " 1919 1416 164 570 821 378 236 644 1155 370 1949", " 441 1277 517 485 493 1423 109 1608 405 930 715", " 383 1396 835 655 289 1369 1714 630 1378 375 105", " 1491 554 22 910 961 1111 1880 202 1943 597 158", " 1979 349 1660 155 1590 126 971 1305 1105 1439", " 564 155 385 287 376 1475 527 1663 20 869 848 1636", " 1804 1212 37 1963 727 588 1904 652 843 1303 1273", " 1602 347 1027 128 106 766 252 1107 1546 1842 1718", " 146 788 1648 182 593 1626 1522 1858 1054 1796", " 1810 965 1156 1184 1877 584 79 1546 40 1390 1584", " 429 1049 1790 1651 392 1849 870 1024 1732 1089", " 1357 1727 1525 1427 1418 624 1951 1618 628 281", " 1483 389 938 1953 682 1047 1364 125 1081 1779", " 1225 72 1701 1198 338 1128 1505 389 1615 911 1414", " 873 793 1088 1275 1880 1175 531 325 1438 453 1674", " 1456 828 1153 389 1838 1656 408 98 1584 500 754", " 169 1155 1155 1321 647 604 329 1007 1098 872 691", " 496 77 1917 184 1045 195 693 1038 1051 265 1276", " 495 164 1159 1223 509 876 872 791 420 1983 43", " 1247 1439 1529 184 1490 462 702 647 1569 966 1851", " 893 1044 361 988 1304 22 1704 592 206 982 1303", " 1658 465 267 880 681 1973 1847 1066 1754 1061", " 224 1034 508 67 1371 1355 884 1359 1066 1819 1763", " 394 1351 214 725 1978 1073 1350 1226 768 951 11", " 1386 937 354 968 645 51 1768 1278 506 1632 1822", " 1085 1017 207 94 888 105 1769 1642 760 1278 250", " 1711 84 1878 609 397 1584 1555 41 502 1619 1166"};
    vector<string> part4 = {" 1016 197 669 1114 1336 1746 441 1510 133 1107", " 1663 263 710 916 253 518 687 1370 535 197 1254", " 100 1165 136 1092 499 1708 1394 1071 1596 743", " 1949 1110 1996 504 1342 1949 379 1249 104 441", " 628 536 672 1726 500 419 1569 887 113 1280 305", " 1621 205 1656 20 525 1211 1188 1775 1419 1297", " 1008 751 363 974 992 1803 1897 606 1713 759 1943", " 732 865 347 64 1847 1201 1844 1882 1224 57 1529", " 1617 1587 605 880 1810 156 1183 1410 1605 380", " 1349 652 191 148 509 1720 6 609 1614 1707 1222", " 1248 1041 144 1651 1204 191 1685 1456 615 860", " 548 928 909 837 1670 1516 1679 246 531 964 726", " 783 332 441 1557 1432 1228 522 1372 354 1084 1133", " 1339 848 1367 1233 388 294 110 593 1685 144 1260", " 60 548 487 1404 1251 683 160 1514 722 390 869", " 839 1538 1498 759 449 510 825 36 1858 37 883 998", " 536 976 159 1725 661 1781 394 526 776 1403 1983", " 1003 1468 1358 329 869 1487 1685 1301 1711 1749", " 802 1290 1957 1950 1690 1069 684 1525 262 320", " 668 1851 169 380 476 1252 547 959 1549 1120 6", " 1639 1610 540 919 1568 477 26 1318 1562 725 1774", " 129 46 1415 283 1366 1778 1027 718 1640 348 1193", " 1032 148 628 1388 1858 853 1084 917 1836 964 1044", " 1610 1670 516 841 1553 691 669 1918 640 1691 615", " 1902 1687 448 265 1872 176 899 739 684 1301 1943", " 1209 814 307 55 929 569 30 148 799 1901 1622 737", " 702 1147 1288 722 210 984 1959 1106 91 481 252", " 661 397 1839"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2256;
    if(result == expected) {
        cout << "Test Case 120: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 120: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test121() {
    int numSheep = 252;
    int maxRuns = 86;
    vector<string> part1 = {"489 1969 928 1795 700 250 1743 1932 753 1728 1613", " 1787 803 453 301 1743 874 576 460 1553 34 461", " 1430 1968 1823 818 1960 1110 1917 709 1586 590", " 1340 1404 1072 1530 1500 917 1001 1488 805 1768", " 1399 1221 1627 1594 872 1677 896 1923 596 1825", " 1226 1794 1937 802 198 1567 1507 989 1453 193", " 455 720 1671 530 226 924 29 1663 1910 571 675", " 836 501 1060 1573 1304 1177 1484 865 421 146 1871", " 742 747 417 1216 1947 4 406 957 1380 75 981 1815", " 1456 1609 94 752 614 1392 1645 774 1938 1788 1615", " 1871 1274 791 1014 1493 1221 636 1758 1172 334", " 254 1489 1697 1030 442 216 1598 296 281 484 1179", " 369 1051 1804 1199 1664 1841 423 1480 938 393", " 860 559 1296 1631 1688 1823 101 1890 736 615 763", " 389 664 1758 1566 871 83 1207 883 1733 1947 213", " 1010 318 1764 1089 593 1112 1660 329 1875 1169", " 1174 1739 1362 696 935 851 568 1949 432 961 1172", " 983 1261 1167 139 1268 733 417 829 22 932 269", " 1369 1484 573 653 1203 1374 1508 291 1414 782", " 611 1132 965 459 1531 1208 1846 1031 853 1913", " 945 539 1801 1019 1493 362 1087 35 1900 36 661", " 1562 672 1676 416 764 1534 1627 1158 1515 1146", " 182 1116 634 611 222 219 87 856 1335 1128 280", " 1547 859 612 1898 69 255 1345 278"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 3077;
    if(result == expected) {
        cout << "Test Case 121: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 121: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test122() {
    int numSheep = 1178;
    int maxRuns = 263;
    vector<string> part1 = {"1399 725 302 1397 1829 1701 937 472 1004 252 359", " 1235 984 1244 419 426 16 936 1445 1509 737 278", " 1753 1806 918 645 466 573 1899 769 1518 486 145", " 1253 1804 1441 4 385 844 107 940 236 966 1787", " 401 907 1053 504 1907 1458 1621 649 1048 298 883", " 1612 519 1892 980 619 1956 1469 1857 395 1869", " 1363 1185 743 949 1143 1231 1262 1599 995 878", " 136 1901 206 186 1790 1609 1918 624 603 1781 605", " 801 109 414 62 835 1216 614 818 441 1437 1809", " 1063 1845 991 864 176 619 567 1885 314 1399 1793", " 374 366 1105 454 1117 67 319 899 1007 102 1452", " 1657 1876 1068 1416 566 855 823 1297 965 1942", " 616 1648 321 1996 1860 1607 1184 1901 1769 761", " 718 594 1250 874 1959 1622 1450 265 1513 1455", " 1870 1323 1752 1377 614 1803 388 1248 1973 526", " 1625 212 1614 1387 853 482 1978 571 176 1257 1191", " 125 855 1226 899 1102 904 587 1402 1719 405 1437", " 1628 679 723 893 195 2 82 1480 1859 10 1666 67", " 1602 1245 1620 1578 1418 1199 366 1831 205 1114", " 1363 981 457 1476 1955 981 1212 1328 751 1153", " 1737 1398 192 1440 795 1719 1800 1897 714 1708", " 168 1227 684 1103 404 428 13 492 948 1472 1922", " 1977 316 765 11 1460 1839 972 1799 1740 175 1155", " 1197 1602 1688 465 1959 49 1838 889 1409 124 1044", " 1379 1987 71 1438 1759 1467 1994 249 764 783 1425", " 538 1064 290 598 420 1768 500 1459 750 1114 1183", " 1027 500 1689 1951 553 780 274 529 1843 1804 180", " 896 1119 1403 189 892 1327 1589 1795 1948 1866", " 835 719 1125 1747 1322 1777 747 1454 1298 1824", " 1511 1647 1818 800 362 949 122 1450 1762 456 26", " 326 1354 1679 1729 1452 806 1893 192 1388 1136", " 1100 160 458 61 2 1609 910 227 1620 1556 1963", " 1870 288 1364 526 273 655 1808 1241 1899 1635", " 884 1713 794 109 1994 101 1604 1171 1346 1872", " 323 624 217 897 513 1612 569 1353 885 781 13 1028", " 892 1086 1224 795 555 1247 1303 521 980 365 1156", " 509 440 931 60 1648 1852 417 1171 1543 511 861", " 694 1467 1770 1064 930 1256 456 1922 836 1938", " 1544 1951 1088 271 1873 1996 981 48 614 941 912", " 1617 1003 1897 1937 884 1991 968 1387 969 489", " 1931 1424 258 1295 158 412 740 165 490 1408 1199", " 507 1341 1939 657 843 334 436 472 585 667 1362", " 679 524 1381 383 1259 1868 1935 1779 1918 539", " 1347 1757 1708 729 6 639 964 1331 861 1867 433", " 333 1327 1128 858 944 157 1242 23 852 1696 241", " 1301 530 1457 608 107 1507 511 497 1966 1501 1852", " 1495 1378 1280 1033 1300 1058 1227 803 492 385", " 213 222 73 1282 377 1522 657 358 1712 723 1189", " 900 341 1893 1035 349 38 1198 1758 1888 471 814", " 116 1179 635 1438 145 884 917 1781 315 919 747"};
    vector<string> part2 = {" 417 1021 1073 365 644 687 1180 405 988 374 555", " 1535 615 536 1257 1530 1046 1843 429 1568 834", " 1854 1681 1587 1037 64 1043 1256 1723 1583 1019", " 1944 1616 1356 878 1925 1435 254 1619 810 1811", " 1564 1156 710 1249 1967 1527 1162 111 166 605", " 1936 1903 620 1802 1103 1887 471 1175 125 1947", " 994 789 1684 68 1758 851 1096 1503 1029 1617 215", " 1057 895 789 258 810 1096 670 284 1599 209 1704", " 976 941 309 48 1256 891 1152 1352 1659 703 1691", " 684 1254 1331 971 342 1407 617 363 1775 1781 365", " 1799 1048 828 315 1211 856 120 1424 1514 214 1416", " 1333 35 809 1829 1961 1489 685 1019 1934 803 282", " 119 1511 107 976 1713 241 362 1045 76 1456 76", " 1795 92 1402 48 1067 1607 1882 1995 590 1935 1854", " 1821 366 943 1858 164 1488 1156 512 672 1045 846", " 24 1879 1881 1591 1997 41 267 1843 128 822 1326", " 281 641 1023 1712 481 275 1627 1865 542 1744 1211", " 1350 894 1885 224 343 511 1006 555 789 948 829", " 293 153 1945 439 400 1096 931 1191 1502 211 1580", " 1064 1536 783 1725 1989 1986 735 732 1635 1429", " 1515 1385 1890 1549 571 83 607 1228 916 1809 734", " 958 391 398 582 1655 614 1364 765 410 1288 268", " 1862 1436 1391 660 1415 1480 936 562 624 915 963", " 1529 1033 83 1460 1897 508 1148 1017 684 787 1851", " 1164 366 835 1238 1483 573 1049 1907 599 578 387", " 553 538 1245 1330 1348 1404 1576 734 557 919 773", " 1787 137 1337 1465 523 1985 1499 1309 885 242", " 80 1827 532 261 256 1862 787 1490 454 1605 1223", " 1168 806 1153 1981 432 114 1109 1382 1996 495", " 278 1167 89 500 90 934 628 1123 222 1467 237 715", " 1474 243 1821 1837 1944 35 1181 1133 1630 347", " 10 668 1160 2000 868 244 1521 1214 1782 1155 1843", " 1502 1147 1211 869 181 414 73 1668 1517 1074 1845", " 566 392 228 1481 171 1857 1374 1654 260 1894 1021", " 1716 681 1491 1926 1240 1429 1504 1220 714 1909", " 895 117 7 1153 398 662 1349 538 1332 523 821 613", " 1402 1011 1870 70 1702 60 1304 1361 1232 899 1893", " 540 175 943 519 9 1988 527 414 19 1066 640 160", " 551 1883 1139 1838 357 1287 1487 661 151 321 1379", " 962 1810 1258 1758 106 1818 1122 483 1033 1738", " 315 855 1769 1156 97 1437 1541 198 1207 1188 446", " 1231 628 63 1550 528 766 1397 1419 1973 1893 1754", " 1678 1430 291 126 53 1545 18 1365 550 379 720", " 1126 1877 1327 655 1367 40 1574 1663 1834 840", " 1616 783 865 1611 161 1233 1591 1888 199 1327", " 1314 1754 379 1115 1651 177 710 1307 1584 517", " 1510 1972 1893 772 770 950 1414 974 1146 1481", " 712 360 1154 1734 961 734 1472 233 1932 828 1668", " 1221 913 1278 280 121 885 1174 808 1298 1166 1358", " 1284 273 1818 351 452 894 193 225 1627 93 1559"};
    vector<string> part3 = {" 1988 1550 720 214 1055 1319 1549 652 1270 1781", " 1106 1089 993 1862 1478 748 315 1288 465 1046", " 617 29 1599 1167 476 1901 400 767 631 832 708", " 944 213 1068 1446 938 293 1963 1814 47 216 657", " 1435 665 1997 1565 665 224 74 158 511 1680 1421", " 712 468 1802 819 1670 772 1114 314 1986 309 265", " 1490 1459 79 660 522 1846 1739 781 168 513 1898", " 609 504 164 474 361 889 1985 997 1204 323 1709", " 1946 1653 718 567 1472 1961 48 952 1496 524 1317", " 1036 643 124 1700 1280 276 1582 1135 1052"};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 4583;
    if(result == expected) {
        cout << "Test Case 122: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 122: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test123() {
    int numSheep = 806;
    int maxRuns = 640;
    vector<string> part1 = {"1083 1844 1009 1343 1009 521 1482 1434 692 1269", " 1944 1479 1315 423 1198 20 1730 1771 1110 1552", " 1620 1598 1162 1291 140 1985 1993 1243 325 1467", " 1400 1392 189 1732 151 651 1881 383 150 474 550", " 584 151 1175 188 863 37 915 1607 355 838 1245", " 601 1970 1053 1335 1578 320 1699 458 753 1046", " 1383 1016 632 1293 1859 1363 1691 139 417 573", " 1505 1949 1566 399 719 1766 1774 254 1049 791", " 912 1098 730 1536 659 1881 1029 1285 585 916 1869", " 1028 619 1344 338 1702 637 160 125 1684 1092 1961", " 1823 1837 965 710 1493 805 352 93 1310 1503 108", " 977 911 1167 788 233 935 57 83 1746 1391 1982", " 1900 1424 1125 472 302 1787 1609 403 1910 87 582", " 591 741 964 1829 1907 179 472 1999 1397 1283 1273", " 1090 1527 873 1984 86 1684 938 1066 1008 731 1715", " 1985 1159 59 1213 1818 837 704 1071 848 1055 732", " 292 1617 1321 25 287 1111 308 478 1068 746 410", " 305 1577 868 1627 1389 741 134 1448 356 711 41", " 192 1558 1042 967 1706 322 168 1354 1026 1419", " 333 725 1527 1135 1709 482 1621 1397 1408 1756", " 1822 677 956 1375 126 269 92 1804 639 1728 1233", " 1985 1402 1937 1542 1704 383 177 488 703 7 1685", " 885 872 1512 1004 100 738 1369 976 1558 1960 1943", " 1914 1531 903 1431 827 440 1462 12 744 1783 961", " 1547 341 704 1639 1006 1286 247 1670 1558 274", " 518 1314 1076 889 812 1245 1642 1911 86 612 1197", " 1241 1213 374 1581 976 1472 1627 1737 1556 1331", " 98 509 554 136 1211 1981 153 590 246 358 265 1111", " 1068 1523 1373 1662 589 878 1843 104 105 439 1674", " 1146 1619 202 499 1260 1650 1484 107 1469 666", " 1286 1767 455 924 1685 1073 356 1641 1745 147", " 1856 1516 124 1761 321 1800 638 748 501 591 1567", " 788 331 1222 36 125 117 181 1662 597 1019 227", " 767 1045 1892 881 1230 1367 545 278 1869 1351", " 1258 411 1193 380 461 1896 833 1545 1780 1359", " 1211 1647 1767 1446 180 918 434 1003 183 1787", " 967 484 655 396 919 1556 768 1074 1853 1797 307", " 1646 828 1266 704 1655 1147 339 33 1027 1453 1759", " 1972 340 1846 1773 386 1653 1915 1964 926 1925", " 1225 660 80 1395 88 1180 114 1099 369 1518 1450", " 1743 926 263 1210 426 1906 1043 388 161 1113 1977", " 1954 747 656 1666 757 210 1576 1744 1277 283 1399", " 893 520 1634 32 1889 894 297 1412 745 348 227", " 457 1348 463 1628 122 1903 1172 1788 895 1795", " 765 235 1678 269 983 647 1442 1855 122 1155 491", " 1302 1040 738 390 1883 1466 85 1695 766 1631 1858", " 404 831 182 1222 716 1263 1543 155 1479 599 749", " 1501 391 710 1406 889 1152 1409 318 1400 1964", " 455 592 43 1651 1427 1391 135 857 1781 588 499", " 1991 1394 1897 655 1695 683 1014 919 858 1068"};
    vector<string> part2 = {" 217 1960 132 566 1491 1043 587 351 993 592 1443", " 1671 16 1524 1310 1151 1269 1142 1770 742 1323", " 1726 59 244 1566 1168 1531 938 216 1608 335 249", " 522 1589 236 1859 1518 1083 9 1455 474 867 1015", " 416 1736 566 1711 520 899 1595 1930 281 596 1453", " 1223 957 1422 256 392 1254 1367 693 526 1256 216", " 620 1895 1366 1959 393 1924 330 899 1386 1392", " 905 831 1657 1742 1063 355 237 530 1014 287 1765", " 1411 1941 1201 744 607 71 873 982 1824 1568 1355", " 1076 1533 1543 101 534 148 185 66 797 518 1339", " 1198 227 836 674 1211 837 1689 6 1859 161 1095", " 436 1071 1407 1431 275 1959 997 1467 1961 1499", " 469 1735 63 1585 938 575 1058 1584 307 498 828", " 1389 1119 968 1778 1476 1418 455 767 1433 775", " 828 1282 1007 1582 1817 1507 201 1127 938 1579", " 175 104 780 1044 244 908 1647 1055 1029 149 827", " 1701 308 1507 194 1472 966 101 1573 331 713 1615", " 937 1383 954 397 875 319 1831 1639 98 398 1952", " 1845 340 592 1187 693 348 646 1177 1275 1770 1038", " 747 1512 1883 611 1464 1422 714 1104 1291 402", " 1831 1243 361 1699 1415 15 664 971 1053 1690 1063", " 1507 1320 25 1721 1180 508 369 1379 1499 1909", " 1600 1081 661 1178 418 1492 780 942 1016 1111", " 424 461 198 642 665 405 812 1942 971 1986 1864", " 313 235 15 345 1197 1898 1433 359 653 1824 1366", " 593 1575 1587 1767 1719 304 295"};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1999;
    if(result == expected) {
        cout << "Test Case 123: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 123: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test124() {
    int numSheep = 554;
    int maxRuns = 442;
    vector<string> part1 = {"772 680 323 1184 1949 1190 507 444 951 128 393", " 1390 1713 661 417 1303 390 246 810 1583 1821 576", " 117 1979 845 633 954 633 1429 649 469 973 923", " 811 225 1665 1476 1267 83 1561 1636 802 315 341", " 6 744 679 794 1661 1337 1336 1843 140 340 1832", " 628 1395 480 284 416 1595 775 1607 1883 1637 1560", " 1520 546 1613 839 885 1561 293 296 1103 85 1439", " 396 647 1004 1258 619 1786 1002 1137 723 649 934", " 849 1983 1380 852 1802 1868 1513 427 1335 616", " 407 953 257 411 359 758 337 1787 1885 1895 997", " 1626 1868 1796 1781 483 248 60 614 1126 1328 199", " 1646 1407 1179 861 1785 909 1425 1845 1564 1538", " 94 688 808 743 883 983 1074 322 638 801 1168 1626", " 43 714 182 426 1819 1313 33 1668 1859 945 1188", " 888 1160 1427 786 1909 1514 289 219 63 1870 77", " 634 386 529 211 158 662 1881 1741 1176 1219 1038", " 54 836 887 441 1425 1436 566 396 1675 1385 737", " 115 366 11 1898 1641 1431 315 1798 798 586 607", " 148 1527 1940 830 1902 1910 178 1748 1646 412", " 560 936 179 604 1588 1293 755 482 573 342 1907", " 1380 1094 1405 933 1064 1087 757 529 22 974 1870", " 631 1807 1345 1754 83 1102 711 814 1010 190 960", " 1562 1253 1340 1667 349 196 1662 1343 1746 1989", " 372 1859 720 93 1502 1825 801 1141 1999 832 2000", " 1456 1456 818 1177 1885 376 1238 1340 136 1786", " 127 1378 1238 992 1284 851 177 103 1065 1175 1216", " 1514 973 603 714 835 662 55 700 960 890 846 970", " 1491 1967 1237 1091 732 22 1031 872 1546 1219", " 472 1901 1984 432 1481 1937 437 1107 555 1995", " 847 1885 1512 694 1408 596 782 446 1217 1171 525", " 379 622 848 1652 1965 179 623 791 857 742 309", " 515 884 980 1936 1493 44 688 1749 936 607 649", " 569 637 646 956 308 1600 722 858 1763 1128 843", " 1260 1501 799 341 1571 1737 1331 1523 1108 686", " 1533 768 1029 1450 1808 1324 113 487 1716 1507", " 50 1371 371 1749 144 1695 1939 1281 820 658 1942", " 83 1202 415 1870 224 311 1356 1029 1024 543 388", " 1436 11 1418 232 1154 87 591 1569 951 1025 1490", " 1465 914 969 1330 635 192 1283 1814 376 62 1307", " 1946 1292 249 569 1572 1072 835 837 1100 369 25", " 941 283 368 1459 1973 467 155 283 894 415 861", " 898 1994 572 1458 799 1295 1865 1805 1785 282", " 683 1517 1367 662 612 1309 134 1165 532 795 683", " 829 769 780 154 879 1779 1390 470 1028 1123 1166", " 1994 1841 1318 938 87 1757 772 1897 447 1801 1997", " 1226 1314 1199 766 859 1814 1533 1520 588 1916", " 1588 403 451 1408 956 1193 1632 162 907 1685 51", " 1075 246 1478 1837 738 519 1183 437 1048 1375", " 169 1772 1760 1821 378 1043 267 192 440 1579 114", " 1770 1417 732 1662 149 1837 923 357 26 254 22"};
    vector<string> part2 = {" 517 1504 1126 594 854 1602 1522 1575 1163 613", " 1942 649 1034 504"};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2000;
    if(result == expected) {
        cout << "Test Case 124: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 124: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test125() {
    int numSheep = 1105;
    int maxRuns = 560;
    vector<string> part1 = {"1826 351 1255 566 427 1809 1786 658 533 53 408", " 1914 1525 1950 968 1704 1261 1633 1820 137 294", " 296 802 610 1452 411 584 935 682 1660 275 169", " 1144 402 1200 1808 1058 1929 460 474 1499 1496", " 322 579 738 1539 1044 885 1812 593 1212 193 546", " 113 243 719 996 985 1905 1139 621 1967 1062 640", " 1553 747 1704 273 1013 940 1566 614 1415 939 1693", " 1132 1214 1789 97 1184 1170 796 1422 181 1870", " 440 503 852 869 1050 687 1315 515 186 1854 9 374", " 546 102 1841 1309 290 486 349 351 821 1231 861", " 1279 68 214 225 351 1081 1497 987 403 759 1334", " 408 1223 1272 968 1840 1267 103 1490 411 622 1247", " 849 567 1969 1491 110 744 1613 1728 1537 1695", " 879 576 524 1423 1603 432 839 1067 1128 1381 1991", " 579 1443 1226 373 961 789 796 1548 1007 241 442", " 291 380 633 1655 60 351 1128 995 1563 202 966", " 345 1819 1682 567 1818 1198 590 37 1449 1700 1119", " 303 472 1182 799 1842 1251 642 748 1335 475 1122", " 1383 717 1959 1928 1048 1289 1174 149 357 571", " 1239 235 467 578 957 215 828 1971 1709 723 961", " 1046 1018 26 418 961 979 1822 75 473 139 1158", " 1553 1414 1177 348 206 647 497 951 9 1270 1491", " 35 1498 1901 1714 1882 1228 776 968 989 1908 301", " 856 1891 1521 1530 628 1174 756 1614 1904 569", " 274 763 454 382 215 218 1180 280 1950 1183 1859", " 829 286 494 705 78 1879 1151 1634 1770 478 1934", " 1194 1647 1684 1174 142 1986 46 1182 1763 178", " 1105 1348 1463 136 492 410 1887 337 842 511 1473", " 1887 1832 1711 995 1037 1508 1565 947 1233 983", " 1664 152 519 1893 363 1065 1820 690 1762 1389", " 392 710 298 1010 448 244 1328 1266 138 760 1229", " 1827 1522 1695 600 862 1341 252 1804 1747 1356", " 1992 1211 602 1619 1305 1652 541 970 295 865 1668", " 740 1931 52 1201 127 936 1235 1645 1355 878 1393", " 947 782 924 671 572 231 887 963 1706 1313 633", " 456 632 411 955 1062 546 1238 1653 1700 1170 638", " 245 362 1738 1484 1823 1628 1337 12 853 372 455", " 683 1895 62 531 531 364 683 1792 553 1521 670", " 11 710 1281 1003 352 1622 886 1633 1213 1854 543", " 1525 1927 1105 1650 625 1868 484 676 541 345 512", " 1703 141 1437 952 739 682 877 492 296 1590 1257", " 990 595 1658 1599 163 1136 1730 335 507 1582 1612", " 1135 4 953 44 447 1036 516 1124 672 1526 1237", " 898 896 1792 1013 1690 361 1586 1928 646 1036", " 73 154 1755 295 100 267 1214 1983 607 301 1079", " 1098 1006 827 1397 1499 1820 412 1889 323 486", " 408 791 502 769 1290 1283 13 1955 567 664 1066", " 368 1086 103 977 1715 1472 1774 1124 48 1042 1855", " 847 1367 320 1586 198 1036 1349 1149 1788 1653", " 152 1971 1526 420 1849 1580 1663 758 461 164 1677"};
    vector<string> part2 = {" 939 1926 517 547 1254 198 1721 872 775 485 714", " 1016 615 1810 1517 1402 1844 646 528 1618 494", " 1663 1983 760 1169 379 477 744 1428 1347 592 1483", " 1969 1851 1662 743 934 151 1367 626 1692 559 979", " 604 550 1926 1950 414 683 1336 960 1965 280 1459", " 66 372 560 1671 1486 1057 1061 752 1094 782 1996", " 1908 1512 131 1243 360 1649 698 982 1224 1279", " 1907 635 327 107 521 1419 1555 1927 1813 1946", " 780 388 1586 488 230 1592 160 1329 462 205 1853", " 1138 858 1053 113 173 1811 1197 1848 255 455 792", " 821 911 1690 1374 229 266 846 1452 1746 1005 1891", " 1582 1770 1970 896 1393 751 1568 1282 1694 1120", " 1708 1332 884 1687 916 48 342 1588 701 1029 5", " 1307 618 1722 366 1721 1793 930 407 412 633 1616", " 134 1508 679 1452 36 357 921 582 1184 62 66 1067", " 1078 1151 1703 407 801 1878 169 666 718 459 1732", " 1149 1556 397 1687 630 673 60 1814 266 1766 136", " 333 1555 1974 106 1733 1218 1067 305 1227 743", " 90 704 1199 942 1528 1127 1323 1260 508 670 965", " 955 647 1177 294 1715 209 536 1964 1178 1126 670", " 844 268 673 421 1852 302 360 1456 1329 447 152", " 1842 1876 1808 866 189 250 1046 1030 1932 68 686", " 1503 357 772 1056 752 985 1538 1015 1021 1343", " 174 1296 1212 96 1398 272 237 340 90 139 41 124", " 174 339 855 1441 1856 1198 485 302 763 139 916", " 1753 171 1702 1652 152 1729 394 723 65 1705 518", " 1680 1986 155 291 644 1459 1119 1189 612 1480", " 1733 736 928 172 931 765 1151 970 1968 604 1375", " 1629 657 1340 1735 1147 929 490 128 1037 1639", " 1687 244 547 1250 77 1845 70 1912 1602 961 669", " 768 1918 516 116 1388 202 318 1658 1644 1465 1527", " 1929 1518 1835 1441 1148 570 736 365 604 830 1962", " 1616 1835 1477 1606 103 1109 781 797 1336 52 392", " 1829 1675 1763 259 141 122 1220 1254 58 1717 582", " 1164 1387 1752 1393 820 1123 1953 325 1254 376", " 588 1970 1898 1880 610 264 693 828 226 515 293", " 207 158 1279 1696 1552 473 1042 1464 1046 447", " 266 1585 1907 1430 1492 1046 1133 1876 511 473", " 905 961 1137 314 1688 1950 1368 506 1159 1430", " 1619 1359 1042 644 1586 202 1113 597 411 440 581", " 1919 1039 199 412 82 1116 426 1267 1279 1156 1933", " 164 614 1422 28 1313 1172 539 1122 663 828 684", " 1214 118 1509 1746 1403 1376 1797 1911 1855 1840", " 1261 475 468 93 325 305 566 1823 232 699 1436", " 1874 1508 1442 1082 1592 1483 43 102 1316 1309", " 1398 1754 244 522 1113 41 766 386 189 117 559", " 527 1368 49 783 1622 395 1347 1353 506 331 1436", " 698 609 645 1482 1624 1019 126 1662 805 1376 282", " 842 484 1914 1182 1981 1419 1523 1799 1138 1193", " 703 1420 1413 954 1213 321 152 200 1258 926 1974"};
    vector<string> part3 = {" 1173 967 1616 1046 1527 381 1790 1297 1155 1774", " 222 1847 925 77 969 207 1806 144 1052 798 1527", " 1700 1857 154 1253 419 621 335 965 882"};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1996;
    if(result == expected) {
        cout << "Test Case 125: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 125: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test126() {
    int numSheep = 571;
    int maxRuns = 104;
    vector<string> part1 = {"233 484 445 1560 1410 1465 101 861 636 105 679", " 1099 1634 822 575 1265 164 1248 832 1127 814 1750", " 1432 1566 662 1982 40 1161 570 887 1794 668 1978", " 1852 1779 1476 417 668 948 7 538 1992 1420 765", " 1857 284 1016 911 647 1841 1405 1215 410 34 188", " 1833 1877 1454 72 808 1443 1710 1285 363 1162", " 104 257 1513 389 1299 247 660 82 1851 305 714", " 766 935 590 721 846 969 1333 964 1983 726 1321", " 1705 64 1847 733 998 158 431 1114 787 928 766", " 558 448 1653 1638 119 1578 1947 1228 753 1355", " 401 704 636 112 703 224 1729 1231 548 1898 1574", " 680 320 1457 720 299 900 1154 553 10 22 1800 691", " 1520 681 1548 92 531 1181 241 738 1718 1858 1407", " 360 1043 995 238 425 103 1873 1206 796 333 877", " 388 521 1743 299 1407 1820 650 19 1436 919 130", " 1001 1551 1405 134 895 675 492 1301 842 748 682", " 18 98 74 116 292 174 497 1778 1088 1264 1175 1647", " 1755 508 302 232 634 1791 1411 1763 1837 285 1749", " 98 316 1803 1354 40 992 575 782 395 1157 453 606", " 219 974 115 1668 417 74 1839 1395 331 1222 287", " 70 1288 1971 882 660 1535 1433 1421 1367 1461", " 780 1448 1069 1662 1374 1498 382 1395 821 98 1136", " 405 1022 1576 1271 785 1570 100 592 901 424 1453", " 64 354 908 1828 1625 1570 334 50 749 347 1774", " 974 886 1893 1495 1732 1381 57 1449 1907 9 139", " 1467 1654 210 1593 864 837 1046 404 874 732 1988", " 974 541 301 1784 228 421 1490 127 1327 394 1589", " 1067 1830 1027 1379 1656 326 793 1582 768 1444", " 733 1891 509 1730 557 1676 541 1680 1475 838 202", " 1333 46 1573 1818 126 501 742 84 1303 281 1333", " 149 824 1339 993 1746 625 382 1661 1231 1065 13", " 584 1311 419 560 1839 364 130 59 162 1882 255", " 840 212 375 440 311 1094 326 891 82 1383 172 1252", " 1030 1573 1002 179 590 279 1948 305 1586 1406", " 881 1829 561 1384 1005 1106 155 1847 1627 1203", " 1954 386 1143 1065 1745 1979 907 1044 62 673 1608", " 513 1788 1638 967 1459 1572 1172 208 1957 1733", " 1851 1835 1535 1097 1198 758 519 218 1951 854", " 585 1428 632 545 1226 397 1579 1004 426 1491 1276", " 736 1032 69 1086 1234 506 21 603 803 1373 1356", " 25 677 218 479 537 352 842 864 49 868 1147 151", " 12 975 1635 787 1760 449 36 491 865 1805 1025", " 186 1332 819 1840 1483 742 1261 160 1825 318 1031", " 269 331 1185 18 1730 1173 629 858 575 1250 1959", " 1095 27 361 369 1889 1819 190 1638 1800 1427 1682", " 240 786 780 509 1052 1078 183 1435 1268 1336 1649", " 821 1294 1030 472 1618 1395 835 429 238 274 770", " 1930 265 1701 1862 358 562 933 439 1734 262 122", " 1159 1127 1732 1829 789 1865 643 930 226 30 966", " 1384 322 771 1134 803 230 446 1633 516 904 1897"};
    vector<string> part2 = {" 1034 1270 790 878 1361 1380 1714 4 557 42 473", " 1784 327 969 131 655 368 272 379 955 21 1735 639", " 1196"};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 5114;
    if(result == expected) {
        cout << "Test Case 126: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 126: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test127() {
    int numSheep = 50;
    int maxRuns = 32;
    vector<string> part1 = {"501 148 1600 736 437 1035 1914 474 1651 1517 1587", " 242 895 440 225 600 782 1969 344 1953 922 1781", " 668 145 91 531 693 1035 1925 1001 456 807 753", " 1932 1236 278 97 1708 1898 1955 1806 871 752 1019", " 996 812 727 990 897 1155"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1969;
    if(result == expected) {
        cout << "Test Case 127: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 127: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test128() {
    int numSheep = 940;
    int maxRuns = 790;
    vector<string> part1 = {"1082 91 1244 423 1822 20 1932 1367 943 1711 680", " 592 78 227 922 916 406 145 989 1233 748 1641 178", " 693 1045 1566 1411 1619 249 152 631 1382 247 1353", " 453 22 1176 515 540 1529 1752 1367 1106 1883 707", " 992 1739 993 380 1490 1325 859 708 1789 33 344", " 153 327 1597 718 493 952 400 1274 1817 631 221", " 117 1889 694 972 1416 1929 1434 1229 1153 952", " 253 1807 950 1964 1031 1856 1561 463 1946 1525", " 1613 1593 1165 956 1464 597 1148 432 730 584 205", " 830 989 543 1302 1653 1645 1209 894 899 1513 438", " 865 1214 715 797 808 1727 709 868 1736 1830 1932", " 331 905 282 905 1306 1626 720 109 269 1876 1214", " 325 1500 684 1744 159 1024 108 618 1484 1795 52", " 1247 1239 1448 1309 898 1076 555 1455 859 220", " 265 1284 717 1496 1443 412 1685 492 287 1586 1893", " 454 432 14 1442 1159 503 1725 1707 690 1738 334", " 1771 1266 1412 238 1217 1313 236 1159 1262 422", " 219 788 830 1102 376 56 26 1982 214 1264 1277", " 1880 1553 1302 614 333 629 1303 1374 466 1824", " 599 315 1029 1881 980 883 1474 400 808 1957 273", " 1943 1587 468 994 18 1016 1174 476 555 822 892", " 978 393 1387 931 1928 1922 388 715 1252 1855 568", " 676 1320 1439 1669 1218 1791 846 890 1833 534", " 1351 1832 441 781 1592 1507 1296 894 277 317 1852", " 1533 560 708 800 1984 759 971 1641 1665 942 1255", " 1697 1186 367 891 1428 1601 1455 1030 1281 1452", " 1586 122 67 1318 402 881 833 1179 508 859 1155", " 736 668 1771 1062 1263 1211 1491 257 193 1813", " 1581 1113 700 1408 444 1074 416 1881 146 663 604", " 417 275 396 262 1529 89 1425 1531 537 938 1690", " 420 183 1447 1133 1082 1046 1910 715 731 669 995", " 1235 958 698 578 68 1155 1862 759 1377 1822 1307", " 554 522 981 595 613 984 1176 115 560 1928 1057", " 344 672 861 1020 193 331 1823 584 93 543 344 78", " 1302 1987 977 1843 910 990 792 425 184 1207 1429", " 1482 75 1068 1389 1895 386 647 999 1758 1704 1214", " 1597 442 274 842 741 464 141 1642 1920 1975 1211", " 121 1187 215 615 1021 1476 1526 1601 930 455 878", " 1446 1366 26 195 191 870 77 579 1358 441 966 1743", " 1076 747 1748 186 486 237 483 1279 881 107 1504", " 1112 1115 638 1805 796 1340 867 54 760 270 555", " 1781 1905 833 1349 1299 681 1250 553 561 33 1308", " 1334 246 510 1343 175 1289 719 928 289 1553 13", " 1090 456 122 628 1348 146 1340 1521 1418 980 279", " 348 240 1884 81 632 332 582 1940 1289 916 35 753", " 69 1472 1831 329 510 129 226 1614 1343 1298 1922", " 741 1973 958 1111 239 32 306 1815 1880 1098 1573", " 562 1263 1175 869 393 1703 670 1699 570 142 903", " 178 1951 332 357 1723 696 1550 630 1509 86 1012", " 808 740 1018 567 270 127 1373 912 1059 1846 81"};
    vector<string> part2 = {" 37 159 436 1448 1188 1432 689 340 1173 1227 844", " 110 762 1291 343 922 1115 1577 1874 59 720 1828", " 1421 1412 1262 1619 456 495 1510 625 846 192 1946", " 839 689 1276 929 321 311 1655 189 1594 1398 1948", " 1355 601 1852 1345 1179 1760 18 553 1457 1826", " 1425 1211 379 1638 1574 387 243 1209 1746 792", " 423 1416 293 1774 1736 334 1452 1884 960 1499", " 312 705 583 1830 1970 1619 1735 1701 412 344 1247", " 1082 569 1624 1093 991 1375 322 1183 1253 348", " 527 1252 1194 759 132 1919 1034 1929 1772 68 1079", " 139 1989 1349 1083 417 1849 1591 253 840 112 1153", " 899 364 772 165 519 1069 1173 674 989 1987 1726", " 105 884 607 1912 1759 1003 948 1581 1218 1877", " 1206 1936 1903 1952 306 1355 515 1987 94 1529", " 208 838 786 1989 1011 1702 872 179 260 905 1855", " 701 1006 607 1206 1504 1039 1545 183 489 770 542", " 1922 1818 1387 1052 444 1441 1554 573 583 171", " 180 1786 436 597 1399 659 1846 339 525 512 841", " 981 330 1586 467 134 281 61 234 1190 1435 1434", " 1702 203 754 1560 567 1092 1182 1091 490 1678", " 341 1352 1145 1594 216 1687 1601 1327 484 1114", " 760 1772 342 1525 78 321 275 671 1091 526 743", " 784 346 27 156 139 1804 1274 1453 798 1776 1755", " 1467 935 1369 734 1472 954 288 574 962 736 1124", " 1500 426 466 576 1257 246 1286 748 88 412 697", " 1894 291 784 1246 1282 637 1544 54 1247 1240 301", " 960 1565 680 1525 1267 1372 1880 1983 266 1606", " 107 318 623 1504 1893 1690 843 1052 1916 979 684", " 467 1593 264 360 753 1811 1287 626 257 1502 1093", " 875 1276 1616 1856 378 860 1412 307 1775 1573", " 147 1642 84 22 1551 1143 69 1852 34 1636 1202", " 1960 599 1258 450 1666 646 1329 1227 702 1046", " 825 1151 1582 1870 601 1912 72 1868 965 664 553", " 1994 1605 346 1530 382 804 413 851 145 1159 1810", " 1885 339 1167 1044 396 205 208 1672 1788 1670", " 1986 1285 651 522 711 1365 1640 311 959 1820 1003", " 634 73 1081 277 1370 1915 1419 217 1939 211 1477"};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1994;
    if(result == expected) {
        cout << "Test Case 128: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 128: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test129() {
    int numSheep = 1995;
    int maxRuns = 1911;
    vector<string> part1 = {"590 1461 1783 463 1578 418 1269 312 1800 1796 1884", " 1868 1028 408 1509 638 1559 692 610 1338 1260", " 600 286 1099 1682 582 582 783 1810 579 121 9 1937", " 974 524 918 216 864 977 434 226 1461 72 1884 1510", " 122 1398 343 1238 215 1686 290 967 1551 1662 218", " 1586 726 1203 30 1322 1363 175 163 47 1718 546", " 745 18 1515 518 1870 730 1615 8 530 470 226 1108", " 219 1508 654 1472 426 1186 1832 1051 205 307 164", " 1799 1014 308 254 310 1196 31 1782 1473 336 463", " 1819 1582 515 1510 1083 1571 214 876 313 214 1426", " 1080 1457 1670 1594 1188 1673 1648 1677 1564 1000", " 251 1216 839 315 1061 603 506 1045 1553 1299 457", " 1559 1632 1401 735 480 641 96 511 919 372 725", " 172 935 147 394 1670 1946 722 1779 1047 1129 133", " 404 1949 19 1972 874 56 1948 267 458 1718 1463", " 1445 856 381 679 1722 713 1817 1683 550 170 1270", " 1353 1692 1106 1681 468 91 1253 410 400 1951 1259", " 716 1709 1131 1168 2000 882 1718 1085 1855 1669", " 644 40 87 344 1319 1655 816 1189 261 1418 63 1070", " 795 762 1387 926 1346 1212 350 1524 369 1675 1646", " 1138 707 405 700 336 11 901 1596 1414 1093 945", " 1303 1930 1791 660 189 1127 792 1726 1743 399", " 103 74 76 1649 927 1297 763 1934 1745 1534 57", " 1001 179 1873 178 286 1872 376 789 117 736 1931", " 675 614 1962 214 200 1358 279 413 1006 979 1192", " 202 158 1141 1051 1819 1816 854 1369 394 1157", " 1563 1572 461 1035 1731 1727 1663 1633 600 366", " 190 356 131 353 487 1769 389 1403 1166 1283 1939", " 103 1059 1624 1009 13 81 415 995 1457 1801 44", " 800 684 1887 303 1928 1696 130 218 327 246 210", " 1234 1242 1643 861 1864 1362 618 1739 1512 1430", " 267 235 1121 1806 1117 525 1430 398 1919 514 164", " 1791 166 704 54 228 58 362 214 1403 1025 847 1701", " 962 672 706 1644 1597 1231 1947 1363 165 812 540", " 1650 723 1283 422 774 590 61 204 551 1329 439", " 760 792 400 1253 1389 1182 1804 1589 1790 884", " 1332 1512 1069 1086 287 319 742 1709 1576 1795", " 764 1331 825 1208 1876 791 123 1650 833 427 1773", " 9 1808 60 1075 953 997 1338 1985 1677 325 1416", " 952 860 1750 822 31 1508 371 1230 1190 199 613", " 635 584 1363 1823 1633 1343 615 1272 297 1196", " 1155 126 139 374 990 1113 177 1971 798 1037 665", " 1141 1108 1461 1836 1303 1269 1452 573 1720 1936", " 1309 692 1415 1069 799 1883 1616 579 841 88 773", " 1469 1132 1277 673 589 416 1389 1961 1314 879", " 1967 1780 1878 1666 695 284 1851 1896 1588 1973", " 1847 990 212 302 189 172 399 1798 94 844 850 625", " 1392 1536 1994 907 206 1572 244 1564 592 1634", " 930 1004 652 1509 1393 264 45 1984 697 246 1699", " 1775 1028 1942 363 606 1539 74 1873 569 1213 1208"};
    vector<string> part2 = {" 835 1652 777 1500 1687 156 1903 1027 80 1917 1898", " 742 605 118 1504 403 723 58 757 1859 1724 1000", " 860 903 847 669 864 1348 1554 216 930 1457 94", " 1390 388 1438 1346 1728 1110 1239 1002 1178 1182", " 1177 1377 1069 957 341 533 831 1360 691 779 1681", " 244 1160 1138 1457 974 315 11 737 409 1876 1241", " 728 785 1190 886 1064 1264 1264 1431 1696 903", " 1518 769 1154 1104 517 972 1079 1137 574 182 354", " 1908 1330 811 1202 436 232 740 1532 1642 682 1357", " 1241 969 1023 476 1388 583 37 1215 119 77 764", " 1508 1613 1345 1851 543 1643 1154 205 1416 1699", " 1395 1436 755 665 1324 1074 164 1682 1741 1195", " 1906 569 1140 991 443 372 1473 1902 1512 1622", " 296 1405 1251 439 503 1600 1830 497 281 1464 1190", " 1148 1370 143 1168 508 908 610 1939 1017 1705", " 143 1358 720 1002 1870 43 1208 1623 1844 796 1287", " 352 486 580 1766 987 732 1962 914 1823 326 1306", " 1349 1617 755 28 1157 269 1631 345 587 1351 428", " 267 1766 1762 1765 228 1232 913 1023 1314 1953", " 540 1313 1009 1252 326 1318 146 535 124 1488 331", " 1862 576 751 623 170 1687 722 127 350 687 829", " 192 1379 134 268 111 532 807 1703 163 1132 1894", " 214 514 231 1933 839 1366 295 1496 205 225 1768", " 735 1483 319 709 945 722 188 1020 1769 760 1541", " 1295 28 1530 1731 877 1120 323 213 97 948 540", " 925 25 811 1414 1919 729 218 1222 1109 1825 773", " 481 1030 1229 1797 1497 1128 1755 77 1814 1267", " 1618 1629 424 1592 17 1558 731 882 1254 206 668", " 844 1632 615 1340 1412 743 380 611 1566 1242 1419", " 374 443 1017 1801 1164 1708 933 1906 222 1633", " 516 1856 1149 1591 154 1711 648 434 308 446 766", " 727 38 1352 784 1229 536 500 1931 340 1980 825", " 741 327 499 1414 1173 382 1377 209 856 680 990", " 1135 1394 1319 1470 1988 1970 140 1331 411 489", " 260 1442 615 555 371 1908 1371 230 1104 1677 1959", " 1028 1761 626 436 924 1305 662 1523 1230 1294", " 1638 624 1870 64 599 221 1696 584 1228 1116 517", " 525 1724 1420 405 76 259 1753 1422 1993 1191 445", " 91 369 1486 331 1144 1250 510 1037 1029 1373 1894", " 684 1850 507 1851 289 1306 1966 1733 778 859 297", " 1516 367 1189 435 1820 1445 1832 535 593 258 195", " 319 463 1602 50 995 1392 1530 1816 1661 20 251", " 94 255 292 266 1082 1191 648 653 243 49 362 408", " 1939 541 122 680 655 1187 1170 496 1476 1860 1309", " 1955 418 1171 996 1665 1325 676 1114 1925 1617", " 916 201 270 1014 314 139 429 1188 1644 1326 1150", " 1561 1108 1058 1963 569 100 1892 1373 1477 1015", " 1840 1364 1279 411 1458 457 1164 252 1870 1346", " 1531 1955 770 614 1734 863 440 369 471 1410 384", " 554 1133 623 893 1300 510 1122 1246 226 686 1889"};
    vector<string> part3 = {" 704 1310 1153 1969 1362 811 350 765 1050 121 134", " 531 1942 1658 1747 1982 1382 1635 1427 603 1496", " 932 1607 1350 419 668 1207 725 1864 1975 393 361", " 149 473 657 336 45 1983 539 1437 1781 596 583", " 1500 111 417 501 592 1628 1193 881 1872 1070 484", " 112 402 796 314 1180 1382 1130 963 1899 1159 24", " 1804 359 621 1753 813 1562 1734 1255 153 1225", " 1878 1652 261 547 157 676 748 1449 328 1498 1762", " 1647 666 17 1688 1668 956 1644 351 543 787 1471", " 1761 154 402 1487 332 356 735 1495 608 1730 1146", " 1854 1676 1845 987 853 1972 770 1243 853 437 1389", " 1111 136 508 7 1472 1686 724 907 1526 4 1998 1427", " 1414 1928 390 1568 529 127 51 794 943 755 271", " 532 1636 855 40 740 1122 1189 71 386 1247 347", " 1999 1487 185 1520 1944 679 39 1965 444 1354 1857", " 970 1953 183 1283 838 73 602 302 844 774 1848", " 1039 1906 866 1048 1556 243 1806 1093 1132 368", " 585 721 975 1858 835 188 462 532 531 1366 92 1262", " 1878 1361 941 452 233 666 1485 1057 1033 1977", " 373 366 632 406 905 40 675 143 1366 289 962 1816", " 186 1397 271 402 1780 943 1659 687 638 1597 1373", " 901 1063 322 828 1217 1686 314 1247 973 892 659", " 723 1781 154 443 61 503 1395 1028 1329 666 1091", " 1743 1779 1232 1520 1576 1963 1566 1711 1518 1998", " 11 218 1398 1194 1047 1489 752 738 1535 399 42", " 795 1166 750 1907 1238 854 445 339 1088 1423 1889", " 26 6 463 522 1334 1852 1739 1224 1784 1968 1308", " 749 233 1099 438 1940 1417 712 1301 3 1369 472", " 1113 1533 730 596 979 1051 1573 1909 32 940 1052", " 1185 518 170 1488 934 1037 1248 1605 1084 512", " 1385 979 582 228 249 879 1962 248 898 1097 1649", " 1661 1808 263 113 839 1526 146 969 229 301 847", " 204 1230 1929 912 1857 477 783 636 1034 1054 324", " 1853 1189 1513 1320 1384 1936 1295 1283 979 192", " 1106 1038 770 1651 1034 1797 1842 643 469 1723", " 1881 1534 1839 271 541 1237 1938 525 1749 1858", " 1471 152 1133 430 1646 215 1630 1665 2 1438 365", " 699 1841 383 498 194 803 32 973 349 1001 350 1844", " 1537 688 514 1375 1194 485 563 568 1484 1707 1693", " 237 90 1306 928 1064 1303 1803 188 209 811 1442", " 1163 609 1848 795 479 987 701 632 1791 1175 155", " 601 524 318 1047 509 216 861 1423 1113 1849 1875", " 385 1127 1915 1581 1656 304 436 293 1831 1580", " 395 550 299 297 235 164 589 1659 1813 457 1525", " 1971 708 34 1157 1427 965 1916 1077 1681 838 1129", " 106 1066 1790 1991 349 1753 862 467 1641 648 1254", " 682 1429 774 1867 848 1635 1401 1880 1796 1063", " 1366 18 1556 1388 911 449 701 964 1276 1419 374", " 1711 109 1331 1389 894 1807 1459 1714 551 365", " 149 1811 396 793 792 983 199 971 848 207 1609"};
    vector<string> part4 = {" 297 1487 282 1268 1656 4 1400 725 1474 1665 353", " 694 1192 1777 1015 690 761 1529 777 1147 1172", " 575 730 1017 1099 1272 1345 1379 1737 806 690", " 355 1845 1458 141 901 151 1894 645 352 954 191", " 1412 56 882 1761 861 1955 1553 1691 1074 1979", " 1301 796 215 995 1843 278 311 1774 858 1233 1461", " 76 33 1284 1429 358 1139 1312 1821 1724 1037 925", " 422 1229 932 1145 135 327 524 334 548 639 775", " 468 723 388 283 695 319 1487 1751 74 1952 1741", " 1062 1931 43 912 1621 1145 454 307 1986 1108 1391", " 685 1654 1652 957 1799 1428 1932 1975 385 1874", " 176 1924 834 1384 1349 1411 1823 87 1896 43 1598", " 700 1377 1173 1643 1924 1673 1129 1451 402 1755", " 391 863 383 999 968 1947 1889 732 1267 1048 1135", " 1431 1939 630 1220 215 457 358 867 499 63 87 1194", " 910 1613 63 329 409 1039 1629 1828 730 1094 1244", " 711 300 718 235 1707 599 1632 891 422 673 873", " 424 503 277 1163 940 578 1843 322 1232 1896 1896", " 1289 724 1980 1488 894 433 1217 1673 4 972 1560", " 362 1512 14 552 1635 1110 451 1086 807 1276 752", " 888 599 63 1080 1965 49 349 1408 800 1481 1123", " 145 436 742 624 574 625 769 457 1767 1031 153", " 334 222 275 27 1341 1000 1968 1360 1686 1733 1904", " 1254 1295 867 331 1236 1353 880 839 120 706 1583", " 121 1236 1836 350 283 281 1854 1013 1327 338 1385", " 1681 1362 500 1566 545 4 1092 1550 1377 951 1162", " 1826 822 6 612 524 264 824 350 158 567 181 1889", " 1353 1479 1832 1785 729 1134 901 1276 847 336", " 174 632 1087 1832 849 156 1836 42 372 1785 1456", " 1734 803 618 1504 832 201 1714 735 1822 317 85", " 753 1730 15 634 915 1289 1700 719 586 483 14 1470", " 41 643 719 398 423 745 383 1901 817 366 332 621", " 1915 672 1058 604 220 351 1724 905 523 1527 1289", " 723 1845 1375 1762 116 449 1537 1290 1214 933", " 427 551 597"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2000;
    if(result == expected) {
        cout << "Test Case 129: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 129: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test130() {
    int numSheep = 1177;
    int maxRuns = 883;
    vector<string> part1 = {"909 517 1225 1381 1831 527 1660 1189 1535 657 1384", " 51 367 1950 445 1564 549 24 311 1842 1499 36 1356", " 1537 1561 1672 1377 454 1177 248 850 1666 492", " 418 1137 1659 1003 727 1679 1715 1664 443 73 1230", " 1973 1358 1988 1678 589 140 668 1969 1714 1634", " 1898 958 95 370 180 1371 1183 1609 1241 1123 998", " 1342 1517 838 703 1486 1890 1441 1189 1686 1288", " 1535 1477 305 1990 128 195 1059 873 730 589 340", " 1084 1309 1534 481 1273 139 1475 1359 95 1688", " 1155 1761 69 1998 1882 141 1245 4 1991 1098 1853", " 224 999 157 1770 826 1361 692 1061 1283 1300 818", " 651 1431 173 1468 1223 15 1246 579 1131 393 1755", " 1187 1984 379 1942 1148 106 518 1086 895 847 1784", " 803 939 1448 693 1214 1848 553 487 239 1315 46", " 1779 678 1996 855 413 134 1469 246 815 726 332", " 1782 1686 1498 546 1934 942 1554 493 1606 1327", " 210 1026 858 728 946 1911 1996 123 1782 1201 1823", " 1049 80 1305 785 1215 1300 580 904 1377 61 179", " 1008 1014 1918 1800 1908 548 540 1115 1260 1198", " 1914 1148 469 11 581 233 1063 137 1217 962 707", " 321 1939 299 652 157 816 818 1048 279 1814 914", " 1926 1460 714 423 306 1617 322 418 1190 364 132", " 1919 628 1863 510 1366 1682 936 584 207 1300 148", " 183 154 352 1741 1971 509 494 266 1643 1295 1359", " 439 151 117 816 812 478 330 1343 1794 761 1077", " 1085 1218 1655 901 804 1552 371 1664 1146 1929", " 1572 1549 343 1865 35 798 164 929 1570 211 1924", " 903 475 634 535 1501 182 1515 1917 310 911 1940", " 1768 22 72 400 1173 1018 1514 413 125 1609 930", " 1901 1798 1817 1498 1949 1455 868 149 1893 1724", " 428 79 384 431 205 212 141 1832 1202 912 484 478", " 1835 1879 1693 1022 989 1702 189 1059 1211 1449", " 594 456 115 990 114 1338 1996 1834 1007 656 1519", " 875 126 415 915 1870 343 873 221 1538 1807 1655", " 1688 1565 581 1143 818 765 778 183 535 1153 52", " 1074 1441 201 565 490 304 843 487 872 1607 1688", " 1275 1504 7 1134 531 1544 976 1551 1820 682 229", " 1378 831 583 1551 825 154 63 1925 1362 1131 1439", " 1403 1730 925 698 328 527 1238 315 1356 1628 1296", " 889 1330 507 311 1372 306 158 1858 1280 650 238", " 21 1415 398 144 1878 980 574 1301 1727 821 1303", " 1857 1939 1920 1149 1070 436 1954 55 417 1077", " 403 1115 1325 1564 910 1211 1783 74 1344 1920", " 362 1389 735 263 1740 1862 1085 681 1952 1703", " 1820 607 381 1471 1988 1157 1488 457 1012 687", " 61 1857 517 1834 60 441 1269 1156 1298 44 947", " 1854 796 753 662 208 307 1905 1938 1294 205 428", " 1757 474 784 505 1679 59 861 717 1737 396 1018", " 1230 1112 807 944 760 282 1460 791 159 32 44 190", " 823 1108 995 63 929 1741 1238 242 6 512 1457 529"};
    vector<string> part2 = {" 1608 873 100 1405 1831 939 1559 1423 674 1476", " 1899 881 143 341 211 1566 1469 416 1395 1254 1655", " 1474 1543 599 204 1332 648 1081 45 988 1339 1992", " 1542 857 74 1096 1456 912 1175 1396 1254 2000", " 749 1303 183 93 1353 143 1372 1626 1354 1070 971", " 952 1237 1795 123 1727 204 104 888 346 64 301", " 1113 1096 852 1814 1680 976 708 273 1458 789 1078", " 10 1976 1978 63 1490 1621 296 1449 13 1529 1757", " 852 442 198 1047 1899 761 849 769 968 1801 1018", " 158 1850 1503 1631 1476 550 1837 590 1818 684", " 1330 586 693 908 1791 1088 1695 985 1594 59 1130", " 1628 1318 1060 355 1804 1331 510 1466 1388 1282", " 1073 785 1797 939 405 1316 1254 1090 1842 168", " 377 1496 581 1958 921 446 1301 41 1345 623 1255", " 102 966 1646 1231 1357 1767 1694 1192 1437 51", " 1217 982 364 1196 1731 1369 1351 299 1479 1525", " 1398 277 802 32 516 524 1303 604 1886 457 739", " 1622 426 424 1099 45 1626 948 562 951 1169 1077", " 1598 1264 1685 1400 1085 1093 1301 1630 1205 1536", " 173 1350 377 1748 904 1839 195 1996 1493 793 718", " 863 414 28 867 1495 916 284 711 1346 479 587 98", " 1864 181 767 1043 1647 72 1350 610 1963 1029 806", " 1414 1273 1145 682 1400 830 999 138 1864 1420", " 169 730 287 1925 1619 1094 53 1907 1134 860 67", " 311 1459 507 1707 144 661 955 327 174 213 1469", " 239 1655 1824 1795 1648 810 412 355 617 1235 1283", " 409 1447 1567 1999 1403 1028 432 998 800 1147", " 483 1464 1603 783 1359 791 1941 1132 961 309 1937", " 478 1910 1781 1316 881 1528 683 1549 1945 1757", " 373 1569 115 1004 1262 1618 444 690 657 80 1120", " 1684 1083 1120 341 1110 1972 1197 554 1467 79", " 588 586 1325 879 613 1029 928 1868 207 1952 402", " 1383 250 812 406 491 1155 709 1953 1253 1459 988", " 36 613 1129 983 1947 276 538 567 1189 456 646", " 1386 1158 7 444 467 1609 969 1825 807 90 1440", " 813 200 131 172 1510 295 997 650 465 1270 777", " 1453 550 444 1927 1728 1940 364 279 1483 645 1768", " 167 1076 499 18 221 855 1211 276 1244 1769 385", " 1 588 1434 1492 1739 1797 1577 1251 1861 1036", " 716 1616 1756 1074 1680 612 1586 1705 1374 131", " 1451 1849 1023 929 956 1602 1809 1718 192 1026", " 1081 718 1309 841 44 916 1943 139 1177 1664 179", " 1829 1850 334 1087 148 507 1921 320 1091 217 1495", " 523 1971 1807 1279 72 640 1980 777 1988 562 649", " 1261 1974 305 1946 446 1412 237 1460 480 855 220", " 478 1256 365 949 74 627 173 412 277 906 368 735", " 413 788 1070 1649 1699 364 1926 485 1697 389 1523", " 1518 1726 59 715 1812 1151 636 1433 1465 864 1014", " 190 1708 36 1955 1667 1998 458 1843 1970 147 80", " 1160 870 524 700 1000 1872 467 312 174 1003 134"};
    vector<string> part3 = {" 1838 738 483 1623 772 298 1441 1635 1450 1553", " 1690 930 1074 823 1769 1599 303 1098 1913 1417", " 609 1955 376 1048 1823 516 1752 1843 535 848 376", " 162 914 1547 1715 96 1867 260 391 1923 1777 1360", " 1593 1391 891 1546 967 248 764 775 845 487 56", " 1966 172 1358 1621 56 328 1759 965 1572 817 266", " 227 1631 1477 1461 236 1010 243 945 336 1468 227", " 299 216 129 1893 1937 1435 755 1015 341 1964 144", " 58 1942 982 77 1495 1789 459 1201 718 693 456", " 1141 1968"};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2000;
    if(result == expected) {
        cout << "Test Case 130: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 130: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test131() {
    int numSheep = 1920;
    int maxRuns = 238;
    vector<string> part1 = {"1499 1406 597 717 1451 1984 1134 801 278 1931 705", " 1313 997 1501 397 1974 1906 587 712 969 41 1677", " 1318 896 1520 1687 45 155 1077 1147 407 1721 1303", " 734 967 688 503 857 879 1421 1088 1681 481 41", " 5 984 1109 1677 1291 1221 859 55 1031 898 162", " 717 472 548 344 49 1447 112 1362 326 462 604 1726", " 194 1288 1668 487 1109 120 1423 1082 1897 364", " 1441 1671 1226 803 641 1305 1351 1900 1550 1177", " 1081 465 573 1663 1508 1876 1558 1195 1949 713", " 1537 900 747 85 843 415 1456 1092 1421 1906 1337", " 1665 1982 473 1796 642 280 1480 610 50 553 418", " 941 531 251 266 540 227 1941 1352 277 415 35 1167", " 1570 1718 100 1388 1543 655 387 241 1458 1580", " 1785 1715 1588 1633 480 1473 992 192 731 214 1041", " 1703 516 1697 1328 1213 1157 1715 791 1160 588", " 792 528 19 297 1801 1473 1918 1017 1729 1228 1094", " 88 31 1057 1831 1571 28 1064 351 1436 1630 380", " 1636 289 459 393 89 95 1202 922 701 130 695 892", " 436 1584 621 679 619 1688 665 558 1734 1733 1556", " 453 1452 1863 705 498 1093 388 464 983 1683 938", " 1106 735 655 777 1470 967 949 1279 1843 271 962", " 1715 1247 1777 1725 1990 160 1697 1572 695 1465", " 277 1640 1814 1719 679 1836 139 20 1897 890 1816", " 844 1689 23 828 142 1173 1048 170 1397 752 597", " 809 120 246 1596 1501 1215 604 1529 1942 135 827", " 468 1399 1335 95 1468 1305 1572 1963 467 1185", " 1698 767 618 400 1580 349 767 1082 102 1528 1187", " 1514 880 750 1057 243 1950 344 764 1113 678 655", " 1704 1042 777 1873 1260 871 662 1508 550 63 652", " 123 1407 782 1950 1559 1568 1817 1052 431 1894", " 846 1439 818 323 690 372 156 53 378 1710 104 1274", " 382 1317 854 1492 1883 803 1421 1737 1913 1201", " 1314 670 1324 1085 1658 1382 1854 1999 236 885", " 653 445 698 74 64 1307 1921 1948 272 1350 1775", " 36 741 883 213 524 991 1011 846 22 646 267 543", " 464 980 1089 1758 1526 1121 281 56 1177 383 513", " 893 383 1735 233 159 778 1395 456 60 1309 1422", " 1754 535 493 1673 1806 1182 324 928 656 1415 460", " 1532 1570 765 250 1066 352 714 328 1548 532 1236", " 1784 590 983 797 1254 715 1850 838 1806 1713 1332", " 580 381 1475 1676 1622 28 1566 1993 1413 1338", " 830 872 1068 1497 513 558 139 445 492 126 1815", " 1744 1197 1277 404 793 497 1397 549 1165 1815", " 1367 1747 1415 1076 612 1917 1909 1656 1022 959", " 1091 1089 1306 390 140 574 1593 1666 1709 1927", " 423 1437 1884 1340 1187 1723 1961 1371 160 658", " 1493 1910 1500 541 1200 1683 1343 1004 1207 1206", " 678 1581 1022 588 225 1169 1977 1274 1274 40 546", " 1861 983 1774 758 787 1137 1835 1569 802 709 885", " 283 1399 1723 1177 818 874 102 682 554 1440 411"};
    vector<string> part2 = {" 216 211 1209 949 405 1738 619 536 1412 531 671", " 1941 1683 613 1754 206 1531 1734 1551 1114 1973", " 265 1666 1915 976 500 1056 1086 704 1047 798 1091", " 1976 1354 895 766 1355 1079 298 669 1807 712 1563", " 1866 116 1394 137 291 244 658 280 1417 923 22", " 240 310 201 1183 1469 1538 917 709 936 1479 1076", " 156 1958 468 299 1351 288 1615 1889 986 1043 830", " 1512 1667 1816 1944 510 1084 1414 696 63 1370", " 167 258 1453 1418 953 1897 1890 189 1958 383 1445", " 864 774 1886 540 1298 1171 135 33 1024 1517 1945", " 1336 1235 655 69 1040 300 50 1696 440 1054 177", " 1464 1043 1533 412 106 447 902 1952 1571 1346", " 575 1319 517 407 128 1821 877 184 1346 1923 1987", " 75 55 199 690 722 1675 275 1736 1662 1209 980", " 1520 388 704 350 78 1507 888 1455 1322 452 1392", " 1633 1665 19 1978 788 377 1997 1481 1563 1540", " 10 1017 1974 1718 318 1584 848 570 1594 1971 506", " 1137 1544 348 103 1533 711 1115 681 878 1379 1035", " 1357 1834 985 1142 1074 1522 233 1804 1807 387", " 909 704 1189 650 457 19 1059 988 1588 565 1593", " 149 278 1496 608 623 722 1016 136 293 1846 1464", " 1729 1800 1472 1615 430 322 1060 931 1622 1817", " 1099 1092 1037 102 1486 1212 1795 215 1859 214", " 1835 1202 695 957 95 235 1997 646 930 744 981", " 720 1286 1074 1137 314 287 367 1589 1862 1576", " 622 1165 622 1156 578 1314 1012 1544 1283 1808", " 302 39 1137 1842 1313 1165 1067 15 61 1 527 1322", " 154 1701 370 196 321 527 674 1268 606 1533 330", " 714 661 1172 934 336 274 1626 1656 162 1141 693", " 842 1104 766 19 245 513 1174 891 593 42 430 1172", " 974 352 1179 549 1075 1722 1715 1725 1204 378", " 737 1156 1913 46 703 1425 1837 1138 1204 269 1397", " 1576 1292 151 402 1019 1896 666 712 960 757 1805", " 1071 1101 593 1129 57 1215 587 1216 1014 1815", " 74 1627 1845 580 242 693 300 743 1426 455 1929", " 1459 641 1427 1674 84 1531 837 538 65 118 998", " 653 965 426 1331 1230 1418 400 1902 262 935 57", " 1091 944 1484 451 1246 1019 10 1672 1387 224 665", " 1415 1774 1700 980 311 132 80 1224 345 217 447", " 1485 1006 1899 248 180 1641 1743 1421 978 1302", " 1731 547 1243 1434 500 707 1763 429 1649 1648", " 1905 758 719 90 613 1397 494 1234 475 1815 828", " 1151 1232 1589 25 496 916 574 1835 3 1905 279", " 1715 342 1916 1072 1935 44 1545 185 1809 994 371", " 1588 1392 1186 1532 1644 781 1015 962 679 1193", " 195 1028 824 117 1870 1523 1080 571 720 700 694", " 427 1904 500 1324 631 749 1461 1588 1651 1869", " 1897 443 1448 837 1924 69 136 793 774 705 1111", " 52 257 590 568 1689 1769 1278 1173 555 906 410", " 1699 1163 174 695 37 512 1406 679 1872 1003 648"};
    vector<string> part3 = {" 1330 447 1163 1155 151 1847 1054 639 1902 142", " 1162 1024 160 216 1627 525 904 1234 461 323 220", " 579 1165 448 999 127 1755 765 729 1454 1778 1275", " 1874 1245 1483 1457 762 723 1407 388 356 1446", " 1164 761 500 350 1242 1143 703 411 1662 241 1842", " 563 1311 1010 598 479 407 1945 402 294 1164 1528", " 242 1066 623 247 470 1714 580 798 1470 551 1508", " 387 740 243 1679 80 1962 1958 582 41 1462 1131", " 1657 957 1164 1803 364 1147 59 737 1247 1031 1914", " 430 141 269 1540 1293 1653 52 1953 281 72 1383", " 472 77 1970 896 1585 429 685 1062 656 212 1842", " 793 1679 573 1793 1595 987 1110 1235 1889 610", " 1457 1870 1290 859 1612 825 207 1527 1828 545", " 1180 678 326 267 398 1485 279 634 1966 1159 180", " 628 125 1673 1164 368 1536 170 1724 226 1774 1971", " 635 1610 567 1315 40 954 1959 1527 448 1815 75", " 40 373 1074 963 885 491 599 905 707 165 661 274", " 1985 479 191 706 1217 1805 899 1301 1572 980 1129", " 1147 1189 1159 478 1411 297 230 1506 315 1701", " 817 14 1911 1089 1651 1018 1056 1660 205 174 127", " 1232 560 407 171 1735 560 1053 958 1373 645 3", " 639 920 3 1422 75 1030 396 1513 709 662 708 1832", " 1665 1642 1942 300 155 1307 326 823 1053 877 1510", " 1664 480 724 412 1145 1411 1111 1844 239 602 948", " 354 2 1641 1925 1931 933 1089 1922 1077 1160 825", " 471 1148 1589 657 167 1766 311 755 160 1497 1810", " 1212 881 1771 1215 1194 1833 394 118 1925 802", " 910 1249 1362 1262 1724 1903 774 1873 172 1446", " 168 1744 1581 764 347 616 983 232 1882 401 1825", " 964 965 292 420 1654 1019 1900 1408 1888 1752", " 777 1582 85 209 634 1189 524 413 604 689 330 1574", " 1245 689 1979 496 262 112 1600 186 697 1094 1216", " 899 1512 1967 280 1471 678 1132 837 250 1025 265", " 1012 1787 1408 880 1639 1373 1593 1772 731 330", " 1767 752 1352 169 410 1272 712 362 1455 736 156", " 895 786 1396 955 541 1153 1880 685 611 163 73", " 1191 347 1800 644 1591 1583 323 549 1762 1133", " 645 114 1740 1917 220 1801 1288 979 1164 551 1649", " 1393 1756 1675 968 862 84 795 191 1052 502 1797", " 134 775 267 696 1459 1994 127 596 119 86 832 719", " 1039 853 82 1482 168 12 87 1171 759 1088 989 525", " 1191 10 776 621 1316 45 1746 1445 1240 135 1648", " 550 1828 1047 1575 1473 850 398 286 1344 344 1113", " 1318 1315 1008 78 1032 525 1285 1700 285 1040", " 384 1128 1380 165 1060 622 63 1777 727 1364 1791", " 1621 1250 1741 626 885 1659 989 1513 363 721 1856", " 943 1516 887 432 1655 1675 837 743 1301 1373 891", " 1073 288 1837 1623 1301 1782 465 233 38 321 1085", " 549 1333 472 1590 1833 1882 633 217 1040 963 1830", " 749 1702 507 621 983 1917 1214 924 1820 479 1340"};
    vector<string> part4 = {" 1509 1644 1477 1165 1390 1165 983 1908 1244 486", " 517 103 162 493 550 510 1236 947 1374 409 1617", " 894 1541 1607 1441 1175 374 676 971 662 965 1298", " 57 890 1829 780 1376 1981 553 135 811 1736 217", " 1354 743 483 1336 944 532 655 531 1659 1338 1048", " 1004 1211 171 277 952 943 1416 1393 1589 491 1799", " 15 1857 1739 1314 1002 711 982 1347 1275 1915", " 183 655 126 840 200 1505 1815 359 1200 1417 1521", " 419 671 1876 215 203 1623 397 1959 1943 334 1604", " 755 239 193 1550 1994 1736 890 1726 1911 1377", " 1173 35 280 1597 864 1217 1730 369 545 1045 306", " 1393 748 1235 1911 1414 1045 49 1519 1203 419", " 1194 447 1928 1782 1516 1478 870 939 899 1284", " 644 701 410 1176 1729 1998 510 1767 1419 998 502", " 916 959 1610 1472 1724 1842 865 365 448 1968 211", " 1296 1257 1075 1940 1411 887 1399 384 826 1866", " 491 1702 540 1797 1242 1770 1536 128 491 118 1300", " 1005 965 1297 819 1005 1479 1762 1800 1572 1656", " 1350 254 954 106 353 59 403 36 817 316 1730 896", " 297 578 345 1265 989 525 148 1914 1721 1880 983", " 683 23 357 244 589 1905 1738 466 337 115 1421", " 138 179 501 1980 1892 1077 312 1952 1778 105 238", " 371 1467 1278 639 1487 923 1680 184 841 472 969", " 1415 1710 1528 172 1253 492 850 1668 659 1460", " 1474 424 889 1390 1969 1169 42 399 212 1871 1692", " 1463 259 1881 1111 973 221 1588 139 1711 10 1030", " 1431 580 1473 1964 791 533 1964 1192 1310 347", " 1992 1007 276 1130 1393 1618 290 1631 1134 682", " 1692"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 7982;
    if(result == expected) {
        cout << "Test Case 131: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 131: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test132() {
    int numSheep = 790;
    int maxRuns = 50;
    vector<string> part1 = {"1152 802 1872 473 482 420 1500 511 913 599 1668", " 527 1565 1960 807 1803 603 790 528 447 40 446", " 78 581 1866 410 994 757 1753 1621 392 683 1662", " 866 1802 1403 1307 1901 289 1433 268 1954 29 724", " 1916 1742 295 978 827 1795 629 1746 350 623 1326", " 782 935 574 1534 896 1911 1231 1100 534 1762 837", " 619 1097 1729 175 270 1914 749 955 991 206 379", " 662 561 1388 1395 534 916 1236 1990 1564 490 627", " 1983 692 1000 1444 985 1823 1230 409 481 579 299", " 1050 1293 1409 1131 780 237 1848 770 54 1905 1288", " 93 1153 1996 1369 503 542 279 1197 1817 332 1161", " 659 1590 1226 693 1805 518 1434 165 1717 1089", " 1014 166 987 1679 1031 1923 1714 317 836 375 1868", " 499 872 397 259 4 1543 1770 362 1445 450 701 1971", " 1009 1625 1846 802 1980 609 1237 241 1207 998", " 212 1205 1844 1075 1848 465 554 1215 1363 1402", " 811 250 1374 1228 1236 1912 1174 1883 1860 941", " 148 492 1697 1514 1249 420 55 343 361 1744 1603", " 802 1759 1415 672 423 290 846 671 1040 1375 571", " 876 1630 551 1132 1054 809 595 264 671 1172 821", " 613 62 1557 1104 1948 1537 1220 586 1883 734 1249", " 992 1578 1100 1067 379 1967 1829 1022 1843 37", " 895 301 1329 427 1516 721 137 1529 606 1920 888", " 1096 15 673 74 1891 336 159 1199 376 560 188 94", " 1172 880 1800 1787 1006 1460 594 1589 146 492", " 1886 1955 1169 1716 1624 529 1846 745 600 293", " 301 1741 807 215 1967 1485 1793 1568 81 1777 491", " 642 894 1187 358 1496 434 964 212 207 760 875", " 954 150 710 1183 984 194 136 1287 501 1525 1882", " 1392 1230 48 1114 368 625 1142 1917 1048 516 1138", " 1120 783 1420 1036 626 1244 123 1609 1121 1604", " 1481 17 1538 1253 1126 484 533 1090 1087 383 632", " 1088 399 716 1483 1488 568 376 1635 1311 722 1320", " 211 778 1235 478 24 1173 832 473 1524 126 546", " 1436 1437 1694 333 448 87 1824 1997 1515 1871", " 1989 865 1363 905 6 637 1038 1821 1468 1515 12", " 205 1709 226 1207 363 664 1402 873 1640 1010 638", " 1599 1024 1313 674 1293 1364 1050 1207 1810 56", " 1222 669 525 1966 1899 329 512 658 696 632 804", " 664 928 1762 1454 515 58 850 1808 663 1944 1188", " 1475 49 888 480 1923 614 216 871 1003 937 653", " 1643 1667 929 261 708 887 394 138 528 682 522", " 1674 1546 923 184 742 1055 1207 696 200 733 879", " 793 1929 173 1403 67 1585 1314 607 635 1648 1874", " 1948 1274 1612 1781 1402 877 1676 220 790 1773", " 309 1459 1703 369 835 1850 1461 595 474 448 635", " 673 221 593 492 101 847 1971 212 871 312 475 689", " 465 1754 197 1538 323 1460 1747 1966 552 775 789", " 888 1209 424 1626 1586 432 278 454 416 1632 748", " 1445 110 147 504 1215 724 1123 253 1581 905 878"};
    vector<string> part2 = {" 1445 1243 854 1476 380 1406 1516 211 441 695 889", " 133 1870 264 1830 1191 243 743 437 749 765 1153", " 1642 1781 485 1761 55 1545 1046 1889 1772 1177", " 1495 1616 1454 680 522 1284 1367 854 1491 1746", " 1423 174 733 972 1066 608 426 1178 690 1938 266", " 1932 1863 1330 1534 31 195 816 1772 814 930 1402", " 598 651 754 647 1015 494 1912 1496 1997 685 1524", " 1964 1613 445 165 867 931 1336 1248 406 745 1023", " 13 36 1514 1553 1218 1984 1016 333 180 1113 571", " 1861 251 154 1722 868 1702 1907 1919 129 767 1431", " 1078 1636 624 1369 518 1896 1494 496 899 689 724", " 1890 1715 800 971 928 864 677 1481 318 1117 1861", " 1680 1575 477 1101 1753 1534 800 1333 1272 408", " 1199 824 1634 1192 1530 1411 588 1850 1232 1451", " 1093 100 703 580 1847 1594 1836 336 490 706 758", " 676 393 583 1382 1073 473 1810 73 1730 1240 485", " 1249 1010 83 1705 1737 912 1770 475 680 1157 375", " 787 7 1412 1085 293 262 1123 1325 715 1436 1274", " 1519 1219 1742 762 1199 1845 754 1856 646 1160", " 308 985 251 1653 1721 1768 1593 1675 450 838 1523", " 1589 1203 921 1701 633 1669 1576 732 1235 680", " 958 1497 1121 669 1630 1730 1504 515 1958 1546", " 455 656 1334 883 1762 1955 1986 1616 1890 1719", " 390 1647 1827"};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 16009;
    if(result == expected) {
        cout << "Test Case 132: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 132: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test133() {
    int numSheep = 1755;
    int maxRuns = 906;
    vector<string> part1 = {"1255 1358 1088 791 1151 1600 1138 1977 1311 1227", " 939 165 27 331 148 620 541 1996 77 128 882 282", " 31 1287 1016 1624 704 430 789 1269 246 1040 620", " 509 1824 1351 716 364 578 450 26 840 1135 1880", " 1744 1855 1260 139 1542 541 1090 1 1616 67 1124", " 959 1975 678 818 598 1453 436 382 1171 747 1724", " 381 401 493 1293 1119 674 1249 95 1042 1310 1163", " 1282 884 379 1005 1380 953 1838 1077 1031 604", " 769 1992 754 984 325 1533 758 985 1018 365 1476", " 1534 1341 1706 141 307 48 364 1962 1949 784 564", " 1805 404 1684 1931 1400 1192 1553 1722 1997 349", " 822 640 1621 857 68 1391 1653 1232 1709 280 1837", " 1261 1826 41 803 1732 917 836 1472 1414 118 385", " 1065 1556 1500 1398 321 1304 1314 1703 1005 1200", " 1397 41 344 364 539 11 519 187 550 310 944 576", " 72 1812 231 1643 1497 208 25 1429 1687 1692 1453", " 428 1918 1801 231 1520 616 562 1310 1581 647 90", " 353 1866 241 375 438 1265 1946 1119 1763 464 1784", " 1330 1985 640 1411 1032 1085 1796 1356 317 1504", " 531 1968 537 1282 346 140 1541 618 268 435 1531", " 682 299 702 1325 473 1004 1252 681 400 1413 458", " 1532 1913 442 1692 1172 484 1513 1548 714 508", " 195 1018 1856 1690 1484 1430 807 1384 1156 194", " 885 425 1495 1707 469 599 290 153 1982 1485 1879", " 1381 281 311 1891 475 573 582 318 944 1037 968", " 1634 149 549 1271 1679 1517 225 976 799 300 1983", " 280 1862 64 501 314 668 52 854 20 1358 1330 1441", " 387 945 377 490 875 217 1247 365 1068 185 777", " 1953 209 875 921 1817 747 563 536 1969 1005 1007", " 1604 119 1561 1266 219 903 1068 1777 872 1964", " 869 685 813 420 459 1954 418 1939 1744 1536 29", " 714 752 520 259 538 495 473 558 531 962 1275 720", " 1410 1964 331 566 1819 60 105 1600 803 933 543", " 1680 241 191 243 209 694 844 494 1370 794 1213", " 334 99 1033 773 136 663 670 110 1282 1291 1391", " 1131 1 414 1065 1726 1278 1362 301 667 1839 1978", " 843 829 67 163 30 1736 1757 1976 697 1502 1236", " 336 112 277 1050 91 1930 473 1612 1454 1540 1118", " 762 491 954 1929 968 1797 1730 448 1476 882 1194", " 1198 1145 545 1971 1932 371 126 1469 1900 419", " 1587 1510 1224 1061 418 1165 1675 1121 672 1964", " 733 223 1396 37 293 1119 1569 59 1562 1015 672", " 1268 1723 1166 1714 1006 464 505 1508 240 1216", " 1043 1796 195 1508 675 1698 1313 636 1096 1131", " 764 1696 344 1906 1250 1114 1642 1599 1183 1747", " 368 1341 659 122 90 1983 1014 44 1911 451 682", " 624 1772 1162 992 243 1978 790 317 948 1403 1572", " 670 944 1741 668 1001 1216 1954 599 1926 257 1799", " 1217 1967 1253 1844 991 1876 1832 532 1459 1009", " 1670 774 141 1956 1755 1410 1028 1434 1195 1568"};
    vector<string> part2 = {" 997 105 1395 1845 1275 1315 1791 208 304 41 494", " 1460 339 638 1267 630 1099 558 1741 362 907 1519", " 1657 952 214 535 1590 69 1620 766 1865 1392 1430", " 1189 1186 746 1655 1991 1327 1289 707 975 608", " 623 316 1130 1915 1846 763 798 129 1279 580 1052", " 1792 1180 653 1410 1738 634 416 195 742 947 686", " 1435 1366 1650 679 142 217 1592 1592 800 1969", " 143 468 1979 551 701 390 188 1038 1052 1669 222", " 1349 600 1753 1116 641 440 1133 145 1211 1504", " 70 818 1269 582 1859 958 1843 244 998 1589 1624", " 1533 1522 1031 1358 1299 180 318 490 1033 1239", " 1727 1663 1093 1299 1421 258 1640 1974 350 1486", " 608 677 242 1609 1758 1349 1873 262 1108 1989", " 805 605 1889 542 680 584 1088 1662 638 1727 1229", " 1297 342 1670 1274 1170 1789 1925 1042 1936 1860", " 1385 1004 1396 772 617 209 1938 703 1595 321 190", " 1608 392 963 1537 1093 77 1948 1548 1828 1203", " 1234 188 1084 674 1729 431 1541 1266 574 502 267", " 786 474 603 1167 972 1321 597 734 488 1219 1945", " 550 1681 91 387 55 517 494 646 726 1056 1758 1968", " 1352 507 848 1473 764 817 1747 254 1241 1171 770", " 1233 1115 1804 668 931 1640 263 1410 157 1416", " 384 1728 1915 356 952 1615 1250 1870 1405 1402", " 1028 18 137 224 1713 1403 1098 1962 1184 1464", " 850 1150 479 465 224 1875 1655 101 1535 1237 1987", " 1381 1629 219 50 103 190 1703 683 1955 1586 1118", " 1473 338 596 649 823 633 1077 1739 693 1232 1737", " 1605 1788 759 1024 1686 1191 107 215 1014 1618", " 86 224 260 127 1477 479 350 823 606 151 210 510", " 1809 981 259 1498 254 938 1950 53 1847 1807 862", " 1169 1240 212 268 1835 964 889 91 1027 562 1729", " 435 1659 1672 292 652 270 1142 564 1406 1524 774", " 1522 86 1459 834 849 123 711 1927 1867 386 117", " 537 548 1839 1292 519 1132 1021 446 1537 1384", " 144 494 1495 1539 1208 1417 1811 1809 1481 1002", " 1353 516 201 217 1262 1891 602 756 1399 1095 1145", " 1153 1748 1704 1269 370 1933 1960 1860 1130 667", " 1646 1442 191 762 1125 124 1216 1789 550 1100", " 1145 1747 1556 1413 309 1961 1126 1618 915 736", " 1962 378 124 128 1336 1319 1588 1677 613 167 127", " 1305 953 275 182 1834 627 1470 1338 1645 667 1583", " 489 1931 136 35 990 443 372 524 93 1257 76 1759", " 1599 629 1548 797 1339 767 1771 1472 1974 962", " 195 169 1309 686 147 823 1248 1946 24 1834 1281", " 1193 1050 1576 845 1453 819 560 298 522 1573 1230", " 1170 364 428 1935 1886 763 1106 341 999 78 1938", " 237 1049 302 1391 494 202 653 1398 1109 1337 1670", " 1920 591 714 662 717 1782 481 171 958 240 220", " 140 513 84 438 74 962 1775 1322 790 272 550 757", " 211 1662 1533 1711 1884 315 551 1722 1737 1972"};
    vector<string> part3 = {" 831 1228 1902 1688 902 698 693 333 973 390 926", " 785 182 1307 1347 1443 1046 1317 161 1427 1230", " 1494 788 327 1258 1079 1457 752 1193 300 618 29", " 1855 507 1470 110 519 1950 815 1867 1581 647 1384", " 214 283 1748 847 558 930 387 647 1925 1515 1431", " 1417 356 190 331 1652 1902 1651 1414 1314 211", " 120 465 1517 342 515 341 1346 560 487 1144 1108", " 1446 1100 889 1844 841 170 186 704 1661 1766 1374", " 330 316 1889 1587 1371 1403 1661 977 1672 1773", " 658 803 1731 1655 496 918 404 1013 853 128 1386", " 1115 161 1267 460 1197 1784 930 645 819 1767 307", " 1536 71 347 454 752 113 79 149 1780 501 469 716", " 121 1307 1351 1834 1423 1888 573 104 128 1835", " 1649 1290 1823 595 1218 1092 14 1727 582 624 354", " 1853 1364 29 555 871 1648 889 1342 1314 1752 1186", " 1461 537 1391 1417 843 219 280 1064 1248 1136", " 1334 1541 1907 1137 497 1400 513 1000 699 1818", " 1417 1958 1171 271 770 1428 1466 101 1839 1196", " 516 989 1922 729 1746 1401 1486 1868 1342 1559", " 49 529 406 13 466 1457 76 373 776 633 957 795", " 668 1818 1041 325 783 290 979 866 1294 1964 1970", " 1622 1829 1555 966 629 1650 1997 166 1166 1996", " 742 1338 570 564 553 1917 324 362 135 1317 171", " 1059 625 982 1894 1673 408 1524 600 1812 1032", " 1592 1141 744 367 1188 883 1247 132 1594 1716", " 1784 950 1562 1715 1807 1491 1482 284 527 699", " 92 1362 1158 707 202 475 1449 1950 1557 1662 807", " 649 1294 161 850 198 900 1820 1195 171 736 834", " 733 315 557 896 653 934 973 1382 688 269 711 263", " 542 1225 181 1052 1046 1532 1885 1053 1938 1895", " 1566 482 27 1598 478 1271 1264 1001 1441 399 164", " 908 461 666 1797 1146 1324 1930 1188 933 1265", " 642 866 169 670 400 1096 1754 438 413 10 1915", " 1326 770 1388 1264 186 173 229 950 1061 1316 483", " 1089 992 1753 1552 455 975 1103 836 300 1425 1372", " 1098 364 1087 320 391 896 262 21 1305 987 1000", " 1638 1132 181 1871 405 483 874 1684 1512 868 595", " 1295 1524 5 1253 1872 797 1830 424 1214 1805 1983", " 699 190 1635 1884 1990 1526 333 182 689 514 265", " 227 1475 502 1720 657 461 133 1476 1119 1448 1794", " 1220 1020 604 389 1934 1300 1810 545 860 344 1197", " 1636 1426 526 212 750 1678 1849 195 1301 1617", " 1498 259 935 509 231 1767 1970 1648 731 1817 1873", " 1792 77 1796 1480 1991 838 1411 450 1170 781 409", " 888 564 358 1027 1109 560 1755 1515 1992 1382", " 1000 1630 378 109 1229 912 257 563 128 622 1731", " 529 1665 21 527 1171 194 930 1081 1238 743 793", " 612 1714 1418 809 1365 586 1427 255 1493 1809", " 1717 1595 391 192 220 1616 795 1478 662 2000 1922", " 127 1583 71 419 231 50 1750 941 977 685 1331 1742"};
    vector<string> part4 = {" 259 1908 1919 1396 309 1705 1321 210 170 1258", " 1681 1957 141 1083 895 887 208 1382 997 420 225", " 1712 1266 1547 1726 1246 473 1655 1402 1143 1377", " 1951 144 188 1166 203 920 741 752 1752 1224 462", " 330 1341 445 1010 1670 575 826 263 183 18 1567", " 474 1295 1809 158 1852 914 736 1242 734 1578 1647", " 1569 312 573 1138 1484 464 1420 767 1828 1097", " 1965 1767 999 970 155 633 1659 673 572 1396 306", " 1304 1444 1067 127 1334 105 1278 329 1545 1718", " 1206 61 34 611 976 1240 881 725 1871 21 1092 1458", " 507 340 778 632 574 364 1677 94 1585 2 15 1067", " 1922 1722 83 1525 265 1438 816 1645 44 333 498", " 506 543 1301 1313 1971 1647 1940 1302 1665 721", " 1179 26 1747 182"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2000;
    if(result == expected) {
        cout << "Test Case 133: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 133: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test134() {
    int numSheep = 549;
    int maxRuns = 196;
    vector<string> part1 = {"86 1433 346 1246 823 1420 1104 1035 1681 795 39", " 312 424 1310 1625 549 955 87 990 489 1209 1047", " 1122 689 869 1619 1750 441 1917 1272 5 736 935", " 1692 1067 1879 1565 1128 1521 1578 1884 1507 1180", " 595 167 240 855 363 129 1611 1518 451 475 271", " 1117 1346 634 1772 183 1375 124 1863 635 593 29", " 707 1844 165 1109 383 1905 1472 1204 1359 1412", " 1285 114 1983 766 169 1392 1141 1819 166 1410", " 919 1850 909 1873 477 960 1439 156 424 109 126", " 1023 771 895 1183 1639 57 1062 643 516 1464 680", " 1510 1376 932 1909 807 719 174 1757 1162 247 22", " 273 1786 626 575 56 899 482 1426 739 1966 981", " 886 1731 1518 1129 1951 1785 1676 1794 84 990", " 1598 553 406 1284 1933 727 1053 797 1542 1170", " 149 250 1969 343 681 279 1985 905 1502 981 1867", " 72 436 1000 1722 582 792 82 738 1654 1725 255", " 916 342 1885 1571 1394 1439 1898 1233 1844 1690", " 954 1934 569 341 1955 804 129 407 1747 1275 1931", " 640 1811 645 619 1716 236 1177 655 425 971 1380", " 33 623 545 1738 319 752 142 1426 410 344 559 1619", " 588 119 406 873 573 836 1417 1277 151 436 253", " 212 233 348 868 1975 1065 3 948 1171 1790 603", " 1723 129 796 273 1296 105 17 1923 1548 818 1376", " 1043 1048 1325 1756 761 1464 1859 103 1085 9 844", " 395 1013 967 1362 1033 1995 866 502 528 515 1986", " 609 193 412 1881 828 945 1476 1895 1796 1870 1425", " 980 296 853 542 1001 1574 787 1154 1408 1750 1370", " 807 973 676 439 1882 941 1075 1026 78 1758 720", " 70 822 495 453 1745 611 1738 495 1198 682 607", " 291 849 794 67 1724 18 1548 1320 1736 1694 1084", " 255 3 1051 1783 235 1428 1099 1573 696 1991 34", " 1497 588 971 171 1959 445 845 535 870 115 1412", " 1624 694 1167 1294 1502 883 699 443 639 218 644", " 1577 524 1227 358 1696 834 1536 1383 1631 1118", " 605 311 1669 1013 105 774 1685 1715 1756 1767", " 1828 866 137 195 1253 1293 110 1505 343 1445 841", " 1364 1149 100 1149 693 78 1216 294 1796 830 706", " 953 1737 973 1496 1264 1183 606 920 677 371 539", " 998 348 745 1015 104 1125 545 740 392 146 568", " 151 137 358 1473 1912 573 895 373 1998 998 1990", " 1641 1834 1420 1605 287 418 1455 1448 1280 914", " 414 1270 1337 446 1463 465 1171 539 1727 1580", " 871 1230 1652 606 1473 1061 1665 485 484 1221", " 1154 572 415 1572 1481 1087 1167 1608 976 1454", " 693 847 1776 944 185 1393 1553 1306 1279 706 1667", " 1617 281 252 477 1980 477 989 1523 925 1656 109", " 381 194 227 1107 182 1927 1062 1416 563 1790 1050", " 1372 949 593 131 151 144 1463 78 1347 700 982", " 1270 1528 1099 281 654 1528 381 642 1114 1645", " 545 1760 1326 655 765 900 140 762 575 657 408"};
    vector<string> part2 = {" 1583 69 1539 782 234 1658 929 1319 324 818 965"};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2716;
    if(result == expected) {
        cout << "Test Case 134: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 134: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test135() {
    int numSheep = 471;
    int maxRuns = 267;
    vector<string> part1 = {"410 1806 1509 777 1009 1100 1556 351 503 32 1668", " 1039 729 1014 1566 1198 1830 946 775 587 835 1137", " 104 800 66 175 1212 342 675 1706 682 686 235 551", " 148 573 421 1428 1055 615 327 1422 372 1632 390", " 292 902 1663 460 1452 677 1571 217 500 146 1883", " 1463 427 116 1681 1907 545 682 822 1929 860 1042", " 756 591 28 1194 447 213 306 1093 990 74 1628 608", " 473 1987 1460 885 883 552 251 495 90 1663 1280", " 960 1805 1582 1045 1024 1949 1067 355 903 1542", " 454 284 316 544 121 994 1246 754 1662 343 1059", " 1926 178 1700 480 867 88 1998 57 1974 898 1461", " 681 866 44 831 1028 1066 1305 1029 1482 477 1410", " 28 351 850 1787 1703 1289 515 1960 1131 1753 1262", " 1809 659 1582 1961 1538 1029 1318 263 710 68 487", " 201 1333 743 1133 582 379 1707 964 1358 1483 308", " 1577 107 1028 1642 412 1194 243 1441 1768 56 1736", " 1497 1511 96 541 1384 1887 324 1189 1492 785 10", " 418 70 596 313 1498 811 1805 1011 1162 621 163", " 1542 971 1153 1008 430 1172 1170 378 1597 896", " 1134 1858 990 434 1551 1724 166 1734 29 257 444", " 1194 82 97 1482 253 831 733 516 326 1213 165 1481", " 1288 182 1277 1192 1877 196 133 1045 1232 1626", " 1416 1852 1944 466 677 1204 1522 503 1549 984", " 949 1733 668 418 12 1853 908 745 87 477 454 1661", " 196 735 1082 1935 109 849 1010 1431 1537 1861", " 17 1681 727 1818 1713 263 1807 106 814 1829 1740", " 1957 461 1624 688 31 1762 825 1718 325 560 1225", " 1222 886 865 909 852 1903 1336 1963 1610 23 693", " 1269 1671 205 1386 39 1927 1327 1708 1740 710", " 908 1212 1781 272 1884 998 444 1882 350 1129 1190", " 1206 1842 1496 615 18 1352 561 1259 99 665 284", " 1666 1057 981 1670 635 1458 1020 623 1268 1467", " 1185 1312 673 1300 1995 753 1547 1244 126 394", " 747 1532 106 120 1351 912 1171 483 1804 1428 1937", " 526 1709 92 408 1358 1563 1591 1642 686 918 84", " 604 1506 1491 84 550 203 798 322 911 1243 497", " 1665 1784 1849 901 1302 1784 1559 265 102 1288", " 1730 961 1680 736 362 1744 1294 946 994 58 1255", " 196 1658 1603 1785 564 492 1724 870 1943 148 1375", " 845 579 1299 1144 1882 527 1061 1175 400 535 1409", " 1076 118 963 1249 1970 847 1050 452 1239 1375", " 1907 752 250 1338 1117 267 574 799 1680 1468 798", " 854 1491 589 1913 742 1791 149 481 682 324 1811", " 430 1701 1003 941"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1998;
    if(result == expected) {
        cout << "Test Case 135: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 135: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test136() {
    int numSheep = 1672;
    int maxRuns = 307;
    vector<string> part1 = {"908 1626 1877 65 736 124 80 1760 889 146 619 950", " 257 1148 1286 326 656 577 64 433 114 638 1533", " 1085 1369 224 1192 581 1983 1940 1227 1345 766", " 892 574 39 1059 1765 380 1842 928 1783 924 1090", " 1794 1324 1998 1668 274 853 548 1204 1248 1625", " 323 1824 748 1136 554 1374 1015 1407 883 1873", " 10 1828 23 8 4 1716 1079 456 810 803 808 1451", " 394 1412 271 600 1842 1746 269 1925 159 1935 252", " 427 839 538 1499 393 122 86 295 652 855 280 1643", " 845 1915 209 1048 250 16 30 616 890 307 252 1312", " 1387 1526 1088 1924 1471 568 901 592 199 1153", " 1159 500 1341 1618 144 223 984 812 1297 1408 348", " 49 292 264 721 1016 95 1252 725 1300 1036 1274", " 1604 1255 1446 1 567 339 1286 790 1754 1730 463", " 1052 387 1190 1799 1140 720 1763 967 1550 1247", " 1180 1669 111 372 491 1600 339 439 357 1307 1876", " 908 1325 894 1243 1175 88 969 167 1023 514 186", " 1980 1090 814 1921 1390 249 1187 114 94 430 533", " 859 612 1787 578 1111 1294 1973 607 1730 87 1193", " 865 238 651 1414 1648 181 986 11 1208 32 1292", " 242 147 503 1188 813 1092 1994 552 1247 245 1808", " 735 863 851 1469 92 1433 1464 1625 1674 741 1833", " 1023 553 1100 1761 1507 1384 968 1422 440 627", " 1259 1755 1889 463 1427 158 438 227 1981 1970", " 1274 1785 1271 184 250 1430 314 1257 1128 886", " 72 1791 1529 764 1442 1461 187 601 525 1292 124", " 41 790 495 1543 710 1652 57 1712 216 301 1814", " 1442 10 1995 1511 1766 1795 112 298 1031 1075", " 552 362 1540 588 111 1154 1045 1124 787 88 1762", " 1688 106 903 48 1906 1126 365 1118 638 1112 1559", " 1311 1530 868 138 1832 1468 1716 580 1709 232", " 1327 769 343 1426 1707 1538 25 1473 1472 1147", " 771 1973 943 732 342 363 1268 722 393 334 711", " 511 1771 1871 1961 1432 1002 216 173 1613 1427", " 62 852 1070 427 166 1759 220 1726 1417 846 637", " 1606 1562 734 644 783 568 339 833 1080 1471 322", " 1349 60 1204 194 1128 1794 1136 995 1054 801 1068", " 1664 152 88 1951 1186 791 798 1828 1717 326 389", " 143 1534 361 1012 1649 1613 1536 1157 474 1631", " 1040 75 1871 1032 260 1001 44 623 80 1103 1003", " 74 1271 54 486 908 1293 79 217 668 47 1046 1964", " 1399 977 861 143 441 200 406 23 1720 234 1296", " 856 1250 995 151 547 1656 778 421 1187 938 211", " 1325 962 1701 213 1226 1505 667 462 1475 760 1010", " 342 977 1226 719 98 276 125 132 26 323 248 1400", " 1261 275 1278 390 1219 1499 1883 1193 1892 1637", " 364 1574 791 1014 19 1386 1373 306 59 742 1519", " 666 1481 1656 260 23 740 1036 264 1644 1079 114", " 1658 375 1892 1282 693 664 763 1853 530 693 1467", " 1462 1947 877 728 1650 1106 1675 878 667 483 814"};
    vector<string> part2 = {" 1365 539 856 103 390 599 940 562 1788 569 546", " 185 1070 1251 935 901 1836 1409 709 6 1768 926", " 1817 1061 8 1754 359 456 793 250 1500 966 278", " 896 117 12 1384 381 1102 574 1920 20 189 482 1284", " 1841 897 10 1590 730 1845 752 859 1525 1753 471", " 874 378 659 1023 1171 186 977 250 723 1104 642", " 1677 293 870 406 1225 1194 732 1380 474 1725 597", " 747 1215 1616 466 186 1147 283 211 1555 1131 983", " 1674 365 1722 1333 563 1306 913 1380 850 329 1299", " 1171 251 797 712 1971 1815 1277 408 1681 1685", " 1101 1323 1379 1808 44 143 913 1632 1007 1881", " 1398 1411 671 399 1462 1165 95 325 1570 366 673", " 1350 634 99 1129 1126 19 159 641 1270 393 972", " 559 1496 54 1260 100 659 340 1829 342 985 592", " 1132 1600 1175 927 1937 936 1740 1253 428 2 734", " 1091 1990 1011 1834 513 732 761 474 429 15 1401", " 316 1154 1407 1096 656 253 841 238 290 908 1694", " 776 601 424 518 1565 767 1796 1125 1012 627 438", " 1357 1732 1931 502 1044 59 781 1844 536 1891 1184", " 1903 1840 1378 526 291 1796 1361 1533 867 1264", " 655 271 1672 709 1238 1366 1208 1856 1695 476", " 362 95 1794 1794 441 385 1793 1847 487 1950 1509", " 620 1860 999 120 1701 655 591 821 802 1628 554", " 525 1743 647 308 1660 1385 1672 566 875 162 808", " 1029 1687 1223 1426 1659 1281 1136 1997 1833 1415", " 1031 298 333 564 1581 569 1745 180 1305 992 356", " 1274 82 350 1438 981 1023 477 510 512 605 1511", " 1909 809 1602 731 1240 213 79 1967 690 1522 1947", " 56 905 1084 1069 1512 242 516 1370 167 1703 1086", " 1856 805 216 1338 370 1855 256 1862 693 464 185", " 850 1434 1498 658 1572 78 853 1488 652 1246 455", " 787 1354 1806 756 459 287 1212 232 10 1282 1601", " 1059 460 548 632 1141 1380 1014 818 218 696 105", " 345 279 912 709 339 1830 1355 383 1161 1150 1364", " 1877 937 1831 1235 700 1864 1980 934 476 1356", " 1185 1841 1641 1834 615 1843 1654 107 1278 747", " 693 613 267 1851 1042 1735 1866 812 1505 580 1510", " 1330 1525 803 54 1570 947 1014 538 1745 1653 1131", " 1815 31 1635 1424 1662 1844 303 426 1012 1801", " 1344 567 830 1866 1586 178 1419 378 956 743 470", " 696 1234 1559 1772 1393 667 1470 443 1957 1862", " 740 764 94 761 1201 1842 1663 1082 1141 739 1018", " 1073 1958 1975 1893 957 315 270 1965 726 9 1447", " 1243 772 1788 815 1094 414 392 406 698 1749 896", " 1480 791 162 1319 122 125 173 1125 1572 1719 576", " 1356 46 949 1067 1532 1694 1646 953 323 193 1605", " 1507 1113 1575 1692 259 1292 1012 102 28 1655", " 1828 1042 504 1048 575 1365 1362 1218 1182 150", " 997 1520 637 592 1428 715 753 1956 988 285 635", " 189 1639 1127 701 664 1490 1105 1021 387 1777"};
    vector<string> part3 = {" 736 1304 229 1362 1549 985 1599 1263 995 1962", " 1794 696 489 1673 160 1920 1953 767 359 935 847", " 1342 716 1432 158 633 1188 1539 48 296 313 142", " 133 587 1130 296 334 703 52 1326 1538 863 1984", " 785 1728 493 1837 1720 1142 81 1712 578 81 1057", " 680 286 1270 66 1831 1359 1297 413 1182 1098 1340", " 918 216 82 34 329 27 1830 197 1094 522 521 1053", " 1071 1582 370 1377 830 101 149 1179 1629 1195", " 130 567 720 89 348 844 1286 1148 989 1822 1328", " 424 1944 1635 1264 1372 1423 1525 118 903 678", " 1399 327 1435 1479 492 1408 1009 632 452 1849", " 1613 26 584 1341 691 355 1032 1000 602 687 547", " 338 545 1090 7 1852 1247 49 346 1496 15 1713 824", " 286 1212 720 589 1996 1609 1923 565 846 900 335", " 898 462 988 1213 863 1054 1553 200 1987 1491 603", " 408 1143 612 125 1252 683 1972 1211 531 1734 1612", " 42 1667 1741 1037 7 670 70 227 266 1786 285 878", " 796 1200 1687 1582 1784 368 1813 1660 782 2 1387", " 1937 1021 1408 834 849 770 1554 426 1912 1132", " 426 1524 1224 466 1969 1871 1937 1303 1169 561", " 403 92 278 1209 1360 1623 95 1506 901 1731 1960", " 1435 1322 264 493 1365 1992 1596 584 780 1899", " 1466 699 250 584 482 1365 1224 1328 305 878 1974", " 1877 1779 1925 1789 1805 1478 1885 1747 133 721", " 819 1406 744 725 1315 1277 1216 1362 1707 1332", " 1228 1341 1792 966 627 1408 384 40 1927 722 1368", " 579 1165 457 1303 1370 509 1534 306 1181 997 256", " 1561 1470 515 1356 1514 1842 1666 363 693 201", " 660 364 304 1762 1121 595 235 584 1135 242 695", " 1634 1155 1655 18 1018 471 822 1062 267 156 233", " 388 1217 1122 1349 794 1068 741 1823 988 933 362", " 687 738 388 1627 19 111 1472 1759 631 1282 1129", " 1758 1060 1664 915 1027 614 385 660 67 243 250", " 1824 461 281 1228 1234 1634 663 1562 350 679 1006", " 128 1637 265 889 418 440 16 203 1315 97 1911 56", " 280 366 1227 567 1644 1983 209 806 245 1587 301", " 1503 1718 1821 257 730 1062 1469 1059 1634 1873", " 1804 1874 268 14 1880 762 117 1649 1 1573 1724", " 1122 563 1989 576 1501 437 1087 1371 219 689 1818", " 143 1 1814 1849 800 1816 122 661 354 669 387 1087", " 756 202 232 724 1006 900 1347 497 1767 662 1514", " 873 1850 222 350 693 313 470 900 1595 178 1878", " 1698 1907 577 440 1564 982 1799 348 384 791 1274", " 1037 1359 1574 1885 1588 1837 387 1889 1820 650", " 1616 1211 1669 162 1578 1704 509 642 857 1359", " 284 700 182 694 1694 1101 1693 1144 806 1837 1203", " 1973 257 1478 857 778 761 984 578 418 732 989", " 1825 957 1772 1209 1319 1777 1832 1156 236 1518", " 1914 779 987 1478 322 1459 1107 1645 771 1216", " 1258 1469 45 1157 1525 1789 1835 1196 1590 147"};
    vector<string> part4 = {" 1518 665 517 231 1290 1866 1747 1691 846 1874", " 235 1496 138 1398 121 1418 284 1719 1711 334 1036", " 1265 917 234 569 852 1169 799 1827 225 504 795", " 1210 935 116 1490 118 1246 487 302 1945 275 1534", " 980 83 758 1177 1928 1988 545 330 788"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 5276;
    if(result == expected) {
        cout << "Test Case 136: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 136: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test137() {
    int numSheep = 295;
    int maxRuns = 242;
    vector<string> part1 = {"1981 1370 22 1767 279 1487 192 1475 360 175 1685", " 965 682 1197 1418 1394 736 1729 1454 202 781 1795", " 770 122 1827 25 267 1430 1005 1266 150 1781 577", " 1409 1259 1965 1872 669 245 1761 1665 1880 161", " 968 1005 1071 677 912 811 1490 723 706 1791 949", " 1773 1272 1103 1062 1163 460 1991 1920 764 1987", " 941 1247 1161 1674 1351 964 816 159 1339 1899", " 191 1588 1479 1420 495 495 1907 1167 1172 1813", " 1811 1396 850 345 1409 1217 834 623 443 349 133", " 310 1801 1053 648 789 1826 300 1848 101 1279 1969", " 760 527 1792 1372 289 712 1278 1952 1114 922 64", " 1047 1688 5 482 1634 1735 1510 83 513 874 630", " 637 883 1583 982 475 1341 6 1177 598 944 1028", " 196 1232 950 1571 1825 629 1229 428 746 910 1320", " 1000 1540 1272 1345 963 953 229 340 322 59 1378", " 1608 935 1702 1768 719 514 1445 390 1265 1562", " 920 1919 1219 572 724 880 429 1939 1772 774 365", " 985 239 253 502 1789 401 1339 797 1142 1870 398", " 758 1847 1244 83 105 387 353 665 1259 802 1733", " 1573 1515 1317 297 1864 1642 343 568 910 1838", " 1172 1244 40 841 1358 1077 396 517 1485 726 826", " 211 103 448 1859 1141 594 579 182 1144 597 1282", " 747 374 1621 54 1699 1306 511 246 943 1365 576", " 934 1232 289 221 749 1983 1941 529 523 1471 1736", " 897 1467 832 201 966 661 149 1950 971 759 823", " 299 1557 741 1419 214 1955 1695 1793 73 6 1378", " 415 1287 339 34 286 1475 7 1318 1588 685 1291", " 1460 641 1166 1288"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1991;
    if(result == expected) {
        cout << "Test Case 137: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 137: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test138() {
    int numSheep = 1134;
    int maxRuns = 989;
    vector<string> part1 = {"134 1051 1133 1250 372 1452 1726 502 582 60 186", " 1981 593 1758 506 1084 1235 1544 554 320 1031", " 1145 94 416 298 525 435 1456 651 1903 1159 344", " 1736 142 219 613 567 963 839 1950 673 1154 463", " 1625 1526 1455 1477 255 349 1843 1248 1933 1723", " 191 763 413 166 1712 480 1044 778 1412 359 765", " 1916 188 1609 22 669 1698 842 1674 1409 668 1351", " 911 1744 1442 380 1856 733 1117 1129 1805 1701", " 1184 1398 1714 538 908 1156 773 865 1438 54 1092", " 185 1308 208 495 1198 592 655 33 60 979 521 853", " 1319 1390 230 567 842 189 991 1448 1854 421 70", " 438 478 1272 1174 1612 810 166 188 1077 1480 1958", " 1463 807 641 1605 1660 1677 555 799 1117 837 130", " 1692 203 1212 253 220 473 1975 271 1990 1939 691", " 1706 1372 1951 1823 1403 500 1170 456 786 1539", " 134 869 224 1419 1403 1861 102 551 1436 1078 491", " 1299 1939 1671 1198 81 1456 1328 1613 1002 165", " 720 1526 1186 53 39 476 1135 1103 1877 509 859", " 1062 659 209 1271 819 897 1636 531 477 1087 216", " 1420 1703 1200 1957 981 666 284 675 57 533 1061", " 1898 1328 291 956 135 560 1484 277 1873 597 862", " 520 61 964 1613 473 1375 1676 1624 746 1394 1055", " 1758 1808 234 1840 913 1219 359 1084 826 1162", " 365 1054 1550 103 914 1518 271 734 760 74 694", " 92 1980 248 575 565 189 1562 37 1998 1313 691", " 993 717 1316 1913 477 574 467 1963 1917 919 1592", " 565 496 142 391 546 819 1849 1400 1553 1798 615", " 437 1435 1732 829 1303 1476 189 1923 1532 608", " 758 1600 1613 1400 20 1619 605 1437 1445 516 899", " 1164 640 1499 572 899 173 1599 1146 403 727 929", " 642 1862 1265 1833 597 1507 1559 129 349 879 567", " 578 187 374 1984 1996 814 1435 442 746 1654 796", " 38 500 41 698 1847 1782 1238 1399 1040 1938 537", " 1889 1824 1202 1999 222 12 592 794 600 92 1753", " 1687 1083 1353 1407 941 1212 1332 687 1417 349", " 523 771 1816 478 744 808 964 1494 1914 146 35", " 131 1448 1934 860 62 1651 120 1404 1586 1003 447", " 1112 1646 421 390 1268 1049 540 1100 1331 1814", " 6 766 416 409 696 604 572 744 300 889 856 1765", " 337 1782 118 1339 660 1586 1451 982 830 891 1352", " 1592 798 1080 1113 714 1881 1962 125 1360 943", " 79 1096 1840 1231 777 1589 1380 158 335 384 686", " 692 483 131 1308 1303 1460 175 188 1564 836 413", " 1857 635 1677 1765 534 99 463 1951 1794 1102 829", " 1385 1453 38 1689 505 1043 600 253 1043 119 1336", " 1915 540 329 85 583 1855 395 126 484 192 1248", " 1397 1516 1248 325 1635 1013 1777 565 1564 736", " 779 1416 1269 611 1086 1244 211 473 760 7 789", " 712 409 939 1125 324 1973 1515 363 1714 633 749", " 1859 1695 1858 465 320 930 1995 529 1184 1888"};
    vector<string> part2 = {" 1510 456 466 1567 1757 904 422 1196 1896 391 500", " 1489 1921 1850 319 1185 279 1557 1051 390 1872", " 1985 1341 1213 323 351 1986 1824 581 1949 899", " 1669 81 1558 1639 261 61 350 1209 1919 1851 495", " 1612 1773 846 1341 876 968 494 481 1127 1592 861", " 1220 939 1134 1946 106 1554 214 1862 961 956 1831", " 198 1962 187 1613 664 1319 1093 504 1529 1638", " 661 1078 1606 1405 1315 1839 1841 1574 1989 80", " 1975 125 134 586 464 408 711 1067 1287 1878 611", " 190 603 699 1207 527 580 1883 1905 1649 266 1396", " 648 131 1442 674 1932 800 1050 1613 1968 134 872", " 1781 1877 298 1117 497 1769 873 1728 1652 736", " 1394 1241 1825 257 1587 1946 1361 789 1345 1973", " 67 731 108 1786 419 1872 145 815 1933 781 178", " 166 371 1969 596 649 1566 736 1031 105 1106 1212", " 1691 1559 1189 1524 1361 18 642 1434 1488 227", " 808 1769 169 117 552 1286 1308 1338 591 614 1388", " 521 1792 1985 1873 540 135 1317 157 1993 9 1998", " 930 1279 591 1653 865 1940 21 839 1733 876 734", " 1543 1922 1805 394 406 552 1553 1739 578 157 1259", " 1044 1117 121 1005 979 607 851 554 1232 366 253", " 1319 694 222 1099 440 739 548 410 1272 747 1999", " 655 1336 673 777 669 668 1480 1945 1787 51 534", " 29 933 998 362 1399 161 370 592 597 1173 873 883", " 966 1976 1365 1907 185 838 271 1543 776 408 1087", " 1988 485 1123 1093 478 1684 1103 456 1310 1002", " 1963 509 646 948 816 74 1777 586 35 1099 334 1317", " 926 1220 1278 1151 1009 1160 843 442 1669 1018", " 1116 165 1138 739 1190 1690 610 851 1366 91 933", " 1195 140 1134 1062 954 1114 1238 13 1430 478 868", " 1063 1325 1243 157 211 269 1855 494 142 977 1472", " 1294 1074 1789 24 19 26 1036 1027 664 697 519", " 487 301 60 185 340 767 349 497 539 442 1945 888", " 371 1996 1796 1428 346 1355 1980 1931 1113 1594", " 1355 1628 251 1192 1521 1163 1568 1402 1409 1915", " 1581 1722 1722 1761 1830 239 650 1974 1998 719", " 1118 1773 1870 466 1485 438 1572 1146 1317 434", " 1502 1632 5 1912 1096 1888 1246 967 131 1527 356", " 1549 806 828 1641 1560 136 957 1355 1499 127 1612", " 573 1123 819 1450 1828 1066 1351 145 1203 1692", " 745 520 345 264 1111 947 568 842 1268 1578 586", " 1094 875 1515 1855 119 452 1074 970 681 1221 1192", " 1517 1043 11 905 1442 890 521 794 972 1266 1583", " 683 1597 582 1567 442 537 1530 172 632 1050 958", " 1988 1072 1926 22 1840 1285 366 168 1833 1227", " 1144 1685 1805 1801 79 1148 1410 765 106 1068", " 1706 1088 1514 728 296 1836 1416 1664 210 1083", " 1998 285 1368 482 1556 509 772 1598 1711 576 1538", " 1645 1557 1857 274 1185 20 1657 139 1120 1299", " 1665 1138 1247 1449 71 1387 1521 1453 692 1856"};
    vector<string> part3 = {" 634 45 1723 800 425 1203 707 1129 1029 309 1256", " 937 71 1612 719 1361 649 1911 1897 1851 621 769", " 1211 78 1521 352 715 1488 817 112 1485 523 766", " 1103 655 1555 974 538 561 967 979 1992 1834 1957", " 1520 1845 1319 1651 1866 1234 1620 716 187 875", " 976 903 1277 9 1500 1198"};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1999;
    if(result == expected) {
        cout << "Test Case 138: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 138: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test139() {
    int numSheep = 1509;
    int maxRuns = 1106;
    vector<string> part1 = {"1806 220 1202 1930 1432 145 671 677 1855 1728 364", " 943 241 1544 1520 1136 283 300 1618 691 1203 1961", " 121 1861 1195 267 770 1214 4 320 546 254 626 973", " 1756 1244 959 127 1989 1595 610 1781 1479 1871", " 1409 909 1379 1215 660 252 1578 1226 444 354 158", " 1070 804 109 1604 1719 711 573 1853 582 1106 72", " 1909 1378 1483 1502 587 1699 275 784 707 1900", " 56 892 1000 1928 1069 1068 534 1561 1150 1296", " 950 1597 1871 281 1355 690 661 1320 238 1996 743", " 1526 1525 932 789 37 1657 834 1658 199 919 287", " 1982 126 375 724 895 1091 412 1960 1954 1546 1019", " 376 1012 198 1039 823 582 1337 1868 1112 40 479", " 1203 1833 1124 1180 1510 1795 1183 1555 653 1775", " 380 1225 151 155 530 1961 1716 1709 1950 776 1699", " 520 1388 1804 1016 909 1362 313 801 259 349 604", " 1512 1962 433 364 43 1244 747 1981 1947 1365 1369", " 22 1794 485 748 1686 152 355 396 643 1751 244", " 1469 1875 1310 1228 1122 1918 1443 1333 799 707", " 61 1294 515 1467 576 485 1861 203 1882 616 1229", " 1262 1422 1848 1799 1570 159 2000 1476 17 751", " 1941 274 323 984 1086 1373 1810 859 1941 1061", " 126 1655 526 706 1586 13 999 1813 247 738 1345", " 1473 1207 1972 1023 1546 53 1680 1468 1837 219", " 1699 178 1360 1588 1535 808 555 1323 161 796 1655", " 867 609 1681 198 265 378 138 1204 1271 298 1160", " 1004 1803 1804 1424 1630 871 164 1681 751 1017", " 1642 1860 369 1246 1036 981 37 243 653 785 110", " 1932 738 736 1112 265 46 1893 1945 1733 316 1156", " 422 208 861 1411 233 1360 259 1508 1954 932 1054", " 834 716 169 1988 1514 882 1104 1686 1437 33 224", " 1825 1763 799 1096 1282 1969 492 456 1582 221", " 1720 800 977 1682 389 456 1189 384 879 162 1989", " 821 665 1597 402 1810 1082 892 806 1687 1576 1943", " 1927 321 3 1647 1470 1637 613 1559 89 269 121", " 402 1566 1874 906 392 1073 762 349 1357 392 485", " 1489 835 1021 755 1557 1038 1603 344 204 888 1836", " 226 1629 1095 1114 1114 621 1532 101 1001 1009", " 1822 701 1502 366 1302 1073 125 884 1915 1327", " 825 1307 17 860 565 1388 190 1558 392 691 1229", " 312 1087 1812 295 1070 1256 908 1694 1850 844", " 696 315 806 1019 972 315 1851 1439 1933 918 673", " 1786 1247 1649 1672 481 119 212 807 1454 360 893", " 387 1072 80 1318 546 1558 872 1429 1071 316 1655", " 1587 1889 452 697 1232 40 1000 1871 661 504 415", " 518 1529 1641 463 1452 184 1069 1794 1840 480", " 292 300 1658 686 1405 924 1531 1257 1006 657 822", " 1325 149 1071 1294 1148 1008 1825 770 1423 474", " 241 1639 1827 1527 1798 1253 866 1650 1086 1541", " 350 68 1452 697 902 1864 1667 908 226 861 900", " 1291 1665 1836 948 1364 758 1162 258 94 398 1824"};
    vector<string> part2 = {" 1591 1674 5 1289 31 1849 1770 44 407 1950 768", " 187 1768 277 150 491 1971 339 985 1349 333 1856", " 1192 1084 636 1283 56 576 130 540 297 1218 506", " 232 1433 393 961 1728 88 1796 1944 1635 524 1393", " 439 1638 1366 974 1427 473 1316 686 803 700 1240", " 1918 1023 1505 937 1128 298 196 1512 903 1666", " 1000 6 269 181 1075 996 1874 1591 173 779 398", " 1217 1717 1166 1656 1804 1269 764 287 878 471", " 58 1946 1172 1032 592 1435 1409 76 115 1017 1622", " 210 452 622 307 1001 118 62 1580 451 1525 953", " 879 1913 1382 1699 741 1232 9 1378 1224 1978 646", " 663 324 639 279 1313 368 1662 466 1278 1103 1407", " 635 1124 978 11 295 799 1856 206 819 11 1993 251", " 1062 149 1751 176 1796 1613 454 1260 1685 1455", " 54 719 1621 850 1103 1825 1069 1295 1476 1142", " 1715 1718 90 1839 813 878 699 1412 1851 1260 614", " 449 470 1943 1290 463 1235 921 515 1445 1069 1752", " 1651 671 610 1637 565 1133 1644 1796 1982 351", " 1684 1550 1333 383 946 212 100 1663 1111 1428", " 1823 1926 318 833 1221 1765 1968 734 69 430 1448", " 1179 1507 439 230 1235 1498 1083 1432 629 1572", " 1442 902 802 1416 1699 1644 1062 1620 1559 1917", " 1675 491 1023 1766 1994 1744 1064 1538 1683 1108", " 1966 1612 944 1421 815 137 708 903 98 1815 761", " 1535 1208 1793 1627 542 1537 613 1583 66 1010", " 1191 201 1283 1014 1495 188 773 1122 16 674 1113", " 1805 1107 1374 1369 1136 52 1856 1572 1531 162", " 746 1334 680 1613 913 1004 1347 1235 278 1047", " 778 684 1941 1583 562 327 525 1321 1546 1844 113", " 1356 1556 691 1151 432 1745 989 1215 1016 428", " 1058 1790 1074 1738 1218 1052 285 737 1344 1538", " 1882 630 1748 1032 102 1563 1072 1542 583 1721", " 293 1609 596 1594 1574 841 1866 603 1869 1593", " 1612 1999 1069 1454 267 1271 297 403 727 1473", " 291 108 532 1647 567 650 1041 74 520 591 389 1574", " 1467 1810 1690 1383 1411 901 1566 212 1373 1765", " 152 1148 909 1650 1064 1782 1368 368 1858 557", " 1572 1852 829 220 620 707 1623 310 1145 912 1211", " 1881 302 1332 677 1620 1074 1835 1605 1318 851", " 1244 291 937 809 945 1026 784 1784 1545 1303 380", " 667 986 780 53 1293 314 1632 1719 633 864 1698", " 427 566 1527 926 1928 187 339 1159 1817 649 1046", " 1173 1360 216 725 352 1867 498 39 174 263 1808", " 1614 1034 1394 497 393 1574 1606 1426 392 834", " 1842 1627 1250 829 859 1286 1924 810 611 1013", " 1691 967 872 724 1796 1883 401 1293 1457 606 1221", " 1371 959 110 1804 1745 294 511 41 1339 865 850", " 1001 1685 1326 1801 357 123 1991 1321 1614 257", " 899 97 1322 212 551 634 1833 784 145 528 1966", " 484 598 241 618 915 1642 531 187 1244 464 10 1157"};
    vector<string> part3 = {" 540 387 746 1599 434 1061 90 1890 291 197 778", " 1021 240 1734 1494 156 1653 1645 124 1834 1491", " 1227 1226 1557 1184 1565 1211 433 157 32 596 576", " 520 1961 361 688 1635 772 1622 1973 1093 778 1019", " 1673 48 1977 759 1441 1715 79 600 626 416 662", " 578 276 96 1159 1455 101 1078 1992 917 65 625", " 151 1134 353 662 1116 900 1249 702 410 315 1446", " 396 1799 132 768 1313 765 191 1837 499 1839 1680", " 351 492 1023 1654 1438 1455 655 1304 1280 1616", " 263 576 1784 1828 1975 477 1645 1830 1293 723", " 669 956 1305 1190 1298 1929 223 1687 1123 1733", " 45 1326 830 346 1726 1224 1621 256 686 115 886", " 1387 1103 1688 639 1731 811 616 1634 181 363 1019", " 1829 1384 1719 1684 1502 1106 15 1833 1069 1020", " 1226 177 1610 163 876 607 1216 1057 637 958 394", " 1900 216 29 1198 1884 977 1918 999 595 363 1306", " 647 552 153 1239 1164 1220 1971 700 1954 1249", " 908 1843 362 352 513 1264 794 490 180 1010 1092", " 1177 650 648 203 552 945 694 1604 1976 1703 1176", " 234 1780 1303 422 1076 247 1589 616 1450 525 972", " 1036 1606 1080 1253 1222 312 1332 1803 1927 1581", " 1148 1421 1153 560 142 307 361 1089 1596 1829", " 782 1398 837 521 138 879 1460 1403 935 1694 631", " 1953 643 1639 418 607 455 1124 1877 185 932 1772", " 1500 1816 1407 869 1349 1775 1743 1639 23 1694", " 996 1107 241 1510 234 1524 801 1454 31 517 102", " 1973 193 531 504 1129 1035 1349 1334 55 962 121", " 1056 1092 1531 1888 1783 1644 1839 1517 1425 682", " 17 794 1426 327 1967 972 439 981 72 375 1156 574", " 622 741 769 1641 1755 195 128 1566 56 397 706", " 9 972 75 1035 868 754 1531 339 1216 1534 514 1342", " 916 929 29 1982 1498 715 189 1992 581 737 1426", " 549 1400 1199 871 1433 451 431 142 937 63 1131", " 813 1144 749 767 1034 1827 1225 1027 1555 1087", " 1573 423 1281 799 1251 1407 574 1258 1010 1522", " 132 939 1934 1742 744 107 1569 174 519 301 1022", " 735 415 1368 1712 799 225 91 1070 230 134 507", " 1713 1626 1392 624 1225 622 770 817 461 1834 178", " 1709 274 1249 1806 685 895 1550 1693 182 1854", " 769 120 1410 532 1177 312 1393 917 1906 1090 1900", " 642 1121 1568 795 1908 1853 17 983 654 1473 197", " 1154 1422 143 1585"};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2000;
    if(result == expected) {
        cout << "Test Case 139: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 139: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test140() {
    int numSheep = 1990;
    int maxRuns = 1524;
    vector<string> part1 = {"1463 1146 1868 1030 1240 96 958 1875 1638 1816", " 831 134 1373 31 1545 478 1365 1563 1942 524 1622", " 948 1283 1660 1342 596 1635 1880 337 1930 224", " 1673 1456 901 871 527 1645 671 916 755 254 568", " 331 1595 1440 1653 1402 1534 989 1209 1067 1033", " 1473 354 1230 977 1754 631 182 1657 302 1457 1874", " 678 1250 1831 143 1057 1576 174 1100 77 1576 480", " 191 442 1938 1885 646 938 34 1344 1 898 1206 260", " 14 147 428 102 1588 1961 1999 636 340 227 900", " 1814 1932 68 1344 20 847 1097 28 473 2 1485 1724", " 350 439 170 1644 1658 1407 320 1180 545 812 602", " 1725 1818 245 1807 1180 1941 238 1895 943 44 1783", " 512 1054 1626 1171 1423 1140 1546 1724 106 213", " 529 852 133 1138 1150 15 1467 475 1857 480 1200", " 1413 970 914 1877 1388 467 168 844 1482 561 374", " 76 1065 1798 305 1319 149 11 1380 1658 774 1437", " 245 548 13 1829 1688 315 268 1468 627 1308 1899", " 222 417 1425 888 1775 410 888 1102 1643 1986 1185", " 298 274 929 632 1402 1957 1828 692 870 410 1123", " 1023 868 550 818 504 919 1579 539 1253 999 623", " 1643 1372 1271 1583 1996 196 1955 420 1428 1767", " 392 1254 1708 331 1417 318 291 1570 222 784 1972", " 286 1712 1945 933 1481 1651 85 1489 948 1171 692", " 1849 446 386 1309 870 520 1904 564 1875 486 316", " 329 1752 1272 586 1041 1289 1082 1270 824 497", " 953 1960 726 1625 1127 1641 578 1662 1889 1508", " 101 1890 1807 336 1761 1729 1803 1917 1057 102", " 1510 525 1554 1391 663 1478 915 479 293 1781 1417", " 850 1688 437 1382 550 362 1392 1275 1529 1764", " 517 1227 1149 1654 1018 978 947 39 1908 661 951", " 206 501 1612 168 832 1301 1742 1275 1771 548 1451", " 1168 1346 1070 480 1733 842 129 391 473 1540 875", " 61 916 157 584 1160 885 1874 890 216 93 1752 1513", " 1948 1306 458 1902 937 1766 52 618 439 1265 1600", " 268 1133 796 191 1635 766 328 379 369 1139 238", " 1754 1745 667 352 1541 1290 640 799 1754 627 332", " 783 878 538 1388 568 1943 64 1124 175 1546 1239", " 995 1892 1536 1487 1705 1677 255 189 310 835 1318", " 1933 324 602 1928 1706 327 1175 861 859 68 1022", " 1013 336 368 666 686 1213 874 1680 328 1670 1036", " 310 743 1213 670 1551 1801 935 1196 186 1529 1909", " 1578 413 1507 610 820 924 920 1320 1082 895 1668", " 1369 924 338 95 954 1522 478 1745 1586 1072 1400", " 1946 436 824 664 1233 616 1504 1677 266 1921 1877", " 704 637 1883 672 1814 53 611 1464 1258 1238 812", " 1880 234 1651 431 1827 1248 719 722 389 884 1250", " 268 1484 1711 1886 1880 1479 451 915 1240 61 378", " 31 45 210 445 1114 356 533 1879 2 786 909 1832", " 1874 1811 709 1117 520 1919 1893 240 727 1615", " 900 1372 1754 1246 1451 789 1594 931 1899 789"};
    vector<string> part2 = {" 1058 1023 610 1785 1696 1970 1770 46 127 1746", " 1458 214 1251 287 1553 1199 309 656 264 1622 1488", " 866 551 7 411 947 1987 569 696 314 87 808 1131", " 153 360 98 127 1125 45 727 1366 630 1055 1754", " 544 74 1134 285 830 1358 260 476 615 1744 1006", " 425 1786 783 1271 200 581 1268 247 683 1093 1877", " 957 17 239 518 232 874 1359 1939 237 1198 479", " 413 692 1151 1483 785 1187 1084 690 1919 367 952", " 463 264 800 1226 1576 1625 1237 1414 1367 344", " 1976 236 600 637 1059 351 98 1891 1923 121 1289", " 799 859 1021 1251 176 124 1325 266 1927 1060 61", " 1377 777 309 24 1051 1314 1000 753 1032 813 1073", " 1052 1281 1457 1253 543 1462 1806 1737 163 406", " 1289 732 1103 239 340 1000 1143 1399 1489 277", " 976 1818 344 1151 1032 340 1751 249 1060 753 1946", " 1681 1594 1091 283 166 512 917 411 455 1332 1838", " 1426 798 285 1207 1028 286 850 1648 885 600 138", " 960 1166 452 1523 284 1375 1550 519 1082 1047", " 1775 588 1574 371 846 1771 581 611 1094 1700 1256", " 547 1546 671 499 633 230 822 1311 954 1543 897", " 332 82 654 1138 923 419 705 1459 1387 365 1411", " 1292 1010 1072 806 1817 159 1182 749 939 606 1012", " 550 1118 811 954 1160 1035 186 1257 1546 1359", " 1350 1804 741 812 105 603 906 1422 1996 484 1190", " 400 1183 458 1413 1360 1243 1539 1061 785 1334", " 1436 1389 624 1495 896 717 1529 506 1913 1511", " 842 1014 454 1775 616 877 205 576 1169 516 931", " 255 834 1380 1162 803 794 1776 1274 981 1342 857", " 228 1796 942 1486 1074 316 1944 1847 531 968 348", " 211 1094 598 1920 1793 996 763 213 1212 339 598", " 1417 859 1304 969 1262 360 621 5 10 862 819 901", " 1809 377 1209 1454 753 681 510 677 1628 1719 1124", " 1361 923 1371 70 211 1440 1469 1051 1684 1805", " 378 795 1134 1587 1641 449 1709 1326 1007 1666", " 1831 1103 576 429 169 26 519 275 20 1346 1896", " 889 297 193 1172 12 129 28 1020 1748 128 1717", " 1434 1340 1914 1811 460 272 214 352 1682 1480", " 338 226 1915 1269 1815 668 1610 1274 383 917 223", " 605 1413 362 723 893 348 1599 1492 1285 786 1707", " 1026 898 1621 1957 1705 1778 1415 1290 784 1998", " 1102 257 273 906 288 880 475 746 1005 1439 1300", " 1127 29 1661 1522 882 1164 691 92 695 594 694", " 892 918 1496 961 456 527 56 402 481 748 36 1491", " 1724 1923 1562 764 1296 1419 1127 1991 1614 1487", " 777 389 1335 1634 1801 591 1451 578 265 894 1502", " 943 1706 1279 1072 254 658 1554 141 281 444 210", " 1154 1545 623 954 65 1815 612 101 7 1359 834 439", " 668 294 412 1802 1482 781 126 1660 833 470 116", " 279 107 567 284 1904 1868 173 1788 1605 1340 1635", " 535 1217 1512 707 1020 1281 1669 1052 1919 540"};
    vector<string> part3 = {" 1527 101 77 1278 1057 721 1978 870 829 1091 1981", " 1313 927 1715 1614 982 37 722 766 388 178 1466", " 440 1848 331 202 1607 724 1681 1057 601 1788 1889", " 1016 34 418 1096 757 1235 1541 474 349 1789 949", " 325 1658 801 1915 529 1085 1465 951 1148 1718", " 1260 1513 723 1586 1790 836 243 196 454 1039 1233", " 1559 1221 1374 1174 1890 1860 1985 1184 349 652", " 204 1141 1155 379 1895 425 1609 902 134 1153 1710", " 458 475 1624 1011 680 1242 1139 1005 1137 1822", " 1777 969 1037 442 1989 1759 1586 883 1414 986", " 147 76 1638 215 359 945 1074 1500 1788 761 1914", " 171 1579 1830 242 582 317 1550 1576 661 847 191", " 1239 1814 1506 206 1051 645 999 977 1589 877 1545", " 478 1666 413 1130 691 1799 1150 531 104 1039 932", " 1942 1202 217 1731 134 281 1579 1444 1098 1804", " 76 152 349 1395 1297 1004 458 613 870 1965 742", " 75 191 1038 94 820 1423 1048 163 651 1256 1538", " 483 1655 1764 1377 1562 1473 1829 577 713 683", " 1480 596 981 1487 783 1163 1635 965 1454 1683", " 99 1977 838 482 1962 156 1041 402 1717 106 413", " 636 1610 1245 1997 233 657 80 1819 1157 292 1382", " 147 1253 1747 1179 1612 858 747 1275 1208 487", " 1671 1282 47 544 759 1284 950 211 80 622 1942", " 1051 116 396 1834 498 404 1036 1704 455 1283 819", " 1508 17 1149 79 82 3 88 1917 571 624 1674 764", " 145 432 1051 690 950 36 140 333 1466 246 264 1900", " 1700 469 250 495 755 1616 143 1516 1732 1040 1390", " 1316 839 843 1733 565 414 134 485 1649 582 1995", " 1488 159 345 1388 178 1057 1890 1558 703 1077", " 1682 393 571 1520 595 423 640 56 1260 267 1595", " 928 1348 573 1063 1722 1114 1011 1711 680 1156", " 1257 494 1075 406 1876 1401 592 1542 499 319 384", " 446 1847 1136 230 737 1605 156 623 962 666 1821", " 1709 497 1790 1544 260 551 108 816 1513 324 1345", " 1804 423 679 1059 1945 1188 334 1988 851 339 1854", " 359 176 1355 1509 994 781 1465 1518 1460 285 129", " 1526 969 415 1115 1341 1468 1264 1020 1358 796", " 466 481 1442 594 1643 307 65 1586 1344 296 1275", " 1552 83 1910 663 597 1754 430 42 1666 1667 1878", " 26 1220 229 55 1603 1225 680 56 1418 1089 72 667", " 176 1625 1254 631 1657 1956 1088 1205 813 539", " 1713 1823 303 1063 556 966 220 555 1573 1395 246", " 1831 849 448 194 1003 79 1159 319 809 1527 459", " 937 783 466 1287 1148 243 1753 84 540 223 547", " 1006 884 911 746 585 1870 1192 1005 496 483 1964", " 683 494 1939 1451 1710 849 1926 1180 1814 635", " 676 796 360 1387 163 1158 1254 315 335 997 528", " 587 1983 1606 1196 399 150 896 658 52 1222 1720", " 1451 457 700 1009 1980 92 760 369 157 642 923", " 1114 783 490 214 1126 1116 580 512 580 529 142"};
    vector<string> part4 = {" 296 483 554 1584 1420 12 461 1081 1770 310 1418", " 1737 773 1604 689 1841 1227 881 1396 919 868 974", " 1903 1838 1933 1675 1109 1926 1653 1413 349 1696", " 407 287 781 1684 778 1444 1429 582 1318 1579 927", " 1031 1496 492 1637 728 551 1699 916 1812 280 643", " 656 190 1839 508 617 233 1079 495 1484 23 484", " 1633 684 308 55 815 1810 771 177 1090 98 1097", " 939 1651 1249 1369 1846 1376 1108 1728 1359 1407", " 1371 1218 1269 738 30 213 78 315 822 812 1350", " 82 79 662 122 310 1548 1081 1012 1969 364 1368", " 1912 1614 412 829 878 1407 1981 1907 1808 810", " 1303 579 983 1812 1054 641 210 689 948 504 647", " 1066 1327 1252 284 368 748 622 375 288 1236 269", " 1189 408 1406 618 1465 1929 1318 421 837 957 1405", " 1143 557 891 1472 1895 538 1384 909 1985 1901", " 656 403 484 117 454 905 491 1170 296 2 590 1818", " 1383 1744 1002 845 1717 1447 942 388 1440 19 231", " 223 1774 1613 1487 1327 265 1609 593 1297 333", " 1523 64 1932 1055 1516 1000 1421 1809 495 261", " 353 1843 1561 1923 1074 1724 776 1206 1142 1642", " 1491 379 1797 902 1579 1919 345 683 1953 878 1834", " 1752 1752 1758 315 452 1467 910 271 1122 1394", " 969 1777 421 225 543 402 1238 258 1317 1283 1203", " 1253 572 1750 1818 1092 368 400 1479 1004 1378", " 402 906 1929 472 280 1181 1808 195 1985 868 387", " 769 1649 5 1729 1237 355 26 1388 1444 1731 1557", " 1503 1776 139 547 112 1770 732 1588 1986 1540", " 1007 1499 974 405 652 801 51 816 1180 622 11 1319", " 1194 506 1296 60 655 193 975 585 910 1158 299", " 641 908 217 678 1734 84 1435 1052 331 779 337", " 352 1357 1919 1896 634 878 1589 1833 577 1106", " 1444 1629 1542 1358 1836 786 1137 109 443 1486", " 1697 1333 1585 595 910 858 1474 1700 1584 1633", " 428 1639 1301 728 1913 75 1391 772 1607 124 1709", " 1914 1863 1797 1548"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1999;
    if(result == expected) {
        cout << "Test Case 140: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 140: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test141() {
    int numSheep = 850;
    int maxRuns = 323;
    vector<string> part1 = {"1190 1308 1913 1763 1510 375 1398 1121 858 1936", " 415 1884 854 825 77 90 563 680 750 1362 738 154", " 1801 441 1456 1575 1431 954 763 1785 1008 1659", " 500 1928 1027 734 1525 711 667 1286 1589 1733", " 206 1035 394 476 1207 719 1838 1582 951 33 5 1841", " 1255 418 269 424 1105 1191 535 1189 752 1742 1685", " 1051 1317 260 1317 9 651 1734 13 1284 1629 919", " 839 707 1319 1153 671 721 1995 431 90 142 1637", " 1291 106 1047 288 1780 1376 88 1754 354 1121 511", " 1941 445 1691 35 544 1242 1993 1189 1686 727 1734", " 309 1157 122 1839 1048 610 564 1932 1368 1131", " 860 1152 13 396 202 110 1275 1830 1632 1055 1452", " 1197 1664 1249 415 1057 938 1570 288 208 692 1646", " 539 681 1168 1829 1131 1124 408 257 1528 1137", " 1581 998 1505 142 1136 1050 1701 780 832 1143", " 24 1444 262 1615 1540 1814 1838 656 270 1091 247", " 1400 43 300 491 1770 1315 1161 1443 817 325 575", " 1029 1413 1179 604 304 1532 782 1924 330 1987", " 1533 1874 855 1900 1659 1191 1309 570 1367 598", " 1094 379 703 1636 1413 1894 1719 1482 652 1621", " 87 973 366 36 1843 1231 1393 219 559 1191 1622", " 1288 1986 511 795 1009 1482 476 608 41 353 291", " 906 688 1791 298 1605 144 80 909 221 5 1910 1683", " 638 1148 1778 768 58 1728 1535 1563 555 625 1008", " 978 634 1174 1420 477 575 1668 86 865 1626 1759", " 1042 807 1858 800 1140 1868 1372 488 1979 1433", " 1550 437 1343 789 996 1234 1143 170 866 1284 766", " 965 731 1042 502 914 1170 228 1197 1080 400 511", " 48 433 85 319 957 77 66 455 477 935 86 998 978", " 472 871 170 973 890 643 425 1204 1296 648 893", " 1762 1492 1009 368 1631 1760 1410 1657 1937 898", " 550 101 1667 1626 1462 10 981 885 1421 567 1668", " 1823 1082 528 1851 1285 1094 1081 1114 1321 1911", " 193 87 361 1060 913 642 1329 809 164 926 368 1405", " 345 1948 1433 530 279 761 1660 317 290 172 452", " 1767 1019 457 897 1315 1228 1065 1993 625 499", " 365 1658 1106 1326 800 580 717 793 461 1765 1921", " 500 1490 1252 668 953 1251 1618 1420 1180 1330", " 798 1332 1684 701 488 1985 713 936 632 557 94", " 877 1200 1892 1712 449 831 294 1327 153 920 956", " 1582 364 1202 1549 438 1579 337 963 432 526 597", " 154 50 1425 497 905 792 1920 622 1749 1047 62", " 17 674 815 12 539 667 1039 535 416 20 318 1651", " 1163 1581 471 567 303 1066 643 1225 720 881 670", " 860 1347 532 595 983 1412 1743 1225 360 1895 436", " 1554 1225 225 469 529 1073 1751 978 540 974 919", " 1908 275 433 1526 1737 1520 667 105 593 1119 1703", " 680 135 192 1943 816 1285 746 1300 297 673 1490", " 1600 471 1532 1884 1694 1172 814 1489 37 1086", " 1946 867 1089 1692 1799 941 634 55 177 1534 809"};
    vector<string> part2 = {" 583 413 759 392 716 157 1986 409 366 1075 54 730", " 999 728 217 951 1375 95 581 1856 1576 310 750", " 141 475 1501 1426 1760 1634 1723 770 1498 1592", " 109 1649 1232 1358 111 1882 607 2000 912 855 1982", " 1591 1665 431 627 1040 1583 1103 1224 1901 1121", " 525 1359 458 1908 1673 452 578 1589 244 1714 995", " 1390 853 1913 1056 405 858 1279 310 1345 140 804", " 1329 1919 919 1130 1759 1316 1752 1012 1941 771", " 1975 1438 1745 737 247 430 384 1336 396 634 992", " 777 1772 1962 185 1029 1897 1199 88 1118 1566", " 1957 1964 1337 1400 868 1108 759 1095 1101 872", " 1620 981 771 120 63 1126 727 1218 332 1153 825", " 1304 1142 446 684 1488 713 1472 842 878 863 661", " 1975 239 1736 315 874 647 496 645 1753 1470 764", " 911 677 1815 309 158 1382 241 1608 236 1320 1025", " 477 1554 230 1311 919 614 373 1136 331 1896 709", " 804 436 664 1107 1617 1926 1786 1474 112 34 156", " 1868 1814 554 1367 820 518 6 1924 1309 308 1429", " 1185 224 525 616 1076 122 1302 395 848 84 1602", " 725 1702 760 472 1875 541 848 1236 304 132 1056", " 781 695 184 1703 1943 796 450 146 682 696 834", " 211 1138 1043 706 1344 1800 279 500 1806 177 1699", " 1709 879 1654 1517 1878 1002 884 876 49 810 1828", " 52 681 1545 941 1827 141 1647 1961 396 1870 1669", " 1990 1106 1303 223 1966 1095 13 890 441 117 1990", " 1282 49 1613 335 1144 1158 95 137 929 1587 761", " 35 98 1073 1843 814 554 874 1002 1069 1233 1217", " 1051 1995 1408 1888 1539 1650 433 834 1012 873", " 873 226 1579 157 722"};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2579;
    if(result == expected) {
        cout << "Test Case 141: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 141: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test142() {
    int numSheep = 1300;
    int maxRuns = 736;
    vector<string> part1 = {"1348 1374 835 846 1902 264 1498 1395 540 1773 1366", " 1338 150 1004 859 23 1399 170 103 195 620 1769", " 1396 1689 477 554 1506 415 1003 336 1844 153 731", " 1031 330 218 1505 421 1903 1773 1185 1136 596", " 116 401 240 716 974 1155 246 1593 1534 2 621 1303", " 649 411 623 1656 545 863 59 1392 128 821 1718", " 817 374 1781 1024 1114 1463 402 169 171 1167 55", " 900 1725 56 230 298 1328 1613 1517 946 260 1903", " 843 303 427 440 1441 811 447 1950 1179 947 1489", " 699 769 610 786 1994 105 1330 1221 1140 1520 560", " 1652 1692 777 688 722 376 293 1554 1569 962 196", " 51 1717 1229 1546 54 41 1643 1621 1620 1984 158", " 686 1490 1871 94 462 1235 249 1643 1539 573 330", " 1044 1044 400 409 1351 401 1796 903 73 382 178", " 941 1160 161 1798 38 1503 1290 1875 392 1146 387", " 520 1689 1531 200 962 1279 796 1033 1138 1192", " 1238 766 416 1467 1489 714 1568 1231 221 178 1460", " 1963 833 144 1362 206 1794 1283 8 1552 1638 1369", " 1405 1160 40 1536 1753 783 911 1098 695 500 443", " 1471 346 194 560 1351 79 351 1894 776 370 1863", " 1199 1292 1379 73 1515 791 1705 751 1961 536 855", " 1268 1327 1246 1007 913 651 1933 533 1352 1259", " 1712 1493 869 1450 769 312 1201 1548 1463 770", " 169 636 1744 1023 303 1171 1727 1120 959 332 199", " 433 1061 1366 1593 1357 1341 1034 1914 1251 1210", " 93 1529 858 1452 472 1599 1635 12 678 552 991", " 857 334 577 785 1624 770 1027 868 663 855 1775", " 704 723 1638 1865 1289 1883 194 58 1225 68 1787", " 1521 368 1118 1986 346 121 1847 1214 1074 286", " 655 606 282 462 828 288 954 1422 495 450 391 1086", " 1734 823 679 61 1107 1388 21 144 1821 1451 1313", " 1343 1029 240 458 224 1372 122 1390 73 1971 1652", " 1681 1632 1843 1205 1724 485 1071 1924 280 1538", " 1174 640 603 17 797 1760 1634 1007 125 934 784", " 336 24 137 486 643 850 339 1348 1927 430 24 1310", " 718 662 1736 882 1153 1759 743 1081 1796 1724", " 11 764 1500 1186 1269 602 1358 540 1588 839 1289", " 927 1398 1159 455 609 305 587 1424 870 161 1578", " 1152 1339 370 1460 1754 1607 417 1843 1677 1358", " 126 1315 1014 952 1301 1268 821 1922 1501 174", " 1844 1779 1631 1076 214 1809 1195 1003 1997 580", " 88 301 447 300 28 281 1241 575 651 254 308 1958", " 146 1432 455 760 822 153 797 1959 728 972 569", " 1530 1564 1014 87 1978 155 1053 309 833 486 1166", " 1426 31 1435 1962 1029 1679 1197 1409 1361 1162", " 1503 546 1720 955 1921 1184 765 1475 366 745 959", " 1421 277 388 1251 1172 135 681 416 1347 1616 806", " 1457 622 1754 1838 1463 80 462 1044 285 1748 829", " 1881 1328 1399 574 1394 1982 1822 712 1726 206", " 68 738 1255 1729 119 1752 854 839 292 1633 956"};
    vector<string> part2 = {" 453 991 1952 574 1045 1688 1976 1536 143 555 1795", " 918 727 102 340 1223 1015 720 1563 707 126 1144", " 1034 1078 1321 539 662 1101 1489 1819 272 1529", " 405 892 1428 322 1977 560 1617 669 1007 1254 1274", " 929 598 1055 669 54 512 721 226 1967 536 927 838", " 1962 371 57 25 902 1974 527 1460 1076 313 908", " 623 257 619 1041 1618 1635 262 1887 1178 1441", " 243 233 127 376 897 442 1972 347 1411 755 478", " 1419 72 1591 200 600 367 234 1638 790 1561 1223", " 409 115 561 1153 1635 1496 602 1789 1851 543 201", " 62 403 852 675 865 1112 942 1351 1338 1866 1600", " 1391 430 1053 1259 1363 1971 206 1271 1006 85", " 1466 1122 1253 1370 1372 263 38 664 677 274 861", " 645 1537 1251 125 1039 391 1873 1725 1678 801", " 1298 608 1927 1950 200 122 450 148 526 1120 110", " 1673 1523 1375 1379 1188 1046 1119 280 1008 1539", " 617 1606 689 284 839 1613 825 1516 524 1686 205", " 248 1780 264 1764 1303 1964 1903 32 1204 1381", " 746 1184 1361 1765 1619 564 365 1711 5 467 425", " 1252 713 138 536 490 1297 934 1574 668 489 1348", " 1755 578 1227 1334 1471 1906 706 1849 1824 119", " 1969 1349 1697 961 1908 1333 150 1453 1271 1879", " 1117 1015 1254 1286 1535 525 1173 1974 472 773", " 1201 623 1602 146 198 238 633 1891 755 408 1851", " 669 1659 561 1086 1658 1117 445 1734 834 1878", " 1572 1287 777 197 1883 376 472 384 400 1657 1152", " 613 1542 678 781 1859 1090 1436 792 90 1173 620", " 447 528 412 1406 713 262 1972 327 116 922 146", " 1630 642 494 338 636 868 1673 477 1138 1509 269", " 1505 511 250 1257 172 625 1639 1039 1960 108 950", " 1816 1534 1257 981 1111 1876 545 877 1404 168", " 1867 874 1242 642 226 1864 1082 1669 1178 10 1857", " 727 1572 1937 1504 338 432 1931 843 937 466 681", " 668 990 569 1942 344 931 412 5 1314 944 1509 1898", " 591 1909 2 620 1786 944 298 217 1353 849 206 1466", " 80 876 112 1321 1956 927 1719 225 754 1653 1987", " 1236 161 570 1359 1698 1318 1280 1557 1369 1606", " 369 694 376 1793 774 1577 153 413 1863 628 1310", " 1761 1348 1945 395 819 340 67 1476 884 827 1953", " 504 1674 1345 690 1166 606 721 1570 1567 1800", " 1376 1668 149 407 831 816 770 373 577 1231 1252", " 1691 49 1237 664 1553 702 349 1340 1160 88 699", " 777 748 160 1118 1233 740 1083 133 469 667 1400", " 1236 570 1300 594 1911 1181 1322 1991 582 853", " 1078 10 1081 1336 1492 1430 510 1104 824 516 1481", " 479 157 271 1995 497 1342 1846 550 514 153 1265", " 815 512 976 1208 709 193 1794 689 1586 1752 730", " 1000 64 1780 1958 1523 973 1529 875 1159 1042", " 35 198 1589 848 104 406 1833 1452 766 184 453", " 1229 158 1539 393 1619 775 774 1606 90 133 1519"};
    vector<string> part3 = {" 1059 1327 1059 718 1871 1731 990 216 568 1918", " 1260 80 380 1078 510 451 1533 495 1522 370 1258", " 709 540 1622 301 72 1589 1231 1567 583 724 1453", " 1426 1505 397 755 1248 487 1639 1817 32 438 899", " 993 1258 1492 1481 668 475 825 1701 302 1866 896", " 1698 1759 1355 1757 229 579 1748 1425 1566 1069", " 383 1788 1482 735 16 50 173 709 343 1186 622 579", " 727 307 99 1243 1384 1375 223 20 347 533 521 1783", " 1949 153 1215 1452 1213 1919 1242 37 1408 1624", " 1395 73 1653 636 135 1060 261 1769 1799 1692 877", " 1610 1987 1031 31 108 1864 780 1126 1309 904 1127", " 1977 1765 1993 929 1377 1242 1952 559 1486 718", " 1679 633 759 636 77 1566 1585 52 725 1174 451", " 434 1314 648 1383 774 633 1054 210 319 1591 821", " 72 1353 941 73 778 1977 601 1969 1105 566 503", " 1495 592 1083 1399 1291 1781 1226 1857 1544 1312", " 1379 1559 1846 1911 1845 1465 994 1801 228 335", " 1195 1905 1468 130 1630 1838 1813 476 1669 257", " 455 34 651 1686 1344 1742 131 887 436 114 1305", " 141 292 282 441 360 1122 1921 272 1377 1716 503", " 1712 46 919 1025 327 1798"};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1997;
    if(result == expected) {
        cout << "Test Case 142: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 142: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test143() {
    int numSheep = 917;
    int maxRuns = 195;
    vector<string> part1 = {"394 1832 1149 307 36 1129 1582 1376 153 1040 1875", " 274 1358 51 1849 1906 1893 1560 240 611 1494 935", " 363 406 1537 321 1340 554 1794 705 1999 1431 486", " 1617 1413 1229 110 1825 436 760 338 180 957 167", " 168 283 319 1533 5 1334 1162 1991 1522 1623 1046", " 560 947 106 1829 1122 356 1587 1126 1885 788 342", " 1851 1421 1927 940 622 982 279 1701 399 1395 955", " 169 161 193 794 1123 358 661 1329 800 184 1125", " 1796 164 1402 869 690 1055 766 1664 1916 1118", " 856 202 1255 132 594 564 1215 1467 801 1120 894", " 213 824 37 1390 504 1292 581 155 1242 1801 1453", " 221 1672 1347 284 1988 349 14 1208 1509 450 1266", " 1710 1733 833 713 920 947 1038 1211 388 1498 1000", " 1517 1026 1174 1212 645 1902 344 1339 1521 95", " 917 1805 472 975 1156 1094 32 1693 231 1304 370", " 271 713 553 1868 1275 298 1367 357 136 1223 121", " 118 320 1325 1447 1079 57 414 1725 568 1413 837", " 1596 497 902 663 1153 1579 1030 1772 1578 1441", " 262 348 118 1313 1589 1117 1405 1256 116 396 1248", " 1037 583 809 1570 1708 670 760 647 1462 965 725", " 76 358 1449 1464 1239 248 1404 1305 864 1429 251", " 806 896 1138 1022 1507 1192 298 271 1521 134 280", " 1983 546 1332 1626 949 1180 594 323 1048 812 901", " 512 1280 77 1375 1229 1431 1337 1376 1272 854", " 286 1565 1494 541 133 769 628 1827 975 770 689", " 655 321 485 843 1222 1650 1668 871 998 1891 1423", " 21 482 1502 1825 1011 303 1857 1332 1120 1342", " 1469 583 900 1548 1146 1567 1375 1430 1774 764", " 1471 241 1870 1406 118 1400 20 215 1658 1815 1777", " 1923 1007 264 1076 1237 1986 108 652 339 1575", " 1341 907 1254 1174 481 1723 1483 577 849 645 269", " 362 651 1488 934 658 1589 1543 963 69 1075 1007", " 1144 500 186 1079 500 1538 1510 1760 166 452 1593", " 559 1888 35 213 1600 1803 1492 1436 1117 1212", " 234 1462 1728 69 121 707 1350 879 318 1553 1444", " 454 750 1392 126 117 1724 372 245 1044 15 1963", " 1489 1647 195 1424 1232 1513 894 431 1966 833", " 22 1593 1701 1508 914 794 742 243 1454 1994 1977", " 1686 1219 1217 546 1600 1894 63 1733 1365 512", " 1435 474 234 1038 761 1636 1292 1705 193 1535", " 452 264 1630 1240 1337 357 1012 434 183 1358 182", " 982 1599 1357 1047 538 1774 234 1919 565 1986", " 1871 112 162 1898 476 842 1619 1213 60 1435 1112", " 1166 791 1659 1969 879 522 1640 1008 68 1044 637", " 1394 1881 1523 920 1711 774 526 1548 879 1153", " 772 1684 1072 661 789 1785 1942 1811 1615 758", " 626 150 1340 809 71 843 393 77 456 1648 1290 1078", " 869 380 61 1229 1544 816 1388 61 1371 45 1575", " 1261 669 934 1089 751 1461 550 937 344 1413 357", " 1405 640 450 407 1706 1612 1411 150 7 267 1161"};
    vector<string> part2 = {" 641 1298 254 462 357 1035 1004 1457 1531 1856", " 1540 288 594 1320 564 1287 287 1044 265 1912 1585", " 387 1752 1803 1370 1413 349 1449 411 1939 1698", " 739 1135 1244 1859 1225 1468 979 1727 343 181", " 407 801 1906 371 1491 1087 20 1108 471 483 1508", " 645 982 1945 618 764 147 280 1713 1817 661 1300", " 1870 31 1122 1027 304 765 1867 1551 1800 722 468", " 283 1675 304 1976 922 53 496 1130 540 993 1654", " 719 1290 406 550 1754 52 1060 759 1047 345 1072", " 1656 140 1399 43 640 1645 1764 314 1274 32 1740", " 1618 209 1216 1403 338 1624 1989 1869 1494 1582", " 1492 596 168 1311 67 1899 985 478 1104 1001 193", " 1266 1187 967 660 798 1856 693 1398 726 1 1114", " 1935 1215 20 1371 1314 1830 1393 254 1851 1636", " 1263 1407 695 1632 1367 1635 857 1525 440 1243", " 266 1045 1133 539 1312 1790 1644 1100 659 1821", " 1265 1934 700 529 490 1634 1678 913 1972 599 9", " 640 822 3 572 255 380 1269 220 228 423 249 1187", " 874 1299 1115 1034 409 217 1551 889 999 1158 848", " 1390 367 332 1272 685 833 503 1696 856 427 563", " 1704 639 550 1052 857 489 995 1093 233 1571 1560", " 1453 511 264 294 383 1815 1442 397 234 1624 1664", " 562 849 1332 616 479 1747 1152 383 1675 940 725", " 1991 1885 77 1879 1256 779 1019 1844 1059 71 116", " 1198 850 397 1015 396 1460 1078 1795 1918 1511", " 1185 176 368 471 1666 446 769 1527 1307 1547 1396", " 285 1786 297 630 1986 307 367 1 1082 1072 1486", " 465 1745 1910 119 70 343 266 523 201 1870 1924", " 1747 1666 113 1906 1793 393 791 624 1735 171 1432", " 1943 1303 63 319 1924 138 1898 97 922 981 1024", " 845 1178 232 348 1748 882 153 370 315 707 897", " 19 590 872 1429 528 696 1172 1992 83 369 507 1135", " 1482 534 980 469 1157 815 605 1231 403 685 1248", " 1491 1480 1891 773 1797 1905 1830 1079 258 187", " 1512 1163 1441 800 1793 1342 406 1363 287 255", " 1816 543 784"};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 4622;
    if(result == expected) {
        cout << "Test Case 143: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 143: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test144() {
    int numSheep = 1373;
    int maxRuns = 486;
    vector<string> part1 = {"1211 509 338 1318 1553 1210 1552 1166 1680 1243", " 715 1319 1406 41 1591 1294 1201 276 1075 1436", " 1648 1115 1303 361 1749 939 1194 1052 1558 1397", " 615 1990 1156 403 1264 1537 244 699 1299 291 1437", " 532 412 567 592 1209 876 1069 831 541 1833 1168", " 1703 798 534 1609 1711 1564 260 1762 422 107 456", " 78 664 584 1919 167 1362 1913 240 1800 742 280", " 497 301 1073 240 877 711 811 984 1588 1140 1182", " 1921 1827 1198 1227 1963 1781 82 1385 1757 1498", " 677 1071 1092 1304 1170 452 1483 1439 1159 789", " 28 1297 1265 39 214 1314 484 1150 544 1420 1536", " 1885 1133 1286 544 1775 1424 550 133 885 129 117", " 82 1520 528 578 1721 642 1914 1273 199 1808 1115", " 533 1419 571 1619 1987 412 1824 715 570 60 268", " 329 792 1895 1267 1026 1518 1713 643 1648 1999", " 1119 1125 516 597 980 948 1118 1893 1583 1232", " 1595 1156 1939 101 1277 473 1192 312 481 1972", " 1792 1906 206 304 332 1425 874 566 1839 1035 1841", " 146 515 196 168 1145 555 737 1182 1067 1577 765", " 84 742 1681 1949 1727 1963 46 1600 620 1029 1332", " 729 707 1094 533 703 1327 36 743 324 717 1637", " 294 1621 386 1399 1734 498 66 804 1740 79 223", " 99 254 1018 607 353 1031 1870 1697 994 496 1783", " 1345 211 1243 1991 538 1666 1874 360 1851 1793", " 544 1954 1405 534 1325 1839 1140 1958 768 350", " 1444 1428 944 1637 1270 692 572 1115 1002 1125", " 780 1237 575 1246 39 751 914 120 1894 109 532", " 781 25 1554 1871 351 1048 720 1177 396 1885 257", " 1898 624 257 183 635 1803 1923 1759 1151 69 128", " 1611 1959 175 95 111 192 524 381 1660 383 849", " 1721 444 65 344 608 1757 828 363 219 1218 298", " 1743 1911 454 567 1518 406 1266 1016 170 4 1312", " 766 1679 189 1009 1292 1400 1197 1757 1973 1717", " 1288 1225 1450 940 155 1150 147 813 1426 615 1611", " 74 844 1834 337 518 940 1531 1724 1933 785 1102", " 606 53 392 348 1229 1732 1120 1191 1278 258 446", " 929 1586 1488 1826 218 598 1081 1530 105 1366", " 760 1206 1597 322 1562 44 260 1427 1557 61 1627", " 31 1369 679 231 507 1894 908 180 609 815 211 860", " 755 1038 1438 1402 1054 1511 620 1311 1810 945", " 1599 597 1841 1650 1536 1123 838 1402 1410 1888", " 232 548 20 571 655 728 235 1290 759 1348 736 1057", " 1027 797 789 1030 259 1296 382 131 520 397 1070", " 347 87 631 1599 993 157 293 854 5 1506 1517 1286", " 480 993 1 292 674 87 826 235 298 266 901 129 1014", " 1132 1403 105 1195 1792 1349 651 711 428 896 1249", " 549 607 1981 867 450 1861 1516 181 1342 1864 874", " 719 1140 1434 1064 1757 861 593 1183 1689 1153", " 466 576 374 336 481 193 1822 673 1335 149 334", " 441 1973 74 1135 1582 1176 1097 473 508 1869 1738"};
    vector<string> part2 = {" 1604 616 1207 887 719 995 383 401 612 1601 460", " 1944 907 426 467 1783 47 801 1456 1870 1534 1283", " 758 1717 1332 114 1203 893 762 67 632 1609 1483", " 613 1527 733 1064 1220 573 246 1564 396 1955 106", " 722 1073 1888 833 470 1854 849 388 1129 1965 27", " 677 1577 1415 639 1311 16 380 1568 736 876 1301", " 1618 1284 639 23 1587 563 888 699 1966 510 434", " 1853 1901 822 219 1873 207 1038 231 1341 1867", " 882 438 1667 1284 1304 499 541 349 757 1519 430", " 1647 1299 1054 1398 408 898 1376 486 150 1917", " 1490 1845 693 622 870 1090 101 773 1248 539 623", " 1493 467 174 649 1903 844 1614 1673 1778 828 873", " 118 851 1820 839 1509 490 1804 1925 35 862 172", " 402 238 498 1215 553 41 15 1725 1425 1663 292", " 1128 1666 1815 684 1745 169 1257 527 203 157 1249", " 1323 512 1811 1921 1972 164 1231 1324 1961 1127", " 1308 768 1945 494 430 1411 342 804 1062 146 298", " 173 917 806 1767 1499 276 615 1731 261 628 1125", " 643 772 50 165 439 128 45 1593 375 299 1387 1540", " 1388 1932 312 236 34 1390 321 1489 684 1498 1360", " 1820 121 1235 1977 283 1510 832 516 1709 1284", " 1839 492 1785 379 120 1591 1364 1038 1232 199", " 1602 641 1199 1841 1948 1753 292 507 131 20 1751", " 1547 1396 953 911 350 1517 144 661 1943 671 1028", " 1321 344 1652 280 1476 213 258 505 1070 1271 1489", " 1986 416 543 154 1941 380 1964 305 873 1260 1614", " 244 319 89 908 900 378 13 1379 1251 974 586 1551", " 590 1719 284 1375 542 333 1021 404 1530 1863 456", " 1835 1567 814 1360 236 1730 435 337 353 485 1588", " 391 1434 1272 1883 63 880 402 759 1674 793 1985", " 271 1849 429 190 1396 1125 598 612 406 1102 253", " 306 202 535 1906 1455 363 1743 907 878 1903 1811", " 1218 1266 491 1506 1160 1716 1337 1154 1022 1474", " 904 1617 310 282 645 1790 661 1576 1913 889 1148", " 668 947 504 759 1247 1704 1452 774 1592 952 868", " 1514 1770 1731 1952 818 1888 971 1960 390 28 1051", " 94 1843 1771 40 1488 1833 1821 1144 1267 529 1588", " 433 1773 84 667 738 1426 1336 1434 39 1986 1083", " 1159 57 224 501 1326 469 325 1321 1796 767 1158", " 204 1321 390 1524 1625 1308 1481 1203 293 1875", " 1658 605 1903 1067 370 1767 329 1085 709 116 1421", " 1906 1320 361 282 776 1184 1618 206 1797 1340", " 211 1689 699 1814 800 287 1949 774 577 1918 1745", " 1864 1168 512 1286 1199 1637 1379 168 1354 1348", " 1528 1202 133 1157 585 692 547 1269 942 229 219", " 1099 1249 1082 672 1054 33 983 1334 20 1236 1589", " 1138 158 945 1957 1057 1571 461 948 1372 1833", " 1139 800 1434 779 185 1866 1766 776 929 1388 547", " 1352 654 285 941 84 888 1138 1330 1846 737 1672", " 1345 1407 664 1503 1633 88 670 793 1781 1787 728"};
    vector<string> part3 = {" 1171 926 1683 516 1267 898 1 303 1827 860 481", " 790 1069 372 60 540 1704 161 814 27 1665 427 811", " 1710 605 1078 462 223 1550 1836 562 1501 884 938", " 5 1824 38 1006 1642 1168 1586 159 1982 1202 529", " 797 1980 1716 1454 155 1205 1532 1113 107 330", " 1324 199 472 1644 920 1868 409 39 1707 459 1029", " 329 246 1197 466 457 1899 32 1603 262 1018 1938", " 1825 910 1114 959 1032 209 1098 503 182 292 1479", " 1780 1823 266 1985 874 149 464 26 1743 1383 1992", " 574 1629 503 808 1609 1254 48 483 1254 1976 375", " 1513 468 1809 209 235 158 964 998 1858 426 1564", " 68 1248 993 801 1479 1686 641 73 648 1240 1648", " 1168 580 654 146 1899 1278 1484 509 730 1447 1285", " 1179 1852 333 907 1263 727 1442 250 843 1864 1838", " 886 1106 1288 440 1618 10 576 1633 1074 1732 1518", " 1777 1251 862 872 1238 89 808 624 1818 1322 455", " 729 1140 1066 855 201 482 293 1988 1712 1158 228", " 1370 152 1310 1002 555 637 841 1406 1905 558 950", " 991 1077 869 799 339 223 564 807 784 703 1872", " 367 766 956 738 1631 412 315 1931 515 306 1954", " 312 1219 183 205 199 1704 437 1440 1273 732 330", " 1614 841 66 1184 250 1787 582 431 605 1432 677", " 512 247 1257 944 1861 1481 1602 1325 1832 146", " 98 607 338 1624 695 583 1741 889 823 602 1788", " 803 764 1765 1865 737 480 1087 1087 343 122 590", " 793 992 1623 1789 1194 1717 1596 396 1967 1585", " 779 920 706 1443 1349 765 1648 228"};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2761;
    if(result == expected) {
        cout << "Test Case 144: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 144: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test145() {
    int numSheep = 1775;
    int maxRuns = 1353;
    vector<string> part1 = {"1485 1706 1639 322 1766 1116 1929 811 712 534 909", " 1395 1007 1343 339 847 98 1689 578 537 621 569", " 1197 1224 1662 104 1640 1698 469 1785 569 784", " 1909 124 258 1089 1024 1474 366 321 562 834 1322", " 1771 1308 1803 1318 573 324 331 1932 411 1387", " 1440 1440 54 112 477 72 1295 1427 1007 1823 1543", " 844 593 900 1112 1453 252 1896 729 725 1635 376", " 1326 1063 1998 1112 271 458 548 1601 1146 1074", " 735 395 1099 863 939 1711 395 500 464 22 1286", " 443 1920 1174 833 855 1778 1263 460 890 64 112", " 597 1320 1438 912 1789 683 748 553 799 1704 1806", " 663 286 1715 138 338 1230 1343 306 1832 1286 1384", " 114 640 692 1476 1964 618 481 1575 1986 362 1815", " 1110 1988 1318 1984 1247 843 14 353 519 1125 716", " 87 1908 1922 300 496 828 110 1789 1822 253 224", " 185 215 1550 609 290 305 901 1538 1213 604 1915", " 1096 339 1327 766 713 997 488 1206 1819 433 1359", " 442 1642 963 1050 579 267 605 486 928 1728 953", " 932 220 1867 1710 290 1053 53 546 588 430 401", " 1855 67 1920 509 1545 45 668 1369 1102 1660 685", " 924 1183 1443 364 595 95 951 891 1914 1113 1763", " 149 1776 1255 1038 1814 1142 1728 480 567 1593", " 1153 1763 989 352 1952 23 1795 72 1884 937 69", " 1358 1145 1924 1471 188 1787 664 452 1272 1857", " 90 1683 729 1636 1532 1799 380 1456 1759 1454", " 1014 1698 1751 1549 1098 1538 654 386 414 115", " 139 394 1273 1753 596 868 1103 1546 385 757 1024", " 1400 691 1613 1006 1278 229 458 382 1913 1762", " 668 593 825 983 312 1875 1416 1562 993 467 1002", " 300 292 501 1238 1099 1971 212 180 1419 1317 1436", " 215 805 1483 1703 1709 1200 838 1429 1540 1824", " 231 914 1279 652 55 547 954 1300 616 1889 1930", " 227 1691 841 1784 1393 948 1507 1600 1916 172", " 1970 1333 1065 1749 1339 632 1525 1283 377 1336", " 1137 152 1680 1676 29 384 945 1311 115 703 526", " 154 344 888 1903 905 975 1647 867 1431 1039 1729", " 827 43 1797 851 19 391 1901 40 1746 558 125 1655", " 645 807 466 508 1639 1135 1184 1454 275 339 548", " 1777 957 1134 428 1133 1758 1632 25 1998 478 1888", " 1796 1213 503 740 1263 1887 632 254 1373 413 1751", " 872 324 1700 1003 404 1842 1213 456 1325 1582", " 320 316 1266 1568 452 298 340 660 1050 133 206", " 475 171 1599 1300 1395 1199 1794 1727 1160 544", " 1295 1944 1578 1598 1078 1811 657 613 437 287", " 270 539 260 347 372 1566 960 1099 1271 1789 966", " 586 1716 582 307 1106 1857 1952 1034 538 1926", " 154 1157 1503 1676 1140 943 615 53 1660 1010 882", " 445 364 572 753 511 1953 1800 1324 267 1488 1194", " 1950 326 1444 443 596 290 955 886 806 1808 1793", " 1873 1669 451 397 1648 326 1687 1419 86 333 18"};
    vector<string> part2 = {" 714 1774 813 585 1239 1066 607 598 713 1465 402", " 1273 1278 1710 1618 877 1078 1855 140 333 1231", " 331 1504 1974 736 1743 712 1374 331 395 809 1445", " 1180 1888 183 1355 1335 285 413 1763 401 1467", " 141 1222 285 165 661 347 1562 1948 1475 1029 219", " 1002 411 1933 1591 517 870 626 354 87 1885 1727", " 652 443 774 508 1064 410 382 567 1552 1623 1624", " 1764 1111 520 85 738 479 1447 468 1281 653 551", " 1964 1025 1065 762 616 1116 1130 130 242 710 849", " 1399 1523 196 468 745 25 1900 767 1559 1562 1419", " 1926 1071 425 172 430 1830 1799 935 1948 1690", " 379 1257 1022 6 325 1443 1513 918 1503 1253 1859", " 524 389 732 34 1714 263 1657 708 1937 1692 1636", " 1041 1233 858 1009 1453 82 707 1538 738 1019 49", " 717 158 513 1094 1903 809 1658 1165 289 298 786", " 357 586 1002 861 191 1814 409 1390 310 1558 751", " 776 735 1991 582 691 1921 23 566 1026 1238 37", " 1841 1282 882 1721 1841 1445 1364 1300 1918 192", " 667 697 292 849 10 1660 964 822 431 1721 1338", " 122 513 872 1983 881 728 1792 496 550 849 1626", " 1663 1586 66 1048 808 496 1179 1077 1303 1183", " 1118 158 40 1160 96 258 1071 1568 1632 358 761", " 48 55 716 1890 611 1905 404 1736 1552 731 739", " 1120 665 1885 964 1432 147 795 957 333 471 998", " 995 830 232 696 1520 1488 1542 512 163 964 914", " 1402 1129 902 115 787 348 247 1576 1067 409 540", " 495 300 709 1880 86 1803 1586 792 1040 1388 159", " 766 554 1003 1134 1345 1550 1160 1227 1571 1272", " 466 1801 146 55 1431 1038 1971 1590 986 978 1084", " 556 1063 1220 2000 1120 1204 926 225 305 1160", " 1066 561 1734 1312 1333 1065 1745 991 563 958", " 953 566 195 1888 136 1220 356 1765 914 256 104", " 1206 1831 949 1896 1928 715 637 1481 78 1956 1137", " 1757 749 803 1328 1197 1440 1175 910 1653 413", " 446 1662 624 1223 798 1027 1574 469 1683 516 1219", " 500 1273 1759 1994 408 381 1151 1065 329 1951", " 1008 1503 1243 75 930 44 94 696 76 600 744 895", " 1892 407 1311 1984 1516 1658 1372 227 351 601", " 1388 1339 316 769 472 287 433 40 1320 683 1180", " 969 708 52 639 812 1483 1131 978 1508 439 1492", " 1261 944 912 72 374 1738 1744 1688 216 1076 360", " 1986 933 869 833 489 812 78 997 816 1854 513 254", " 1591 1310 1444 127 41 824 338 1666 853 420 179", " 1618 12 1546 638 1307 1099 439 476 734 1145 17", " 638 185 626 792 1393 598 1286 718 657 211 364", " 1816 1500 914 1259 1381 1049 114 410 959 1369", " 1085 421 767 876 227 611 1062 247 1432 1015 697", " 1813 137 1460 748 283 1733 1460 1555 1153 1353", " 234 293 13 1564 1815 674 226 381 250 806 313 874", " 1723 30 366 1426 1962 1227 383 1740 995 1124 129"};
    vector<string> part3 = {" 1818 869 465 1588 1305 1747 1334 375 442 1115", " 1660 398 1094 1781 1750 147 1820 1582 834 124", " 1535 310 1119 716 735 1542 718 1883 708 758 1244", " 1178 34 1390 1134 1922 121 1291 1886 397 685 1109", " 870 312 422 1663 1914 790 1464 430 1787 1992 1525", " 541 72 1996 1201 864 264 596 519 712 22 1785 811", " 839 1820 751 1519 436 228 1754 1738 1601 586 257", " 1765 1003 1797 1059 1560 1010 1352 119 133 282", " 724 904 1394 256 929 1681 957 1537 684 933 619", " 1992 1763 1314 434 1334 239 839 1240 167 1345", " 1283 636 82 1520 16 1571 353 786 785 1941 1667", " 1929 599 1257 238 1488 1306 1102 345 246 534 1148", " 440 842 932 1402 569 984 43 49 1967 626 982 1985", " 1916 691 423 179 613 592 812 671 33 32 402 1022", " 1378 589 1256 1634 519 1979 1429 69 1665 345 1932", " 255 996 1622 1150 1932 1280 246 256 990 257 1013", " 1199 1279 1060 75 1106 569 1756 1936 1328 1065", " 899 1986 1553 833 948 948 1385 1502 729 665 258", " 1497 976 34 1640 177 740 197 555 1497 1593 1679", " 961 1214 1623 1018 347 253 411 802 1321 514 1146", " 676 1071 1811 24 1241 1866 14 1353 1906 862 1857", " 69 1428 690 1753 1633 646 1407 1884 1915 1368", " 20 778 1046 310 525 705 311 349 1253 1713 47 462", " 1226 513 571 1665 496 159 1608 507 777 733 1643", " 1731 1331 1610 832 97 882 894 720 88 80 746 1193", " 1479 946 207 1577 250 157 1455 186 86 745 177", " 453 1892 596 168 688 621 810 822 730 1432 132", " 1613 1096 768 830 103 241 873 1310 1110 1351 996", " 1457 1102 1223 1505 1528 210 1731 468 132 716", " 1037 315 413 257 135 1503 617 1652 169 1274 747", " 378 771 1976 714 1918 1907 1473 1268 1542 89 1669", " 1987 870 1609 1369 254 1971 737 97 739 571 124", " 814 356 1090 1382 1818 863 1888 769 258 834 1738", " 855 1220 1471 813 961 968 1981 467 935 788 239", " 1055 1993 890 456 1643 382 1941 1695 244 90 132", " 1296 1316 981 1638 1059 720 538 711 1905 1971", " 702 634 420 1627 610 1927 398 1219 697 438 461", " 801 1438 1373 109 112 192 71 1439 1377 975 1734", " 729 29 300 1674 493 174 60 1682 1470 1039 14 994", " 1889 32 29 710 1633 1887 375 1190 517 548 1743", " 378 1958 1484 816 1968 187 440 1859 571 151 6", " 1667 1279 1766 176 351 779 1203 1188 1151 485", " 286 533 1899 1468 1725 1775 1785 1482 1744 1872", " 1909 792 601 309 22 519 540 1971 1790 460 1683", " 1544 689 1212 789 1184 1162 1097 168 1276 59 1931", " 1796 1696 1172 306 1178 1100 630 394 1861 1645", " 1976 1456 336 357 697 485 1801 1337 1319 401 1908", " 1849 1632 409 1250 1253 55 292 1891 1213 1033", " 795 682 458 2000 191 1121 60 967 1647 829 1108", " 1183 538 1922 611 1618 1569 890 1505 503 721 1570"};
    vector<string> part4 = {" 114 1878 912 1686 1271 252 277 830 593 1792 1485", " 1753 1819 38 812 681 1609 1508 1137 1454 1563", " 1812 461 280 1734 378 1812 39 277 598 773 1110", " 1980 1932 167 408 958 18 452 368 1919 873 1515", " 1127 380 1984 880 842 1609 1781 631 322 1915 109", " 673 1721 1912 1223 1734 1257 1052 668 628 359", " 1070 1881 1030 1808 401 1584 1080 818 1215 1468", " 1034 702 803 1428 900 589 1142 737 74 865 1133", " 291 1647 557 1472 753 654 1095 62 1440 454 381", " 1455 1703 1766 1286 1754 1456 842 1419 953 1584", " 1141 1990 890 1307 1632 1529 503 610 1281 1985", " 551 1614 111 1725 262 1458 1141 954 67 1452 1141", " 1633 889 28 511 1091 465 104 1282 1571 53 655", " 802 741 967 221 395 966 1971 1358 245 1740 803", " 534 1352 1855 1042 1408 1330"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2000;
    if(result == expected) {
        cout << "Test Case 145: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 145: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test146() {
    int numSheep = 9;
    int maxRuns = 2;
    vector<string> part1 = {"1034 643 769 344 14 652 737 663 1907"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 3464;
    if(result == expected) {
        cout << "Test Case 146: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 146: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test147() {
    int numSheep = 1419;
    int maxRuns = 927;
    vector<string> part1 = {"1625 789 1732 1041 1229 1900 276 222 61 426 1656", " 1011 147 1277 92 565 302 1980 1622 407 836 128", " 1669 798 681 624 196 67 1041 1681 1635 73 627", " 1277 1944 913 1968 260 1057 1098 770 417 1405", " 508 1831 479 1068 7 1776 1435 693 103 277 459", " 599 1803 1884 1103 1345 1078 1498 615 501 1813", " 232 662 730 179 1001 1366 1010 1002 284 635 252", " 1994 461 1644 1915 1935 1345 1183 870 238 210", " 196 1584 1823 183 646 1947 418 1367 589 569 59", " 1503 407 1284 688 211 1768 207 533 690 1311 156", " 405 189 348 255 132 312 415 1682 1027 1874 1202", " 459 1556 754 986 1147 1310 1778 1946 536 1539", " 1377 360 861 1792 500 1412 1472 948 1180 1990", " 981 645 350 1399 929 1040 1550 1795 418 959 1069", " 270 269 816 1110 709 455 1411 883 1654 1384 100", " 501 1074 621 810 1028 1937 77 1087 1892 1991 1887", " 1426 1144 1766 1226 1449 875 372 1500 1722 157", " 655 511 1004 938 174 217 1417 1858 1145 1475 1479", " 1860 1020 1484 1336 1052 1911 1278 446 831 1482", " 866 1891 724 1808 416 1272 1510 665 186 1276 679", " 237 665 640 103 1053 839 1224 134 780 1455 1764", " 1382 606 274 160 1012 831 1244 873 1416 1639 278", " 225 570 1885 221 1541 552 1578 1026 1549 278 1360", " 1891 899 1573 1563 1867 1000 167 614 118 163 98", " 1392 1575 1115 675 1120 429 1800 1701 1719 547", " 1813 881 982 39 872 504 1024 478 740 848 1297", " 102 1775 491 1998 603 1648 974 95 542 1772 1216", " 1947 1875 769 66 131 1898 1314 1150 289 1697 308", " 1186 1778 1560 1304 1279 226 1525 251 541 1479", " 888 682 642 433 257 42 291 368 1185 1270 1353", " 1382 959 890 1000 910 1772 1856 1868 462 1816", " 105 501 1881 1847 463 1428 1720 1518 1752 1302", " 1034 1827 1085 449 1017 1332 1324 1181 271 790", " 1227 1765 1657 209 286 782 667 1081 986 1367 1892", " 1825 1563 1633 596 251 1091 1376 587 1875 420", " 1331 787 1405 640 1745 448 1932 1375 197 807 244", " 1329 811 1741 610 964 1275 1538 843 152 1798 317", " 1778 1313 878 1386 1502 1053 1259 1986 843 631", " 1387 953 400 1051 1770 1197 1761 810 914 669 1957", " 849 1332 681 1211 1205 600 1353 1753 1617 722", " 1249 261 724 1861 1411 1383 565 1548 85 1806 568", " 951 1444 962 1445 403 1353 587 1751 701 1947 1248", " 1714 1272 837 1890 793 364 874 490 303 1570 278", " 224 1900 926 1991 1054 498 1660 1900 1908 1313", " 62 1869 1533 1768 1396 1243 1778 1516 1181 1960", " 1421 206 446 1114 897 712 1041 1788 184 248 719", " 774 1453 1681 1744 1375 1195 542 114 1760 197", " 1288 1785 1994 1464 1386 1446 811 1534 1234 1003", " 1421 996 1723 1614 959 1774 218 284 1944 1946", " 1845 1648 1721 562 410 1940 274 166 1039 1607"};
    vector<string> part2 = {" 232 1785 1350 1439 518 91 484 1889 241 119 465", " 607 737 1709 18 1409 1132 1667 1302 1079 885 1336", " 606 14 805 233 1937 1 1561 1543 1454 242 269 1081", " 1091 137 1062 1198 1133 1164 1334 165 1809 688", " 12 977 1499 639 1706 87 693 1898 1083 362 1163", " 113 868 281 76 368 1498 118 835 764 1061 395 1142", " 479 484 1785 527 656 1665 369 1834 967 1974 198", " 158 1983 64 1842 623 1773 706 248 499 1648 1757", " 1818 148 1273 1119 668 118 1789 1418 568 1337", " 392 727 1300 1744 1620 1354 1793 1843 187 584", " 1989 339 1530 1366 572 60 454 83 202 255 195 633", " 788 1441 1971 1776 111 590 108 388 1577 1778 525", " 1736 1175 1913 257 602 798 645 885 1961 647 1809", " 7 1621 284 708 1792 1701 1112 887 740 1199 271", " 282 1510 1588 888 196 1921 1097 1924 1770 85 1613", " 1290 1122 1103 1384 1345 553 1852 1921 1218 385", " 319 1075 1820 1774 1585 1281 1850 1507 440 471", " 1107 201 428 835 656 464 533 1523 1251 1657 537", " 625 1509 739 869 988 992 1076 905 441 1199 1307", " 1705 1594 1316 1204 961 1934 1736 347 1098 778", " 40 228 586 1189 1213 1274 960 1882 492 1751 368", " 265 1840 324 444 1551 133 769 884 424 535 167", " 1886 818 42 1676 538 468 1307 455 848 1758 1878", " 1668 1803 19 1417 1930 553 468 489 1099 1859 1887", " 1348 1484 1819 1448 455 150 1652 470 1617 909", " 1686 1698 1335 1375 1953 1851 313 1070 1074 829", " 1493 257 1988 1923 1499 1784 377 1659 1073 255", " 1546 74 471 1253 394 1903 1549 477 97 1340 1588", " 596 568 498 1363 452 177 748 955 1481 1497 255", " 125 1539 1008 592 1210 1611 1064 838 1979 505", " 220 338 1171 245 515 1917 305 1276 901 257 1274", " 1413 173 1258 1126 101 1359 750 1882 400 477 539", " 311 1489 821 479 1216 1772 957 238 1009 1410 1", " 352 1086 965 92 1337 442 1276 1461 1837 1482 1432", " 1244 99 1225 712 1750 377 1261 587 85 1801 489", " 1125 1339 666 1700 515 1040 1098 1562 962 962", " 715 1074 268 749 251 512 245 508 392 700 309 238", " 452 1090 183 1852 310 1403 1761 1961 1937 92 1429", " 1803 1160 222 440 170 1506 334 960 503 1723 1206", " 132 751 363 1435 1150 1792 1163 1400 356 1482", " 293 987 1144 1657 1228 606 924 691 156 1225 890", " 1709 434 1398 1267 1379 95 389 1638 1047 1369", " 769 1651 234 1154 963 1232 1785 317 502 1933 409", " 1375 10 1731 1718 131 1149 498 265 977 519 1963", " 1576 1887 756 1835 338 39 391 266 1739 267 733", " 1042 1509 647 1376 1700 288 951 1678 359 163 1065", " 1625 1586 1611 1555 991 492 547 696 1741 146 181", " 311 272 1337 592 1828 300 1317 1819 1500 1585", " 1641 760 1715 858 1264 589 1856 1976 1003 991", " 971 1823 315 1935 1125 78 802 810 457 1189 597"};
    vector<string> part3 = {" 859 962 1906 389 628 494 1213 303 478 1841 1957", " 1136 349 1469 1658 1372 535 752 1500 1889 86 1550", " 963 264 779 1232 33 444 966 413 1062 1054 1667", " 1257 66 887 807 380 752 1935 236 1460 1233 334", " 505 637 86 1746 1462 1983 498 1857 1743 1801 1775", " 1279 790 125 1232 17 1870 796 1319 451 1989 1539", " 1913 919 897 1142 910 1967 1870 1756 13 1165 871", " 955 1591 536 1732 662 1203 1938 434 1268 1514", " 1481 873 515 1731 10 1946 1916 1058 1228 1464", " 617 1981 156 537 980 512 1813 412 1986 1809 1443", " 1261 1008 150 472 262 524 1061 1214 505 1575 1804", " 189 1724 42 1571 1567 563 327 974 1795 1988 689", " 1863 624 1543 1407 748 1466 1453 1404 421 1337", " 595 1155 105 1176 1463 1001 1969 187 474 1355", " 1101 229 294 1274 1702 1880 1265 196 291 830 1251", " 421 1296 233 1909 1246 572 1350 1306 660 1793", " 599 1970 1068 634 848 1533 1686 1808 178 1501", " 87 693 1159 559 1708 1365 797 700 1468 601 1751", " 1194 333 766 784 1192 1097 838 929 1610 98 1854", " 1172 1122 964 1743 122 928 1866 904 395 1387 1796", " 700 812 1520 535 1944 518 1691 629 1097 1940 1556", " 479 443 1660 667 1641 468 866 262 1453 514 1050", " 1194 370 274 669 1897 525 1267 1933 572 1817 842", " 220 1969 1571 1576 1898 166 249 1801 1822 327", " 773 1710 1367 243 101 1213 99 1414 461 598 111", " 1203 126 1434 1360 944 40 424 1474 439 1262 904", " 1455 185 633 75 610 1766 208 802 252 59 54 1934", " 1527 475 1781 1656 1530 241 714 915 1356 340 384", " 959 572 1132 18 814 352 709 555 1036 1020 1777", " 928 11 1446 1235 1393 1788 1128 25 1163 165 1653", " 1785 225 1983 336 480 1037 1023 1673 438 1841", " 1720 1721 246 1923 863 1952 813 969 687 1229 305", " 592 94 622 724 308 512"};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1998;
    if(result == expected) {
        cout << "Test Case 147: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 147: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test148() {
    int numSheep = 1080;
    int maxRuns = 56;
    vector<string> part1 = {"27 202 1609 309 130 441 892 1354 1645 1860 1534", " 737 969 655 1887 1861 1988 210 618 520 783 442", " 1592 656 226 1326 401 561 1697 1860 1941 1010", " 1806 1525 843 521 895 1646 1384 1111 1986 1417", " 1298 1580 1854 1531 1189 114 1531 175 742 1773", " 1589 1411 358 1974 1053 386 473 1412 1153 18 1351", " 1228 589 62 995 1066 1537 1510 1658 1793 1364", " 1061 1679 1791 826 484 1253 1861 1875 830 603", " 693 292 1076 47 428 1529 865 1340 883 1579 2000", " 150 384 1390 1725 1752 2 383 1081 604 462 1084", " 1682 1275 995 1060 178 133 1285 497 1927 1603", " 1272 1107 515 1914 1210 1503 1413 163 758 887", " 1192 1914 870 620 1642 1459 1257 1 703 1076 438", " 1842 615 1039 64 276 1182 1694 522 1039 1202 260", " 1373 794 874 1185 535 518 53 454 390 1837 1041", " 490 1638 684 1389 812 935 1343 1553 971 66 1260", " 108 274 1437 739 590 999 573 836 71 215 572 1426", " 128 122 1644 1046 1561 77 1610 1734 1826 1695", " 1894 616 1758 859 1011 370 1173 616 714 660 697", " 942 499 792 1867 1386 1622 920 703 691 14 1617", " 1853 654 32 1255 1929 1551 588 426 1429 849 1873", " 1911 1990 72 1637 353 1940 1381 309 289 598 585", " 505 556 542 158 1180 948 944 338 91 1298 457 1285", " 988 1474 829 1749 433 1071 1793 8 1597 689 75", " 203 70 1108 1527 1832 1499 1788 939 636 888 229", " 509 122 1016 1343 1859 1850 1227 938 1180 1719", " 1592 958 685 1128 131 143 1998 732 1347 1071 150", " 1963 46 1300 1972 42 726 795 1904 879 184 1021", " 1729 55 689 1618 1729 117 1860 1859 862 395 411", " 1892 833 797 1306 657 884 1316 1658 568 640 113", " 100 1832 917 1123 987 344 286 986 1408 524 995", " 541 1248 515 1280 841 1233 852 1639 1258 1805", " 154 130 223 526 174 1195 25 1626 852 1343 69 481", " 1224 64 1851 5 859 1931 213 376 1800 698 1827", " 301 940 1994 846 296 1094 783 1757 1159 555 1574", " 1989 1461 1564 971 163 1373 1596 349 831 76 1773", " 1951 809 1290 763 1600 1703 618 763 1293 1203", " 1711 260 1493 1614 641 1535 398 73 1345 60 1686", " 1798 1194 550 621 1466 1737 327 657 54 414 318", " 1945 1782 146 1104 1734 490 1531 636 1606 1923", " 1599 468 1691 1440 198 1673 1116 361 1330 1335", " 1435 1707 1443 1089 1847 246 1654 1037 18 979", " 894 1011 1781 59 1366 162 1059 420 694 1188 524", " 748 644 787 643 507 140 316 706 1044 1267 1971", " 699 428 873 1991 722 1711 13 1879 1098 1503 629", " 85 493 430 302 842 449 1998 785 1962 535 1942", " 1783 601 1157 1656 1982 351 534 513 172 488 880", " 1489 1251 1071 1383 1644 1798 236 1312 1568 1067", " 1547 248 1191 561 511 1526 847 1428 1350 191 1737", " 207 687 1721 1775 641 906 1265 1433 1780 335 1057"};
    vector<string> part2 = {" 306 1753 1761 332 1494 1944 1348 1756 1310 599", " 717 974 1072 776 697 1596 177 888 289 876 1868", " 1669 1820 1574 408 1680 725 1164 436 851 1886", " 293 950 965 1270 603 1285 1483 919 1510 451 721", " 227 1271 607 602 1392 1946 1850 533 1489 1878", " 809 1408 168 1638 1450 65 1097 93 890 1170 448", " 102 774 1341 581 1898 1473 1401 1118 102 1829", " 1107 1254 267 302 1952 1981 1079 1315 1442 513", " 709 1302 1225 1291 1281 1454 940 1852 1982 1203", " 313 1786 443 858 1513 1526 915 1249 7 736 276", " 638 1602 1517 690 627 65 1544 1181 1908 1799 694", " 1089 524 408 1518 621 557 554 1369 358 1446 879", " 1526 492 26 1522 482 252 1615 1104 262 760 1956", " 393 1585 869 1862 134 87 1187 85 1198 1914 962", " 691 1268 1800 227 1244 1331 1333 812 268 1725", " 59 1409 1598 511 367 575 1233 282 1878 426 752", " 606 1800 1194 1185 1911 1316 945 1885 636 900", " 176 1522 678 1250 347 1894 1566 1514 74 749 730", " 1634 802 637 1338 648 1379 576 157 699 434 41", " 9 284 890 347 1707 1558 1055 6 1756 1388 644 1171", " 1765 1442 1213 770 1732 1455 1399 241 1567 962", " 727 1936 424 1634 992 548 370 1226 1625 265 243", " 773 318 1067 1019 1142 565 262 372 1963 644 1596", " 1146 882 1042 951 940 1245 411 64 163 1683 456", " 1568 1907 647 574 1092 817 1965 517 982 1124 1241", " 364 1034 206 1786 971 1286 636 216 986 1958 1532", " 1770 960 942 1711 1819 1566 1809 1471 365 1245", " 258 563 1086 1653 122 417 1275 384 1337 643 50", " 286 208 1581 908 1754 1134 413 587 844 921 820", " 928 849 63 1669 1889 920 1038 1467 505 1262 625", " 1040 896 1821 1820 1419 748 1712 362 361 1032", " 170 516 783 1316 72 1445 1439 61 228 1884 1002", " 414 1035 290 917 711 1057 45 1918 526 196 100", " 160 100 734 803 1254 1369 1903 209 1549 865 1402", " 160 941 1048 606 981 89 629 1513 1753 325 1676", " 296 1183 359 1622 1233 167 849 548 1413 2 622", " 962 1184 1495 1451 585 1875 613 1352 775 1269", " 538 1743 307 1413 1156 148 667 1602 934 1293 1392", " 1391 1725 1380 501 465 1940 1307 84 730 308 528", " 898 1260 1520 1025 4 1462 736 1857 65 355 91 1596", " 1450 835 1435 807 792 1769 1036 203 100 759 182", " 468 541 903 1403 1365 1109 1948 1810 159 29 1880", " 5 785 162 1247 1784 721 1048 843 1227 1468 535", " 130 706 1899 1698 117 707 839 335 1594 1008 286", " 708 1996 565 886 1759 82 1188 898 858 333 1583", " 1027 1292 726 1158 1312 115 983 322 584 544 536", " 209 1127 1396 350 1795 312 26 767 244 1371 820", " 329 1707 455 1867 1827 1474 305 897 1972 855 142", " 1018 915 1074 1637 1738 1854 792 728 1392 1743", " 1535 1908 435 236 419 1223 28 1598 1817 1667 469"};
    vector<string> part3 = {" 1780 611 752"};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 19029;
    if(result == expected) {
        cout << "Test Case 148: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 148: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test149() {
    int numSheep = 192;
    int maxRuns = 69;
    vector<string> part1 = {"971 515 691 1706 194 510 1635 1577 1397 440 20", " 1171 684 654 166 1994 1913 375 1437 428 1661 159", " 1241 524 557 1063 261 1176 422 91 336 103 1983", " 1444 1163 625 1838 1887 531 419 653 717 127 210", " 190 157 1164 1312 1773 967 439 878 869 970 1914", " 1169 534 1257 683 1688 406 80 1809 348 613 910", " 153 824 357 942 872 1628 377 1798 737 1933 605", " 51 1018 1199 200 1812 1754 709 61 999 357 1768", " 1160 737 332 1735 1687 162 1822 1438 1622 360", " 1971 490 159 1251 1355 1771 1218 393 1442 683", " 322 1658 1031 862 224 6 1214 155 1340 1662 210", " 362 1273 1785 1471 1790 737 1112 1471 1204 777", " 76 434 1597 1509 838 1028 361 1903 1279 1642 596", " 660 441 1165 918 191 1782 154 165 971 1896 1465", " 862 1491 1672 1565 1652 1724 1386 1275 584 1462", " 1937 862 841 1902 479 1595 13 1704 1296 1632 1297", " 331 1384 1426 1390 221 666 1112 1485 1377 11 1234", " 125 973 1574 1582 1842 977 1424 1339 1151"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2773;
    if(result == expected) {
        cout << "Test Case 149: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 149: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test150() {
    int numSheep = 69;
    int maxRuns = 43;
    vector<string> part1 = {"995 1863 343 1521 1205 421 286 1738 47 1151 1551", " 1711 1744 1788 1662 651 1446 608 516 1646 1728", " 1499 1225 1903 983 1651 888 1427 1839 238 877", " 399 1370 196 1681 1082 1535 1924 1674 1590 377", " 1623 1020 417 1506 1106 1349 1223 226 1200 1896", " 26 771 751 1704 1172 1463 169 1031 1036 251 1366", " 783 296 1309 64 1905 2 1133"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2015;
    if(result == expected) {
        cout << "Test Case 150: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 150: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test151() {
    int numSheep = 679;
    int maxRuns = 203;
    vector<string> part1 = {"1894 1041 1755 1563 1414 1221 1480 1694 1281 1846", " 1576 430 1002 193 777 1527 1531 3 1010 1170 1247", " 367 1035 484 1105 431 1297 983 388 1694 714 1469", " 277 102 309 1745 1870 294 1798 753 797 1958 1713", " 649 1524 1677 1333 1985 1809 851 1787 699 1153", " 1395 1967 1797 1105 259 318 918 357 1687 1984", " 1078 1532 114 1609 734 932 1087 1274 1539 1674", " 176 1261 77 117 36 481 1037 1988 46 1218 254 260", " 372 1469 314 1830 277 594 240 1953 1902 203 1765", " 868 1343 1052 218 655 393 796 1276 1522 331 1219", " 1745 1717 958 1652 881 1498 413 253 867 272 73", " 940 1723 1034 1260 1829 1408 144 396 161 1042", " 243 403 1449 1963 1926 1436 275 1189 1932 1840", " 1692 461 93 99 1303 343 1293 360 325 1043 1262", " 1244 1573 1246 612 33 830 347 1497 1193 443 579", " 1299 1031 246 1051 1235 1248 1416 662 944 1543", " 1727 346 1843 1386 913 1943 467 1719 1665 901", " 1364 131 1280 1197 748 380 1813 1835 1878 1821", " 192 1746 891 1618 1067 1105 1901 61 1410 1237", " 1045 328 709 1295 864 1180 1451 359 1638 1138", " 217 337 1084 487 68 351 538 133 403 1959 1518", " 544 505 1303 1858 606 1409 294 76 843 1242 156", " 245 1739 501 53 1725 1649 1213 1505 333 688 1335", " 1792 1452 800 665 1181 1062 1780 400 1816 1481", " 361 1037 1240 1954 1857 1408 97 1976 1601 919", " 1122 1927 1208 1304 1138 1216 929 1982 685 831", " 1722 705 553 1406 758 825 1550 1080 1392 1171", " 117 1663 1313 5 1711 914 1588 143 74 185 1544", " 1474 1696 995 982 726 1152 1571 1123 566 1361", " 1094 552 1727 148 1176 1857 858 1786 872 1698", " 1333 1814 25 1104 1576 1795 1226 367 1030 1561", " 1352 616 963 668 1569 1198 550 1702 1549 1841", " 1567 1463 1065 1538 906 490 596 792 1332 377 862", " 242 1069 1475 1661 1246 479 733 289 650 431 439", " 491 1801 1697 1761 682 648 432 1245 1510 1729", " 606 1846 1136 464 921 498 1561 1764 304 276 994", " 1224 740 677 196 1219 2 1460 721 12 1343 1435", " 683 514 1781 852 116 1404 1438 1548 645 1100 798", " 295 147 1929 1094 868 335 477 1925 290 124 732", " 1650 1843 390 470 616 608 354 847 1409 285 1072", " 1213 1110 1519 1336 497 1269 1387 1748 1306 1813", " 752 1690 1190 1382 1912 1246 603 300 1227 325", " 901 670 405 1068 1489 1657 1737 234 505 1675 806", " 1939 320 301 1497 559 545 1808 1619 1674 435 1579", " 860 1501 1088 1923 1719 221 1318 861 56 1187 61", " 1616 1876 1884 1962 415 1800 626 851 1061 125", " 90 996 529 218 1679 978 805 1178 1647 78 1817", " 1184 1604 1116 1957 920 1254 533 1759 1904 1680", " 586 1714 1079 1328 1850 1504 1444 1010 709 1432", " 1146 239 1441 1995 43 1810 189 1420 11 1419 1029"};
    vector<string> part2 = {" 503 454 1704 357 1668 1460 1937 433 1243 1595", " 290 277 1289 614 1486 1848 1796 550 546 950 1756", " 1622 856 287 1155 259 46 1850 686 139 646 1118", " 1868 629 415 1010 1110 1362 1460 402 744 1650", " 1955 517 384 1930 48 622 1652 84 379 1104 1176", " 1544 1551 437 1024 314 1629 1056 579 132 281 1378", " 1473 293 1410 394 982 426 1848 96 1791 1980 57", " 1812 1372 1482 1229 338 1527 1784 867 1817 1477", " 520 763 1532 1338 889 853 1257 1714 637 874 1880", " 1597 495 1738 486 154 996 421 1139 1399 961 1198", " 1320 1576 574 1149 205 1830 1242 52 1322 1850", " 703 1764 1949 395 55 1392 251 1043 846 1810 1898", " 1081 442 429 78 1371 1033 868 1426 377 1130 1961", " 250 186 1519 1223 327 1529 512 1492 1739 1360", " 20 1890 333 1512"};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 3478;
    if(result == expected) {
        cout << "Test Case 151: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 151: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test152() {
    int numSheep = 44;
    int maxRuns = 11;
    vector<string> part1 = {"960 538 206 252 270 37 1082 1552 1200 1243 823", " 1789 1950 1842 1234 1802 1475 469 152 1847 116", " 125 308 1246 1711 844 535 268 1552 860 493 1423", " 1562 1640 1085 1999 1812 489 66 1489 81 131 1928", " 490"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 3927;
    if(result == expected) {
        cout << "Test Case 152: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 152: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test153() {
    int numSheep = 1813;
    int maxRuns = 1089;
    vector<string> part1 = {"1256 1665 1381 1966 1560 569 430 1941 1388 621", " 1096 1164 1906 1261 204 749 941 184 1476 997 1551", " 1466 1059 1696 1181 152 965 1717 1614 1593 1575", " 1165 1652 423 1482 1930 1166 198 1060 310 1693", " 773 40 682 69 883 1783 176 1350 404 375 1322 1356", " 52 467 1092 468 378 755 551 1489 1233 253 448", " 1645 131 108 1105 627 1799 544 119 1053 397 950", " 364 617 1783 538 125 1890 74 1706 462 1756 1717", " 653 1484 1551 1650 899 483 1128 1339 1486 66 812", " 1950 594 604 31 1459 1577 704 1189 526 779 1243", " 1878 401 1340 332 311 1364 229 24 742 1911 391", " 1200 710 1158 622 960 1613 1326 451 1129 1850", " 1520 1124 1137 1274 1523 1016 1081 172 671 557", " 1183 1684 1432 1525 1749 254 775 17 1522 276 639", " 156 248 577 1662 1995 1798 1526 1939 1411 126", " 1340 47 1659 1945 684 127 1716 250 428 1913 1863", " 880 603 1828 893 240 478 525 1685 531 1356 1400", " 1345 620 135 867 866 1340 1420 1409 1094 601 1453", " 918 1470 172 860 894 389 427 267 1811 1582 1399", " 706 1871 1101 1190 561 1166 1161 1923 182 1480", " 1056 1988 257 1117 1627 1068 119 225 692 243 1476", " 923 374 1027 1907 9 979 1044 1123 1494 1916 1866", " 802 558 1036 1661 269 1729 453 474 1228 1191 544", " 776 936 1395 1519 1757 1182 1435 1254 1490 1352", " 263 1801 244 1898 1911 55 1981 778 1802 72 1475", " 1667 684 1746 1166 956 815 1810 256 1701 1870", " 762 1088 1745 862 789 1319 139 342 1059 463 1842", " 241 1889 1001 406 833 184 1566 136 678 874 1784", " 349 1599 1976 1202 324 1968 1095 1405 776 1109", " 52 244 919 1781 534 1426 20 1275 1315 1267 1130", " 1873 1158 1464 1746 1262 559 879 1991 1010 155", " 419 632 607 629 479 1966 603 1181 1961 1134 1059", " 1992 13 1809 593 857 422 1362 1585 159 453 1448", " 513 1902 1707 965 711 834 1145 717 1560 593 1370", " 1803 341 1537 159 593 1080 555 492 495 592 318", " 1681 582 1914 710 1180 1437 417 1118 1788 451", " 455 1731 1097 1382 1716 59 642 1812 957 1111 695", " 1120 921 997 1849 503 97 1945 1934 243 1910 156", " 1913 63 1927 821 170 253 402 952 1490 149 1099", " 28 602 1518 1836 1746 260 194 780 1010 513 573", " 1794 696 1141 646 1291 927 520 33 699 1868 1662", " 196 1296 1231 1465 1321 1965 1814 526 1668 1558", " 1026 1253 165 423 333 405 64 474 604 80 1195 1129", " 1250 842 1095 944 86 1616 563 439 742 23 45 559", " 523 1202 122 554 1550 8 1721 1280 1500 1220 851", " 1087 1654 1471 1045 898 748 1180 449 117 508 674", " 738 1976 1621 1887 191 867 688 1611 258 121 129", " 1115 408 1408 939 1335 1675 1888 1234 1198 607", " 1689 773 1993 1883 314 379 1501 1609 511 172 644", " 1887 1947 1508 366 318 1510 852 724 1370 1801"};
    vector<string> part2 = {" 1258 1774 667 488 1682 53 1252 414 396 1019 1667", " 1888 912 1258 1672 858 1744 491 1609 319 1181", " 904 437 1824 1500 1380 1080 154 1305 105 1806", " 356 125 577 1355 1849 1181 457 1291 1764 1395", " 1811 1301 1129 689 1772 1093 844 99 1502 426 1804", " 628 1590 1405 751 196 392 1348 372 280 481 342", " 1653 98 1294 1200 1500 227 1291 1751 1015 718", " 303 750 1119 719 1718 250 453 1084 1182 1540 1022", " 1307 54 464 977 740 164 1500 1998 936 1798 570", " 194 1250 220 1665 776 845 1748 1713 1890 1398", " 1589 758 1048 1475 1264 1599 816 1812 1779 399", " 1822 1401 1632 1331 158 53 1823 1110 656 1361", " 447 1042 1427 804 18 1415 502 1681 1002 609 1979", " 546 1294 37 972 1428 1794 1179 626 242 374 1955", " 772 326 1805 1153 125 1902 1024 1563 1457 876", " 36 1125 1905 1456 954 1690 1293 1081 678 990 1818", " 1818 1410 1570 1365 1674 1140 1688 1830 878 877", " 1127 1767 123 1571 657 1815 1831 97 1443 842 1887", " 1853 540 1588 751 1355 1394 22 621 1616 1298 1048", " 646 762 310 792 1005 350 172 1170 305 801 1108", " 192 63 1147 1226 1875 696 361 70 739 805 707 896", " 611 775 381 471 121 963 1105 323 253 543 1772", " 1481 79 678 920 800 638 114 955 1826 1222 1579", " 894 1061 1290 666 1808 1035 99 963 1084 1686 215", " 163 1560 64 1277 1541 415 1210 1120 332 930 275", " 1074 572 330 92 1027 1977 49 1177 290 261 1458", " 1786 1220 1684 1726 667 130 323 1153 1225 583", " 392 1716 359 1899 411 1268 991 1514 1381 323 1388", " 1881 264 509 455 841 879 93 1329 620 631 401 1073", " 1464 1311 1467 494 1370 76 602 1248 540 1184 1273", " 738 1258 1323 1830 586 1938 1603 870 1484 395", " 560 599 1419 1223 347 1158 1953 459 440 1266 18", " 1998 1345 752 1852 1840 342 800 1074 14 1874 1023", " 1625 1347 959 255 962 305 988 1557 1498 768 126", " 193 94 1958 1221 1683 1155 312 833 44 836 1903", " 1669 899 509 1823 634 329 376 1876 38 287 1878", " 1950 927 1142 1281 398 1307 503 335 1713 90 100", " 1017 1469 886 942 77 474 1113 1945 561 435 704", " 1757 1273 156 927 1455 1482 870 1637 1519 1392", " 338 529 307 285 178 405 356 1171 662 506 342 4", " 1589 37 1038 600 1498 1048 1392 111 257 1724 311", " 919 1938 1357 1960 1072 686 870 1240 798 343 1999", " 781 1071 245 1908 899 1150 374 1128 161 599 789", " 682 907 1339 1727 567 1257 1831 1138 240 375 1728", " 1287 1757 542 946 1345 1249 35 1929 822 192 1278", " 1391 1838 1055 1214 919 1098 1100 12 857 1718", " 605 1085 416 1762 61 396 1344 557 1380 1063 1948", " 1347 886 1880 487 1050 1135 390 425 887 733 1261", " 1812 1606 1791 748 1864 873 1260 30 1028 896 439", " 172 685 1226 1778 1345 1700 331 513 1389 1331"};
    vector<string> part3 = {" 287 432 1869 504 174 1895 1787 358 673 1101 642", " 328 1604 1211 1014 1335 1228 146 337 942 1482", " 1823 368 204 768 734 1392 1529 1988 622 899 1901", " 1299 243 855 1389 200 977 377 839 109 8 1781 513", " 1761 1419 1122 493 1018 1221 268 1552 813 1246", " 1473 1602 1596 570 737 120 623 467 735 881 1830", " 1864 397 1886 782 1142 839 182 146 1558 1023 296", " 1412 1063 249 1698 1820 1342 375 929 864 971 584", " 1178 1637 621 1564 345 1813 120 875 1768 657 1767", " 1735 1395 216 1389 223 969 457 320 1622 1029 70", " 872 707 509 538 596 122 267 1484 1806 1163 1035", " 1380 1152 1273 196 237 198 1662 1258 507 118 397", " 899 1439 638 408 1289 810 253 1123 112 350 885", " 569 1064 795 1695 1725 1108 1464 175 1507 1708", " 800 1353 480 1553 1216 1861 1504 1855 669 1247", " 1287 1271 795 1746 1338 1662 460 1013 446 368", " 1045 918 1809 697 1544 1351 1384 1654 1469 1975", " 745 7 1202 1346 250 647 245 1115 873 495 223 1641", " 61 504 35 1951 557 415 1687 1953 800 206 355 100", " 468 1481 1688 133 211 919 803 1485 835 242 609", " 947 861 63 229 978 1841 385 1736 1020 359 171", " 784 272 1977 1846 1796 584 303 1922 1583 1638", " 651 224 228 1840 1303 1807 945 457 571 693 70", " 1362 1811 1041 1175 1313 1616 1471 1568 497 1966", " 507 841 266 1270 217 1115 114 1061 628 978 1748", " 61 774 883 1665 970 1880 479 1028 343 378 729", " 1033 274 405 1268 993 398 431 336 111 952 95 647", " 343 780 65 1763 1144 1624 396 1427 1495 769 1410", " 702 30 1973 744 1703 341 1377 1352 913 1792 180", " 867 1332 1736 1059 1450 448 367 1534 638 514 1150", " 1379 1430 1349 1505 994 578 1691 486 1377 686", " 684 1217 1521 665 1246 852 1728 870 1510 397 1904", " 722 366 272 999 215 103 391 681 1425 465 951 772", " 1552 1273 421 154 1949 1473 873 852 656 1926 1506", " 1572 1793 687 1097 284 925 433 1306 1037 1691", " 1707 945 1987 1616 1454 1313 575 1936 1324 1019", " 565 1942 1958 813 72 102 814 121 1762 113 244", " 567 1768 329 703 1853 1532 1781 154 1902 85 310", " 1170 1105 621 811 1517 885 314 1699 1933 1473", " 1359 850 1620 528 1859 53 698 236 738 1049 1245", " 1770 1731 1432 921 280 26 438 328 1266 607 1003", " 1676 650 1567 1698 27 1785 513 898 1929 1441 427", " 1258 1964 342 917 402 1516 1309 14 1263 330 1874", " 1999 1544 1603 1312 1917 1863 1476 1101 771 1314", " 16 1092 623 1675 976 1927 699 1300 1899 132 799", " 1655 486 1959 21 101 765 433 1117 989 386 872", " 627 527 885 895 957 1297 838 1111 1033 1139 1927", " 181 1351 878 1685 1846 1154 562 1064 833 645 496", " 473 12 235 757 884 322 712 265 94 915 118 598", " 313 588 963 717 1445 856 1529 261 1017 1751 445"};
    vector<string> part4 = {" 1413 1730 543 1837 1460 827 1072 1731 1279 1934", " 828 303 331 1418 1463 293 796 1926 1083 1890 325", " 1604 495 581 1297 1353 665 843 817 1837 1714 203", " 1654 174 1177 692 1890 922 762 355 698 1436 128", " 649 1135 854 120 1885 94 1841 617 878 164 816", " 1265 60 789 876 721 311 63 507 220 216 1947 1874", " 604 111 100 797 1286 1180 187 1340 95 1986 1369", " 1553 638 184 1638 1591 452 1698 922 485 1321 1248", " 611 883 905 1414 375 861 575 444 1674 245 1840", " 1702 1457 1005 1644 1702 1448 1494 1841 400 1585", " 515 1440 415 878 1953 1220 950 529 251 704 1290", " 449 1736 792 1918 480 1368 18 142 652 192 366", " 753 1218 274 1381 1785 921 1537 638 732 1454 915", " 727 1400 300 727 481 914 31 1625 1692 464 1497", " 1587 886 504 1764 375 1710 472 968 1643 285 72", " 224 1203 1816 1821 1784 1365 223 1807 538 1801", " 1241 1564 361 1968 420 1854 365 1831 183 811 913", " 844 619 1837 1193 1632 282 1585 1448"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1999;
    if(result == expected) {
        cout << "Test Case 153: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 153: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test154() {
    int numSheep = 1549;
    int maxRuns = 987;
    vector<string> part1 = {"1337 349 570 1948 1435 955 127 1211 1630 1808 628", " 253 293 1988 483 51 1198 1081 1812 130 474 1584", " 259 856 1067 446 305 418 1886 576 1914 765 555", " 924 1624 828 923 426 646 42 266 1796 679 1904", " 1805 1993 1495 728 694 1368 1938 1779 165 1068", " 868 1961 1249 994 753 943 423 867 1526 1582 450", " 1566 175 577 332 389 298 414 212 1115 636 745", " 1633 476 499 1158 230 1806 796 1534 166 55 438", " 1603 1082 495 647 55 1184 391 1117 506 950 1306", " 1479 83 887 755 469 65 1381 1759 1789 482 233", " 100 1392 755 823 770 828 1033 1749 1689 963 1696", " 717 60 1004 1826 1216 1733 504 1978 1694 24 1624", " 1737 1140 668 1294 1385 1557 263 417 1249 1244", " 762 1444 1752 1664 109 537 653 441 1275 418 1574", " 1874 1650 744 295 1360 564 256 1558 1426 609 1067", " 669 1130 1897 1052 1887 699 1708 1008 223 402", " 1748 1449 1037 586 1286 795 1506 1563 1349 459", " 926 1987 231 548 704 1176 1788 1852 1158 300 332", " 326 1509 1921 672 1545 667 1407 1717 274 548 933", " 1580 645 314 60 309 1770 1744 690 1069 1957 1024", " 53 1621 1766 867 318 6 755 1346 1105 1170 1987", " 858 370 156 1484 709 922 762 830 871 1850 633", " 722 710 1967 963 1998 1950 1191 61 1770 1796 1555", " 644 744 1033 1165 441 415 273 1580 249 1768 1588", " 1589 898 333 117 1892 323 127 578 428 516 1815", " 171 827 1110 847 982 1921 1644 1201 1521 1843", " 970 496 186 1883 1549 1191 1212 1026 171 687 539", " 1713 1916 1236 578 1604 729 1674 1787 1728 996", " 812 63 1335 1929 517 430 1065 995 2 1601 1373", " 817 1800 1117 1665 1178 194 555 1998 383 1358", " 1287 1439 1921 1321 1974 1523 83 1816 123 1073", " 305 1048 1339 60 369 1272 159 295 56 1910 1786", " 1082 177 102 284 1494 873 986 582 1846 878 1231", " 1679 1414 1018 932 695 216 1802 497 714 1573 532", " 1541 1302 1441 1464 1744 1697 306 1398 1107 485", " 1474 1120 1076 1949 1843 1105 1574 1925 1634 1727", " 121 300 383 1005 1326 861 1196 1844 1261 1887", " 596 1764 1290 1146 399 21 630 1915 51 50 226 922", " 1996 1032 601 809 975 43 1950 1567 1067 10 372", " 1702 578 612 1277 1874 311 1484 1717 244 1304", " 249 1279 1949 653 464 992 1351 577 1670 1883 208", " 1505 1072 1549 1832 179 14 1786 381 1721 1656", " 695 1941 486 1495 1242 1789 1888 1303 303 1887", " 342 395 172 841 404 690 1191 43 1349 1913 1911", " 112 1960 481 1928 258 998 274 1507 1592 1347 368", " 636 577 1923 237 894 1781 591 1199 1060 889 920", " 1075 1082 1908 956 210 1188 1840 1462 1827 1052", " 1219 266 1042 1042 1758 769 239 1215 309 338 1162", " 1338 1905 1427 1886 1119 611 1262 1611 861 826", " 1270 1784 1103 1286 1020 1080 541 1486 1197 621"};
    vector<string> part2 = {" 1572 1231 431 1851 99 277 620 1326 231 1231 957", " 366 778 958 1323 1346 1255 1231 1378 755 1409", " 10 1112 18 1316 1001 716 365 876 1532 162 1502", " 181 509 1406 1316 1299 32 1166 1574 1091 477 1181", " 1621 226 272 966 1521 620 1105 1062 1695 7 256", " 1957 1898 1713 195 805 744 184 1732 988 766 505", " 228 15 854 282 1669 48 1951 1548 214 554 1574", " 91 351 1497 1476 216 656 608 40 25 1350 1877 7", " 1039 1134 1919 1441 1752 1644 1027 710 454 990", " 491 1496 913 876 1465 354 1800 1267 331 1258 845", " 1203 1551 1667 1794 1126 1416 710 1198 1346 897", " 1089 1716 432 402 689 470 493 961 1021 86 209", " 938 50 494 1311 338 1910 497 1580 408 1175 560", " 1108 318 1780 17 873 599 1631 1790 269 1137 817", " 1386 1362 1700 334 1593 1775 491 1851 208 1958", " 403 1869 858 132 146 1603 1805 1449 1787 1447", " 605 1545 478 1665 303 914 836 349 1969 414 1436", " 558 1672 1243 1904 1235 905 1258 44 744 76 1125", " 1807 384 670 468 162 418 806 1058 1641 1970 250", " 267 504 97 1747 312 1289 1415 1199 511 427 1840", " 645 821 44 1557 1326 1909 138 1709 1394 790 710", " 803 960 487 378 1962 1027 174 93 1950 529 994", " 660 13 197 1093 219 1462 544 1862 1765 656 827", " 1958 1488 318 1840 970 1245 145 1850 80 79 415", " 1594 789 1345 1539 747 454 60 1141 376 950 1929", " 812 1645 560 532 433 1132 1437 131 389 1953 103", " 550 1541 1031 879 398 1149 1580 780 290 1819 1730", " 1782 640 150 1928 674 1713 1375 1257 94 1392 54", " 371 672 1308 48 459 1242 1996 119 1743 592 179", " 563 779 653 1189 1512 1936 1027 1128 623 898 305", " 1326 954 1745 730 1554 258 1003 660 80 227 1567", " 510 1499 107 85 789 1321 1855 364 345 1969 798", " 1332 1436 393 954 718 843 1481 1284 225 1471 1796", " 807 126 870 263 712 1046 1310 354 284 410 1506", " 1464 955 1170 1256 1858 531 1666 1705 1688 672", " 1307 1715 882 587 1710 1068 412 801 903 1896 1161", " 725 1143 461 393 968 113 517 62 1800 1754 1747", " 1739 247 1707 1162 1614 782 248 602 1440 225 1078", " 412 1786 756 377 736 394 1486 187 164 1094 189", " 1620 1992 672 571 1302 1953 75 816 440 1371 733", " 1415 1750 1458 1158 629 1159 82 1040 1735 927", " 1949 486 428 933 925 538 1428 1239 363 290 1302", " 1597 1840 467 1608 540 793 593 1530 525 1936 1494", " 740 1725 1833 1313 562 1893 1546 176 332 428 1023", " 929 571 1276 1372 1365 25 978 549 934 169 1562", " 1962 555 711 1051 951 1002 1376 1279 123 477 1509", " 118 247 392 1228 1931 1050 1177 456 1991 762 1777", " 10 1748 165 498 1528 692 1049 1770 748 1684 1441", " 815 592 1195 609 1547 1642 1656 660 1547 626 1787", " 628 802 971 1969 1465 547 1553 1158 869 254 800"};
    vector<string> part3 = {" 1447 1280 506 1190 38 1696 1797 234 1649 12 840", " 1740 164 384 431 78 590 3 1207 1236 114 1943 904", " 1064 848 1089 1429 1921 3 714 609 1157 1915 277", " 1365 1581 1198 290 1040 744 826 226 1326 1490", " 1215 1468 412 134 1467 351 602 98 389 825 385", " 938 462 1032 72 1632 1733 1935 114 1458 378 603", " 154 1348 725 599 546 1792 1032 1292 376 1419 434", " 1949 506 1417 1653 1634 1051 1444 427 1715 422", " 489 1621 1063 435 836 83 1677 1528 1310 811 1596", " 130 147 771 1430 1156 1353 833 770 270 717 278", " 490 1522 464 198 1058 1747 659 412 251 1215 238", " 1579 1302 1583 231 1927 1820 940 945 869 1406", " 1956 1251 785 1561 1965 331 1711 1340 394 354", " 500 1725 1291 1506 133 24 522 1365 592 1113 755", " 704 810 221 755 1056 1432 980 1157 1060 962 74", " 1401 939 1813 502 326 1023 1129 1266 1537 1842", " 450 716 1135 935 1706 1980 151 1269 351 183 59", " 1031 536 1411 1832 632 670 1741 316 509 1641 295", " 1944 803 1273 38 151 955 534 1003 1438 771 1850", " 1872 1699 72 845 1797 514 1848 833 75 1630 828", " 1663 1890 102 54 705 494 1273 1847 978 1583 1402", " 516 1875 1921 839 1818 288 1056 934 47 482 496", " 1121 1931 230 1165 901 1432 1086 446 69 1094 1542", " 1952 1956 1730 505 64 1443 551 1493 568 535 757", " 701 638 350 1457 1502 1817 1508 814 1428 470 1793", " 459 1453 426 6 1356 1454 153 1928 61 1509 1318", " 731 1380 1871 779 498 1031 154 1307 1974 1822", " 126 951 902 1418 1736 1566 814 1366 1671 104 1435", " 1293 858 1045 1933 572 649 321 1550 1354 580 1291", " 1170 37 1129 1239 1903 1854 1146 1904 1760 248", " 893 818 964 172 998 167 1916 241 722 1984 485", " 699 469 70 1891 273 1911 1281 1071 755 1291 601", " 1122 1276 1280 1243 1378 1284 1099 351 1340 1418", " 580 472 803 1888 1280 139 983 518 1231 660 1178", " 1404 1831 437 1567 1730 1617 399 884 51 1090 22", " 610 1217 1084 1633 898 1282 1398 1296 34 28 826", " 881 473 125 1022 819 1127 126 1141 956 304 600", " 1094 201 1450 296 1741 245 1173 1647 1873 988", " 1531 61 438 1679 1768 1199 1107 1434 108 1782", " 1639 516 750 1675 1112 968 1331 768 1996 1666", " 1376 104 235 539 1740 329 789 1657 377 881 1056", " 1281 1493 551 532 1694 11 1620 971 1654 928 1233", " 1859 1819 507 1954 422 159 1988 996 172 1084 1697", " 1427 1375 211 1276 1039 399 980 1193"};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1998;
    if(result == expected) {
        cout << "Test Case 154: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 154: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test155() {
    int numSheep = 1552;
    int maxRuns = 967;
    vector<string> part1 = {"573 439 1207 1696 726 1444 983 20 1660 502 1476", " 1622 732 1800 75 272 627 129 834 413 1012 363", " 545 1080 633 1539 1410 277 989 1644 1620 1918", " 122 953 166 785 559 1675 498 1432 276 551 1384", " 200 704 1548 381 1199 187 195 691 759 448 1960", " 1291 1440 1573 1416 504 957 270 1243 1974 670", " 1838 100 1803 1790 944 567 1228 1134 214 1131", " 676 161 1151 1392 304 953 78 1266 750 82 1433", " 862 264 1454 1919 900 395 577 1373 1758 1661 429", " 1219 1744 1342 769 674 241 702 733 1305 1241 848", " 442 225 1995 45 503 821 1829 1740 391 1974 1237", " 688 873 1678 462 2 104 819 284 961 1157 1647 1460", " 1320 609 1741 1376 607 1823 966 218 708 41 1886", " 582 1659 1730 1128 1012 467 1452 1585 1510 1948", " 1595 1211 911 1558 570 168 1869 1547 1260 859", " 1465 512 1030 409 141 1095 443 501 1877 1145 1559", " 1757 1096 434 33 1295 120 749 1706 1744 361 195", " 1803 766 463 302 143 180 891 786 60 478 1847 1310", " 1352 142 31 479 1849 1102 371 54 1197 1735 42", " 587 1259 738 793 18 1354 204 261 1901 1361 943", " 741 1554 287 1119 1979 1438 1164 482 101 1418", " 495 212 1727 1230 513 313 1259 1411 1681 1220", " 948 957 938 760 382 1944 1730 1453 1474 1074 1813", " 1462 10 714 530 752 792 264 323 1197 667 781 675", " 322 772 284 587 494 1046 1737 877 1580 365 384", " 1349 250 112 585 236 1947 1754 43 1455 1162 709", " 959 304 1584 776 1879 811 1608 1554 958 1708 449", " 1431 1969 1743 964 572 399 1479 1223 333 1101", " 1219 1984 1847 1469 1871 414 642 671 1031 772", " 383 8 337 855 99 1363 43 1515 1714 1286 1778 73", " 1760 1846 565 1860 852 237 1017 220 222 267 958", " 1090 1626 1738 1698 1549 709 679 501 1068 1519", " 1662 1421 77 258 1493 1723 910 274 411 365 1106", " 838 98 1621 902 310 1244 1082 452 117 1970 1725", " 584 593 1546 383 1553 777 1481 1041 1786 478 263", " 716 426 1004 435 1699 1065 699 1063 1781 1268", " 770 1374 1927 2 779 114 1634 1767 669 762 1128", " 601 837 660 189 130 1462 960 740 1478 260 702", " 983 421 1115 1591 1803 675 1397 210 243 1014 1147", " 1248 948 1887 427 698 1465 749 1548 1356 1223", " 862 318 321 676 952 1173 1617 1972 1047 1272 712", " 276 1016 1620 217 1083 1557 647 1667 189 1233", " 1658 226 898 1175 1902 1081 662 254 1914 1855", " 1283 976 1171 1384 1772 1963 1038 1190 1258 55", " 98 271 1021 1897 114 1568 571 1111 905 1330 269", " 1389 1942 204 442 832 954 665 451 337 1488 1596", " 562 1668 1869 1249 237 306 744 806 639 1644 427", " 202 1704 1025 906 1524 211 1857 500 103 121 1378", " 968 308 1157 947 1978 929 120 1328 246 73 1997", " 21 131 1860 1663 166 1772 57 297 1615 1355 1873"};
    vector<string> part2 = {" 1647 1095 1639 1197 1932 971 1936 203 1755 600", " 424 1828 137 264 1540 1130 1787 1521 1955 1712", " 508 1770 1710 474 1242 1695 1553 1928 706 1351", " 921 1964 536 773 207 1092 1644 444 820 1924 777", " 1958 1325 980 928 806 80 1370 405 253 1871 1865", " 696 234 1606 1658 1462 1013 384 1098 1713 1358", " 1502 1700 125 1761 762 1408 172 1693 1705 1341", " 861 1862 175 906 1521 1559 216 763 1294 1291 1044", " 1578 1911 1086 1922 989 1947 1280 1280 1943 1453", " 1258 1650 1617 997 196 481 1273 1093 182 1782", " 603 46 1918 503 448 1123 321 1201 1733 1838 1445", " 1080 61 1187 1886 1402 425 1618 1623 1514 999", " 976 564 1324 793 568 1254 1100 744 429 1567 1348", " 1640 1668 775 1629 1837 160 781 934 783 1486 721", " 307 1450 1538 850 967 168 993 1908 1686 1731 1313", " 1140 1124 1622 622 79 1842 36 1422 1552 410 1227", " 663 280 1129 1770 1503 979 1948 961 1284 1401", " 78 1575 1662 1474 1409 498 194 1501 1883 530 1944", " 1202 291 1807 239 87 956 1829 991 496 849 1149", " 1567 1323 1137 1870 1240 75 190 1091 1418 498", " 304 1198 1006 1445 927 237 171 507 1985 253 1565", " 854 1473 829 867 1125 1249 196 1575 649 1185 1269", " 1748 1222 1744 1921 675 1116 1010 1614 1062 535", " 1922 1239 1929 804 362 1523 1174 534 1362 1147", " 856 1319 1957 1782 18 82 250 1208 1760 1073 577", " 1995 638 1570 1132 1403 1096 1968 1168 1209 66", " 1231 588 1080 1545 1175 1498 572 585 389 1939", " 1156 641 1407 1208 1237 804 1350 1278 25 1649", " 721 1130 1047 1269 999 205 725 1935 685 1297 1404", " 1573 113 1285 731 645 70 454 606 622 1458 1903", " 384 800 1348 1793 1375 1169 521 214 1039 258 1664", " 1283 1458 273 1037 1197 454 912 1372 669 1503", " 1558 375 1254 199 773 121 294 163 796 19 1228", " 1400 589 1422 457 926 1121 1459 426 1571 1355", " 1864 421 35 347 1788 1057 391 660 21 731 891 1599", " 1015 758 885 1153 1847 1955 626 987 929 146 163", " 17 1335 584 393 1037 763 305 1868 388 95 567 434", " 553 555 1299 1422 1025 1279 1572 1495 1335 1002", " 318 348 225 1354 1013 388 1907 708 1914 1098 306", " 1142 965 1128 123 1003 1268 1571 789 559 1618", " 1320 484 1379 923 1974 1840 1380 687 1788 1542", " 39 1014 612 877 1864 1987 1920 1868 1683 812 787", " 361 1250 1800 260 1653 1017 522 319 1670 270 413", " 204 869 1340 257 324 1386 138 1445 1553 756 1336", " 645 1861 1981 1722 1734 238 478 1384 143 744 1839", " 1188 395 1460 1265 1149 1532 1144 895 1668 1666", " 374 1266 1950 1580 1218 389 1562 1390 654 185", " 67 339 1976 858 1159 821 1670 1713 1609 1004 177", " 1306 372 995 1248 1897 177 785 470 9 1243 726", " 1663 69 993 500 791 1563 1708 705 1963 1565 1681"};
    vector<string> part3 = {" 1482 1764 42 761 921 1089 381 127 1978 452 852", " 1802 1723 1153 851 1452 1794 722 538 1673 1587", " 750 965 1756 1650 411 66 55 1446 433 1464 362", " 1711 193 1286 1462 1882 678 1354 210 210 635 1476", " 1901 872 782 265 1989 1862 947 1692 1688 1953", " 91 778 729 1150 1606 1508 901 614 327 819 1030", " 461 1928 791 87 1423 1166 1872 1866 1099 1949", " 1393 375 1845 287 338 1077 551 657 1429 670 1095", " 1455 1163 206 911 1297 1480 1196 313 454 628 1340", " 185 560 739 580 672 1360 8 606 302 83 1573 1886", " 1752 1132 870 276 1674 293 623 1124 1998 1153", " 1842 1684 1870 1636 22 1477 358 932 260 454 830", " 609 228 469 934 1844 1128 679 35 1348 1895 1147", " 1273 94 1261 346 1609 454 896 1905 1982 809 1366", " 626 754 933 1158 936 1366 1659 1612 266 1666 1524", " 1873 706 617 1282 1737 1838 1 56 223 758 1569", " 493 1743 319 1756 668 1554 991 78 591 655 1538", " 1012 430 591 1117 1201 1379 482 1409 1453 1680", " 1201 1826 1536 883 404 1033 465 1144 1637 1974", " 136 191 1844 1194 234 160 652 244 1654 748 1925", " 1658 187 1526 11 1147 61 1378 1200 19 744 381", " 1262 1950 452 1630 1760 1488 1178 1242 897 101", " 1413 1134 996 708 492 1849 1157 345 559 71 1760", " 1427 1776 854 18 1579 1093 722 460 967 347 1396", " 479 622 461 123 1572 701 1685 681 283 633 945", " 1809 391 1637 1466 1279 791 1398 209 1897 1576", " 325 603 1668 266 1782 1775 555 1792 631 861 347", " 332 1738 1602 1970 906 598 1785 1178 219 347 1220", " 480 1125 1957 1419 1994 953 323 195 873 1622 1800", " 979 923 1020 1010 532 563 1555 1353 375 861 1677", " 778 1019 1324 425 148 607 455 1113 211 1828 1028", " 1590 380 567 1395 1027 232 286 959 208 36 1777", " 32 64 1175 1195 1748 173 1750 304 719 890 645", " 1569 1953 392 287 1230 1319 125 776 540 1572 1779", " 657 455 881 845 748 1354 1891 15 256 588 1805", " 1630 1471 1469 421 1206 406 1553 1099 27 1061", " 444 1863 369 1455 1295 1810 1328 484 530 1849", " 514 973 115 1245 1455 1224 1213 254 1020 117 333", " 1977 1167 1280 1697 671 1510 641 1282 1176 1128", " 1632 1779 1912 283 60 698 1665 8 1357 847 1833", " 1453 552 370 1438 1121 1524 18 407 1101 779 651", " 748 1337 339 1168 1433 1541 814 1978 751 1913", " 1087 815 731 894 781 1894 11 207 76 1946 350 1850", " 586 301 1644 1788 472 399 22 668 442 1279 1711", " 486 1969 273 651 587 1718 849 550 86"};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1998;
    if(result == expected) {
        cout << "Test Case 155: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 155: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test156() {
    int numSheep = 1273;
    int maxRuns = 967;
    vector<string> part1 = {"265 1794 1036 828 1672 107 137 1692 1535 1027 1771", " 315 671 918 1708 1325 1316 959 970 673 153 940", " 143 45 349 768 417 1664 535 568 1624 1828 1768", " 1408 975 1235 401 646 460 588 533 1902 771 773", " 1328 120 1991 1171 1816 352 802 1544 290 1013", " 1192 1228 1096 1804 1479 447 522 725 994 1326", " 1810 1758 255 1108 877 742 1548 1779 103 997 1289", " 595 1510 1755 1202 490 1130 1750 812 1164 35 1160", " 562 901 307 1479 1440 1477 1093 1142 1824 332", " 1503 165 1731 1462 1476 1461 1027 584 13 127 230", " 956 1881 1397 1109 937 1874 1193 1374 599 691", " 124 55 321 1638 1946 340 363 1922 84 906 1590", " 502 621 1301 1874 1967 154 1639 1428 576 244 1234", " 824 1730 304 1064 1881 1513 784 369 398 26 1563", " 589 151 826 651 954 1433 1913 1334 1688 21 543", " 1343 1595 640 581 317 17 1679 1719 1596 213 961", " 40 1714 1075 1025 1286 693 1181 1372 1968 348", " 1741 160 918 179 795 1574 1664 355 1202 1185 1138", " 1217 1214 615 478 198 377 576 378 1263 582 76", " 723 85 1965 250 1746 223 393 887 142 567 1902", " 1059 275 1643 415 1162 401 1061 367 513 1880 429", " 262 1680 210 493 54 767 801 229 191 1748 1388", " 1552 1216 844 756 1206 398 103 1099 1060 122 201", " 1031 1289 30 366 579 1347 456 1614 136 761 347", " 1202 330 1114 1042 310 1781 470 694 1503 1802", " 235 1426 734 724 611 485 133 1552 43 1031 810", " 172 663 896 378 1279 788 1861 736 122 831 1812", " 1110 477 421 147 362 957 1098 1716 661 661 237", " 1548 953 602 236 1284 185 1908 20 1150 1053 1689", " 1676 1772 181 348 1714 94 1534 1830 86 1739 355", " 1060 758 834 1798 978 825 81 1103 357 1808 1653", " 1780 959 410 1859 186 1503 1175 119 1434 1655", " 1071 1387 1480 1954 900 555 1536 1029 1573 1174", " 146 1878 149 919 592 1802 1660 1189 1429 1443", " 1483 167 296 1066 1365 780 624 601 1372 1930 939", " 685 890 437 74 1034 802 227 447 1871 1638 1742", " 1946 123 602 570 128 239 1209 103 798 166 1942", " 168 524 1348 630 117 1013 1627 764 1695 1349 1475", " 1076 194 1716 1146 1396 1216 1379 1978 528 1195", " 548 1755 574 1842 1199 569 1449 928 1394 1703", " 617 1554 665 1235 1331 680 351 236 1645 413 1699", " 1730 1333 58 254 317 34 280 547 1824 1019 1861", " 1464 1055 1735 1912 5 223 1653 1736 123 1389 157", " 875 486 705 966 1243 1430 708 1529 669 1355 768", " 1269 772 719 1496 1125 996 344 424 1487 35 1997", " 1838 1743 309 1849 104 691 103 750 1024 888 1803", " 1469 1046 789 854 835 1788 678 1703 1093 152 1788", " 282 1007 1797 1219 1595 569 875 1908 750 1244", " 1776 1932 1678 212 735 269 341 998 568 1123 364", " 1731 1624 1962 67 1405 1147 1038 1571 1098 287"};
    vector<string> part2 = {" 1394 1730 967 1259 853 1895 895 1279 322 1774", " 556 1006 88 558 749 1641 1690 1033 377 910 854", " 164 802 353 939 633 237 1849 535 1753 194 895", " 1423 837 1775 1618 1780 366 1170 1823 1906 1147", " 1542 591 745 1068 989 1200 321 429 1423 1865 1594", " 1005 546 1688 546 1807 1755 191 11 544 612 1935", " 44 523 862 1539 198 1065 1881 768 1594 109 369", " 987 889 1215 331 28 1132 119 465 177 997 1501", " 1306 630 902 1886 334 1092 1057 897 1224 519 255", " 1675 1149 1381 1525 1168 1388 620 1459 939 694", " 650 1951 128 1120 1123 1922 1360 1319 287 241", " 1389 531 258 1263 1598 1679 1472 480 117 312 464", " 1425 1454 115 128 391 1739 228 1498 1638 1119", " 1501 661 1811 519 1572 495 91 1680 360 794 1413", " 1524 309 1428 181 1943 981 876 1538 625 1562 1969", " 219 525 1033 1997 646 962 345 1298 1401 1631 957", " 1028 1869 1292 1310 1463 335 110 221 762 584 1884", " 1671 613 1040 1888 1993 542 1934 1968 1766 242", " 899 1518 1895 1363 1817 1836 1554 1229 1014 964", " 863 221 1669 631 1367 1892 486 1652 557 1880 276", " 1099 1985 1755 360 675 723 641 588 1273 661 1340", " 563 569 1252 298 183 1554 1080 1810 179 342 1434", " 1642 739 1375 646 1724 440 808 1281 1067 1760", " 1082 332 1649 1189 278 1434 266 404 1091 1854", " 1558 674 1784 1913 266 474 1356 1555 1337 362", " 1724 1751 82 591 253 228 1450 157 819 864 1403", " 1220 705 896 1164 943 1410 950 211 734 1559 363", " 808 1991 1537 477 1964 1097 1906 250 187 1393", " 1343 1613 29 1185 809 296 99 733 429 1267 128", " 823 120 1268 1414 1870 750 816 1427 1379 1165", " 1377 779 108 1710 569 712 1212 684 1077 1278 1938", " 1864 1845 436 161 11 1515 17 1793 1117 1010 179", " 1187 439 449 1126 1051 20 1904 1794 121 1053 426", " 1702 1752 613 1300 1060 427 593 1357 1613 1492", " 1757 1830 878 1911 411 116 859 95 1101 868 187", " 911 821 78 804 396 906 1341 1657 425 718 750 657", " 179 367 343 954 798 1355 1050 1965 1151 1927 442", " 1396 1276 1680 508 1593 1696 99 1106 945 276 315", " 1972 1497 1418 1066 1744 1983 1740 10 692 964", " 1781 291 393 33 365 576 1059 424 75 1085 342 1724", " 1542 612 507 196 1021 568 83 940 1544 321 283", " 1564 1694 1194 1824 972 728 1895 5 328 1478 1979", " 1635 865 1616 217 1857 1621 256 377 452 224 1214", " 1885 568 1491 556 932 112 52 196 1663 874 213", " 398 1955 1478 217 1734 1230 617 1924 1326 989", " 813 947 720 1661 859 269 54 1217 252 488 781 228", " 556 1614 1159 1423 64 1393 1392 445 1482 125 1540", " 748 1466 1773 1855 1223 1559 1313 213 386 926", " 1934 1363 1574 1658 1622 661 1758 1941 266 1178", " 1328 974 1710 213 1936 604 236 277 962 1714 363"};
    vector<string> part3 = {" 727 1711 1267 1088 634 1433 807 1526 1091 1202", " 1999 715 914 810 950 715 1797 1656 280 240 1020", " 1691 967 538 1005 177 1884 476 1209 1095 891 999", " 1630 18 618 75 526 846 211 1979 512 277 1847 1568", " 1958 1042 838 193 1855 534 1053 18 1677 171 1855", " 1866 585 280 311 1545 998 1844 1436 186 1523 1278", " 582 37 1045 492 256 1096 1093 114 1775 935 1525", " 1830 66 946 521 1522 1067 134 964 1050 61 1542", " 672 1422 389 1964 1666 561 1182 1850 509 1371", " 1712 1510 310 828 1608 614 1816 1491 878 488 1865", " 1390 323 1477 780 1250 618 822 1145 654 953 423", " 746 1515 1343 1484 455 22 1832 2 292 145 351 1655", " 729 358 1571 1580 1730 1454 45 521 1208 1218 865", " 530 753 1087 563 1241 467 1503 1772 1748 191 1670", " 1421 17 283 282 803 423 1872 1255 1100 95 390", " 1778 553 818 1484 252 420 1332 1468 1001 195 1698", " 158 369 14 1944 1628 1399 1166 230 151 809 1894", " 404 1592 359 1847 515 617 23 1582 1382 597 1367", " 1441 1537"};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1999;
    if(result == expected) {
        cout << "Test Case 156: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 156: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test157() {
    int numSheep = 2000;
    int maxRuns = 1993;
    vector<string> part1 = {"170 161 100 100 90 80 80 80 60 59 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330"};
    vector<string> part2 = {" 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330"};
    vector<string> part3 = {" 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330"};
    vector<string> part4 = {" 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330 330 330 330 330 330 330", " 330 330 330 330 330 330"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 330;
    if(result == expected) {
        cout << "Test Case 157: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 157: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test158() {
    int numSheep = 2000;
    int maxRuns = 1993;
    vector<string> part1 = {"170 161 100 100 90 80 80 80 60 59 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310"};
    vector<string> part2 = {" 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310"};
    vector<string> part3 = {" 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310"};
    vector<string> part4 = {" 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310 310 310 310 310 310 310", " 310 310 310 310 310 310"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 330;
    if(result == expected) {
        cout << "Test Case 158: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 158: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test159() {
    int numSheep = 10;
    int maxRuns = 3;
    vector<string> part1 = {"850 805 500 500 450 400 400 400 300 295"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1650;
    if(result == expected) {
        cout << "Test Case 159: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 159: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test160() {
    int numSheep = 2000;
    int maxRuns = 1993;
    vector<string> part1 = {"850 805 500 500 450 400 400 400 300 295 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650"};
    vector<string> part2 = {" 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650"};
    vector<string> part3 = {" 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650"};
    vector<string> part4 = {" 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650 1650 1650", " 1650 1650 1650 1650 1650 1650 1650 1650"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1650;
    if(result == expected) {
        cout << "Test Case 160: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 160: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test161() {
    int numSheep = 2000;
    int maxRuns = 1993;
    vector<string> part1 = {"850 805 500 500 450 400 400 400 300 295 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400"};
    vector<string> part2 = {" 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400"};
    vector<string> part3 = {" 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400"};
    vector<string> part4 = {" 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400 1400 1400", " 1400 1400 1400 1400 1400 1400 1400 1400"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1650;
    if(result == expected) {
        cout << "Test Case 161: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 161: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test162() {
    int numSheep = 2000;
    int maxRuns = 1993;
    vector<string> part1 = {"850 805 500 500 450 400 400 400 300 295 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647"};
    vector<string> part2 = {" 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647"};
    vector<string> part3 = {" 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647"};
    vector<string> part4 = {" 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647 1647 1647", " 1647 1647 1647 1647 1647 1647 1647 1647"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1650;
    if(result == expected) {
        cout << "Test Case 162: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 162: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test163() {
    int numSheep = 10;
    int maxRuns = 3;
    vector<string> part1 = {"1870 1771 1100 1100 990 880 880 880 660 649"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 3630;
    if(result == expected) {
        cout << "Test Case 163: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 163: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test164() {
    int numSheep = 2000;
    int maxRuns = 998;
    vector<string> part1 = {"1870 1771 1100 1100 990 880 880 880 660 649 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815"};
    vector<string> part2 = {" 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815"};
    vector<string> part3 = {" 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815"};
    vector<string> part4 = {" 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815 1815", " 1815 1815 1815 1815 1815 1815 1815 1815 1815"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 3630;
    if(result == expected) {
        cout << "Test Case 164: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 164: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test165() {
    int numSheep = 2000;
    int maxRuns = 202;
    vector<string> part1 = {"1870 1771 1100 1100 990 880 880 880 660 649 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363"};
    vector<string> part2 = {" 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363"};
    vector<string> part3 = {" 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363"};
    vector<string> part4 = {" 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363 363 363 363", " 363 363 363 363 363 363 363 363 363"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 3630;
    if(result == expected) {
        cout << "Test Case 165: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 165: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test166() {
    int numSheep = 2000;
    int maxRuns = 1997;
    vector<string> part1 = {"1972 1971 1946 1914 1919 1969 1921 1903 1964 1945", " 1947 1985 1937 1900 1970 1973 1938 1923 1973 1990", " 1977 1941 1976 1971 1982 1946 1988 1912 1912 1931", " 1981 1909 1917 1995 1942 1988 1937 1912 1918 1926", " 1935 1907 1955 1945 1948 1973 1961 1946 1989 1902", " 1914 1996 1924 1977 1949 1994 1933 1953 1902 1954", " 1923 1946 1937 1918 1973 1950 1943 1972 1921 1998", " 1931 1944 1921 1989 1902 1976 1989 1908 1917 1963", " 1945 1917 1907 1977 2000 1904 1983 1988 1902 1910", " 1942 1995 1941 1938 1948 1940 1993 1954 1982 1905", " 1916 1928 1920 1917 1995 1923 1975 1965 1953 1927", " 1958 1971 1965 1981 1969 1988 1954 1944 1915 1906", " 1962 1973 1913 1919 1948 1964 1924 1992 1911 1935", " 1914 1990 1938 1975 1968 1947 1971 1903 1970 1992", " 1983 1955 1936 1901 1930 1909 1955 1989 1939 1928", " 1957 1957 1924 1956 1993 1985 1970 1933 1960 1933", " 1943 1980 1986 1944 1947 1925 1962 1947 1973 1949", " 1973 1937 1947 1984 1981 1940 1919 1991 1967 1971", " 1911 1935 1943 1943 1921 1929 1927 1957 1979 1962", " 1937 1931 1941 1903 1950 1933 1922 1968 1909 1911", " 1974 1954 1950 1975 1991 1911 1958 1925 1974 1912", " 1999 1947 1971 1912 1911 1966 1928 1981 1905 2000", " 1994 1932 1900 1939 1925 1997 1990 1926 1971 1950", " 1952 1947 1959 1925 1968 1980 1990 1901 1935 1936", " 1976 1948 1922 1959 1936 1926 1922 1980 1983 1996", " 1972 1986 1988 1989 1903 1964 1996 1903 1987 1971", " 1991 1999 1924 1901 1922 1973 1949 1976 1948 1926", " 1919 1905 1916 1942 1973 1910 1981 1937 1911 1979", " 1920 1991 1911 1903 1956 1986 1988 1963 1991 1998", " 1964 1942 1951 1923 1993 1929 1996 1917 1928 1989", " 1948 1920 1905 1962 1909 1986 1973 1940 1971 1927", " 1977 1970 1996 1980 1938 1976 1921 1984 1931 1937", " 1929 1983 1985 1938 1953 1922 1945 1972 1977 1954", " 1954 1979 2000 1985 1995 1934 1949 1910 1916 1958", " 1986 1944 1925 1941 1994 1951 1919 1956 1982 1908", " 1903 1940 1998 1950 2000 1972 1972 1933 1963 1923", " 1973 1965 1914 1924 1957 1913 1997 1945 1942 1920", " 1920 1983 1967 1985 1939 1991 1931 1980 1908 1903", " 1979 1995 1980 1922 1931 1988 1912 1935 1971 1915", " 1929 1931 1988 1973 1941 1935 1936 1980 1965 1971", " 1958 1920 1920 1934 1984 1912 1919 1960 1953 1926", " 1959 1909 1972 1997 1968 1931 1909 1902 1968 1904", " 1986 1948 1907 1984 1932 1988 1994 1940 1998 1906", " 1950 1987 1906 1943 1958 1979 1953 1997 1932 1940", " 1982 1992 1905 1997 1908 1918 1969 1968 1942 1999", " 1941 1908 1996 1948 1908 1979 1913 1994 1985 1987", " 1916 1938 1962 1965 1920 1952 1909 1917 1994 1986", " 1906 1922 1980 1911 1940 1994 1908 1977 1962 1917", " 1970 1968 1904 1963 1944 1954 1948 1999 1963 1973", " 1928 1998 1959 1972 1959 1928 1969 1910 1900 1938"};
    vector<string> part2 = {" 1925 1965 1990 1995 1976 1958 1983 1974 1923 1903", " 1957 1944 1953 1974 1984 1902 1903 1983 1951 1934", " 1950 1935 1919 1971 1919 1968 1979 1987 1991 1953", " 1989 1922 1999 1941 1907 1996 1993 1982 1950 1960", " 1935 1943 1961 1970 1946 1936 1936 1994 1944 1931", " 1930 1977 1907 1938 1984 1936 1968 1949 1906 1960", " 1917 1915 1927 1952 1926 1987 1935 1907 1906 1987", " 1902 1919 1957 1990 1953 1999 1915 1949 1956 1908", " 1945 1931 1993 1999 1911 1964 1915 1985 1959 1995", " 1933 1918 1991 1904 1970 1915 1919 1924 1980 1965", " 1915 1936 1997 1924 1933 1913 1934 1915 1936 1991", " 1998 1964 1926 1968 1977 1995 1956 1926 1980 1986", " 1969 1999 1912 1919 1904 1914 1910 1932 1907 1952", " 1958 1956 1944 1906 1920 1938 1936 1981 1984 1959", " 1921 1927 1939 1939 1983 1973 1987 1934 1979 1995", " 1997 1924 1957 1968 1920 1929 1919 1939 1915 1954", " 1951 1968 1958 1953 1909 1948 1912 1940 1903 1980", " 1914 1968 1950 1966 1960 1932 1953 1973 1989 1905", " 1936 2000 1926 1930 1974 1915 1948 1955 1933 1901", " 1974 1982 1941 1928 1924 1982 1940 1939 1999 1985", " 1983 1961 1943 1917 1910 1989 1936 1973 1981 1917", " 1968 1941 1983 1983 1903 1928 1929 1917 1956 1913", " 1954 1952 1993 1960 1956 1959 1986 1934 1957 1902", " 1948 1934 1927 1972 1983 1908 1944 1931 1972 1908", " 1954 1948 1931 1954 1966 1901 1986 1988 1931 1959", " 1976 1904 1955 1989 1989 1955 1993 1992 1924 1974", " 1964 1958 1981 1952 1922 1935 1962 1957 1930 1992", " 1971 1921 1945 1943 1948 1983 1902 1913 1901 1994", " 1908 1991 1993 1985 1949 1933 1950 1992 1977 1978", " 1998 1987 1930 1988 1903 1904 1995 1927 1944 1999", " 1970 1978 1991 1996 1948 1903 1964 1993 1959 1950", " 1924 1909 1920 1926 1967 1961 1958 1956 1934 1943", " 1979 1965 1925 1929 1966 1927 1998 1993 1945 1987", " 1945 1912 1976 1972 1960 1964 1942 1949 1917 1903", " 1955 1940 1977 1961 1999 1973 1991 1937 1970 1964", " 1970 1928 1987 1922 1949 1984 2000 1987 1920 1979", " 1996 1974 1997 1930 1942 1987 1964 1961 1922 1940", " 1994 1999 1976 1931 1916 1959 1976 1918 1996 1917", " 1910 1929 1926 1958 1920 1925 1973 1969 1903 1932", " 1992 1958 1953 1932 1909 1968 1983 1976 1928 1912", " 1930 1969 1987 1935 1991 1981 1994 1980 1991 1957", " 1945 1986 1915 1934 1986 1914 1971 1915 1963 1904", " 1925 1933 1997 1998 1966 1950 2000 1907 1911 1937", " 1963 1906 1925 1923 1937 1980 1988 1965 1960 1974", " 1922 1933 1978 1909 1942 1990 1958 1901 1933 1984", " 1920 1947 1940 1982 1982 1987 1948 2000 1962 1915", " 1904 1997 1934 1903 1965 1957 1978 1908 1911 1900", " 1994 1980 1928 1971 1985 1980 1918 1981 1937 1941", " 1904 1900 1952 1923 1902 1922 1929 1988 1997 1928", " 1994 1968 1978 1910 1980 1942 1956 1986 1903 1981"};
    vector<string> part3 = {" 1956 1935 1986 1986 1950 1986 1976 1932 1964 1993", " 1974 1931 1926 1986 1971 1940 1991 1905 1968 1998", " 1987 1994 1974 1982 1973 1979 1948 1992 1918 1992", " 1915 2000 1912 1973 1942 1967 1904 1919 1993 1921", " 1980 1995 1915 1942 1914 1911 1981 1917 1978 1916", " 1905 1960 1934 1959 1940 1970 1965 1943 1928 1927", " 1921 1963 1993 1944 1951 1919 1993 1920 1939 1960", " 1929 1989 1977 1988 1982 1935 1929 1985 1992 1901", " 1904 1924 1968 1920 1962 1998 1953 1958 2000 1917", " 1940 1912 1988 1985 1976 1908 1966 1995 1982 1928", " 1976 1975 1999 1915 1918 1957 1946 1964 1934 1994", " 1919 1962 1991 1927 1934 1973 1946 1958 1979 1953", " 1958 1959 2000 1929 1905 1930 1972 1956 1977 1946", " 1910 1967 1924 1927 1933 1949 1933 1931 1925 1925", " 1994 1914 1914 1952 1953 1967 1981 1915 1985 1928", " 1915 1972 1903 1956 1979 1979 1947 1913 1916 1944", " 1953 1909 1920 1956 1923 2000 1985 1921 1991 1970", " 1976 1995 1946 1923 1933 1979 1901 1915 1901 1993", " 1903 1918 1970 1975 1936 1994 1921 1937 1916 1909", " 1954 1927 1917 1992 1994 1950 1930 1970 1926 1974", " 1922 1917 1999 1906 1961 1942 1908 1946 1928 1986", " 1970 1981 1947 1957 1968 1972 1954 1932 1925 1968", " 1993 1976 1938 1959 1946 1956 2000 1949 1902 1907", " 1936 1932 1960 1903 1932 1972 1925 1988 1935 1911", " 1949 1979 1917 1978 1960 1970 1954 1973 1930 1929", " 1929 1930 1939 1903 1995 1990 1978 1940 1961 1944", " 1902 1963 1914 1989 1954 1901 1915 1932 1971 1957", " 1974 1960 1902 1980 1989 1966 1962 1901 1982 1985", " 1925 1903 1959 1938 1954 1906 1985 1920 1938 1923", " 1985 1901 1950 1962 1936 1919 1939 1959 1917 1995", " 1901 1923 1903 1912 1980 1949 1956 1936 1988 1949", " 1993 1908 1918 1943 1937 1955 1994 1920 1905 1996", " 1972 1912 1978 1947 1967 1987 1927 1953 1916 1920", " 1958 1994 1909 1912 1966 1947 1982 1900 1901 1967", " 1963 1988 1966 1945 1929 1952 1984 1979 1972 1917", " 1945 1969 1933 1905 1975 1998 1922 1979 1901 1918", " 1994 1961 1944 1987 1904 1972 1981 1924 1991 1966", " 1938 1943 1998 1987 1925 1961 1987 1975 1949 1979", " 1964 1948 1998 1934 1916 1994 1908 1975 1957 1902", " 1925 1994 1975 1943 1939 1959 1985 1999 1929 1929", " 1923 1977 1963 1992 1920 1979 1991 1994 1985 1934", " 1981 1902 1977 1928 1932 1983 1925 1990 1965 1989", " 1900 1917 1940 1945 1932 1914 1975 1904 1919 1956", " 1915 1957 1940 1949 1984 1948 1948 1962 1912 1991", " 1914 1946 1923 1903 1902 1968 1928 1959 1983 1903", " 1917 1968 1954 1904 1937 1958 1919 1907 1996 1962", " 1969 1970 1990 1901 1992 1930 1993 1922 1925 1956", " 1950 1909 1961 1974 1908 1933 1964 1997 1980 1904", " 1942 1974 1966 1960 1997 1952 1955 1949 1922 1942", " 1977 1929 1965 1932 1995 1910 1998 1952 1912 1969"};
    vector<string> part4 = {" 1918 1961 1995 1992 1932 1996 1908 1996 1904 1909", " 1963 1901 1976 1983 1967 1944 1992 1911 1925 1985", " 1958 1969 1944 1926 1971 1928 1921 1956 1943 1991", " 1975 1934 1934 1925 1931 1932 1932 1988 1937 1982", " 1953 1954 1956 1999 1909 1943 1974 1918 1934 1987", " 1955 1988 1961 1992 1999 1960 1937 1965 1952 1936", " 1938 1950 1999 1912 1999 1978 1933 1922 1974 1957", " 1918 1901 1923 1997 1903 1972 1922 1997 1925 2000", " 1950 1960 1917 1977 1922 1977 1963 1943 1977 1971", " 1905 1932 1928 1966 1943 1900 1938 1969 1983 1997", " 1910 1954 1937 1984 1995 1957 1982 1963 1943 1938", " 1944 1993 1984 1950 1900 1912 1983 1988 1922 1920", " 1944 1912 1989 1980 1942 1927 1966 1998 1982 1971", " 1924 1909 1971 1901 1944 1945 2000 1974 1916 1900", " 1926 1985 1909 1907 1920 1955 1918 1962 1937 1932", " 1968 1968 1925 1931 1974 1908 1974 1941 1996 1995", " 1905 1906 1921 1987 1971 1976 1977 1952 1920 1982", " 1924 1919 1950 1902 1985 1989 1923 1935 1943 1936", " 1987 1989 1982 1968 1981 1938 1939 1948 1914 1914", " 1930 1930 1957 1949 1972 1923 1945 1975 1913 1914", " 1939 1950 1959 1999 1915 1967 1974 1952 1927 1903", " 1913 1942 1932 1926 1996 1946 1958 1990 1996 1937", " 1974 1982 1939 1945 1972 1906 1910 1995 1970 1933", " 1917 1964 1912 1985 1918 1910 1977 1976 1981 1936", " 1955 1925 1942 1939 1937 1965 1916 1981 1922 1999", " 1960 1941 1949 1909 1958 1928 1903 1982 1916 1945", " 1940 1990 1962 1948 1985 1927 1997 1940 1995 1987", " 1994 1951 1903 1955 1908 1943 1918 1930 1904 1992", " 1927 1966 1914 1938 2000 1961 1984 1971 1949 1988", " 1965 1947 1938 1941 1938 1933 1959 2000 1919 1913", " 1973 1944 1954 1941 1914 1928 1950 1907 1945 1961", " 1961 1961 1955 1917 1972 1913 1939 1931 1980 1942", " 1924 1953 1919 1936 1978 1996 1960 1977 1942 1915", " 1975 1994 1934 1949 1978 1957 1932 1902 1987 1984", " 1940 1923 1987 1949 1963 1970 1999 1924 1944 2000", " 1994 1999 1930 1976 1993 1935 1988 1979 2000 1995", " 1900 1925 1974 1957 1955 1961 1991 1934 1959 1957", " 1984 1919 1932 1959 1954 1931 1939 1936 1977 1950", " 1934 1932 1961 1903 1943 1947 1976 1976 1944 1960", " 1942 1982 1999 1959 1973 1932 1951 1997 1902 1930", " 1958 1964 1999 1975 1906 1919 1901 1974 1916 1948", " 1980 1913 1935 1926 1967 1949 1926 1978 1966 1987", " 1950 1949 1970 1948 1965 1996 1980 1976 1960 1900", " 1911 1920 1923 1918 1938 1947 1998 1961 1986 1949", " 1929 1991 1964 1974 1939 1976 1931 1905 1917 1900", " 1993 1937 1918 1931 1936 1951 1915 1980 1935 1967", " 1960 1904 1908 1911 1994 1978 1985 1934 1950 1953", " 1986 1914 1916 1911 1984 1961 1921 1950 1967 1961", " 1929 1988 1935 1950 1969 1932 1964 1941 1995 1965", " 1928 1956 1905 1971 1945 1986 1966 1996 1 1"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 3800;
    if(result == expected) {
        cout << "Test Case 166: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 166: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test167() {
    int numSheep = 24;
    int maxRuns = 9;
    vector<string> part1 = {"13 57 69 53 17 57 42 39 36 57 79 2 16 79 20 68 8 7", "6 13 51 39 77 22 34"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 115;
    if(result == expected) {
        cout << "Test Case 167: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 167: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test168() {
    int numSheep = 27;
    int maxRuns = 6;
    vector<string> part1 = {"37 39 22 1 10 19 44 47 11 43 10 44 10 28 26 45 46 ", "47 21 25 17 26 38 17 16 19 42"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 127;
    if(result == expected) {
        cout << "Test Case 168: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 168: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test169() {
    int numSheep = 71;
    int maxRuns = 6;
    vector<string> part1 = {"466 96 571 700 787 733 800 574 583 384 135 27 408 ", "237 107 328 134 429 698 391 842 491 796 423 425 45", "8 904 82 635 566 286 428 60 373 317 515 187 495 11", "1 451 700 117 293 323 732 668 102 754 650 370 760 ", "10 803 320 476 462 511 815 381 93 21 436 879 419 2", "73 115 548 611 74 796 603"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 5259;
    if(result == expected) {
        cout << "Test Case 169: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 169: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test170() {
    int numSheep = 60;
    int maxRuns = 9;
    vector<string> part1 = {"522 1568 460 1761 81 1722 963 721 124 1744 1806 56", "6 1906 1823 934 876 1424 270 1305 1718 742 1651 26", "9 1375 492 1403 1046 1205 692 1871 1970 1985 376 2", "05 986 519 649 1294 657 1668 1378 483 1144 117 937", " 160 87 538 617 653 869 735 1167 992 1022 169 631 ", "1444 351 560"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 6395;
    if(result == expected) {
        cout << "Test Case 170: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 170: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test171() {
    int numSheep = 32;
    int maxRuns = 6;
    vector<string> part1 = {"369 113 69 294 27 55 355 61 42 708 49 446 31 813 5", "54 303 740 288 289 840 546 218 55 83 685 403 39 67", "1 554 707 310 618"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1893;
    if(result == expected) {
        cout << "Test Case 171: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 171: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test172() {
    int numSheep = 85;
    int maxRuns = 34;
    vector<string> part1 = {"328 819 417 569 607 254 1103 394 541 134 550 440 9", "23 133 766 155 236 316 266 673 153 409 158 231 782", " 130 948 365 479 1035 319 431 859 791 135 907 273 ", "1060 540 348 793 1101 53 1002 157 616 1129 537 317", " 121 1098 565 1112 178 282 755 514 507 671 301 372", " 693 1006 975 184 575 357 454 834 764 694 223 174 ", "180 1069 729 95 3 842 457 993 200 486 975 793"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1364;
    if(result == expected) {
        cout << "Test Case 172: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 172: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test173() {
    int numSheep = 69;
    int maxRuns = 19;
    vector<string> part1 = {"923 361 168 431 534 373 594 537 1070 12 199 602 79", "6 389 972 763 753 1465 47 7 1066 634 1128 1417 133", "2 573 1393 1347 584 996 976 1395 589 652 282 1363 ", "1324 87 935 1471 416 309 1318 460 175 688 685 1 38", "6 1012 418 1434 797 547 925 1382 1330 715 143 290 ", "1294 1105 1314 38 45 1145 324 472 360"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2660;
    if(result == expected) {
        cout << "Test Case 173: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 173: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test174() {
    int numSheep = 92;
    int maxRuns = 29;
    vector<string> part1 = {"681 773 595 141 531 534 782 437 112 549 1363 814 1", "145 1012 1607 551 1550 638 771 1765 1691 81 724 98", "4 1721 1285 144 919 1665 708 1574 1182 1223 789 61", "9 529 282 466 1467 1495 1359 1799 142 1180 1702 16", "07 648 1482 956 1628 1782 308 270 767 170 1133 494", " 1026 1376 86 1407 1449 196 1001 297 1250 904 1622", " 605 1317 390 908 792 1306 965 1133 1570 1472 1726", " 1531 6 534 1161 1059 1599 82 1435 713 1108 819 12", "00 437"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 3047;
    if(result == expected) {
        cout << "Test Case 174: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 174: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test175() {
    int numSheep = 34;
    int maxRuns = 8;
    vector<string> part1 = {"177 219 391 992 84 124 154 821 490 808 821 926 385", " 467 968 213 429 110 196 204 249 318 605 125 641 1", "96 651 169 192 78 165 326 695 340"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1731;
    if(result == expected) {
        cout << "Test Case 175: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 175: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test176() {
    int numSheep = 38;
    int maxRuns = 9;
    vector<string> part1 = {"460 450 231 257 493 52 51 597 128 480 127 7 527 58", "3 197 507 111 524 448 29 518 290 219 435 436 243 2", "69 146 292 100 254 238 561 368 125 177 463 504"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1332;
    if(result == expected) {
        cout << "Test Case 176: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 176: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test177() {
    int numSheep = 28;
    int maxRuns = 10;
    vector<string> part1 = {"707 1932 884 1448 1722 1789 1668 1699 1684 18 973 ", "1134 951 1069 767 443 1659 907 694 1099 1126 889 7", "34 598 1617 508 809 1843"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 3260;
    if(result == expected) {
        cout << "Test Case 177: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 177: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test178() {
    int numSheep = 70;
    int maxRuns = 24;
    vector<string> part1 = {"58 282 1501 1093 1065 1586 716 649 1388 628 1610 4", "62 294 278 272 884 746 749 465 1812 893 1867 899 3", "59 747 1930 42 483 583 1715 1325 1615 1559 1431 17", "27 1278 488 1490 168 282 844 1320 938 1353 1302 17", "63 789 1135 1718 388 1891 508 1464 902 452 524 633", " 1224 1927 751 303 1395 162 600 62 612 1904 509 19", "36 1193"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2858;
    if(result == expected) {
        cout << "Test Case 178: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 178: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test179() {
    int numSheep = 41;
    int maxRuns = 4;
    vector<string> part1 = {"813 833 307 567 272 550 171 833 758 965 1252 1003 ", "1329 181 140 1338 20 330 821 1478 429 855 1383 574", " 1452 1461 1300 451 1348 1326 541 499 877 1182 510", " 1632 740 1551 1510 570 1035"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 8808;
    if(result == expected) {
        cout << "Test Case 179: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 179: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test180() {
    int numSheep = 18;
    int maxRuns = 6;
    vector<string> part1 = {"1042 724 904 564 567 239 677 641 907 854 396 889 3", "83 236 233 283 165 391"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1719;
    if(result == expected) {
        cout << "Test Case 180: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 180: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test181() {
    int numSheep = 18;
    int maxRuns = 5;
    vector<string> part1 = {"453 1580 1238 911 547 1437 95 401 28 563 1572 485 ", "784 1615 1034 1011 184 1657"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 3132;
    if(result == expected) {
        cout << "Test Case 181: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 181: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test182() {
    int numSheep = 10;
    int maxRuns = 3;
    vector<string> part1 = {"51 8 94 11 43 68 17 85 50 53"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 161;
    if(result == expected) {
        cout << "Test Case 182: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 182: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test183() {
    int numSheep = 1999;
    int maxRuns = 10;
    vector<string> part1 = {"2 2 1 2 1 9 2 1 9 2 1 9 1 9 2 1 9 2 1 9 ", "2 1 9 2 1 9 2 1 9 2 1 9 2 9 2 1 9 2 1 9 ", "2 1 9 2 1 9 2 1 9 1 9 2 1 9 2 1 9 2 1 9 ", "2 1 9 2 1 9 2 1 2 1 9 2 1 9 2 1 9 2 1 9 ", "2 1 9 2 1 9 1 9 2 1 9 2 1 9 2 1 9 2 1 9 ", "2 1 9 2 1 2 1 9 2 1 9 2 1 9 2 1 9 2 1 2 ", "2 1 9 2 9 2 1 9 2 1 9 2 1 9 1 9 2 1 9 2 ", "1 9 2 1 9 2 9 2 1 9 2 1 9 2 1 9 2 1 2 1 ", "1 9 2 9 2 1 9 2 1 9 2 1 9 2 1 9 2 9 2 1 ", "1 9 2 9 2 1 9 2 1 9 2 1 9 2 1 2 1 9 2 1 ", "9 2 1 9 2 1 9 2 1 9 2 1 9 2 9 2 1 9 2 1 ", "9 2 1 9 2 1 9 2 1 9 1 9 2 1 9 2 1 9 2 1 ", "9 2 1 9 2 1 9 2 9 2 1 9 2 1 9 2 1 9 1 9 ", "9 2 1 2 1 9 2 1 9 2 1 9 2 1 9 2 9 2 1 9 ", "9 1 9 2 1 9 2 1 9 2 1 9 2 1 2 1 9 2 1 9 ", "2 1 9 2 1 9 2 1 9 2 1 9 1 9 2 1 9 2 1 9 ", "2 1 9 2 1 9 2 1 9 2 1 2 1 9 2 1 9 2 1 9 ", "2 1 9 2 1 9 2 1 9 2 9 2 1 9 2 1 9 2 1 2 ", "2 1 9 2 9 2 1 9 2 1 9 2 9 2 1 9 2 1 9 2 ", "1 9 2 1 9 2 1 9 2 1 9 1 9 2 1 9 2 1 9 2 ", "1 9 2 1 9 2 1 9 2 9 2 1 9 2 1 9 2 1 9 2 ", "1 9 2 1 9 2 1 2 1 9 2 1 9 2 1 9 1 9 2 1 ", "9 2 1 9 2 1 9 2 1 9 2 1 9 1 9 2 1 9 2 1 ", "9 2 1 9 2 1 9 2 1 9 2 1 9 1 9 2 1 2 1 9 ", "9 1 9 2 1 9 2 1 9 2 1 9 2 1 9 2 9 2 1 9 ", "9 1 9 2 1 9 2 1 9 2 1 2 1 9 2 1 9 2 1 9 ", "2 1 9 2 1 9 2 9 2 1 9 2 1 9 2 1 9 2 1 9 ", "2 1 9 2 1 9 1 9 2 1 9 2 1 9 1 9 2 1 9 2 ", "1 9 2 1 9 2 1 9 2 1 9 1 2 1 9 2 1 9 2 1 ", "9 2 1 9 2 1 9 2 1 9 2 9 2 1 9 2 1 9 2 1 ", "9 2 1 9 2 1 9 2 1 9 1 9 2 1 9 2 1 9 2 1 ", "9 2 1 9 2 9 2 1 9 2 1 9 2 1 9 2 1 9 1 9 ", "9 2 1 9 1 9 2 1 9 2 1 2 1 9 2 1 9 2 1 9 ", "2 1 9 2 1 9 2 1 9 1 9 2 1 9 2 1 9 2 1 9 ", "2 1 9 2 1 9 2 9 2 1 9 2 1 9 2 1 9 2 1 9 ", "2 1 9 2 1 2 1 9 2 1 9 2 1 9 2 1 9 2 9 2 ", "2 1 9 1 9 2 1 9 2 1 9 2 1 9 2 9 2 1 9 2 ", "1 9 2 1 9 2 1 9 2 1 9 2 1 2 1 9 2 1 9 2 ", "1 9 2 1 9 2 1 9 2 1 9 1 9 2 1 9 2 1 9 2 ", "1 9 2 1 9 2 1 9 2 9 2 1 9 2 1 9 2 1 9 2 ", "1 9 2 1 9 2 1 2 1 9 2 1 9 2 1 9 2 1 9 1 ", "1 9 2 1 2 1 9 2 1 9 2 1 9 1 9 2 1 9 2 9 ", "9 2 1 9 1 9 2 1 9 2 1 9 2 1 9 2 9 2 1 9 ", "2 1 9 2 1 9 2 1 9 2 9 2 1 9 2 1 9 2 1 9 ", "2 1 9 2 1 9 2 1 2 1 9 2 1 9 2 1 2 1 9 2 ", "2 1 9 1 9 2 1 9 2 1 9 2 1 9 1 9 2 1 9 2 ", "2 9 2 1 9 2 1 9 2 1 9 2 9 2 1 9 2 1 9 2 ", "1 9 2 1 9 2 1 9 2 1 9 2 1 9 2 1 9 2 1 9 ", "2 1 9 2 1 9 2 1 9 1 9 2 1 9 2 1 9 2 1 9 ", "2 1 9 2 1 9 2 1 2 1 9 2 1 9 2 1 9 2 1 9"};
    vector<string> part2 = {"2 2 1 2 1 9 2 1 9 2 1 9 1 9 2 1 9 2 1 9 ", "2 1 9 2 1 9 2 1 9 2 1 9 2 9 2 1 9 2 1 9 ", "2 1 9 2 1 9 2 1 9 1 9 2 1 9 2 1 9 2 1 9 ", "2 1 9 2 1 9 2 1 2 1 9 2 1 9 2 1 9 2 1 9 ", "2 1 9 2 1 9 1 9 2 1 9 2 1 9 2 1 9 2 1 9 ", "2 1 9 2 1 2 1 9 2 1 9 2 1 9 2 1 9 2 1 2 ", "2 1 9 2 9 2 1 9 2 1 9 2 1 9 1 9 2 1 9 2 ", "1 9 2 1 9 2 9 2 1 9 2 1 9 2 1 9 2 1 2 1 ", "1 9 2 9 2 1 9 2 1 9 2 1 9 2 1 9 2 9 2 1 ", "1 9 2 9 2 1 9 2 1 9 2 1 9 2 1 2 1 9 2 1 ", "9 2 1 9 2 1 9 2 1 9 2 1 9 2 9 2 1 9 2 1 ", "9 2 1 9 2 1 9 2 1 9 1 9 2 1 9 2 1 9 2 1 ", "9 2 1 9 2 1 9 2 9 2 1 9 2 1 9 2 1 9 1 9 ", "9 2 1 2 1 9 2 1 9 2 1 9 2 1 9 2 9 2 1 9 ", "9 1 9 2 1 9 2 1 9 2 1 9 2 1 2 1 9 2 1 9 ", "2 1 9 2 1 9 2 1 9 2 1 9 1 9 2 1 9 2 1 9 ", "2 1 9 2 1 9 2 1 9 2 1 2 1 9 2 1 9 2 1 9 ", "2 1 9 2 1 9 2 1 9 2 9 2 1 9 2 1 9 2 1 2 ", "2 1 9 2 9 2 1 9 2 1 9 2 9 2 1 9 2 1 9 2 ", "1 9 2 1 9 2 1 9 2 1 9 1 9 2 1 9 2 1 9 2 ", "1 9 2 1 9 2 1 9 2 9 2 1 9 2 1 9 2 1 9 2 ", "1 9 2 1 9 2 1 2 1 9 2 1 9 2 1 9 1 9 2 1 ", "9 2 1 9 2 1 9 2 1 9 2 1 9 1 9 2 1 9 2 1 ", "9 2 1 9 2 1 9 2 1 9 2 1 9 1 9 2 1 2 1 9 ", "9 1 9 2 1 9 2 1 9 2 1 9 2 1 9 2 9 2 1 9 ", "9 1 9 2 1 9 2 1 9 2 1 2 1 9 2 1 9 2 1 9 ", "2 1 9 2 1 9 2 9 2 1 9 2 1 9 2 1 9 2 1 9 ", "2 1 9 2 1 9 1 9 2 1 9 2 1 9 1 9 2 1 9 2 ", "1 9 2 1 9 2 1 9 2 1 9 1 2 1 9 2 1 9 2 1 ", "9 2 1 9 2 1 9 2 1 9 2 9 2 1 9 2 1 9 2 1 ", "9 2 1 9 2 1 9 2 1 9 1 9 2 1 9 2 1 9 2 1 ", "9 2 1 9 2 9 2 1 9 2 1 9 2 1 9 2 1 9 1 9 ", "9 2 1 9 1 9 2 1 9 2 1 2 1 9 2 1 9 2 1 9 ", "2 1 9 2 1 9 2 1 9 1 9 2 1 9 2 1 9 2 1 9 ", "2 1 9 2 1 9 2 9 2 1 9 2 1 9 2 1 9 2 1 9 ", "2 1 9 2 1 2 1 9 2 1 9 2 1 9 2 1 9 2 9 2 ", "2 1 9 1 9 2 1 9 2 1 9 2 1 9 2 9 2 1 9 2 ", "1 9 2 1 9 2 1 9 2 1 9 2 1 2 1 9 2 1 9 2 ", "1 9 2 1 9 2 1 9 2 1 9 1 9 2 1 9 2 1 9 2 ", "1 9 2 1 9 2 1 9 2 9 2 1 9 2 1 9 2 1 9 2 ", "1 9 2 1 9 2 1 2 1 9 2 1 9 2 1 9 2 1 9 1 ", "1 9 2 1 2 1 9 2 1 9 2 1 9 1 9 2 1 9 2 9 ", "9 2 1 9 1 9 2 1 9 2 1 9 2 1 9 2 9 2 1 9 ", "2 1 9 2 1 9 2 1 9 2 9 2 1 9 2 1 9 2 1 9 ", "2 1 9 2 1 9 2 1 2 1 9 2 1 9 2 1 2 1 9 2 ", "2 1 9 1 9 2 1 9 2 1 9 2 1 9 1 9 2 1 9 2 ", "2 9 2 1 9 2 1 9 2 1 9 2 9 2 1 9 2 1 9 2 ", "1 9 2 1 9 2 1 9 2 1 9 2 1 9 2 1 9 2 1 9 ", "2 1 9 2 1 9 2 1 9 1 9 2 1 9 2 1 9 2 1 9 ", "2 1 9 2 1 9 2 1 2 1 9 2 1 9 2 1 9 2 1 9"};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 816;
    if(result == expected) {
        cout << "Test Case 183: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 183: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test184() {
    int numSheep = 18;
    int maxRuns = 7;
    vector<string> part1 = {"15 27 34 39 47 47 49 50 51 66 67 72 74 79", " 83 88 94 100"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 159;
    if(result == expected) {
        cout << "Test Case 184: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 184: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test185() {
    int numSheep = 2;
    int maxRuns = 1;
    vector<string> part1 = {"1 1"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 185: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 185: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test186() {
    int numSheep = 2000;
    int maxRuns = 1;
    vector<string> part1 = {"2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 "};
    vector<string> part2 = {"2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 "};
    vector<string> part3 = {"2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 "};
    vector<string> part4 = {"2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 4000000;
    if(result == expected) {
        cout << "Test Case 186: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 186: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test187() {
    int numSheep = 5;
    int maxRuns = 5;
    vector<string> part1 = {"10 10 10 10 10"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 10;
    if(result == expected) {
        cout << "Test Case 187: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 187: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test188() {
    int numSheep = 200;
    int maxRuns = 20;
    vector<string> part1 = {"42 468 335 501 1170 1725 1479 1359 963 465 1706", " 146 1282 828 1962 492 996 1943 828 1437 392 605", " 1903 154 293 383 1422 717 1719 1896 1448 1727", " 772 1539 1870 1913 1668 300 1036 1895 704 1812", " 1323 334 1674 665 1142 1712 254 869 1548 1645", " 663 758 38 860 724 1742 1530 779 317 1036 191", " 1843 289 107 1041 943 1265 649 1447 1806 1891", " 730 371 1351 1007 1102 394 1549 1630 624 85 1955", " 757 1841 967 1377 1932 309 945 440 627 1324 1538", " 1539 119 83 930 542 834 1116 640 1659 705 1931", " 1978 307 1674 387 1022 746 925 1073 271 1830 778", " 1574 1098 513 1987 1291 1162 637 356 768 1656", " 1575 32 53 1351 1151 942 1725 1967 1431 1108 192", " 8 1338 1458 288 1754 384 946 910 210 1759 222", " 589 423 947 1507 1031 414 1169 901 592 763 1656", " 1411 360 1625 538 1549 484 1596 42 1603 351 292", " 837 1375 1021 597 22 1349 1200 1669 485 282 735", " 54 2000 419 1939 901 1789 128 468 1729 894 649", " 484 1808 422 311 618 814 1515"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 9986;
    if(result == expected) {
        cout << "Test Case 188: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 188: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test189() {
    int numSheep = 10;
    int maxRuns = 3;
    vector<string> part1 = {"1614 379 1149 1739 585 679 739 1216 1034 707"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 3348;
    if(result == expected) {
        cout << "Test Case 189: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 189: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test190() {
    int numSheep = 6;
    int maxRuns = 1;
    vector<string> part1 = {"2000 2000 2000 2000 2000 2000"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 12000;
    if(result == expected) {
        cout << "Test Case 190: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 190: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test191() {
    int numSheep = 2000;
    int maxRuns = 1;
    vector<string> part1 = {"2000 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ", "17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 ", "32 33 34 35 36 37 38 ", "39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 ", "55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 ", "71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 ", "87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 ", "102 103 104 105 106 107 108 109 110 111 112 ", "113 114 115 116 117 118 119 120 121 122 123 ", "124 125 126 127 128 129 130 131 132 133 134 135 ", "136 137 138 139 140 141 142 143 144 145 146 147 ", "148 149 150 151 152 153 154 155 156 157 158 159 ", "160 161 162 163 164 165 166 167 168 169 170 ", "171 172 173 174 175 176 177 178 179 180 181 182 ", "183 184 185 186 187 188 189 190 191 192 193 194 ", "195 196 197 198 199 200 201 202 203 204 205 206 ", "207 208 209 210 211 212 213 214 215 216 217 218 ", "219 220 221 222 223 224 225 226 227 228 229 230 ", "231 232 233 234 235 236 237 238 239 240 241 242 ", "243 244 245 246 247 248 249 250 251 252 253 254 ", "255 256 257 258 259 260 261 262 263 264 265 266 ", "267 268 269 270 271 ", "272 273 274 275 276 277 278 279 280 281 282 283 ", "284 285 286 287 288 289 290 291 292 293 294 295 ", "296 297 298 299 300 301 302 303 304 305 306 307 ", "308 309 310 311 312 313 314 315 316 317 318 319 ", "320 321 322 323 324 325 326 327 328 329 330 331 ", "332 333 334 335 336 337 338 339 340 341 342 343 ", "344 345 346 347 348 349 350 351 352 353 354 355 ", "356 357 358 359 360 361 362 363 364 365 366 367 ", "368 369 370 371 372 373 374 375 376 377 378 379 ", "380 381 382 383 384 385 386 387 388 389 390 391 ", "392 393 394 395 396 397 398 399 400 401 402 403 ", "404 405 406 407 408 409 410 411 412 413 414 415 ", "416 417 418 419 420 421 422 423 424 425 426 427 ", "428 429 430 431 432 433 434 435 436 437 438 439 ", "440 441 442 443 444 445 446 447 448 449 450 451 ", "452 453 454 455 456 457 458 459 460 461 462 463 ", "464 465 466 467 468 469 470 471 472 473 474 475 ", "476 477 478 479 480 481 482 483 484 485 486 487 ", "488 489 490 491 492 493 494 495 496 497 498 499 ", "500 501 502 503 504 505 506 507 508 509 510 511 ", "512 513 514 515 516 517 518 519 520 521 522 523 ", "524 525 526 527 528 529 530 531 532 533 534 535 ", "536 537 538 539 540 541 542 543 544 545 546 547 ", "548 549 550 551 552 553 554 555 556 557 558 559 ", "560 561 562 563 564 565 566 567 568 569 570 571 ", "572 573 574 575 576 577 578 579 580 581 582 583 ", "584 585 586 587 588 589 590 591 592 593 594 595 ", "596 597 598 599 600 601 602 603 604 605 606 607 "};
    vector<string> part2 = {"608 609 610 611 612 613 614 615 616 617 618 619 ", "620 621 622 623 624 625 626 627 628 629 630 631 ", "632 633 634 635 636 637 638 639 640 641 642 643 ", "644 645 646 647 648 649 650 651 652 653 654 655 ", "656 657 658 659 660 661 662 663 664 665 666 667 ", "668 669 670 671 672 673 674 675 676 677 678 679 ", "680 681 682 683 684 685 686 687 688 689 690 691 ", "692 693 694 695 696 697 698 699 700 701 702 703 ", "704 705 706 707 708 709 710 711 712 713 714 715 ", "716 717 718 719 720 721 722 723 724 725 726 727 ", "728 729 730 731 732 733 734 735 736 737 738 739 ", "740 741 742 743 744 745 746 747 748 749 750 751 ", "752 753 754 755 756 757 758 759 760 761 762 763 ", "764 765 766 767 768 769 770 771 772 773 774 775 ", "776 777 778 779 780 781 782 783 784 785 786 787 ", "788 789 790 791 792 793 794 795 796 797 798 799 ", "800 801 802 803 804 805 806 807 808 809 810 811 ", "812 813 814 815 816 817 818 819 820 821 822 823 ", "824 825 826 827 828 829 830 831 832 833 834 835 ", "836 837 838 839 840 841 842 843 844 845 846 847 ", "848 849 850 851 852 853 854 855 856 857 858 859 ", "860 861 862 863 864 865 866 867 868 869 870 871 ", "872 873 874 875 876 877 878 879 880 881 882 883 ", "884 885 886 887 888 889 890 891 892 893 894 895 ", "896 897 898 899 900 901 902 903 904 905 906 907 ", "908 909 910 911 912 913 914 915 916 917 918 919 ", "920 921 922 923 924 925 926 927 928 929 930 931 ", "932 933 934 935 936 937 938 939 940 941 942 943 ", "944 945 946 947 948 949 950 951 952 953 954 955 ", "956 957 958 959 960 961 962 963 964 965 966 967 ", "968 969 970 971 972 973 974 975 976 977 978 979 ", "980 981 982 983 984 985 986 987 988 989 990 991 ", "992 993 994 995 996 997 998 999 1000 1001 1002 ", "1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 ", "1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 ", "1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 ", "1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 ", "1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 ", "1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 ", "1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 ", "1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 ", "1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 ", "1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 ", "1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 ", "1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 ", "1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 ", "1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 ", "1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 ", "1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 "};
    vector<string> part3 = {"1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 ", "1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 ", "1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 ", "1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 ", "1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 ", "1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 ", "1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 ", "1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 ", "1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 ", "1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 ", "1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 ", "1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 ", "1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 ", "1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 ", "1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 ", "1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 ", "1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 ", "1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 ", "1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 ", "1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 ", "1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 ", "1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 ", "1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 ", "1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 ", "1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 ", "1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 ", "1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 ", "1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 ", "1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 ", "1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 ", "1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 ", "1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 ", "1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 ", "1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 ", "1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 ", "1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 ", "1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 ", "1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 ", "1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 ", "1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 ", "1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 ", "1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 ", "1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 ", "1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 ", "1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 ", "1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 ", "1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 ", "1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 ", "1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 "};
    vector<string> part4 = {"1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 ", "1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 ", "1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 ", "1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 ", "1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 ", "1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 ", "1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 ", "1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 ", "1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 ", "1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 ", "1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 ", "1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 ", "1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 ", "1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 ", "1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 ", "1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 ", "1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 ", "1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 ", "1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 ", "1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 ", "1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 ", "1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 ", "1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 ", "1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 ", "1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 ", "1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 ", "1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 ", "1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 ", "1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 ", "1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 ", "1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 ", "1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 ", "1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 ", "1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 ", "1993 1994 1995 1996 1997 1998 1999"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2001000;
    if(result == expected) {
        cout << "Test Case 191: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 191: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test192() {
    int numSheep = 10;
    int maxRuns = 3;
    vector<string> part1 = {"1342 496 973 555 364 800 718 875 1435 650"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2772;
    if(result == expected) {
        cout << "Test Case 192: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 192: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test193() {
    int numSheep = 10;
    int maxRuns = 3;
    vector<string> part1 = {"59 24 179 167 131 116 107 46 59 138"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 344;
    if(result == expected) {
        cout << "Test Case 193: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 193: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test194() {
    int numSheep = 22;
    int maxRuns = 7;
    vector<string> part1 = {"1788 1686 1555 1489 1413 1303 1292 1241 1176 102", "6 984 847 758 601 380 376 355 167 159 128 118 102"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2730;
    if(result == expected) {
        cout << "Test Case 194: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 194: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test195() {
    int numSheep = 10;
    int maxRuns = 3;
    vector<string> part1 = {"16 18 28 35 57 57 58 65 84 87"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 170;
    if(result == expected) {
        cout << "Test Case 195: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 195: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test196() {
    int numSheep = 29;
    int maxRuns = 9;
    vector<string> part1 = {"1957 1946 1835 1832 1643 1612 1595 1418 1408 13", "60 1348 1299 1213 1109 1099 947 721 559 554 55", "2 492 462 391 390 303 287 275 175 109"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 3244;
    if(result == expected) {
        cout << "Test Case 196: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 196: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test197() {
    int numSheep = 10;
    int maxRuns = 3;
    vector<string> part1 = {"32 90 56 40 41 58 96 49 28 51"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 182;
    if(result == expected) {
        cout << "Test Case 197: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 197: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test198() {
    int numSheep = 2000;
    int maxRuns = 1999;
    vector<string> part1 = {"2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 "};
    vector<string> part2 = {"2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 "};
    vector<string> part3 = {"2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 "};
    vector<string> part4 = {"2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ", "2000 2000 2000 2000 2000 2000 2000 2000 2000 2000"};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 4000;
    if(result == expected) {
        cout << "Test Case 198: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 198: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test199() {
    int numSheep = 15;
    int maxRuns = 5;
    vector<string> part1 = {"39 39 39 39 39 60 60 60 60 60 100 100 100 100 100"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 199;
    if(result == expected) {
        cout << "Test Case 199: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 199: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test200() {
    int numSheep = 10;
    int maxRuns = 3;
    vector<string> part1 = {"52 58 100 55 22 50 58 87 23 41"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 186;
    if(result == expected) {
        cout << "Test Case 200: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 200: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test201() {
    int numSheep = 1;
    int maxRuns = 1;
    vector<string> part1 = {"1"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 1;
    if(result == expected) {
        cout << "Test Case 201: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 201: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test202() {
    int numSheep = 19;
    int maxRuns = 5;
    vector<string> part1 = {"1", " 3 20 21 23 24 35 62 71 84 106", " 107 112 143 157 167 175 178 198"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 339;
    if(result == expected) {
        cout << "Test Case 202: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 202: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test203() {
    int numSheep = 1;
    int maxRuns = 2;
    vector<string> part1 = {"2"};
    vector<string> part2 = {};
    vector<string> part3 = {};
    vector<string> part4 = {};
    Sheep* pObj = new Sheep();
    clock_t start = clock();
    int result = pObj->minCapacity(numSheep, maxRuns, part1, part2, part3, part4);
    clock_t end = clock();
    delete pObj;
    int expected = 2;
    if(result == expected) {
        cout << "Test Case 203: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 203: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    test41() == 0 ? ++passed : ++failed;
    test42() == 0 ? ++passed : ++failed;
    test43() == 0 ? ++passed : ++failed;
    test44() == 0 ? ++passed : ++failed;
    test45() == 0 ? ++passed : ++failed;
    test46() == 0 ? ++passed : ++failed;
    test47() == 0 ? ++passed : ++failed;
    test48() == 0 ? ++passed : ++failed;
    test49() == 0 ? ++passed : ++failed;
    test50() == 0 ? ++passed : ++failed;
    test51() == 0 ? ++passed : ++failed;
    test52() == 0 ? ++passed : ++failed;
    test53() == 0 ? ++passed : ++failed;
    test54() == 0 ? ++passed : ++failed;
    test55() == 0 ? ++passed : ++failed;
    test56() == 0 ? ++passed : ++failed;
    test57() == 0 ? ++passed : ++failed;
    test58() == 0 ? ++passed : ++failed;
    test59() == 0 ? ++passed : ++failed;
    test60() == 0 ? ++passed : ++failed;
    test61() == 0 ? ++passed : ++failed;
    test62() == 0 ? ++passed : ++failed;
    test63() == 0 ? ++passed : ++failed;
    test64() == 0 ? ++passed : ++failed;
    test65() == 0 ? ++passed : ++failed;
    test66() == 0 ? ++passed : ++failed;
    test67() == 0 ? ++passed : ++failed;
    test68() == 0 ? ++passed : ++failed;
    test69() == 0 ? ++passed : ++failed;
    test70() == 0 ? ++passed : ++failed;
    test71() == 0 ? ++passed : ++failed;
    test72() == 0 ? ++passed : ++failed;
    test73() == 0 ? ++passed : ++failed;
    test74() == 0 ? ++passed : ++failed;
    test75() == 0 ? ++passed : ++failed;
    test76() == 0 ? ++passed : ++failed;
    test77() == 0 ? ++passed : ++failed;
    test78() == 0 ? ++passed : ++failed;
    test79() == 0 ? ++passed : ++failed;
    test80() == 0 ? ++passed : ++failed;
    test81() == 0 ? ++passed : ++failed;
    test82() == 0 ? ++passed : ++failed;
    test83() == 0 ? ++passed : ++failed;
    test84() == 0 ? ++passed : ++failed;
    test85() == 0 ? ++passed : ++failed;
    test86() == 0 ? ++passed : ++failed;
    test87() == 0 ? ++passed : ++failed;
    test88() == 0 ? ++passed : ++failed;
    test89() == 0 ? ++passed : ++failed;
    test90() == 0 ? ++passed : ++failed;
    test91() == 0 ? ++passed : ++failed;
    test92() == 0 ? ++passed : ++failed;
    test93() == 0 ? ++passed : ++failed;
    test94() == 0 ? ++passed : ++failed;
    test95() == 0 ? ++passed : ++failed;
    test96() == 0 ? ++passed : ++failed;
    test97() == 0 ? ++passed : ++failed;
    test98() == 0 ? ++passed : ++failed;
    test99() == 0 ? ++passed : ++failed;
    test100() == 0 ? ++passed : ++failed;
    test101() == 0 ? ++passed : ++failed;
    test102() == 0 ? ++passed : ++failed;
    test103() == 0 ? ++passed : ++failed;
    test104() == 0 ? ++passed : ++failed;
    test105() == 0 ? ++passed : ++failed;
    test106() == 0 ? ++passed : ++failed;
    test107() == 0 ? ++passed : ++failed;
    test108() == 0 ? ++passed : ++failed;
    test109() == 0 ? ++passed : ++failed;
    test110() == 0 ? ++passed : ++failed;
    test111() == 0 ? ++passed : ++failed;
    test112() == 0 ? ++passed : ++failed;
    test113() == 0 ? ++passed : ++failed;
    test114() == 0 ? ++passed : ++failed;
    test115() == 0 ? ++passed : ++failed;
    test116() == 0 ? ++passed : ++failed;
    test117() == 0 ? ++passed : ++failed;
    test118() == 0 ? ++passed : ++failed;
    test119() == 0 ? ++passed : ++failed;
    test120() == 0 ? ++passed : ++failed;
    test121() == 0 ? ++passed : ++failed;
    test122() == 0 ? ++passed : ++failed;
    test123() == 0 ? ++passed : ++failed;
    test124() == 0 ? ++passed : ++failed;
    test125() == 0 ? ++passed : ++failed;
    test126() == 0 ? ++passed : ++failed;
    test127() == 0 ? ++passed : ++failed;
    test128() == 0 ? ++passed : ++failed;
    test129() == 0 ? ++passed : ++failed;
    test130() == 0 ? ++passed : ++failed;
    test131() == 0 ? ++passed : ++failed;
    test132() == 0 ? ++passed : ++failed;
    test133() == 0 ? ++passed : ++failed;
    test134() == 0 ? ++passed : ++failed;
    test135() == 0 ? ++passed : ++failed;
    test136() == 0 ? ++passed : ++failed;
    test137() == 0 ? ++passed : ++failed;
    test138() == 0 ? ++passed : ++failed;
    test139() == 0 ? ++passed : ++failed;
    test140() == 0 ? ++passed : ++failed;
    test141() == 0 ? ++passed : ++failed;
    test142() == 0 ? ++passed : ++failed;
    test143() == 0 ? ++passed : ++failed;
    test144() == 0 ? ++passed : ++failed;
    test145() == 0 ? ++passed : ++failed;
    test146() == 0 ? ++passed : ++failed;
    test147() == 0 ? ++passed : ++failed;
    test148() == 0 ? ++passed : ++failed;
    test149() == 0 ? ++passed : ++failed;
    test150() == 0 ? ++passed : ++failed;
    test151() == 0 ? ++passed : ++failed;
    test152() == 0 ? ++passed : ++failed;
    test153() == 0 ? ++passed : ++failed;
    test154() == 0 ? ++passed : ++failed;
    test155() == 0 ? ++passed : ++failed;
    test156() == 0 ? ++passed : ++failed;
    test157() == 0 ? ++passed : ++failed;
    test158() == 0 ? ++passed : ++failed;
    test159() == 0 ? ++passed : ++failed;
    test160() == 0 ? ++passed : ++failed;
    test161() == 0 ? ++passed : ++failed;
    test162() == 0 ? ++passed : ++failed;
    test163() == 0 ? ++passed : ++failed;
    test164() == 0 ? ++passed : ++failed;
    test165() == 0 ? ++passed : ++failed;
    test166() == 0 ? ++passed : ++failed;
    test167() == 0 ? ++passed : ++failed;
    test168() == 0 ? ++passed : ++failed;
    test169() == 0 ? ++passed : ++failed;
    test170() == 0 ? ++passed : ++failed;
    test171() == 0 ? ++passed : ++failed;
    test172() == 0 ? ++passed : ++failed;
    test173() == 0 ? ++passed : ++failed;
    test174() == 0 ? ++passed : ++failed;
    test175() == 0 ? ++passed : ++failed;
    test176() == 0 ? ++passed : ++failed;
    test177() == 0 ? ++passed : ++failed;
    test178() == 0 ? ++passed : ++failed;
    test179() == 0 ? ++passed : ++failed;
    test180() == 0 ? ++passed : ++failed;
    test181() == 0 ? ++passed : ++failed;
    test182() == 0 ? ++passed : ++failed;
    test183() == 0 ? ++passed : ++failed;
    test184() == 0 ? ++passed : ++failed;
    test185() == 0 ? ++passed : ++failed;
    test186() == 0 ? ++passed : ++failed;
    test187() == 0 ? ++passed : ++failed;
    test188() == 0 ? ++passed : ++failed;
    test189() == 0 ? ++passed : ++failed;
    test190() == 0 ? ++passed : ++failed;
    test191() == 0 ? ++passed : ++failed;
    test192() == 0 ? ++passed : ++failed;
    test193() == 0 ? ++passed : ++failed;
    test194() == 0 ? ++passed : ++failed;
    test195() == 0 ? ++passed : ++failed;
    test196() == 0 ? ++passed : ++failed;
    test197() == 0 ? ++passed : ++failed;
    test198() == 0 ? ++passed : ++failed;
    test199() == 0 ? ++passed : ++failed;
    test200() == 0 ? ++passed : ++failed;
    test201() == 0 ? ++passed : ++failed;
    test202() == 0 ? ++passed : ++failed;
    test203() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=15868491&rd=14236&pm=10920
********************************************************************************
#include <ctime>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cassert>
#include <cmath>
#include <cctype>
 
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <queue>
#include <iostream>
#include <sstream>
#include <functional>
 
using namespace std;
 
#define forn(i, n) for (int i = 0; i < (int)(n); i++)
#define forit(i, a) for (__typeof((a).begin()) i = (a).begin(); i != (a).end(); i++)
#define sz(a) (int)(a).size()
#define all(a) (a).begin(), (a).end()
#define pb push_back
#define mp make_pair
#define zero(a) memset(a, 0, sizeof(a))
 
typedef long long ll;
typedef vector <int> vi;
typedef pair <int, int> pii;
typedef vector <string> vs;
 
class Sheep {
public:
  int minCapacity(int, int, vector <string>, vector <string>, vector <string>, vector <string>);
};
 
string Str( vs v )
{
  string res = "";
  forn(i, sz(v))
    res += v[i];
  return res;
}
 
const int maxn = 2010;
 
int n, K, a[maxn];
 
int Solve( int W )
{
  if (a[n - 1] > W)
    return 0;
 
  multiset <int> s;
  forn(i, n)
    s.insert(a[i]);
 
  int num = 0;
  while (s.size())
  {
    if (num + sz(s) <= K)
      return 1;
    num++;
    if (num > K)
      return 0;
 
    int rest = W;
    while (s.size())
    {
      set<int>::iterator it = s.upper_bound(rest);
      if (it == s.begin())
        break;
      it--;
      int w = *it;
      s.erase(it);
      rest -= w;
    }
  }
  return num <= K;
}
 
int Sheep::minCapacity(int _n, int _K, vector <string> part1, vector <string> part2, vector <string> part3, vector <string> part4)
{
  int start = clock();
 
  n = _n, K = _K;
  string s1 = Str(part1);
  string s2 = Str(part2);
  string s3 = Str(part3);
  string s4 = Str(part4);
  string s = s1 + s2 + s3 + s4;
  stringstream ss(s);
  forn(i, n)
    assert(ss >> a[i]);
  sort(a, a + n);
 
  int mi = 1, ma = (int)4e6, ave;
  while (mi < ma)
    if (Solve(ave = (mi + ma) / 2))
      ma = ave;
    else
      mi = ave + 1;
 
  int res = mi;
  for (int i = mi - 1; i >= 1; i--)
  {
    if (clock() - start > 1.85 * CLOCKS_PER_SEC)
      break;
    if (Solve(i))
      res = i;
  }
  return res;
}

********************************************************************************
*******************************************************************************/