/*******************************************************************************
*    Automatically generated code for TopCode SRM Problem
*    Problem URL: http://community.topcoder.com/stat?c=problem_statement&pm=11936
*******************************************************************************/
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class WorkingRabbits {
public:
    double getEfficiency(vector<string> profit);
};

double WorkingRabbits::getEfficiency(vector<string> profit) {
    double ret;
    return ret;
}


int test0() {
    vector<string> profit = {"071", "702", "120"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 3.3333333333333335;
    if(result == expected) {
        cout << "Test Case 0: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 0: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test1() {
    vector<string> profit = {"00", "00"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 1: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 1: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test2() {
    vector<string> profit = {"0999", "9099", "9909", "9990"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 9.0;
    if(result == expected) {
        cout << "Test Case 2: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 2: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test3() {
    vector<string> profit = {"013040", "100010", "300060", "000008", "416000", "000800"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 1.5333333333333334;
    if(result == expected) {
        cout << "Test Case 3: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 3: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test4() {
    vector<string> profit = {"06390061", "60960062", "39090270", "96900262", "00000212", "00222026", "66761201", "12022610"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 3.2142857142857144;
    if(result == expected) {
        cout << "Test Case 4: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 4: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test5() {
    vector<string> profit = {"00", "00"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 5: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 5: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test6() {
    vector<string> profit = {"09", "90"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 9.0;
    if(result == expected) {
        cout << "Test Case 6: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 6: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test7() {
    vector<string> profit = {"000", "000", "000"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 7: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 7: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test8() {
    vector<string> profit = {"099", "909", "990"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 9.0;
    if(result == expected) {
        cout << "Test Case 8: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 8: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test9() {
    vector<string> profit = {};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 9: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 9: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test10() {
    vector<string> profit = {};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 9.0;
    if(result == expected) {
        cout << "Test Case 10: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 10: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test11() {
    vector<string> profit = {};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.0;
    if(result == expected) {
        cout << "Test Case 11: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 11: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test12() {
    vector<string> profit = {"09999999999999999999999999999999999999999999999999", "90999999999999999999999999999999999999999999999999", "99099999999999999999999999999999999999999999999999", "99909999999999999999999999999999999999999999999999", "99990999999999999999999999999999999999999999999999", "99999099999999999999999999999999999999999999999999", "99999909999999999999999999999999999999999999999999", "99999990999999999999999999999999999999999999999999", "99999999099999999999999999999999999999999999999999", "99999999909999999999999999999999999999999999999999", "99999999990999999999999999999999999999999999999999", "99999999999099999999999999999999999999999999999999", "99999999999909999999999999999999999999999999999999", "99999999999990999999999999999999999999999999999999", "99999999999999099999999999999999999999999999999999", "99999999999999909999999999999999999999999999999999", "99999999999999990999999999999999999999999999999999", "99999999999999999099999999999999999999999999999999", "99999999999999999909999999999999999999999999999999", "99999999999999999990999999999999999999999999999999", "99999999999999999999099999999999999999999999999999", "99999999999999999999909999999999999999999999999999", "99999999999999999999990999999999999999999999999999", "99999999999999999999999099999999999999999999999999", "99999999999999999999999909999999999999999999999999", "99999999999999999999999990999999999999999999999999", "99999999999999999999999999099999999999999999999999", "99999999999999999999999999909999999999999999999999", "99999999999999999999999999990999999999999999999999", "99999999999999999999999999999099999999999999999999", "99999999999999999999999999999909999999999999999999", "99999999999999999999999999999990999999999999999999", "99999999999999999999999999999999099999999999999999", "99999999999999999999999999999999909999999999999999", "99999999999999999999999999999999990999999999999999", "99999999999999999999999999999999999099999999999999", "99999999999999999999999999999999999909999999999999", "99999999999999999999999999999999999990999999999999", "99999999999999999999999999999999999999099999999999", "99999999999999999999999999999999999999909999999999", "99999999999999999999999999999999999999990999999999", "99999999999999999999999999999999999999999099999999", "99999999999999999999999999999999999999999909999999", "99999999999999999999999999999999999999999990999999", "99999999999999999999999999999999999999999999099999", "99999999999999999999999999999999999999999999909999", "99999999999999999999999999999999999999999999990999", "99999999999999999999999999999999999999999999999099", "99999999999999999999999999999999999999999999999909", "99999999999999999999999999999999999999999999999990"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 9.0;
    if(result == expected) {
        cout << "Test Case 12: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 12: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test13() {
    vector<string> profit = {"07567445746657648554777555567356535475755864537375", "70555535487479876655555554535685579755359755535567", "55072343686763678567567655556556365477668653662647", "65706654735777656456375653675836828564466655646875", "75260847576355772565575586463663367544456666678675", "45368026566763567596454745586535656544765454647559", "43454206764445576666535447345647553746557745655535", "55347660773274777756678363454446464665454626774654", "74675577057856466664875487576555785464655558766665", "48837667504545464567885655667649656757645777597665", "67656643740652745337564435757754774464567666576726", "64773742856077686477377556745653654544355454849545", "57675647545705315565635754355745667377653495655554", "79375354652750464848465968546355375437455654368445", "68667557447634074434647465562346674675555447666635", "47757677664816707745545578864547444546675744347446", "86862767645654470573556425766467587558547635765767", "56545567653458475067448575647447555762678445342755", "55656965663764347605456388542353668646668244667464", "45765666477758453750763556556455556779875575677455", "75535456885364655447076456672458566556678558955675", "75677537786736445456704667376355463766446465665435", "75755458554755756863640684865655655675653736456266", "55665743464579454535466065645444756334585447853866", "55558446853556672785568603377584634753765546935575", "54536573755648585586674530735565457647455475662475", "55564534567735587655638637048743546256555577437585", "63576845765454666445776473405686185534577668755753", "75653654677556246726265575850554777657674437557777", "36586564567673354434436455765044767854566637649766", "58536344545545446455555486485406557548575755517754", "65663576594355677735855445364460547756655666657366", "55383654767663645565546764517755057766675568576546", "37626556857567748565665535487654505646556696355573", "59587634564475447586635647657777750649655693371565", "47455576474534655767576376256857766065837757645646", "75764446656473745647567354535545644604535656776464", "55744465474477568269665437647486669540865562763745", "73644754665364565668646574556556656858043454684472", "55665655546555574767745865577675755336405465645446", "59866574557535557885863555574655565755350556565564", "87666476576446476425547454564676566765445025566653", "65556542576595443447563447763356699556565204555373", "45356456876454745545856765787756863762456540458485", "55666667755863637366964896475656533677665554068456", "33647457697456646467565536355415757476846655606943", "75268754676958675277556352757977651563455658860864", "35686556667554647744642854577773555647445634498064", "76477535662454346565736677857656476464746578546607", "57755954556545567545556655537646635645264335634470"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 5.400816326530612;
    if(result == expected) {
        cout << "Test Case 13: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 13: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test14() {
    vector<string> profit = {"02020100110203340020000013002002132011011013011110", "20001022110230023112001021310112211101020304131031", "00022113222201120020303002020201322112343112031421", "20200202031033010012131201002102010210213101001221", "01200200002131431110043243312100301130320110100001", "10122011012121000021011204320033020321012212201113", "02100100101011110244112101121210122002201100220120", "02320100000200220201230102210010234232002012101332", "11200010001222033000001221210020100000202110211140", "11230100001022230111103100220013132110110121000011", "00212210110121230101001113020030010031012211110212", "22201102201001122031021100003111110110321122010110", "03033210222003023010111012013111201312100121032112", "30131110221130022103001101101231112000220112322023", "30104012022100012000310102411110200201312421230311", "42213012333222102220001000100201120021211122111110", "03001000300232220222020222011102031111000211111230", "01001022011001022010031020010121333010202031312320", "21211240010310022100222310012120210012100123100120", "02020141011103002000003201033131023211021201211103", "00310012010010300020030122101321130201040022021101", "00034113000210102320302101011101200113231041224220", "01313120131111010123020202103112421200000122111021", "00022211211101102032112020221202001011120100032044", "12004000201010002210200202122112122210032100022102", "31213412103021202001212020210020103231102221302112", "03003312220001410000101212001113410021210031000210", "01201221122010101113010221000020111220200100100023", "20022010000331101023113120100022001201130013111302", "01211020000112121111311210100000111310202130240011", "01000311213113100223201012122001320110120112212011", "22120300030111012101112220302010210110010012104211", "12303012110121210320124011410132001030221200202010", "31210223031101023312302020110121001022321003102121", "21201024020012001303001123011100110014002220240112", "01121302010130201002212022022311000032022231101210", "10113203013110021111010113220111321301012200011101", "11200122001020111021130101101000024210221200302023", "00323020210312320210020101221210230002003102112303", "12412100011202110002430230103021220212001200342002", "10330212202100210201010022000200112221310201221032", "03111210112111412012001112010110202222122012101220", "10101101121221221320242002301311002300000102002300", "34210202011212121131212001103022030100201220123310", "01001221201003211312021003011221212103132101021102", "13300020101132311101221320001410004010142002202200", "11110101100022011201141222001024220112221123120120", "10420113102110312311120011203002011210300233121012", "13220123411112113220022401120111121102003201002100", "01111302012023100003101422032111012013322000200200"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 1.1722448979591837;
    if(result == expected) {
        cout << "Test Case 14: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 14: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test15() {
    vector<string> profit = {"04744565466747566557775656568597567688877766857758", "40876547555668565578766466667665747547766465656677", "78056757777596766557654758654656764576655656855757", "47506566576767755474568774576586555685678857575887", "46660656578555574567766758778467378666665664477676", "55756067656665666577654437757566667676546665758458", "64565607655555656577577676855747975664567755678567", "57766770586976767855666444776576556865586565575498", "45755665076775676668568766676457656587767755585477", "65777558707477479686676686566756855745787546678565", "65768656670856667666766567667687768687765867667666", "76575659748069584666676567756456645577655678436976", "46965657775606657667455756557447555767545947785646", "78675556576960657648566857655655586777766868564566", "55775667646566058626356896755775576666666846458766", "66657656776855505588577766757764666676545665465757", "65654667697477850677869664766686675586686666756566", "55545558666666656057368839556667797985376846556766", "57576775686664287506665756554677766765876675696455", "78747775866678687760659556787537466646745776886677", "77657656567645358366047657847758646777858765566667", "76566576676756576665407666876668667675655876685546", "56486476866656679859770777657656766466767377666665", "64777464765578876875667097756655656667675557566547", "56575374686655966355567907478747556686655677476586", "66848764667767664966767770646575766757645576646468", "56657787656756777557886746067767577846665647655655", "66577557766555556558475574607855765585766667558565", "87468756667675576647767686770454675977566764765895", "56654575476446776665766675784037557665675566657675", "96586647558545768673565547655306465876854855646766", "75667676767675546777886575754760668766657654744765", "57753695687655566774667657576546066573576665648978", "64657675556458767966466556767566606895664578455658", "77458756658556665766676666755758660556775769745455", "65566668576577665976764667859687585056666856575774", "84786766848767678864776685487676795507756357666696", "87656645757777666556756767657566356670766767666667", "87666555777657656387867666675686567677046766646755", "76576468686546648774556754666755767656407647565567", "76585676775556656665857555566547645666670866665555", "74686675758698866867783565667586657837768067655865", "66556656546746466477677577466655676556646606857466", "65674555567878656656567776774654589677676760657564", "86854765566475447568566546657667647566656686075666", "55577577876386565598686674556544454766466555707654", "76557885587654856666656666585764855566655577570545", "76786454456965775746656554658677964766755845665068", "57587569766746656657646486569766755796565666654604", "87776878756666676657765768555565885467575564645840"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 6.018775510204081;
    if(result == expected) {
        cout << "Test Case 15: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 15: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test16() {
    vector<string> profit = {"00120301204322261212322111401030403110111301512310", "00002003210220320232104304210001033011130013230203", "10022246021112204024120030210203130531120201573321", "20202123100210210540002120200402022141100220331105", "02220412222033031120603132322112323231430341331211", "30214003220322230062433311430213011212154012400640", "00421002311253321120004243115214203102200001113404", "13632320220312210112220114520112322332333502221103", "22012232010224045022200206200341412230032100113113", "01202212100110403154342442122302313221012120214441", "40102010000200132104642120312222213403410312312312", "32120323212005232321542300210301133022241032313152", "22113251210002213133250230532530331201101232420001", "20203232400520403031332311232211501341231010332033", "23220232041224020513303140343301120243002111510402", "62013321403310200531030102421130323001221332000303", "10401010532233000112132320030022141342332330041021", "22051011011310551035212302000110412140102201332511", "13242621250233131301010332133130031332222011130212", "22400202244131312510104222131233320021343322310211", "31106402236523301201021010303211331220130233101054", "20200302044453033110200510002012110215112320020101", "24023340022202302204100122423300331212133123102123", "13011321241323113332051021100240300321344444132242", "10323141042031402032112201152205021031125022020403", "14002134620001020222002110211200332101110011012001", "42223415213252340011304112003011010422336401241322", "01102312021133423033002051003211313010233123313211", "10002050022022310031323021330221103101121005111022", "00241221332352310112203222022010233321041012322214", "30001111402031032133110400112103233003002215110403", "01322342122101102003120050111030102301120043210102", "40103023432135131403313303031221021320410313213014", "03322102111330224132313023110330200503231020301034", "33023132233311031210101012033332100235224021412102", "10512213224023203130222301401303352003012320303421", "11343103320204404432211230210200203003024201202010", "01111222013211312021052111201131035330014011020000", "11114123004212023123111311321001422000001200212210", "13203503311403023024313421332402132121005210312121", "10000403220111212223023450631120014244150051104531", "30223005113020133203231400410020300320220005212011", "01024100021331133012322421020114122201015003040131", "13101212002220120112303421135253301011001530104032", "52533412123343500313101100231312234320231201001220", "13733012111123104331020321411211101002110140001221", "20311031342302001200102202131200312320224204110320", "32312641143100430522011240320241001400215010223005", "10201400141503002111502400212100130210123133222000", "03151043312213231121413231212432442100011112010500"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 1.7346938775510203;
    if(result == expected) {
        cout << "Test Case 16: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 16: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test17() {
    vector<string> profit = {"03343232323323113443343323233332214333333333244132", "30423334143342222243333433424342223433223234332223", "34022423153224422322424333224223223333223434332332", "42204333323231324334452142443233322222223142223223", "33240214123343443333222123343222342322323123333244", "23432022333332434222312322343423322434332431443344", "33231204343333243523343323333233242312333223324132", "24334240421224233223233343352334352423324223453434", "31131334034323243423322343334223242232332341343314", "24522342303213331343223232324232224433333244333413", "33333331430222323323333322232303323224321432343333", "33223332322024221232223324342233223433213333432232", "24234332212202432424244232133313332334221323133333", "32413234332420243433233334334322243234222331342142", "12434422233242023312334323433204333231334432224434", "12224343432234203422422323324223223312332334233322", "32243433313123330324424422235232322343232424333333", "42333252433244343023423224331212213223332332443232", "44233222242323122203223422423332442343334323222414", "33243233333243224330433423233332331443323434334343", "33442332323222344424023121433344343323333234334234", "43252143223243322223202333223433332323423333231332", "33422233233343424333320333234133332332233242423233", "34311333323323334244133023453342322244332333432324", "23342224432233222222233204333232323343444353223432", "33323233322424332423133340352222342433354224333323", "24243333332313432342422433024331245333324443332313", "32244435323433323323323535202332433323224413233232", "34433332442234345133334332420242422323313354233432", "33222423223233222233341322332023233322434344223432", "34232233230312023133433432334203443342253223323232", "22332334323332432222433222122330222424333322233122", "22233323223232323243333333244242024333343323443323", "12224245422234322143433224432342203322322333433422", "43322222243323332321322232532332430333223343333431", "34323434242432233234333234333334333024442332334234", "33322312332333314244223443322242323203442333432333", "33322423234344123333332433333224323430334334342423", "32223333333222332333342343323423332443033223323333", "32222332332122333332323345221353422443303232333134", "33333234231312422243333244443433323224330344122313", "32411422324333434334232332443323333333223032333332", "33342322443323332323334352415422234333234304221334", "34423133142331244234432334334432333234324240344423", "23323434333413223423324423322232443343331323032343", "43323425434334233423332323333223433334232324302432", "42233343333232433324413233233333333422332314220232", "12322314343231433243232343324421344234313334342034", "32324433113334323314333232133332223332331332433302", "23234424433232423243423423322222321433343243322420"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 2.8081632653061224;
    if(result == expected) {
        cout << "Test Case 17: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 17: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test18() {
    vector<string> profit = {};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 6.420408163265306;
    if(result == expected) {
        cout << "Test Case 18: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 18: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test19() {
    vector<string> profit = {"07856699588878799578988756679687688886788996979977", "70798877899796999997677677978989898789968949988759", "87087779889998988688789869978799987979788958967696", "59809986796697868988866879989989696998477986879968", "68790967896989786988667765876758957968977889676988", "68799069977887887966676975985676697777978599756777", "97786608878889787957796878777778678888987979678998", "97967980797489999679966769988877888994878778967997", "58878987068977567897776889898767576989568698797676", "89899779607888977876977698766868857778997886777786", "89966787870779979777777796778789979775989877788887", "87969884987097679878877857768997888898678977876998", "79998888787907886898598768779989988998695776867767", "86879799789770977666887899889866997875877799978668", "79987879599689075768779987678996878777688688797989", "99868889677787709589689886997699797788679767897777", "99886779779967590889775799868897877977998969886789", "59699996887886758087888766977777876878797559588988", "79888657977796688808377778877789978688787658766866", "87888679767886899780699697596767878778887788879879", "96786679797858767836079897896769778997756789778895", "87866796777798787879708678776889696978699795886978", "87967666677787995879980878856799878788667898787947", "76887987867878987776868077787687876786887988776978", "57676776899569889679977708976589778776658859767969", "67995589986789769687788780878979869776975887866797", "69998979877778698985878798086958886699769998799878", "77787878967678796779975877808676988689987778898877", "98896578868899878776666768680588698789767768765777", "69797678787998968777787659965098879668677868788986", "88985777668986999786689887578909889859657777766768", "79998687789796697797999799868890986769997558796777", "68969668589899878898768878896889089789989776668988", "89895978757889797777797776889788806767989795969689", "88767788679887877688868689688996960798887966467866", "87999789977898779867997777667687777079888677569795", "88796789877997787787978877988656869708889768859768", "69988784985885787888788666999899978980697687677887", "79749998599668669778766869797669998886068577897788", "86877787698797879988596857686759888889609899969798", "88877878879857898777697785977777997897890987897798", "99998597688977679567778988977875779676589078796888", "94588977987779866558899858976675796768798708677755", "69869998867769879988958897888878656787797880785994", "99986769777889788578787778787777694586898767068888", "78677576978767998867788766996869666657969978609687", "98796687778678776869867676985866897997797675890699", "97699799678976977988899997887977968778777879866056", "75968799788966878867974769777867886968899859889506", "79688787667878979869587897877687896587888854879660"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 7.471836734693878;
    if(result == expected) {
        cout << "Test Case 19: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 19: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test20() {
    vector<string> profit = {};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 5.898775510204081;
    if(result == expected) {
        cout << "Test Case 20: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 20: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test21() {
    vector<string> profit = {"03555554454445555354455657545453545545454555445653", "30556454455535555464555555444444425555455455555745", "55054555455455455555555564655444554553554446555565", "55506646445554545455645455454454755454355444544455", "56460454434554655544556644455465555545445545444445", "54564055556545454564565546544545564643555445545665", "55545505565664554544555554455536444455545544543545", "44564550565445464456544565555456455534454564655454", "44444555045655554455455435555435554546545434446654", "55543566405565555355454554445455554545565355453445", "45554655550444546565444456555545454545445445555454", "45455564654055556654555453545654554454655455553445", "43555464564505666465545465455465556544554455455554", "55544545554550455445445544455554565454456456654445", "55456454555564054545555463555655545646564554556546", "55545556554565504545444565555565554553665554355454", "55555444456665440545446555544554465444546544655554", "34545554435644555045553655454665546556455565545444", "56554645556564444405665655645454455345455555644455", "44554446555455555550435445456444545655443445557555", "45565555444554544564034643565454555665546455545544", "55545654554544544563305554555445543453655554455545", "55556554544555546355450554556664455634555454554565", "65546555454445455664655043655555565555655455554565", "55654456355564665554455405645554453543435554545554", "75454645546354355555344350555536564445554546445554", "54644545545544555464555665055554555555455655544454", "44555455545455554545655545504444554465444545455555", "54545455555555554456556555540543555544444574553665", "44444554445645655644446555545044545544545545547654", "54456435354565565654546553544405555445545455456455", "34445566555454554544454546443450545465555554655444", "54575544554555554545554545555555055454555554645565", "42555645555556456454545656555454506455555455555565", "55455445444465545655535534545555560566555555455545", "55545645555454654536646554545544445044654455546556", "45554453444545454545653544564446556405556554556454", "55345354655444634655534535554455456450556555555644", "44534554554654565444565645444555555655055555455446", "55554545464555664554455535544445555555505445444566", "45455554555546456553655554544555555466550445444345", "54445455434444555554454455655545545455544064556545", "55444446354555554654555554547455555555544604545545", "55645544455556444555544546554554455545555440555555", "45554556445546536565545554545546654555444555054455", "45544445455555555445455544455455455455544545504554", "55544535635354655547554455453765555665544655440645", "67544654644454545445555555456644555546453555456054", "54654645545454455455446655556554664554464445554506", "35555554454545644455455544455454555644665555545460"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 4.7273469387755105;
    if(result == expected) {
        cout << "Test Case 21: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 21: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test22() {
    vector<string> profit = {"07957885678899899895587869588966997779769799697576", "70755679764495799795996978899767686697977987565579", "97089598977579779978897997857969798685546868845986", "55809797898977898789768668545776867897976998774666", "75990589966764864579697677777679687979688778969978", "86575076748996777999699867966979979689786696489968", "87998709977855887677999879683767899897869669879469", "59879690999799687899696986795869676876595959779896", "67989799077574798777899696663767975658846766597989", "76796479709776773895586689577888469779785999668686", "84786879790586986686765574587956978895599777697796", "84597987575059999556768689767475867679876689869799", "99776959778506797997676658896959796969858988569948", "95974659466960784979798895996945856487659897559998", "87788786779977058749983998787799975937758968967799", "99796788978998504798567965777789868787576795697955", "99984777836974840699997898889889766494747946888567", "87975968786599776068787769955999748857886845875989", "99787979798597499609888757887857897779696798885787", "55899979756679989890987676696599786977797696472755", "59876696857767959789089997999968779998988879898877", "89969999986679869888808958899668656987769756899737", "76787996965868377787980997876678769495777446879987", "89966889665668998776999097697756837699978876968799", "67967678987859969657959909669667987685957888878867", "98787796694985858976787790988468975977994898996857", "58857967655789778986988669057569888945656779747965", "89547689678699878589997968509679779697657788778798", "89757635377766779576996798790696786686787989686889", "97976978789499778985966764566068598686986897989892", "66677766685754988959667566679608565989789896978887", "67969979786595999979888678996880668988258996888658", "96786986949878987787767899877556099968988667668958", "98968797767695766498756387878966908886997666688977", "76877996598766586876969775896858980975778885767796", "76689688678694974879994669966699989078788876687896", "79897897579768389577989987498888687705978976788989", "97579976895997774797875957576698865850675969979666", "79596785875886757867977999667972997796076989797777", "67478869489755574899867759558885897877709777778868", "97668695659689867667897874677698878885690769657766", "79897669797698979876874888779889668899977065659677", "98697965697889694499754789788999668776876609969987", "97888699697987856586966688989766765669979590598767", "65879487566855968884888989776998667679776695085776", "96476877969665698787997679478878686887975569809676", "75549999787999778552899886786988887789787998590748", "55969948967799795977879788978886997896787697767076", "77867669889949956885738965698985579986766786774707", "69668896966988957975777977589278876696786777668670"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 7.235102040816327;
    if(result == expected) {
        cout << "Test Case 22: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 22: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test23() {
    vector<string> profit = {"0463378", "4078053", "6709896", "3890347", "3083098", "7594900", "8367800"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 5.571428571428571;
    if(result == expected) {
        cout << "Test Case 23: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 23: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test24() {
    vector<string> profit = {"0468", "4072", "6706", "8260"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 5.5;
    if(result == expected) {
        cout << "Test Case 24: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 24: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test25() {
    vector<string> profit = {"0295466654", "2003518679", "9005023673", "5350241386", "4502033103", "6124306128", "6831360893", "6663118077", "5778029703", "4936383730"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 4.444444444444445;
    if(result == expected) {
        cout << "Test Case 25: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 25: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test26() {
    vector<string> profit = {"04330461631800432208059517472", "40089352762439601048395182713", "30026192082064676655397455351", "38209975134194976570431239027", "09690668759769717554036842471", "43196095174732721317799044753", "65976909444457238071080738549", "12258590135090340662514389294", "67017141066884935144905791772", "36835743602623256636611833518", "12249445620964272101353951482", "84017740869056185943342487537", "03696359826501623111530404320", "09449270434610024455388483073", "46697723922160014807027012467", "30771234357822100215046769172", "21667180562534400681750228070", "20655306161914826096407694678", "04575176430415018906765989585", "88504712461315751660227905758", "03340705963353007472086407665", "59933981015438245062807331467", "95716904513208760757670791503", "51428073789444072699437019893", "18534438935808162980039109938", "72592489131743298495711990429", "47304752754530410657645894050", "71527549718327677785660932500", "23171394282703720858573389000"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 4.4507389162561575;
    if(result == expected) {
        cout << "Test Case 26: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 26: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test27() {
    vector<string> profit = {"050771364732", "501257222881", "010210299953", "722070286853", "751704599615", "170040128054", "322251059641", "629892502407", "429698920613", "789860646060", "385515401604", "213354173040"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 4.2272727272727275;
    if(result == expected) {
        cout << "Test Case 27: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 27: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test28() {
    vector<string> profit = {"0477713265783046018113435061", "4082461642648506268889793695", "7809757423853962586644233763", "7290390096211320570029375921", "7473079021674680522917278003", "1659704847328615656788826165", "3170940476189875550010921706", "2640084010957321559812299258", "6429247108202264009238671745", "5236176080134556670137222408", "7682631921036498931675612218", "8451728503306422494112672459", "3831489724660262119571290118", "0593668325442068640221939364", "4062817265926608346256143932", "6620055146822880058533162859", "0255565506941630010412861071", "1687255507391445102897850227", "8860260990149068020618955662", "1860970821615225486009583124", "1842181133717253191003951710", "3949780287521163278930538056", "4723289262662911889595081174", "3937722972179346655853800909", "5335861912220932105318100064", "0679017274241398026170190007", "6962060540151635726215706001", "1531356858898429172406494710"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 4.351851851851852;
    if(result == expected) {
        cout << "Test Case 28: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 28: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test29() {
    vector<string> profit = {"02982116714347228236769703267987315149360", "20339815285375314767357037159725753060879", "93049293976794219448968569518416799142691", "83406350091568180127520488270979327579450", "29960700301329029245507029719184529699514", "18237046350570174209483519337889991385014", "11950405386244145555243374695026119748730", "65300650738966192316944813555179374620128", "72903337064186588051483972738890756029118", "18790583605386135054516260228285020256847", "45611068450276640187108732281980935740927", "33753529132016612153727899763983658488665", "47962746887100984871362260748153041510249", "75489046666600762330808864113565700496711", "23210111516697068192704993097673992507657", "21182749834186600661202823406633661239098", "84909452850242800487470488947267796876758", "27412253001183164090562105320718114733757", "36424051558573968908800072693308306549567", "67875956147310217080546731421849628811518", "73955429451738724585055779913030163341530", "65620844810260007604503775598018672266768", "97807334368728420206530143669025258008903", "70540538927828984107771032618768243027434", "03682171763966928073774307354040041918697", "37989943202904338521953270786241428986427", "21527365722771049364956637084722243925077", "65171395328641904292196158807782712955284", "79809755881383767031389846470024787776745", "97491801829915662738000702770026847782205", "82178827988856736104312644282206850805111", "75694969050335337889085801224660932629513", "37735913709607967136162204277889090378921", "15922917523540969102675442418453908253782", "53979194605810216468328318327702080815722", "10156376027454528758320099997786328045939", "46479842254819037341460218257802751404861", "90299580960806796391168786556259835540006", "38645071189627607755579464027215977980033", "67951132142641595561360392784011282360305", "09104408877591788778083477745513122916350"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 4.595121951219512;
    if(result == expected) {
        cout << "Test Case 29: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 29: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test30() {
    vector<string> profit = {"09160012181833768747465778114525761461451514", "90479052149509838635547235395032919243970586", "14081404340242303580909666526519395361387393", "67809639904771480063815005312717225623318308", "09190183966903943931691697052662627814832363", "00461046336446265140702347154503308349903793", "15038405344570942353644406165742315032477470", "22493650462564055395211477952241380170141748", "11399334021037539609209964860723452372425750", "84406346207843404836666419906326029965260591", "19046642170871876583541538208963202587108119", "85279455088006275822127404084340558745384534", "30470476347006162384650706084529130590642376", "39213604731660697059673585071930330920413841", "78349290548216040117514193408964417868815782", "63084645307769408501287371936949853697763413", "88303525946527080659835272029298971667190581", "76509133685830156018282308140169403058952267", "43863459038285105104044395354290034967483709", "75031035963249719840025804876231045385069425", "45986762265166528200013343436334807715570513", "64019041064257183842108861531039490456767992", "57951241961703475245380007110510969992147205", "72606344945475132338380015004187555487607191", "73609407613008977090460109693715337013101626", "85657767498465312854317590584251489646867757", "13530119892000490138451065093631939090293753", "19215565600887032457331098902621097418115719", "45622452068441869046610434320645335821845606", "50576572739359992122305172666045995471391305", "23116044226423649693331815324408838280833136", "52972321363090498901490751115580354902632246", "79326333402513489400849534903983050624736464", "61922018520533157034096538393935504976464291", "19557850292800731345709579975584040589217523", "42368301395759866093749406048429695036334663", "64621437768492696568159814912780278302420377", "13134920257500877875562736081102469620427111", "49338941421364871940571618218386742344055202", "57813074260841169586764006914933361322503018", "10782371508423530239077717355132647407530473", "55333747751538745274592167776312425631204084", "18906974591374818602190925510034692671017805", "46383308019461231795325167396566413371283450"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 4.337209302325581;
    if(result == expected) {
        cout << "Test Case 30: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 30: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test31() {
    vector<string> profit = {"00852518749720344433671965653098907900350", "00826252641579299942260342962412406710803", "88049760966294876861507317372745387262576", "52404415702323238300716412072339364384018", "26940118311245842068838190594317410381319", "52741048530800815633944142473593345251779", "15611408880333802635854881757113510831935", "82058880800944872692297182678101596100629", "76973588093060415693912948929838914150276", "44601380901658190146194215301379222565100", "91621000310922461806960376069937713172940", "75232839069065522156657462131082499286384", "27924034652601743187967827777206553938865", "09435034082510994105643622737180879222664", "32828888414579024570627502730151564410300", "49734107196249208033839625375682809436025", "49682522501234480210342464492110741380699", "49830666618111502058522177630229032842916", "34606339940580731506221078141083856545664", "32108352366675030860931774245462333152649", "62578982919696683529037232896222952157134", "76013459196564234223300668749760477211916", "10768447240773792211700372225655270830499", "93341181923486564107263005422487563179270", "64119488417622026777367003727850797354580", "52720212856272254784282530609591415286824", "69305476930177734612872476034454000457853", "56779757206373379344942220306255703542972", "32224378919177052015695279460223175521686", "04733511839021161204276485422009008396621", "91431910373808581286265859552005208677674", "82597331897260120932205701453950268521081", "94334355927458587083942574071022079255652", "00861419121957604353577691007006701447715", "76740506423939491263270375035888910133549", "97233281151292443851128132455365241095263", "01688530567832138445513758542972543909963", "00241110052682060252710946721671573590387", "38503796219386306966194258896660675293093", "50711732704866029164319782578278514668907", "03689959600454059649469004326141259337370"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 4.347560975609756;
    if(result == expected) {
        cout << "Test Case 31: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 31: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test32() {
    vector<string> profit = {"09985821396988321056000006173325833654", "90655080820438470613806652688179726601", "96010293646692042094859318820175187216", "85104520815078457776467091852553930798", "55040388084091705607013337665005711074", "80253092876849705238068617890616393360", "28928908269136164041801129285803089164", "10308280319973571045119462147132004701", "38680823059765370513928389309111752753", "92418761508992778056379274229966650855", "60654699980012261012835832280000523730", "94600819790013426699153858977014717963", "83979437691108537094509214330191952809", "88281963522380950962346726864021274890", "34047715372459027441443385915713760941", "27450067776235208345607460299096123712", "10275541081670780097126137704270122476", "06076200500609430098775431876630649343", "51970344151996449907364145293585028861", "63467815362942157870560900667772733804", "08840081938153461735043853517075993117", "00561601273504402766404708294829205450", "06973819895396376540340249581683719229", "06303614328827341419872045930749575359", "05193126873512863340504404582846297413", "62817792942846507150389540807342889052", "16886821322938927826525958086409536433", "78256984028736190796198380806555538800", "38025057990704594637741027660963149517", "31150681190010702657086783459098782628", "27750103160192197387728444056905680374", "59535632160411360052593962953850173166", "87197300765792711607927528551761080404", "32831980552157622423901798334887802198", "36701394203724032983359579689203020061", "66270317787988974388142340485631410053", "50197660553609417460152515301276096509", "41684041350390126314709932307846481390"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 4.448079658605974;
    if(result == expected) {
        cout << "Test Case 32: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 32: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test33() {
    vector<string> profit = {"0999", "9099", "9909", "9990"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 9.0;
    if(result == expected) {
        cout << "Test Case 33: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 33: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test34() {
    vector<string> profit = {"06390061", "60960062", "39090270", "96900262", "00000212", "00222026", "66761201", "12022610"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 3.2142857142857144;
    if(result == expected) {
        cout << "Test Case 34: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 34: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test35() {
    vector<string> profit = {"010", "101", "010"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 0.6666666666666666;
    if(result == expected) {
        cout << "Test Case 35: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 35: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test36() {
    vector<string> profit = {"05", "50"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 5.0;
    if(result == expected) {
        cout << "Test Case 36: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 36: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test37() {
    vector<string> profit = {"0999999999999999", "9099999999999999", "9909999999999999", "9990999999999999", "9999099999999999", "9999909999999999", "9999990999999999", "9999999099999999", "9999999909999999", "9999999990999999", "9999999999099999", "9999999999909999", "9999999999990999", "9999999999999099", "9999999999999909", "9999999999999990"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 9.0;
    if(result == expected) {
        cout << "Test Case 37: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 37: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test38() {
    vector<string> profit = {"071", "702", "120"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 3.3333333333333335;
    if(result == expected) {
        cout << "Test Case 38: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 38: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test39() {
    vector<string> profit = {"01", "10"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 1.0;
    if(result == expected) {
        cout << "Test Case 39: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 39: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}

int test40() {
    vector<string> profit = {"063900611111111", "609600621111111", "390902701111111", "969002621111111", "000002121111111", "002220261111111", "667612011111111", "120226101111111", "111111110111111", "111111111011111", "111111111101111", "111111111110111", "111111111111011", "111111111111101", "111111111111110"};
    WorkingRabbits* pObj = new WorkingRabbits();
    clock_t start = clock();
    double result = pObj->getEfficiency(profit);
    clock_t end = clock();
    delete pObj;
    double expected = 1.5904761904761904;
    if(result == expected) {
        cout << "Test Case 40: Passed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 0;
    } else {
        cout << "Test Case 40: Failed! Time: " << static_cast<double>(end-start)/CLOCKS_PER_SEC << " seconds" << endl;
        return 1;
    }
}



int main(int argc, char* argv[]) {
    int passed = 0;
    int failed = 0;
    test0() == 0 ? ++passed : ++failed;
    test1() == 0 ? ++passed : ++failed;
    test2() == 0 ? ++passed : ++failed;
    test3() == 0 ? ++passed : ++failed;
    test4() == 0 ? ++passed : ++failed;
    test5() == 0 ? ++passed : ++failed;
    test6() == 0 ? ++passed : ++failed;
    test7() == 0 ? ++passed : ++failed;
    test8() == 0 ? ++passed : ++failed;
    test9() == 0 ? ++passed : ++failed;
    test10() == 0 ? ++passed : ++failed;
    test11() == 0 ? ++passed : ++failed;
    test12() == 0 ? ++passed : ++failed;
    test13() == 0 ? ++passed : ++failed;
    test14() == 0 ? ++passed : ++failed;
    test15() == 0 ? ++passed : ++failed;
    test16() == 0 ? ++passed : ++failed;
    test17() == 0 ? ++passed : ++failed;
    test18() == 0 ? ++passed : ++failed;
    test19() == 0 ? ++passed : ++failed;
    test20() == 0 ? ++passed : ++failed;
    test21() == 0 ? ++passed : ++failed;
    test22() == 0 ? ++passed : ++failed;
    test23() == 0 ? ++passed : ++failed;
    test24() == 0 ? ++passed : ++failed;
    test25() == 0 ? ++passed : ++failed;
    test26() == 0 ? ++passed : ++failed;
    test27() == 0 ? ++passed : ++failed;
    test28() == 0 ? ++passed : ++failed;
    test29() == 0 ? ++passed : ++failed;
    test30() == 0 ? ++passed : ++failed;
    test31() == 0 ? ++passed : ++failed;
    test32() == 0 ? ++passed : ++failed;
    test33() == 0 ? ++passed : ++failed;
    test34() == 0 ? ++passed : ++failed;
    test35() == 0 ? ++passed : ++failed;
    test36() == 0 ? ++passed : ++failed;
    test37() == 0 ? ++passed : ++failed;
    test38() == 0 ? ++passed : ++failed;
    test39() == 0 ? ++passed : ++failed;
    test40() == 0 ? ++passed : ++failed;
    cout << "Total Test Case: " << passed + failed << "; Passed: " << passed << "; Failed: " << failed << endl;
    return failed == 0 ? 0 : 1;
}

/*******************************************************************************
*    Top Submission URL: 
*    http://community.topcoder.com/stat?c=problem_solution&cr=22872814&rd=14734&pm=11936
********************************************************************************
#line 5 "WorkingRabbits.cpp" 
#include <cstdlib> 
#include <cctype> 
#include <cstring> 
#include <cstdio> 
#include <cmath> 
#include <algorithm> 
#include <vector> 
#include <string> 
#include <iostream> 
#include <sstream> 
#include <map> 
#include <set> 
#include <queue> 
#include <stack> 
#include <fstream> 
#include <numeric> 
#include <iomanip> 
#include <bitset> 
#include <list> 
#include <stdexcept> 
#include <functional> 
#include <utility> 
#include <ctime> 
using namespace std; 
 
#define PB push_back 
#define MP make_pair 
 
#define REP(i,n) for(i=0;i<(n);++i) 
#define FOR(i,l,h) for(i=(l);i<=(h);++i) 
#define FORD(i,h,l) for(i=(h);i>=(l);--i) 
 
typedef vector<int> VI; 
typedef vector<string> VS; 
typedef vector<double> VD; 
typedef long long LL; 
typedef pair<int,int> PII; 
 
 
class WorkingRabbits 
{ 
        public: 
        double getEfficiency(vector <string> pr) 
        { 
            int tmp=0,t=0; 
            for(int i = 0; i < pr.size(); i++){ 
                for(int j = i+1; j < pr[0].size(); j++){ 
                    t++; 
                    tmp+=pr[i][j]-'0'; 
                } 
            } 
            return double(tmp)/double(t); 
        } 
 
 
}; 
 
 
 
// Powered by FileEdit

********************************************************************************
*******************************************************************************/